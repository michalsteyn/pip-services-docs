<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Auth</title>
    <link>/dart/rpc/auth/</link>
    <description>Recent content in Auth on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/dart/rpc/auth/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Dart: BasicAuthorizer</title>
      <link>/dart/rpc/auth/basic_authorizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/dart/rpc/auth/basic_authorizer/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The BasicAuthorizer provides two methods: one to grant access to everyone and another to grant access to authorized users.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;anybody&#34;&gt;anybody&lt;/h4&gt;
&lt;p&gt;Allows everyone access, even unauthorized users.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Future&amp;lt;shelf.Response?&amp;gt; anybody(shelf.Request req)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;req&lt;/strong&gt;: shelf.Request - request context&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Future&amp;lt;shelf.Response?&amp;gt; - returns anybody handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;signed&#34;&gt;signed&lt;/h4&gt;
&lt;p&gt;Access is granted only to authorized users.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Future&amp;lt;shelf.Response?&amp;gt; signed(shelf.Request req, user)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;req&lt;/strong&gt;: shelf.Request - request context&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt;: dynamic - authorized users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Future&amp;lt;shelf.Response?&amp;gt; - returns sign handler.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Dart: OwnerAuthorizer</title>
      <link>/dart/rpc/auth/owner_authorizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/dart/rpc/auth/owner_authorizer/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The OwnerAuthorizer class provides access granting methods for owners and administrators.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;owner&#34;&gt;owner&lt;/h4&gt;
&lt;p&gt;Access is granted only for the session owner.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Future&amp;lt;shelf.Response?&amp;gt; owner(shelf.Request req, user, {String idParam = &amp;lsquo;user_id&amp;rsquo;})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;req&lt;/strong&gt;: shelf.Request - request context&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt;: dynamic - authorized users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;idParam&lt;/strong&gt;: String - id of the current owner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Future&amp;lt;shelf.Response?&amp;gt; - returns owner handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;owneroradmin&#34;&gt;ownerOrAdmin&lt;/h4&gt;
&lt;p&gt;Access is granted only to authorized users.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Future&amp;lt;shelf.Response?&amp;gt; ownerOrAdmin(shelf.Request, user, {String idParam = &amp;lsquo;user_id&amp;rsquo;})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;req&lt;/strong&gt;: shelf.Request - request context&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt;: dynamic - authorized users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;idParam&lt;/strong&gt;: string - id of the current owner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Future&amp;lt;shelf.Response?&amp;gt; - returns owner or admin handler.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Dart: RoleAuthorizer</title>
      <link>/dart/rpc/auth/role_authorizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/dart/rpc/auth/role_authorizer/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RoleAuthorizer class provides methods to check on a user&amp;rsquo;s roles.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;userinroles&#34;&gt;userInRoles&lt;/h4&gt;
&lt;p&gt;Checks on the roles a user has been assigned.
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Future&amp;lt;shelf.Response?&amp;gt; userInRoles(shelf.Request req, user, List&amp;lt;String&amp;gt; roles)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;req&lt;/strong&gt;: shelf.Request - request context&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt;: dynamic - authorized users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;roles&lt;/strong&gt;: List&amp;lt;String&amp;gt; - roles list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Future&amp;lt;shelf.Response?&amp;gt; - returns roles handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;userinrole&#34;&gt;userInRole&lt;/h4&gt;
&lt;p&gt;Check if the role is assigned to the user.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Future&amp;lt;shelf.Response?&amp;gt; userInRole(shelf.Request req, user, String role)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;req&lt;/strong&gt;: shelf.Request - request context&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt;: dynamic - authorized users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;role&lt;/strong&gt;: String - user&amp;rsquo;s role.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Future&amp;lt;shelf.Response?&amp;gt; - returns role handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;admin&#34;&gt;admin&lt;/h4&gt;
&lt;p&gt;Check if the user has admin role.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Future&amp;lt;shelf.Response?&amp;gt; admin(shelf.Request req, user)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;req&lt;/strong&gt;: shelf.Request - request context&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt;: dynamic - authorized users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Future&amp;lt;shelf.Response?&amp;gt; - returns admin handler.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
