<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ IO</title>
    <link>/dart/expressions/io/</link>
    <description>Recent content in IO on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/dart/expressions/io/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Dart: IScanner</title>
      <link>/dart/expressions/io/iscanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/dart/expressions/io/iscanner/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IScanner interface defines a scanner that can read and unread characters and count lines.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;column&lt;/h4&gt;
&lt;p&gt;Gets the column in the current line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int column()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - column in the current line in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;line&lt;/h4&gt;
&lt;p&gt;Gets the current line number&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int line()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - current line number in the stream&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int peek()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - character from the top of the stream or &lt;em&gt;-1&lt;/em&gt; if the stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekcolumn&#34;&gt;peekColumn&lt;/h4&gt;
&lt;p&gt;Gets the next character column number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int peekColumn()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character column number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekline&#34;&gt;peekLine&lt;/h4&gt;
&lt;p&gt;Gets the next character line number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int peekLine()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int read()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - read character or &lt;em&gt;-1&lt;/em&gt; if the stream is processed to the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reset&#34;&gt;reset&lt;/h4&gt;
&lt;p&gt;Resets a scanner to the initial position.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void reset()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unread&#34;&gt;unread&lt;/h4&gt;
&lt;p&gt;Puts a character back into the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void unread()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unreadmany&#34;&gt;unreadMany&lt;/h4&gt;
&lt;p&gt;Pushes the specified number of characters to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void unreadMany(int count)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: int - number of characcted to be pushed back.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Dart: StringScanner</title>
      <link>/dart/expressions/io/string_scanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/dart/expressions/io/string_scanner/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../iscanner&#34;&gt;IScanner&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The StringScanner class is used to scan characters in a string that allows tokenizers to look ahead through a stream to perform lexical analysis.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates an instance of this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;StringScanner(String content)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;: String - text content to be read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;eof&#34;&gt;Eof&lt;/h4&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; const int Eof = -1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;column&lt;/h4&gt;
&lt;p&gt;Gets the column in the current line.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int column()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - column in the current line in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;line&lt;/h4&gt;
&lt;p&gt;Gets the current line number.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int line()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - current line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.
&lt;code&gt;@override&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int peek()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - character from the top of the stream or &lt;em&gt;-1&lt;/em&gt; if the stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekcolumn&#34;&gt;peekColumn&lt;/h4&gt;
&lt;p&gt;Gets the next character column number.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int peekColumn()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character column number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekline&#34;&gt;peekLine&lt;/h4&gt;
&lt;p&gt;Gets the next character line number.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int peekLine()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int read()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - read character or &lt;em&gt;-1&lt;/em&gt; if the stream is processed to the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reset&#34;&gt;reset&lt;/h4&gt;
&lt;p&gt;Resets the scanner to the initial position.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void reset()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unread&#34;&gt;unread&lt;/h4&gt;
&lt;p&gt;Puts one character back into the stream.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void unread()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unreadmany&#34;&gt;unreadMany&lt;/h4&gt;
&lt;p&gt;Pushes the specified number of characters to the top of the stream.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void unreadMany(int count)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: int - number of characcted to be pushed back.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
