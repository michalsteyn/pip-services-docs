[{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"extras/benchmarks/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"section","lang":"en","lastmod":1622566992,"lvl0":"Benchmarking Framework","lvl1":"","lvl2":"extras","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a7b752542558e356eb54ee49a7cc8d7c","permalink":"/extras/benchmarks/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/extras/benchmarks/","section":"extras","summary":"Performance, resilience and data integrity are a priority in microservice development. To make your life easier, we implemented a benchmarking framework to keep critical non-functional characteristics under constant control. In a similar vein with Pip.Service Toolkit, the framework has symmetrical implementations to make it easier to switch between programming languages.\n What benchmarking framework does: Sets up environment before the test and tears it down after the test Executes test transactions Measures performance in transactions per second or TPS Supports active (by calling Execute method) or passive (by reporting via Context) measurement methods Supports configuration parameters to set connection strings or other settings for benchmarks Runs benchmarks sequential or in proportional by allocating % of calls to each benchmark Measures peak or nominal measurement at specified transaction rate Measures system utilization (RAM and CPU) during benchmarking process Measures overall environment performance (CPU, Video, Disk) for objective interpretation of results Capture and errors or validation results Console and GUI runners to execute benchmarks  Node .","tags":null,"title":"Benchmarking Framework","type":"docs","url":"/hugo-docs/extras/benchmarks/","weight":1,"wordcount":742},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/getting_started/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Getting Started","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0cf0d638ea0e78bf4ca4f2a2b0894326","permalink":"/dart/getting_started/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/dart/getting_started/","section":"dart","summary":"Toolkit Architecture The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nMicroservice Structure In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols.","tags":null,"title":"Getting Started","type":"docs","url":"/hugo-docs/dart/getting_started/","weight":1,"wordcount":164},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/getting_started/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Getting Started","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7547dd097e702c8e85820a626e2c7180","permalink":"/golang/getting_started/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/getting_started/","section":"golang","summary":"Toolkit Architecture The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nMicroservice Structure In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols.","tags":null,"title":"Getting Started","type":"docs","url":"/hugo-docs/golang/getting_started/","weight":1,"wordcount":164},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"java/getting_started/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Getting Started","lvl1":"","lvl2":"java","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d5ea590d1eb9455ec1bada8b7d02cd5c","permalink":"/java/getting_started/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/java/getting_started/","section":"java","summary":"Toolkit Architecture The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nMicroservice Structure In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols.","tags":null,"title":"Getting Started","type":"docs","url":"/hugo-docs/java/getting_started/","weight":1,"wordcount":164},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/getting_started/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Getting Started","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f7fb9013bb754c9909f3b40de2d2ccc8","permalink":"/net/getting_started/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/getting_started/","section":"net","summary":"Toolkit Architecture The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nMicroservice Structure In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols.","tags":null,"title":"Getting Started","type":"docs","url":"/hugo-docs/net/getting_started/","weight":1,"wordcount":164},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/getting_started/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Getting Started","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"65d9557bd131066fad1bf4a8ead9c78d","permalink":"/node/getting_started/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/getting_started/","section":"node","summary":"Toolkit Architecture The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nMicroservice Structure In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols.","tags":null,"title":"Getting Started","type":"docs","url":"/hugo-docs/node/getting_started/","weight":1,"wordcount":164},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"home","lang":"en","lastmod":1624058305,"lvl0":"Pip.Services Docs","lvl1":"","lvl2":"","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3976528693a0108357f4928017600865","permalink":"/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/","section":"","summary":"// redirect to current language main page try{ let currentLangugeUri = localStorage['currentMenuActiveItem'].toLowerCase().replace('.', '/').split('/'); currentLangugeUri = currentLangugeUri.filter(word = word.length  2)[0] window.location.href += currentLangugeUri; } catch { window.location.href += 'node'; }  -- Welcome to the Pip.Services documentation site! Pip.Services Toolkit is a collection of patterns and components to simplify the development of microservice systems using multiple programming languages, and enabling deployment onto various on-premises and cloud platforms. With these patterns you can create highly customizable microservices composed of loosely coupled components that process information, persist data in relational and NoSQL databases, communicate through synchronous and asynchronous protocols, monitor performance, process errors, and much more.","tags":null,"title":"Pip.Services Docs","type":"docs","url":"/hugo-docs/","weight":1,"wordcount":219},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622485860,"lvl0":"Infrastructure Management","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"557cf5f5c8b4464bde65c3e849299efd","permalink":"/microservices/infrastructure/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/microservices/infrastructure/","section":"microservices","summary":"Microservices Set of tools for managing infrastructure. Includes tools for collecting logs, metrics, events, statistics, and so on.\nBlobs Microservice Stores large binary blobs, manages references to them from other entities and serves stored content to users. Most often binary blobs are used to store images and document attachments.\n   Change Scopes Microservice Detects changes made in a particular scope or element of a scope.     Clusters Microservice Keeps list of working clusters.","tags":null,"title":"Infrastructure Management","type":"docs","url":"/hugo-docs/microservices/infrastructure/","weight":1,"wordcount":256},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/installation/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1623545308,"lvl0":"Installation","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f9764d23613d3f836a5751b50e5030af","permalink":"/python/installation/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/installation/","section":"python","summary":"Intallation procedure PIP.Services needs to be installed per module. The general form is:\npip install module-name Alternatively you can install each module manually by following these steps:\n Download the code from its respective GitHub repo. Place the files in the correct folder and run the following command:  python setup.py install Module information: Commons module pip install pip-services3-commons GitHub repo\nComponents module pip install pip-services3-components GitHub repo\nContainer module pip install pip-services3-container GitHub repo","tags":null,"title":"Installation","type":"docs","url":"/hugo-docs/python/installation/","weight":1,"wordcount":144},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/recipes/logging/","expirydate":-62135596800,"fuzzywordcount":1000,"keywords":null,"kind":"section","lang":"en","lastmod":1623531820,"lvl0":"Logging","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7387fe097faed60c0cc055d6badc7772","permalink":"/python/recipes/logging/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/python/recipes/logging/","section":"python","summary":"by Dmitry Levichev  Introduction Any and all nontrivial systems need logging, and microservices are no exception. Messages in logs help us track running transactions and sort out any problems that may occur. The quality of the information that is stored in logs largely defines how simple or difficult it is to support a system. The Pip.Services Toolkit contains logging components that can either output messages to the console, or hand them over to specialized services, such as ElasticSearch, AppInsights or CloudWatch.","tags":null,"title":"Logging","type":"docs","url":"/hugo-docs/python/recipes/logging/","weight":1,"wordcount":948},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1623084212,"lvl0":"Pip.Services Docs for Node.js toolkit","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2b62044fc16bda9f99b26a1c782d40a0","permalink":"/node/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/","section":"node","summary":"Welcome to the Pip.Services documentation site! Pip.Services Toolkit is a collection of patterns and components to simplify the development of microservice systems using multiple programming languages, and enabling deployment onto various on-premises and cloud platforms. With these patterns you can create highly customizable microservices composed of loosely coupled components that process information, persist data in relational and NoSQL databases, communicate through synchronous and asynchronous protocols, monitor performance, process errors, and much more.","tags":null,"title":"Pip.Services Docs for Node.js toolkit","type":"docs","url":"/hugo-docs/node/","weight":1,"wordcount":228},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/getting_started/toolkit_architecture/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1622944774,"lvl0":"Architecture of the Pip.Services toolkit","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5ede0060dfa936e795e31842efea7b19","permalink":"/dart/getting_started/toolkit_architecture/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/getting_started/toolkit_architecture/","section":"dart","summary":"The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nThe general structure of the Pip.Services toolkit is shown on the following diagram:\nThe foundation of the toolkit is shown in grey. It is made up of the stacks for the 6 supported programming languages: Java, Node.","tags":null,"title":"Architecture of the Pip.Services toolkit","type":"docs","url":"/hugo-docs/dart/getting_started/toolkit_architecture/","weight":1,"wordcount":391},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/getting_started/toolkit_architecture/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1622944774,"lvl0":"Architecture of the Pip.Services toolkit","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"91088f2e00caff57023ddc2f1994df61","permalink":"/golang/getting_started/toolkit_architecture/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/getting_started/toolkit_architecture/","section":"golang","summary":"The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nThe general structure of the Pip.Services toolkit is shown on the following diagram:\nThe foundation of the toolkit is shown in grey. It is made up of the stacks for the 6 supported programming languages: Java, Node.","tags":null,"title":"Architecture of the Pip.Services toolkit","type":"docs","url":"/hugo-docs/golang/getting_started/toolkit_architecture/","weight":1,"wordcount":391},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"java/getting_started/toolkit_architecture/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1622944774,"lvl0":"Architecture of the Pip.Services toolkit","lvl1":"","lvl2":"java","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b479572b4969144c641288f52230e863","permalink":"/java/getting_started/toolkit_architecture/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/java/getting_started/toolkit_architecture/","section":"java","summary":"The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nThe general structure of the Pip.Services toolkit is shown on the following diagram:\nThe foundation of the toolkit is shown in grey. It is made up of the stacks for the 6 supported programming languages: Java, Node.","tags":null,"title":"Architecture of the Pip.Services toolkit","type":"docs","url":"/hugo-docs/java/getting_started/toolkit_architecture/","weight":1,"wordcount":391},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/getting_started/toolkit_architecture/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1622944774,"lvl0":"Architecture of the Pip.Services toolkit","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cca3cfad6ca1a3e9863c02c075b9bd70","permalink":"/net/getting_started/toolkit_architecture/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/getting_started/toolkit_architecture/","section":"net","summary":"The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nThe general structure of the Pip.Services toolkit is shown on the following diagram:\nThe foundation of the toolkit is shown in grey. It is made up of the stacks for the 6 supported programming languages: Java, Node.","tags":null,"title":"Architecture of the Pip.Services toolkit","type":"docs","url":"/hugo-docs/net/getting_started/toolkit_architecture/","weight":1,"wordcount":391},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/getting_started/toolkit_architecture/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1622944774,"lvl0":"Architecture of the Pip.Services toolkit","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7fd29b7f8240431a7dffeb463bcc05bd","permalink":"/node/getting_started/toolkit_architecture/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/getting_started/toolkit_architecture/","section":"node","summary":"The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nThe general structure of the Pip.Services toolkit is shown on the following diagram:\nThe foundation of the toolkit is shown in grey. It is made up of the stacks for the 6 supported programming languages: Java, Node.","tags":null,"title":"Architecture of the Pip.Services toolkit","type":"docs","url":"/hugo-docs/node/getting_started/toolkit_architecture/","weight":1,"wordcount":391},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/getting_started/toolkit_architecture/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1622944774,"lvl0":"Architecture of the Pip.Services toolkit","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"af7f79d136f227c3beee209c63b0e879","permalink":"/python/getting_started/toolkit_architecture/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/getting_started/toolkit_architecture/","section":"python","summary":"The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nThe general structure of the Pip.Services toolkit is shown on the following diagram:\nThe foundation of the toolkit is shown in grey. It is made up of the stacks for the 6 supported programming languages: Java, Node.","tags":null,"title":"Architecture of the Pip.Services toolkit","type":"docs","url":"/hugo-docs/python/getting_started/toolkit_architecture/","weight":1,"wordcount":393},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/getting_started/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1623457860,"lvl0":"Getting Started","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"809e2c97bf0273c33390682c2749763f","permalink":"/python/getting_started/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/getting_started/","section":"python","summary":"Toolkit Architecture The Pip.Services toolkit is divided into a few dozen modules. A small part of these modules make up the core itself, while the rest are optional add ons. This approach simplifies adding new functionality and minimizes dependencies on 3rd party libraries.\nMicroservice Structure In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols.","tags":null,"title":"Getting Started","type":"docs","url":"/hugo-docs/python/getting_started/","weight":2,"wordcount":229},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/recipes/configuration/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"section","lang":"en","lastmod":1623531781,"lvl0":"Configuration","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b2ce80c1ebbb5adcc5406b885f5ddeab","permalink":"/python/recipes/configuration/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/recipes/configuration/","section":"python","summary":"by Aleksey Dvoykin  Introduction The Pip.Services Toolkit offers a simple but very flexible mechanism for component configuration. Configurations can be loaded from various sources - configuration files, command line parameters, environment variables, configuration services, etc. Once loaded, they are passed to the specific component, which configures itself accordingly. In this recipe, we\u0026quot;ll be taking a look at this mechanism\u0026quot;s capabilities and how it can be utilized.\nConfiguration The configurable interface A component can be made configurable by adding the IConfigurable interface and implementing its configure method.","tags":null,"title":"Configuration","type":"docs","url":"/hugo-docs/python/recipes/configuration/","weight":10,"wordcount":715},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/getting_started/microservice_structure/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"The Structure of a Microservice","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7d4956b9bc6f58fab92174cae7d3f990","permalink":"/dart/getting_started/microservice_structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/dart/getting_started/microservice_structure/","section":"dart","summary":"In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols. However, there don’t exist any standards regarding the structure of the microservices themselves. Each company, team, and/or developer is free to choose a design that fits their own unique requirements.\nAlthough there is a large variety of design possibilities, practice shows that building microservices out of loosely-coupled components is the preferred way of getting things done.","tags":null,"title":"The Structure of a Microservice","type":"docs","url":"/hugo-docs/dart/getting_started/microservice_structure/","weight":10,"wordcount":607},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/getting_started/microservice_structure/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"The Structure of a Microservice","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d42305f95beb2f7afdbd0ec414252cec","permalink":"/golang/getting_started/microservice_structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/getting_started/microservice_structure/","section":"golang","summary":"In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols. However, there don’t exist any standards regarding the structure of the microservices themselves. Each company, team, and/or developer is free to choose a design that fits their own unique requirements.\nAlthough there is a large variety of design possibilities, practice shows that building microservices out of loosely-coupled components is the preferred way of getting things done.","tags":null,"title":"The Structure of a Microservice","type":"docs","url":"/hugo-docs/golang/getting_started/microservice_structure/","weight":10,"wordcount":607},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"java/getting_started/microservice_structure/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"The Structure of a Microservice","lvl1":"","lvl2":"java","lvl3":null,"lvl4":null,"lvl5":"","objectID":"33d018a032bc83b236749d2c99ad50bf","permalink":"/java/getting_started/microservice_structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/java/getting_started/microservice_structure/","section":"java","summary":"In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols. However, there don’t exist any standards regarding the structure of the microservices themselves. Each company, team, and/or developer is free to choose a design that fits their own unique requirements.\nAlthough there is a large variety of design possibilities, practice shows that building microservices out of loosely-coupled components is the preferred way of getting things done.","tags":null,"title":"The Structure of a Microservice","type":"docs","url":"/hugo-docs/java/getting_started/microservice_structure/","weight":10,"wordcount":607},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/getting_started/microservice_structure/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"The Structure of a Microservice","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5594218cbb64836fbf91168e74361d13","permalink":"/net/getting_started/microservice_structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/getting_started/microservice_structure/","section":"net","summary":"In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols. However, there don’t exist any standards regarding the structure of the microservices themselves. Each company, team, and/or developer is free to choose a design that fits their own unique requirements.\nAlthough there is a large variety of design possibilities, practice shows that building microservices out of loosely-coupled components is the preferred way of getting things done.","tags":null,"title":"The Structure of a Microservice","type":"docs","url":"/hugo-docs/net/getting_started/microservice_structure/","weight":10,"wordcount":607},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/getting_started/microservice_structure/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"The Structure of a Microservice","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f86db706d1262944142c1c56e0000751","permalink":"/node/getting_started/microservice_structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/getting_started/microservice_structure/","section":"node","summary":"In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols. However, there don’t exist any standards regarding the structure of the microservices themselves. Each company, team, and/or developer is free to choose a design that fits their own unique requirements.\nAlthough there is a large variety of design possibilities, practice shows that building microservices out of loosely-coupled components is the preferred way of getting things done.","tags":null,"title":"The Structure of a Microservice","type":"docs","url":"/hugo-docs/node/getting_started/microservice_structure/","weight":10,"wordcount":607},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/getting_started/microservice_structure/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1623439327,"lvl0":"The Structure of a Microservice","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6d2e3de6f242039188846d72bd7b76e0","permalink":"/python/getting_started/microservice_structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/getting_started/microservice_structure/","section":"python","summary":"In essence, microservices are an architectural style that structures a system as a set of relatively small services. Each of these services has its own independent life cycle, and communication between them is usually built upon light-weight communication protocols. However, there don’t exist any standards regarding the structure of the microservices themselves. Each company, team, and/or developer is free to choose a design that fits their own unique requirements.\nAlthough there is a large variety of design possibilities, practice shows that building microservices out of loosely-coupled components is the preferred way of getting things done.","tags":null,"title":"The Structure of a Microservice","type":"docs","url":"/hugo-docs/python/getting_started/microservice_structure/","weight":10,"wordcount":608},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/recipes/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Recipes","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6556f19dc4fbba478f1c470e739d0832","permalink":"/dart/recipes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/recipes/","section":"dart","summary":" ","tags":null,"title":"Recipes","type":"docs","url":"/hugo-docs/dart/recipes/","weight":10,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/recipes/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Recipes","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"47fb4e5c6c023c65abacc9d04c2e4b4d","permalink":"/golang/recipes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/recipes/","section":"golang","summary":" ","tags":null,"title":"Recipes","type":"docs","url":"/hugo-docs/golang/recipes/","weight":10,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/recipes/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Recipes","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aeb169c60499f4a05a6ba889dc819a3f","permalink":"/net/recipes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/net/recipes/","section":"net","summary":" ","tags":null,"title":"Recipes","type":"docs","url":"/hugo-docs/net/recipes/","weight":10,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/recipes/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Recipes","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"866473a8743f03515fa0fa30b6720811","permalink":"/node/recipes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/node/recipes/","section":"node","summary":" ","tags":null,"title":"Recipes","type":"docs","url":"/hugo-docs/node/recipes/","weight":10,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/recipes/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1623169618,"lvl0":"Recipes","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9a56d7d7f5e5946467bbff1633b6af6c","permalink":"/python/recipes/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/recipes/","section":"python","summary":"Logging Any and all nontrivial systems need logging, and microservices are no exception. Messages in logs help us track running transactions and sort out any problems that may occur. The quality of the information that is stored in logs largely defines how simple or difficult it is to support a system. The Pip.Services Toolkit contains logging components that can either output messages to the console, or hand them over to specialized services, such as ElasticSearch, AppInsights or CloudWatch.","tags":null,"title":"Recipes","type":"docs","url":"/hugo-docs/python/recipes/","weight":10,"wordcount":471},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"extras/templates/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1623084212,"lvl0":"Templates","lvl1":"","lvl2":"extras","lvl3":null,"lvl4":null,"lvl5":"","objectID":"db42963e28fbfdceb5af372c723fbaad","permalink":"/extras/templates/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/extras/templates/","section":"extras","summary":"To get you started faster, we developed a number of microservice templates in all of the supported languages. They include every essential component, support versioning, and instrumentation. Additionally, you can find templates to script development and production environments and automate microservice CI/CD pipelines. These templates are a great starting point to create your own templates to achieve consistency and spread the best practices across your entire organization.\nData Microservice Templates Data microservice in Node.","tags":null,"title":"Templates","type":"docs","url":"/hugo-docs/extras/templates/","weight":10,"wordcount":490},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1623717671,"lvl0":"User Management Microservices","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ee0e50bd6a66499fd8b2ac9aa7850dac","permalink":"/microservices/users/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/","section":"microservices","summary":"Full array of instruments for user registration, access control, watching over users’ actions, setting up communication channels, and broadcasting messages.\nEmail Settings Microservice Keeps settings of email recipients.\n   Message Distribution Microservice Distributes messages to one or many recipients using their configured delivery methods: email or sms.     Organizations microservice Keeps list of working organizations.\n   Party Activities Microservice Logs important party activities like signups, signins, creation, changes or deletion of data items and so on.","tags":null,"title":"User Management Microservices","type":"docs","url":"/hugo-docs/microservices/users/","weight":10,"wordcount":129},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1623084212,"lvl0":"Pip.Services Docs for .NET toolkit","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7509050a6efa431f70effd017230397a","permalink":"/net/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/","section":"net","summary":"Welcome to the Pip.Services documentation site! Pip.Services Toolkit is a collection of patterns and components to simplify the development of microservice systems using multiple programming languages, and enabling deployment onto various on-premises and cloud platforms. With these patterns you can create highly customizable microservices composed of loosely coupled components that process information, persist data in relational and NoSQL databases, communicate through synchronous and asynchronous protocols, monitor performance, process errors, and much more.","tags":null,"title":"Pip.Services Docs for .NET toolkit","type":"docs","url":"/hugo-docs/net/","weight":20,"wordcount":228},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/recipes/component_references/","expirydate":-62135596800,"fuzzywordcount":1700,"keywords":null,"kind":"section","lang":"en","lastmod":1622049156,"lvl0":"Component References","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ad1999a4b029f9424b07073e19fb48e4","permalink":"/python/recipes/component_references/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/python/recipes/component_references/","section":"python","summary":"by Anastas Fonotov  Introduction Developing systems out of loosely-coupled components significantly reduces complexity, improves testing, and increases developer productivity. The Pip.Services Toolkit offers a flexible and simple set of primitives for referencing components that is symmetrically implemented in all of the supported programming languages.\nThe Locator Pattern Developing loosely-coupled components has recently become very popular. There exist great implementations of the Inversion of Control pattern, which allows components to be linked to one another.","tags":null,"title":"Component References","type":"docs","url":"/hugo-docs/python/recipes/component_references/","weight":20,"wordcount":1663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"extras/ps_selenium/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622559267,"lvl0":"Selenium WebDriver module for PowerShell","lvl1":"","lvl2":"extras","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b2e8775dba0901a7ba2ff37b57d8d89f","permalink":"/extras/ps_selenium/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/extras/ps_selenium/","section":"extras","summary":"Our team uses Powershell for system testing and automation. Selenium is a popular testing framework for web applications. It supports many programming languages, except for Powershell. So, we decided to implement our own PowerShell driver for Selenium and share it with you.\nPowerShell module provides interface for Selenium WebDriver. It can be used for testing web pages or automation of legacy web applications.\nThe module allows to perform most operations supported by .","tags":null,"title":"Selenium WebDriver module for PowerShell","type":"docs","url":"/hugo-docs/extras/ps_selenium/","weight":20,"wordcount":236},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/support/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622485860,"lvl0":"Product Support Microservices","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3fe98f6ccd715fcf0ba204e459b53fbc","permalink":"/microservices/support/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/support/","section":"microservices","summary":"Provides two-way communication with users, processes user requests.\nAnnouncements Microservice Allows system administrators and product owners to communicate to users key system events and product updates.\n   Feedbacks Microservice Allows users to communicate to application support, request help, share ideas or raise copyright issues. When feedbacks are processed by support personnel, user receives a feedback via provided email.     ","tags":null,"title":"Product Support Microservices","type":"docs","url":"/hugo-docs/microservices/support/","weight":20,"wordcount":57},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/getting_started/setup_environment/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Setup environment","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7b2ae18f24c12753cb324698499fd882","permalink":"/dart/getting_started/setup_environment/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/getting_started/setup_environment/","section":"dart","summary":"Before we can start writing-up some microservices, we’ll need to install a few mandatory prerequisites.\n1. Compiler and IDE First and foremost - we’ll need a compiler for your programming language of choice, as well as some sort of code editor. In our examples, we usually use Visual Studio Code, but any fitting IDE will do.\nFor working with the Python programming language, you’ll need to perform its installation and setup the environment.","tags":null,"title":"Setup environment","type":"docs","url":"/hugo-docs/dart/getting_started/setup_environment/","weight":20,"wordcount":407},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/getting_started/setup_environment/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Setup environment","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"de34841d5f6459dd61f255a7ae3776aa","permalink":"/golang/getting_started/setup_environment/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/getting_started/setup_environment/","section":"golang","summary":"Before we can start writing-up some microservices, we’ll need to install a few mandatory prerequisites.\n1. Compiler and IDE First and foremost - we’ll need a compiler for your programming language of choice, as well as some sort of code editor. In our examples, we usually use Visual Studio Code, but any fitting IDE will do.\nFor working with the Python programming language, you’ll need to perform its installation and setup the environment.","tags":null,"title":"Setup environment","type":"docs","url":"/hugo-docs/golang/getting_started/setup_environment/","weight":20,"wordcount":407},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"java/getting_started/setup_environment/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Setup environment","lvl1":"","lvl2":"java","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ec8b32e334662f5e143e7a1eff6746ee","permalink":"/java/getting_started/setup_environment/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/java/getting_started/setup_environment/","section":"java","summary":"Before we can start writing-up some microservices, we’ll need to install a few mandatory prerequisites.\n1. Compiler and IDE First and foremost - we’ll need a compiler for your programming language of choice, as well as some sort of code editor. In our examples, we usually use Visual Studio Code, but any fitting IDE will do.\nFor working with the Python programming language, you’ll need to perform its installation and setup the environment.","tags":null,"title":"Setup environment","type":"docs","url":"/hugo-docs/java/getting_started/setup_environment/","weight":20,"wordcount":407},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/getting_started/setup_environment/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Setup environment","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ad1d353b83fd8f0a13b14e30b4e02d38","permalink":"/net/getting_started/setup_environment/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/getting_started/setup_environment/","section":"net","summary":"Before we can start writing-up some microservices, we’ll need to install a few mandatory prerequisites.\n1. Compiler and IDE First and foremost - we’ll need a compiler for your programming language of choice, as well as some sort of code editor. In our examples, we usually use Visual Studio Code, but any fitting IDE will do.\nFor working with the Python programming language, you’ll need to perform its installation and setup the environment.","tags":null,"title":"Setup environment","type":"docs","url":"/hugo-docs/net/getting_started/setup_environment/","weight":20,"wordcount":407},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/getting_started/setup_environment/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Setup environment","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f446398ce925644f1c042cc730910ee0","permalink":"/node/getting_started/setup_environment/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/getting_started/setup_environment/","section":"node","summary":"Before we can start writing-up some microservices, we’ll need to install a few mandatory prerequisites.\n1. Compiler and IDE First and foremost - we’ll need a compiler for your programming language of choice, as well as some sort of code editor. In our examples, we usually use Visual Studio Code, but any fitting IDE will do.\nFor working with the Python programming language, you’ll need to perform its installation and setup the environment.","tags":null,"title":"Setup environment","type":"docs","url":"/hugo-docs/node/getting_started/setup_environment/","weight":20,"wordcount":407},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/getting_started/setup_environment/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622922024,"lvl0":"Setup environment","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"14e6e78dab52da445eb05940f5e1789e","permalink":"/python/getting_started/setup_environment/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/getting_started/setup_environment/","section":"python","summary":"Before we can start writing-up some microservices, we’ll need to install a few mandatory prerequisites.\n1. Compiler and IDE First and foremost - we’ll need a compiler for your programming language of choice, as well as some sort of code editor. In our examples, we usually use Visual Studio Code, but any fitting IDE will do.\nFor working with the Python programming language, you’ll need to perform its installation and setup the environment.","tags":null,"title":"Setup environment","type":"docs","url":"/hugo-docs/python/getting_started/setup_environment/","weight":20,"wordcount":403},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/tutorials/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Tutorials","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"edbba811aa29ef93a9e85d778312e965","permalink":"/dart/tutorials/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/tutorials/","section":"dart","summary":" ","tags":null,"title":"Tutorials","type":"docs","url":"/hugo-docs/dart/tutorials/","weight":20,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/tutorials/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Tutorials","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"348d040d1df0dba4693628875afcf475","permalink":"/golang/tutorials/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/tutorials/","section":"golang","summary":" ","tags":null,"title":"Tutorials","type":"docs","url":"/hugo-docs/golang/tutorials/","weight":20,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/tutorials/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Tutorials","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3509786e4dea3579bbdb98a6f9839a00","permalink":"/net/tutorials/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/net/tutorials/","section":"net","summary":" ","tags":null,"title":"Tutorials","type":"docs","url":"/hugo-docs/net/tutorials/","weight":20,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Tutorials","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"25b6a2b385a856cc94d7ca7f83d25bb6","permalink":"/node/tutorials/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/tutorials/","section":"node","summary":"Data Microservice In this tutorial, we’ll be writing from scratch a fully-functional Data microservice, using the patterns and mechanisms available in the Pip.Services toolkit, as well as the programming language you have selected. The microservice that we are going to be using as an example in this tutorial is called The Beacons microservice, which is part of The IoT Microservices Collection.","tags":null,"title":"Tutorials","type":"docs","url":"/hugo-docs/node/tutorials/","weight":20,"wordcount":61},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1624057862,"lvl0":"Tutorials","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cd5d2d3a7962beb811bcb94c3d28dc28","permalink":"/python/tutorials/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/tutorials/","section":"python","summary":"Client Library This tutorial explains how to create a client library in five easy-to-follow steps. In addition, it explains why client libraries are important and provides some advice for the development of client libraries.\nData Microservice In this tutorial, we’ll be writing from scratch a fully-functional Data microservice, using the patterns and mechanisms available in the Pip.Services toolkit, as well as the programming language you have selected. The microservice that we are going to be using as an example in this tutorial is called The Beacons microservice, which is part of The IoT Microservices Collection.","tags":null,"title":"Tutorials","type":"docs","url":"/hugo-docs/python/tutorials/","weight":20,"wordcount":205},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"dart/commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Commons module","lvl1":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d26f8bfb0c4ae849782a2341180439f2","permalink":"/dart/commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/commons/","section":"dart","summary":"The module consists of the following packages:  Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"Commons module","type":"docs","url":"/hugo-docs/dart/commons/","weight":30,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of tools used in microservices or backend services. It is designed to facilitate symmetric implementation accross different programming languages.\n","dir":"golang/commons/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1623897848,"lvl0":"Commons module","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of tools used in microservices or backend services. It is designed to facilitate symmetric implementation accross different programming languages.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1169d9b2db506f37bd351e38c3f96ce4","permalink":"/golang/commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/","section":"golang","summary":"Packages The module contains the following packages:\n Commands - commands and events Config - component configuration Convert - portable value converters Data - data patterns Errors - application errors Random - random data generators Refer - component dependencies (Based on the inversion of control (IoC) pattern) Reflect - portable reflection utilities Run - component life-cycle management Validate - validation rules  Use Get the package from the Github repository:","tags":null,"title":"Commons module","type":"docs","url":"/hugo-docs/golang/commons/","weight":30,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of tools used in microservices or backend services. It is designed to facilitate symmetric implementation accross different programming languages.\n","dir":"net/commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Commons module","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of tools used in microservices or backend services. It is designed to facilitate symmetric implementation accross different programming languages.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a14b78fe567b3d38b4d8590a37b7fa41","permalink":"/net/commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/","section":"net","summary":"Packages The module contains the following packages:\n Commands - commands and events Config - component configuration Convert - portable value converters Data - data patterns Errors - application errors Random - random data generators Refer - component dependencies (Based on the inversion of control (IoC) pattern) Reflect - portable reflection utilities Run - component life-cycle management Validate - validation rules  Use Install the dotnet package as\ndotnet add package PipServices3.","tags":null,"title":"Commons module","type":"docs","url":"/hugo-docs/net/commons/","weight":30,"wordcount":280},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of tools used in microservices or backend services. It is designed to facilitate symmetric implementation accross different programming languages.\n","dir":"node/commons/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Commons module","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of tools used in microservices or backend services. It is designed to facilitate symmetric implementation accross different programming languages.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"50b683740f8a4740bb0dcc7cf94ea1db","permalink":"/node/commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/","section":"node","summary":"Packages The module contains the following packages:\n Commands - commands and events Config - component configuration Convert - portable value converters Data - data patterns Errors - application errors Random - random data generators Refer - component dependencies (Based on the inversion of control (IoC) pattern) Reflect - portable reflection utilities Run - component life-cycle management Validate - validation rules  Use Install the NPM package as\nnpm install pip-services3-commons-nodex --save Then you are ready to start using the Pip.","tags":null,"title":"Commons module","type":"docs","url":"/hugo-docs/node/commons/","weight":30,"wordcount":324},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of tools used in microservices or backend services. It is designed to facilitate symmetric implementation accross different programming languages.\n","dir":"python/commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Commons module","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of tools used in microservices or backend services. It is designed to facilitate symmetric implementation accross different programming languages.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a847257848ca5a6801be8abf58b2bc35","permalink":"/python/commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/","section":"python","summary":"Packages The module contains the following packages:\n Commands - commands and events Config - component configuration Convert - portable value converters Data - data patterns Errors - application errors Random - random data generators Refer - component dependencies (Based on the inversion of control (IoC) pattern) Reflect - portable reflection utilities Run - component life-cycle management Validate - validation rules  Use Install the Python package as\npip install pip-services3-commons Then you are ready to start using the Pip.","tags":null,"title":"Commons module","type":"docs","url":"/hugo-docs/python/commons/","weight":30,"wordcount":246},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/recipes/component_lifecycle/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":1623535612,"lvl0":"Component Lifecycle","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1cf2b776ffeeb9392911d5edba4ae787","permalink":"/python/recipes/component_lifecycle/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/recipes/component_lifecycle/","section":"python","summary":"by Alex Mazur  Component lifecycle A microservice is a set of loosely coupled components, each of which serves a specific purpose, such as logging events, reading records from a database, or connecting to a 3rd party service. One of the roles of the microservice’s container is to correctly initialize all internal components, each of which can have its own lifecycle. For example, loading its own configuration, running certain functional processes, and even waiting for results from other components.","tags":null,"title":"Component Lifecycle","type":"docs","url":"/hugo-docs/python/recipes/component_lifecycle/","weight":30,"wordcount":503},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"dart/components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Components module","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cf94e68fb0b5f87d782b934f07d0b1d0","permalink":"/dart/components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/dart/components/","section":"dart","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"Components module","type":"docs","url":"/hugo-docs/dart/components/","weight":30,"wordcount":582},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/components/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Components module","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5f6b084671a93118ac3eab449d556eb0","permalink":"/golang/components/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/components/","section":"golang","summary":"","tags":null,"title":"Components module","type":"docs","url":"/hugo-docs/golang/components/","weight":30,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains standard component definitions that can be used to build applications and services.\n","dir":"net/components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Components module","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains standard component definitions that can be used to build applications and services.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9ee201a76e583bde3d61c181b3114d6a","permalink":"/net/components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/components/","section":"net","summary":"Packages The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package  Use Install the dotnet package as","tags":null,"title":"Components module","type":"docs","url":"/hugo-docs/net/components/","weight":30,"wordcount":579},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains standard component definitions that can be used to build applications and services.\n","dir":"node/components/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Components module","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains standard component definitions that can be used to build applications and services.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fa0c5a40a09aa0c588aa32f96958cc38","permalink":"/node/components/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/components/","section":"node","summary":"Packages The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package  Use Install the NPM package as","tags":null,"title":"Components module","type":"docs","url":"/hugo-docs/node/components/","weight":30,"wordcount":714},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains standard component definitions that can be used to build applications and services.\n","dir":"python/components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Components module","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains standard component definitions that can be used to build applications and services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"427dc15ddacf50db1096dd0248b2ae55","permalink":"/python/components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/components/","section":"python","summary":"Packages The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package  Use Install the Python package as","tags":null,"title":"Components module","type":"docs","url":"/hugo-docs/python/components/","weight":30,"wordcount":527},{"authors":null,"categories":null,"date":-62135596800,"description":"IoC container for Golang\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides an inversion-of-control (IoC) container used to facilitate the development of services and applications composed of loosely coupled components.\n\nThe module containes a basic in-memory container that can be embedded inside a service or application, or can be run by itself. The second container type can run as a system level process and can be configured via command line arguments. Also, it can be used to create docker containers.\n\nThe containers can read configuration from JSON or YAML files, and use it as a recipe for instantiating and configuring components. Component factories are used to create components based on their locators (descriptor) defined in the container configuration. The factories shall be registered in containers or dynamically in the container configuration file.\n","dir":"golang/container/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624024339,"lvl0":"Container module","lvl1":"IoC container for Golang\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides an inversion-of-control (IoC) container used to facilitate the development of services and applications composed of loosely coupled components.\n\nThe module containes a basic in-memory container that can be embedded inside a service or application, or can be run by itself. The second container type can run as a system level process and can be configured via command line arguments. Also, it can be used to create docker containers.\n\nThe containers can read configuration from JSON or YAML files, and use it as a recipe for instantiating and configuring components. Component factories are used to create components based on their locators (descriptor) defined in the container configuration. The factories shall be registered in containers or dynamically in the container configuration file.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f37afc2a36db8dac54eb94c7e2715bbf","permalink":"/golang/container/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/","section":"golang","summary":"Packages The module contains the following packages:\n Containers - Basic in-memory and process containers Build - Default container factory Config - Container configuration components Refer - Inter-container reference management (implementation of the Referenceable pattern inside an IoC container)  Use Get the package from the Github repository:\ngo get -u github.com/pip-services3-go/pip-services3-container-go@latest TODO: add example","tags":null,"title":"Container module","type":"docs","url":"/hugo-docs/golang/container/","weight":30,"wordcount":53},{"authors":null,"categories":null,"date":-62135596800,"description":"IoC container Node.js / ES2017\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides an inversion-of-control (IoC) container used to facilitate the development of services and applications composed of loosely coupled components.\n\nThe module containes a basic in-memory container that can be embedded inside a service or application, or can be run by itself. The second container type can run as a system level process and can be configured via command line arguments. Also, it can be used to create docker containers.\n\nThe containers can read configuration from JSON or YAML files, and use it as a recipe for instantiating and configuring components. Component factories are used to create components based on their locators (descriptor) defined in the container configuration. The factories shall be registered in containers or dynamically in the container configuration file.\n","dir":"node/container/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1624024375,"lvl0":"Container module","lvl1":"IoC container Node.js / ES2017\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides an inversion-of-control (IoC) container used to facilitate the development of services and applications composed of loosely coupled components.\n\nThe module containes a basic in-memory container that can be embedded inside a service or application, or can be run by itself. The second container type can run as a system level process and can be configured via command line arguments. Also, it can be used to create docker containers.\n\nThe containers can read configuration from JSON or YAML files, and use it as a recipe for instantiating and configuring components. Component factories are used to create components based on their locators (descriptor) defined in the container configuration. The factories shall be registered in containers or dynamically in the container configuration file.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"714febe7871d62defe35f7a60af2d16d","permalink":"/node/container/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/container/","section":"node","summary":"Packages The module contains the following packages:\n Containers - Basic in-memory and process containers Build - Default container factory Config - Container configuration components Refer - Inter-container reference management (implementation of the Referenceable pattern inside an IoC container)  Use Install the NPM package as\nnpm install pip-services3-container-nodex --save Create a factory to create components based on their locators (descriptors).\nimport { Factory } from \u0026#39;pip-services3-components-nodex\u0026#39;; import { Descriptor } from \u0026#39;pip-services3-commons-nodex\u0026#39;; export class MyFactory extends Factory { public static MyComponentDescriptor = new Descritor(\u0026#34;myservice\u0026#34;, \u0026#34;mycomponent\u0026#34;, \u0026#34;default\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;1.","tags":null,"title":"Container module","type":"docs","url":"/hugo-docs/node/container/","weight":30,"wordcount":341},{"authors":null,"categories":null,"date":-62135596800,"description":"IoC container for Python \n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides an inversion-of-control (IoC) container used to facilitate the development of services and applications composed of loosely coupled components.\n\nThe module containes a basic in-memory container that can be embedded inside a service or application, or can be run by itself. The second container type can run as a system level process and can be configured via command line arguments. Also, it can be used to create docker containers.\n\nThe containers can read configuration from JSON or YAML files, and use it as a recipe for instantiating and configuring components. Component factories are used to create components based on their locators (descriptor) defined in the container configuration. The factories shall be registered in containers or dynamically in the container configuration file.\n","dir":"python/container/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1624024412,"lvl0":"Container module","lvl1":"IoC container for Python \n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides an inversion-of-control (IoC) container used to facilitate the development of services and applications composed of loosely coupled components.\n\nThe module containes a basic in-memory container that can be embedded inside a service or application, or can be run by itself. The second container type can run as a system level process and can be configured via command line arguments. Also, it can be used to create docker containers.\n\nThe containers can read configuration from JSON or YAML files, and use it as a recipe for instantiating and configuring components. Component factories are used to create components based on their locators (descriptor) defined in the container configuration. The factories shall be registered in containers or dynamically in the container configuration file.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"78bf64bb9b7f1ab94c856921401dcef0","permalink":"/python/container/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/container/","section":"python","summary":"Packages The module contains the following packages:\n Containers - Basic in-memory and process containers Build - Default container factory Config - Container configuration components Refer - Inter-container reference management (implementation of the Referenceable pattern inside an IoC container)  Use Install the Python package as\npip install pip-services3-container Create a factory to create components based on their locators (descriptors).\nfrom pip_services3_commons.refer import Descriptor from pip_services3_components.build import Factory class MyFactory(Factory): MyComponentDescriptor = Descriptor(\u0026#34;myservice\u0026#34;, \u0026#34;mycomponent\u0026#34;, \u0026#34;default\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;1.","tags":null,"title":"Container module","type":"docs","url":"/hugo-docs/python/container/","weight":30,"wordcount":313},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622485860,"lvl0":"Content Management Microservices","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"005f4e68f0c5c17be009072761596020","permalink":"/microservices/content/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/","section":"microservices","summary":"Work with articles, images, comments, context help and other multimedia content.\nApplications Microservice Keeps a list of supported applications that are referenced from other content microservices.\n   Blob Attachments Microservice Records all documents that attached to a particilar blob. When last document is disattached, the blob gets removed.     Dashboards Microservice Provides guidance to application users: introduces about application features, tells about new version and so on.","tags":null,"title":"Content Management Microservices","type":"docs","url":"/hugo-docs/microservices/content/","weight":30,"wordcount":202},{"authors":null,"categories":null,"date":-62135596800,"description":"\nPersistence components for Golang This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains generic interfaces for data access components as well as abstract implementations for in-memory and file persistence.      \nThe persistence components come in two kinds. The first kind is a basic persistence that can work with any object types and provides only minimal set of operations. The second kind is so called \"identifieable\" persistence with works with \"identifable\" data objects, i.e. objects that have unique ID field. The identifiable persistence provides a full set or CRUD operations that covers most common cases.\n","dir":"golang/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624315318,"lvl0":"Data module","lvl1":"\nPersistence components for Golang This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains generic interfaces for data access components as well as abstract implementations for in-memory and file persistence.      \nThe persistence components come in two kinds. The first kind is a basic persistence that can work with any object types and provides only minimal set of operations. The second kind is so called \"identifieable\" persistence with works with \"identifable\" data objects, i.e. objects that have unique ID field. The identifiable persistence provides a full set or CRUD operations that covers most common cases.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ad6a72153240bddc0716b210c288507b","permalink":"/golang/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/","section":"golang","summary":"Packages The module contains the following packages:\n Persistence - in-memory and file persistence components, as well as JSON persister class.  Use Get the package from the Github repository:\ngo get -u github.com/pip-services3-go/pip-services3-data-go@latest TODO: add example","tags":null,"title":"Data module","type":"docs","url":"/hugo-docs/golang/data/","weight":30,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"\nPersistence components for Node.js This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains generic interfaces for data access components as well as abstract implementations for in-memory and file persistence.      \nThe persistence components come in two kinds. The first kind is a basic persistence that can work with any object types and provides only minimal set of operations. The second kind is so called \"identifieable\" persistence with works with \"identifable\" data objects, i.e. objects that have unique ID field. The identifiable persistence provides a full set or CRUD operations that covers most common cases.\n","dir":"node/data/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Data module","lvl1":"\nPersistence components for Node.js This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains generic interfaces for data access components as well as abstract implementations for in-memory and file persistence.      \nThe persistence components come in two kinds. The first kind is a basic persistence that can work with any object types and provides only minimal set of operations. The second kind is so called \"identifieable\" persistence with works with \"identifable\" data objects, i.e. objects that have unique ID field. The identifiable persistence provides a full set or CRUD operations that covers most common cases.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"da0f3774f6652f5fee8b53db3e61018d","permalink":"/node/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/data/","section":"node","summary":"Packages The module contains the following packages:\n Core - interfaces for data access components. Persistence - in-memory and file persistence components, as well as JSON persister class.  Use Install the NPM package as\nnpm install pip-services3-data-nodex --save As an example, lets implement persistence for the following data object.\nimport { IIdentifiable } from \u0026#39;pip-services3-commons-nodex\u0026#39;; export class MyObject implements IIdentifiable { public id: string; public key: string; public value: number; } Our persistence component shall implement the following interface with a basic set of CRUD operations.","tags":null,"title":"Data module","type":"docs","url":"/hugo-docs/node/data/","weight":30,"wordcount":407},{"authors":null,"categories":null,"date":-62135596800,"description":"\nPersistence components for Python This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains generic interfaces for data access components as well as abstract implementations for in-memory and file persistence.      \nThe persistence components come in two kinds. The first kind is a basic persistence that can work with any object types and provides only minimal set of operations. The second kind is so called \"identifieable\" persistence with works with \"identifable\" data objects, i.e. objects that have unique ID field. The identifiable persistence provides a full set or CRUD operations that covers most common cases.\n","dir":"python/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Data module","lvl1":"\nPersistence components for Python This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It contains generic interfaces for data access components as well as abstract implementations for in-memory and file persistence.      \nThe persistence components come in two kinds. The first kind is a basic persistence that can work with any object types and provides only minimal set of operations. The second kind is so called \"identifieable\" persistence with works with \"identifable\" data objects, i.e. objects that have unique ID field. The identifiable persistence provides a full set or CRUD operations that covers most common cases.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fbb54c38c8c2866a89cf1ae56984acd7","permalink":"/python/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/data/","section":"python","summary":"Packages The module contains the following packages:\n Core - interfaces for data access components. Persistence - in-memory and file persistence components, as well as JSON persister class.  Use Install the Python package as\npip install pip_services3_data As an example, lets implement persistence for the following data object:\nclass Dummy(IStringIdentifiable): def __init__(self, id=None, key=None, content=None): self.id = id self.key = key self.content = content Our persistence component shall implement the following interface with a basic set of CRUD operations:","tags":null,"title":"Data module","type":"docs","url":"/hugo-docs/python/data/","weight":30,"wordcount":392},{"authors":null,"categories":null,"date":-62135596800,"description":"ElasticSearch components for Golang\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Elasticsearch module contains packages used to create Elasticsearch components, including logging components with data storage on the Elasticsearch server.\n","dir":"golang/elasticsearch/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624316020,"lvl0":"ElasticSearch module","lvl1":"ElasticSearch components for Golang\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Elasticsearch module contains packages used to create Elasticsearch components, including logging components with data storage on the Elasticsearch server.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8ce72b181956df804dc5df37e19612bf","permalink":"/golang/elasticsearch/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/elasticsearch/","section":"golang","summary":"Packages The module contains the following packages:\n Build - contains a factory for the construction of components Log - Logging components  Use Get the package from the Github repository:\ngo get -u github.com/pip-services3-go/pip-services3-elasticsearch-go@latest TODO: add example","tags":null,"title":"ElasticSearch module","type":"docs","url":"/hugo-docs/golang/elasticsearch/","weight":30,"wordcount":36},{"authors":null,"categories":null,"date":-62135596800,"description":"ElasticSearch components for Node.js/ES2017 \n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Elasticsearch module contains packages used to create Elasticsearch components, including logging components with data storage on the Elasticsearch server.\n","dir":"node/elasticsearch/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"ElasticSearch module","lvl1":"ElasticSearch components for Node.js/ES2017 \n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Elasticsearch module contains packages used to create Elasticsearch components, including logging components with data storage on the Elasticsearch server.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"580c7a9f4ba27743a59393509054257b","permalink":"/node/elasticsearch/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/elasticsearch/","section":"node","summary":"Packages The module contains the following packages:\n Build - contains a factory for the construction of components Log - Logging components  Use Install the Node.js package as\nnpm install pip-services-elasticsearch-nodex --save Microservice components shall perform logging usual way using CompositeLogger component. The CompositeLogger will get ElasticSearchLogger from references and will redirect log messages there among other destinations.\nimport { ConfigParams } from \u0026#39;pip-services3-commons-nodex\u0026#39;; import { IConfigurable } from \u0026#39;pip-services3-commons-nodex\u0026#39;; import { IReferences } from \u0026#39;pip-services3-commons-nodex\u0026#39;; import { IReferenceable } from \u0026#39;pip-services3-commons-nodex\u0026#39;; import { CompositeLogger } from \u0026#39;pip-services3-components-nodex\u0026#39;; export class MyComponent implements IConfigurable, IReferenceable { private _logger: CompositeLogger = new CompositeLogger(); public configure(config: ConfigParams): void { this.","tags":null,"title":"ElasticSearch module","type":"docs","url":"/hugo-docs/node/elasticsearch/","weight":30,"wordcount":165},{"authors":null,"categories":null,"date":-62135596800,"description":"ElasticSearch components for Python \n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Elasticsearch module contains packages used to create Elasticsearch components, including logging components with data storage on the Elasticsearch server.\n","dir":"python/elasticsearch/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"ElasticSearch module","lvl1":"ElasticSearch components for Python \n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Elasticsearch module contains packages used to create Elasticsearch components, including logging components with data storage on the Elasticsearch server.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"be9d4c762ff2999f63aebef1fa44eafb","permalink":"/python/elasticsearch/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/elasticsearch/","section":"python","summary":"Packages The module contains the following packages:\n Build - contains a factory for the construction of components Log - Logging components  Use Install the Python package as\npip install pip-services3-elasticsearch Microservice components shall perform logging the usual way using the CompositeLogger component. The CompositeLogger will get ElasticSearchLogger from references and will redirect the log messages there among other destinations.\nfrom pip_services3_commons.config import IConfigurable from pip_services3_commons.refer import IReferenceable from pip_services3_components.","tags":null,"title":"ElasticSearch module","type":"docs","url":"/hugo-docs/python/elasticsearch/","weight":30,"wordcount":130},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1623084212,"lvl0":"Pip.Services Docs for Golang toolkit","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"44ef1eec55d2959beeea4bebcb15cee6","permalink":"/golang/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/","section":"golang","summary":"Welcome to the Pip.Services documentation site! Pip.Services Toolkit is a collection of patterns and components to simplify the development of microservice systems using multiple programming languages, and enabling deployment onto various on-premises and cloud platforms. With these patterns you can create highly customizable microservices composed of loosely coupled components that process information, persist data in relational and NoSQL databases, communicate through synchronous and asynchronous protocols, monitor performance, process errors, and much more.","tags":null,"title":"Pip.Services Docs for Golang toolkit","type":"docs","url":"/hugo-docs/golang/","weight":30,"wordcount":228},{"authors":null,"categories":null,"date":-62135596800,"description":"GRPC Calls for Python\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe grpc module is used to organize synchronous data exchange using calls through the gRPC protocol. It has implementations of both, the server and client parts.\n","dir":"python/grpc/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"gRPC module","lvl1":"GRPC Calls for Python\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe grpc module is used to organize synchronous data exchange using calls through the gRPC protocol. It has implementations of both, the server and client parts.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"40845b660fcf8a6c25261b75b37d0e60","permalink":"/python/grpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/grpc/","section":"python","summary":"Packages The module contains the following packages:\n Build - factories for creating gRPC services Clients - basic client components that use the gRPC protocol and Commandable pattern through gRPC Services - basic service implementations for connecting via the gRPC protocol and using the Commandable pattern via gRPC  Use Install the NPM package as\nnpm install pip-services3-grpc-node --save ","tags":null,"title":"gRPC module","type":"docs","url":"/hugo-docs/python/grpc/","weight":30,"wordcount":57},{"authors":null,"categories":null,"date":-62135596800,"description":"Asynchronous Messaging for Pip.Services in Node.js / ES2017  \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Messaging module contains a set of interfaces and classes for working with message queues, as well as an in-memory message queue implementation. \n","dir":"golang/messaging/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Messaging module","lvl1":"Asynchronous Messaging for Pip.Services in Node.js / ES2017  \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Messaging module contains a set of interfaces and classes for working with message queues, as well as an in-memory message queue implementation. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"22508ac6abfe9021dd4a9e22760b1aac","permalink":"/golang/messaging/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/","section":"golang","summary":"Modules The module contains the following packages:\n Build - in-memory message queue factory Queues - contains interfaces for working with message queues, subscriptions for receiving messages from the queue, and an in-memory message queue implementation. Connect - TODO: add description  Use Install the NPM package as\nnpm install pip-services3-messaging-nodex --save TODO: add example","tags":null,"title":"Messaging module","type":"docs","url":"/hugo-docs/golang/messaging/","weight":30,"wordcount":53},{"authors":null,"categories":null,"date":-62135596800,"description":"Asynchronous Messaging for Pip.Services in Node.js / ES2017  \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Messaging module contains a set of interfaces and classes for working with message queues, as well as an in-memory message queue implementation. \n","dir":"node/messaging/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Messaging module","lvl1":"Asynchronous Messaging for Pip.Services in Node.js / ES2017  \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Messaging module contains a set of interfaces and classes for working with message queues, as well as an in-memory message queue implementation. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fec9948b2981de80c969081e96f1bc29","permalink":"/node/messaging/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/","section":"node","summary":"Modules The module contains the following packages:\n Build - in-memory message queue factory Queues - contains interfaces for working with message queues, subscriptions for receiving messages from the queue, and an in-memory message queue implementation. Connect - TODO: add description  Use Install the NPM package as\nnpm install pip-services3-messaging-nodex --save TODO: add example","tags":null,"title":"Messaging module","type":"docs","url":"/hugo-docs/node/messaging/","weight":30,"wordcount":53},{"authors":null,"categories":null,"date":-62135596800,"description":"Asynchronous Messaging for Pip.Services in Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Messaging module contains a set of interfaces and classes for working with message queues, as well as an in-memory message queue implementation. \n","dir":"python/messaging/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Messaging module","lvl1":"Asynchronous Messaging for Pip.Services in Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. The Messaging module contains a set of interfaces and classes for working with message queues, as well as an in-memory message queue implementation. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e2a4ad60a7482bf74037320ea6349a91","permalink":"/python/messaging/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/","section":"python","summary":"Modules The module contains the following packages:\n Build - in-memory message queue factory Queues - contains interfaces for working with message queues, subscriptions for receiving messages from the queue, and an in-memory message queue implementation. Connect - contains an interface used to create message queue connections.  Use Install the Python package as\npip install pip-services3-messaging ","tags":null,"title":"Messaging module","type":"docs","url":"/hugo-docs/python/messaging/","weight":30,"wordcount":55},{"authors":null,"categories":null,"date":-62135596800,"description":"MongoDB components for Pip.Services in Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of components used to implement MongoDB persistence.\n","dir":"python/mongodb/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"MongoDB module","lvl1":"MongoDB components for Pip.Services in Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of components used to implement MongoDB persistence.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ec50fb4dbe6288f14f7e4a3e0d426d40","permalink":"/python/mongodb/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/mongodb/","section":"python","summary":"Packages The module contains the following packages:\n Build - Factory to create MongoDB persistence components. Connect - Connection component to configure MongoDB connection to database. Persistence - abstract persistence components to perform basic CRUD operations.  Use Install the Python package as\npip install pip-services3-mongodb As an example, lets create persistence for the following data object.\nclass Dummy(IStringIdentifiable): def __init__(self, id=None, key=None, content=None): self.id = id self.key = key self.","tags":null,"title":"MongoDB module","type":"docs","url":"/hugo-docs/python/mongodb/","weight":30,"wordcount":364},{"authors":null,"categories":null,"date":-62135596800,"description":"MySQL components for Node.js / ES2017. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n","dir":"node/mysql/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"MySQL module","lvl1":"MySQL components for Node.js / ES2017. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"93e4e846a002410878175c55f776acfa","permalink":"/node/mysql/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/mysql/","section":"node","summary":"Packages The module contains the following packages:\n Build - a standard factory for constructing components Connect - instruments for configuring connections to the database. Persistence - abstract classes for working with the database that can be used for connecting to collections and performing basic CRUD operations  Use Install the NPM package as\nnpm install pip-services3-mysql-nodex --save ","tags":null,"title":"MySQL module","type":"docs","url":"/hugo-docs/node/mysql/","weight":30,"wordcount":56},{"authors":null,"categories":null,"date":-62135596800,"description":"MySQL components for Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n","dir":"python/mysql/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"MySQL module","lvl1":"MySQL components for Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3eeafb2d07dbb754a9d6362a23a2d219","permalink":"/python/mysql/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mysql/","section":"python","summary":"Packages The module contains the following packages:\n Build - a standard factory for constructing components Connect - instruments for configuring connections to the database. Persistence - abstract classes for working with the database that can be used for connecting to collections and performing basic CRUD operations  Use Install the Python package as\npip install pip-services3-mysql ","tags":null,"title":"MySQL module","type":"docs","url":"/hugo-docs/python/mysql/","weight":30,"wordcount":55},{"authors":null,"categories":null,"date":-62135596800,"description":"PostgreSQL components for Pip.Services in Node.js / ES2017. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of components to implement PostgreSQL persistence.\n","dir":"node/postgres/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Postgres module","lvl1":"PostgreSQL components for Pip.Services in Node.js / ES2017. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of components to implement PostgreSQL persistence.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"485b84233b789b1ca1f1b5be10c237dc","permalink":"/node/postgres/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/postgres/","section":"node","summary":"Packages The module contains the following packages:\n Build - factory to create PostreSQL persistence components. Connect - connection component to configure PostgreSQL connection to database. Persistence - abstract persistence components to perform basic CRUD operations.  Use Install the NPM package as\nnpm install pip-services3-postgres-nodex --save As an example, lets create persistence for the following data object.\nimport { IIdentifiable } from \u0026#39;pip-services3-commons-nodex\u0026#39;; export class MyObject implements IIdentifiable { public id: string; public key: string; public value: number; } The persistence component shall implement the following interface with a basic set of CRUD operations.","tags":null,"title":"Postgres module","type":"docs","url":"/hugo-docs/node/postgres/","weight":30,"wordcount":695},{"authors":null,"categories":null,"date":-62135596800,"description":"PostgreSQL components for Pip.Services in Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of components to implement PostgreSQL persistence.\n","dir":"python/postgres/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Postgres module","lvl1":"PostgreSQL components for Pip.Services in Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit. It provides a set of components to implement PostgreSQL persistence.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8bcf127ee636a4d5797dc79c87178e44","permalink":"/python/postgres/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/postgres/","section":"python","summary":"Packages The module contains the following packages:\n Build - factory to create PostreSQL persistence components. Connect - connection component to configure PostgreSQL connection to database. Persistence - abstract persistence components to perform basic CRUD operations.  Use Install the Python package as\npip install pip-services3-postgres As an example, lets create persistence for the following data object.\nclass MyObject(IStringIdentifiable): def __init__(self, id=None, key=None, content=None): self.id = id self.key = key self.","tags":null,"title":"Postgres module","type":"docs","url":"/hugo-docs/python/postgres/","weight":30,"wordcount":641},{"authors":null,"categories":null,"date":-62135596800,"description":"Prometheus components for nodex. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThis module contains components for working with meters in the Prometheus service. The PrometheusCounters and PrometheusMetricsService components allow you to work both, in client mode through PushGateway and as a service.\n","dir":"node/prometheus/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Prometheus module","lvl1":"Prometheus components for nodex. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThis module contains components for working with meters in the Prometheus service. The PrometheusCounters and PrometheusMetricsService components allow you to work both, in client mode through PushGateway and as a service.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ff1e671facbfb6f111400ba7fe3cf300","permalink":"/node/prometheus/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/prometheus/","section":"node","summary":"Packages The module contains the following packages:\n Build - default factories for constructing components. Count - components of counters (metrics) used to send data to Prometheus via PushGateway. Services - components of the service used to read counters (metrics) from the Prometheus service  Use Install the NPM package as\nnpm install pip-services3-prometheus-nodex --save TODO add example","tags":null,"title":"Prometheus module","type":"docs","url":"/hugo-docs/node/prometheus/","weight":30,"wordcount":56},{"authors":null,"categories":null,"date":-62135596800,"description":"Prometheus components for Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThis module contains components for working with meters in the Prometheus service. The PrometheusCounters and PrometheusMetricsService components allow you to work both, in client mode through PushGateway and as a service.\n","dir":"python/prometheus/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Prometheus module","lvl1":"Prometheus components for Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThis module contains components for working with meters in the Prometheus service. The PrometheusCounters and PrometheusMetricsService components allow you to work both, in client mode through PushGateway and as a service.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"985c2f7c5ee1f82cce3a72783fc58d78","permalink":"/python/prometheus/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/prometheus/","section":"python","summary":"Packages The module contains the following packages:\n Build - default factories for constructing components. Count - components of counters (metrics) used to send data to Prometheus via PushGateway. Services - components of the service used to read counters (metrics) from the Prometheus service  Use Install the Python package as\npip install pip-services3-prometheus ","tags":null,"title":"Prometheus module","type":"docs","url":"/hugo-docs/python/prometheus/","weight":30,"wordcount":52},{"authors":null,"categories":null,"date":-62135596800,"description":"Remote Procedure Calls for Pip.Services Golang\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThe rpc module provides the synchronous communication using local calls or the HTTP(S) protocol. It contains both server and client side implementations.\n","dir":"golang/rpc/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624315318,"lvl0":"RPC module","lvl1":"Remote Procedure Calls for Pip.Services Golang\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThe rpc module provides the synchronous communication using local calls or the HTTP(S) protocol. It contains both server and client side implementations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"75ed3e544d723c7b444d073ed03b2acb","permalink":"/golang/rpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/","section":"golang","summary":"Modules The module contains the following packages:\n Auth - authentication and authorization components Build - HTTP service factory Clients - mechanisms for retrieving connection settings from the microservice’s configuration and providing clients and services with these settings Connect - helper module to retrieve connections for HTTP-based services and clients Services - basic implementation of services for connecting via the HTTP/REST protocol and using the Commandable pattern over HTTP  Use Get the package from the Github repository:","tags":null,"title":"RPC module","type":"docs","url":"/hugo-docs/golang/rpc/","weight":30,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"Remote Procedure Calls for Pip.Services Node.js / ES2017\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThe rpc module provides the synchronous communication using local calls or the HTTP(S) protocol. It contains both server and client side implementations.\n","dir":"node/rpc/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1623078433,"lvl0":"RPC module","lvl1":"Remote Procedure Calls for Pip.Services Node.js / ES2017\n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThe rpc module provides the synchronous communication using local calls or the HTTP(S) protocol. It contains both server and client side implementations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"27c5532cf9380c271fdaaf94f2c3fb74","permalink":"/node/rpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/","section":"node","summary":"Modules The module contains the following packages:\n Auth - authentication and authorization components Build - HTTP service factory Clients - mechanisms for retrieving connection settings from the microservice’s configuration and providing clients and services with these settings Connect - helper module to retrieve connections for HTTP-based services and clients Services - basic implementation of services for connecting via the HTTP/REST protocol and using the Commandable pattern over HTTP Test - a Commandable HTTP client and a REST client that can be used for automated testing  Use Install the NPM package as","tags":null,"title":"RPC module","type":"docs","url":"/hugo-docs/node/rpc/","weight":30,"wordcount":95},{"authors":null,"categories":null,"date":-62135596800,"description":"Remote Procedure Calls for Pip.Services in Python \n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThe rpc module provides the synchronous communication using local calls or the HTTP(S) protocol. It contains both server and client side implementations.\n","dir":"python/rpc/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622831724,"lvl0":"RPC module","lvl1":"Remote Procedure Calls for Pip.Services in Python \n\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n\nThe rpc module provides the synchronous communication using local calls or the HTTP(S) protocol. It contains both server and client side implementations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ea222be5cf86e56e861de56b9fa9e637","permalink":"/python/rpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/","section":"python","summary":"Modules The module contains the following packages:\n Auth - authentication and authorization components Build - HTTP service factory Clients - mechanisms for retrieving connection settings from the microservice’s configuration and providing clients and services with these settings Connect - helper module to retrieve connections for HTTP-based services and clients Services - basic implementation of services for connecting via the HTTP/REST protocol and using the Commandable pattern over HTTP Test - a Commandable HTTP client and a REST client that can be used for automated testing  Use Install the Python package as","tags":null,"title":"RPC module","type":"docs","url":"/hugo-docs/python/rpc/","weight":30,"wordcount":94},{"authors":null,"categories":null,"date":-62135596800,"description":"SQLServer components for Node.js / ES2017. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n","dir":"node/sqlserver/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"SQLServer module","lvl1":"SQLServer components for Node.js / ES2017. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"96305efdfc1f0efae315791a83a335ff","permalink":"/node/sqlserver/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/sqlserver/","section":"node","summary":"Packages The module contains the following packages:\n Build - a standard factory for constructing components Connect - instruments for configuring connections to the database. Persistence - abstract classes for working with the database that can be used for connecting to collections and performing basic CRUD operations  Use Install the NPM package as\nnpm install pip-services3-sqlserver-nodex --save As an example, lets create persistence for the following data object.\nimport { IIdentifiable } from \u0026#39;pip-services3-commons-nodex\u0026#39;; export class MyObject implements IIdentifiable { public id: string; public key: string; public value: number; } The persistence component shall implement the following interface with a basic set of CRUD operations.","tags":null,"title":"SQLServer module","type":"docs","url":"/hugo-docs/node/sqlserver/","weight":30,"wordcount":765},{"authors":null,"categories":null,"date":-62135596800,"description":"SQLServer components for Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n","dir":"python/sqlserver/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"SQLServer module","lvl1":"SQLServer components for Python. \nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f6c257c919e221d80af2fbebb19cc9ec","permalink":"/python/sqlserver/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/sqlserver/","section":"python","summary":"Packages The module contains the following packages:\n Build - a standard factory for constructing components Connect - instruments for configuring connections to the database. Persistence - abstract classes for working with the database that can be used for connecting to collections and performing basic CRUD operations  Use Install the Python package as\npip install pip-services3-sqlserver As an example, lets create persistence for the following data object.\nclass MyObject(IStringIdentifiable): def __init__(self, id=None, key=None, content=None): self.","tags":null,"title":"SQLServer module","type":"docs","url":"/hugo-docs/python/sqlserver/","weight":30,"wordcount":644},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/getting_started/your_first_microservice/","expirydate":-62135596800,"fuzzywordcount":1700,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Your first microservice in Dart","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"da48e4c3b45f46f351241e2010f3ad46","permalink":"/dart/getting_started/your_first_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/dart/getting_started/your_first_microservice/","section":"dart","summary":"So, let’s start developing microservices using the Pip.Services toolkit. As a simple example, we will make a Hello World microservice, which will greet you in response to your request. The communication protocol will be HTTP REST.\nThe microservice is structurally made up of these components:\n The controller, which generates responses to requests A REST service for the transmission of responses and requests The component factory for the dynamic creation of components A container process, which will be filled with the necessary components, based on yml configuration.","tags":null,"title":"Your first microservice in Dart","type":"docs","url":"/hugo-docs/dart/getting_started/your_first_microservice/","weight":30,"wordcount":1644},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/getting_started/your_first_microservice/","expirydate":-62135596800,"fuzzywordcount":1800,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Your first microservice in Golang","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5785518d18a13ef08a4497ba0afe404a","permalink":"/golang/getting_started/your_first_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/golang/getting_started/your_first_microservice/","section":"golang","summary":"So, let’s start developing microservices using the Pip.Services toolkit. As a simple example, we will make a Hello World microservice, which will greet you in response to your request. The communication protocol will be HTTP REST.\nThe microservice is structurally made up of these components:\n The controller, which generates responses to requests A REST service for the transmission of responses and requests The component factory for the dynamic creation of components A container process, which will be filled with the necessary components, based on yml configuration.","tags":null,"title":"Your first microservice in Golang","type":"docs","url":"/hugo-docs/golang/getting_started/your_first_microservice/","weight":30,"wordcount":1731},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"java/getting_started/your_first_microservice/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Your first microservice in Java","lvl1":"","lvl2":"java","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7c51206c883e19846e4f9a3a92e09cf3","permalink":"/java/getting_started/your_first_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/java/getting_started/your_first_microservice/","section":"java","summary":"So, let’s start developing microservices using the Pip.Services toolkit. As a simple example, we will make a Hello World microservice, which will greet you in response to your request. The communication protocol will be HTTP REST.\nThe microservice is structurally made up of these components:\n The controller, which generates responses to requests A REST service for the transmission of responses and requests The component factory for the dynamic creation of components A container process, which will be filled with the necessary components, based on yml configuration.","tags":null,"title":"Your first microservice in Java","type":"docs","url":"/hugo-docs/java/getting_started/your_first_microservice/","weight":30,"wordcount":89},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/getting_started/your_first_microservice/","expirydate":-62135596800,"fuzzywordcount":1700,"keywords":null,"kind":"section","lang":"en","lastmod":1623084212,"lvl0":"Your first microservice in .NET","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3734289e5f9baf81c7a6c5fee1f4ca58","permalink":"/net/getting_started/your_first_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/net/getting_started/your_first_microservice/","section":"net","summary":"So, let’s start developing microservices using the Pip.Services toolkit. As a simple example, we will make a Hello World microservice, which will greet you in response to your request. The communication protocol will be HTTP REST.\nThe microservice is structurally made up of these components:\n The controller, which generates responses to requests A REST service for the transmission of responses and requests The component factory for the dynamic creation of components A container process, which will be filled with the necessary components, based on yml configuration.","tags":null,"title":"Your first microservice in .NET","type":"docs","url":"/hugo-docs/net/getting_started/your_first_microservice/","weight":30,"wordcount":1650},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/getting_started/your_first_microservice/","expirydate":-62135596800,"fuzzywordcount":1600,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Your first microservice in Node.js","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"44a551b92221f703de22e9993c973618","permalink":"/node/getting_started/your_first_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/node/getting_started/your_first_microservice/","section":"node","summary":"So, let’s start developing microservices using the Pip.Services toolkit. As a simple example, we will make a Hello World microservice, which will greet you in response to your request. The communication protocol will be HTTP REST.\nThe microservice is structurally made up of these components:\n The controller, which generates responses to requests A REST service for the transmission of responses and requests The component factory for the dynamic creation of components A container process, which will be filled with the necessary components, based on yml configuration.","tags":null,"title":"Your first microservice in Node.js","type":"docs","url":"/hugo-docs/node/getting_started/your_first_microservice/","weight":30,"wordcount":1583},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/getting_started/your_first_microservice/","expirydate":-62135596800,"fuzzywordcount":1600,"keywords":null,"kind":"section","lang":"en","lastmod":1624053935,"lvl0":"Your first microservice in Python","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"523029d5bd72916abd19cb98463edc12","permalink":"/python/getting_started/your_first_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/python/getting_started/your_first_microservice/","section":"python","summary":"So, let’s start developing microservices using the Pip.Services toolkit. As a simple example, we will make a Hello World microservice, which will greet you in response to your request. The communication protocol will be HTTP REST.\nThe microservice is structurally made up of these components:\n The controller, which generates responses to requests A REST service for the transmission of responses and requests The component factory for the dynamic creation of components A container process, which will be filled with the necessary components, based on a yaml file configuration.","tags":null,"title":"Your first microservice in Python","type":"docs","url":"/hugo-docs/python/getting_started/your_first_microservice/","weight":30,"wordcount":1565},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1623084212,"lvl0":"Pip.Services Docs for Dart toolkit","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7a8140e038eb66ccbffbad4b5b16abd3","permalink":"/dart/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/","section":"dart","summary":"Welcome to the Pip.Services documentation site! Pip.Services Toolkit is a collection of patterns and components to simplify the development of microservice systems using multiple programming languages, and enabling deployment onto various on-premises and cloud platforms. With these patterns you can create highly customizable microservices composed of loosely coupled components that process information, persist data in relational and NoSQL databases, communicate through synchronous and asynchronous protocols, monitor performance, process errors, and much more.","tags":null,"title":"Pip.Services Docs for Dart toolkit","type":"docs","url":"/hugo-docs/dart/","weight":40,"wordcount":228},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/ecommrce/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622485860,"lvl0":"eCommerce Microservices","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ef4a72844adef1692b8e8f33d81152da","permalink":"/microservices/ecommrce/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/ecommrce/","section":"microservices","summary":"Product catalogs, user reviews, credit card processing, and carrying out electronic payments.\nCredit cards microservice Stores customer credit cards internally or in external PCI-complient service like Paypal\n   Payment methods Payment methods     Payments Payments.\n   Payroll checks Payroll checks.\n    Purchase orders Purchase orders.\n   Reviews Microservice Keeps a list of supported reviews that are referenced from other content microservices.","tags":null,"title":"eCommerce Microservices","type":"docs","url":"/hugo-docs/microservices/ecommrce/","weight":40,"wordcount":56},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/getting_started/faq/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Frequently Asked Questions","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5d51595c9c235af4b182b392ee077f41","permalink":"/dart/getting_started/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/dart/getting_started/faq/","section":"dart","summary":"Q: Why does Pip.Services name start with pip? Is it only for Python?\nA: There is no relation between Python pip tool and Pip.Services. The name comes from Pip.Life, a goal oriented social network, which was the first system built by our team and where Pip.Services were born. Pip there meant “exceptional, spiritual person”, “mark on the radar” which is associated with a target/goal to hit, or could be just short of “people”.","tags":null,"title":"Frequently Asked Questions","type":"docs","url":"/hugo-docs/dart/getting_started/faq/","weight":40,"wordcount":879},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/getting_started/faq/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Frequently Asked Questions","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"36e7cf06a417a8c7c912e58ab27b85a6","permalink":"/golang/getting_started/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/golang/getting_started/faq/","section":"golang","summary":"Q: Why does Pip.Services name start with pip? Is it only for Python?\nA: There is no relation between Python pip tool and Pip.Services. The name comes from Pip.Life, a goal oriented social network, which was the first system built by our team and where Pip.Services were born. Pip there meant “exceptional, spiritual person”, “mark on the radar” which is associated with a target/goal to hit, or could be just short of “people”.","tags":null,"title":"Frequently Asked Questions","type":"docs","url":"/hugo-docs/golang/getting_started/faq/","weight":40,"wordcount":879},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"java/getting_started/faq/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Frequently Asked Questions","lvl1":"","lvl2":"java","lvl3":null,"lvl4":null,"lvl5":"","objectID":"16251a79dc40ffeeb41b109f1a67c89e","permalink":"/java/getting_started/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/java/getting_started/faq/","section":"java","summary":"Q: Why does Pip.Services name start with pip? Is it only for Python?\nA: There is no relation between Python pip tool and Pip.Services. The name comes from Pip.Life, a goal oriented social network, which was the first system built by our team and where Pip.Services were born. Pip there meant “exceptional, spiritual person”, “mark on the radar” which is associated with a target/goal to hit, or could be just short of “people”.","tags":null,"title":"Frequently Asked Questions","type":"docs","url":"/hugo-docs/java/getting_started/faq/","weight":40,"wordcount":879},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/getting_started/faq/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Frequently Asked Questions","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a6fe9092b6b02f8587ca9652db9ae32c","permalink":"/net/getting_started/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/net/getting_started/faq/","section":"net","summary":"Q: Why does Pip.Services name start with pip? Is it only for Python?\nA: There is no relation between Python pip tool and Pip.Services. The name comes from Pip.Life, a goal oriented social network, which was the first system built by our team and where Pip.Services were born. Pip there meant “exceptional, spiritual person”, “mark on the radar” which is associated with a target/goal to hit, or could be just short of “people”.","tags":null,"title":"Frequently Asked Questions","type":"docs","url":"/hugo-docs/net/getting_started/faq/","weight":40,"wordcount":879},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/getting_started/faq/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"section","lang":"en","lastmod":1622815947,"lvl0":"Frequently Asked Questions","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f92b1fec6eab5ddd2b102cd105581a3a","permalink":"/node/getting_started/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/node/getting_started/faq/","section":"node","summary":"Q: Why does Pip.Services name start with pip? Is it only for Python?\nA: There is no relation between Python pip tool and Pip.Services. The name comes from Pip.Life, a goal oriented social network, which was the first system built by our team and where Pip.Services were born. Pip there meant “exceptional, spiritual person”, “mark on the radar” which is associated with a target/goal to hit, or could be just short of “people”.","tags":null,"title":"Frequently Asked Questions","type":"docs","url":"/hugo-docs/node/getting_started/faq/","weight":40,"wordcount":879},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/getting_started/faq/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"section","lang":"en","lastmod":1622939692,"lvl0":"Frequently Asked Questions","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c76d98965c3952d3c5173a2b8c7bfadd","permalink":"/python/getting_started/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/python/getting_started/faq/","section":"python","summary":"Q: Why does Pip.Services name start with pip? Is it only for Python?\nA: There is no relation between Python pip tool and Pip.Services. The name comes from Pip.Life, a goal oriented social network, which was the first system built by our team and where Pip.Services were born. Pip there meant “exceptional, spiritual person”, “mark on the radar” which is associated with a target/goal to hit, or could be just short of “people”.","tags":null,"title":"Frequently Asked Questions","type":"docs","url":"/hugo-docs/python/getting_started/faq/","weight":40,"wordcount":879},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/recipes/memory_persistence/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"section","lang":"en","lastmod":1623535987,"lvl0":"Memory Persistence","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c1e44dbf7408aec6ef99769eaa63f19b","permalink":"/python/recipes/memory_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/python/recipes/memory_persistence/","section":"python","summary":"by Artyom Grishchenko  Introduction The Pip.Services Toolkit offers a few abstract implementations for developing persistent components. One of them is the MemoryPersistence, which stores all of its data in memory. Its usefulness is limited in production, but very handy in unit tests. This persistence allows us to cut dependencies on external persistent storages and makes tests easy to set up and lighting fast!\nThe MemoryPersistence class The most basic implementation is the MemoryPersistence class defined in the Data module.","tags":null,"title":"Memory Persistence","type":"docs","url":"/hugo-docs/python/recipes/memory_persistence/","weight":40,"wordcount":866},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/iot/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622485860,"lvl0":"Internet of Things Microservices","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0078e3f571b8096878eba61fdaf071ab","permalink":"/microservices/iot/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/iot/","section":"microservices","summary":"Lists of devices, status and movement tracking, and others.\nBeacons microservice Keeps list of beacons.\n   Event generation microservice Processes and generates events for tracking objects based on their state     Object positions Microservice Records historical positions of controlled objects.\n   Object routes Microservice Records historical routes of controlled objects.\n    Transducer data microservice Records historical data of controlled objects.","tags":null,"title":"Internet of Things Microservices","type":"docs","url":"/hugo-docs/microservices/iot/","weight":50,"wordcount":56},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/recipes/mongodb_persistence/","expirydate":-62135596800,"fuzzywordcount":1700,"keywords":null,"kind":"section","lang":"en","lastmod":1623719296,"lvl0":"MongoDB Persistence","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"54726a1ffa1e454adb87c89531aeb989","permalink":"/python/recipes/mongodb_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/python/recipes/mongodb_persistence/","section":"python","summary":"by Aleksey Dvoykin\nIntroduction In our previous tutorials, we took a look at in-memory and file persistence component implementations. Another frequent choice of persistence is Pip.Service’s MongoDb persistence. This persistence stores data in MongoDB - a popular document-oriented database. The most basic implementation of this component is the MongoDbPersistence class defined in the MongoDb module. It is capable of storing a collection of documents, opening and closing connections, and performing a few simple CRUD operations.","tags":null,"title":"MongoDB Persistence","type":"docs","url":"/hugo-docs/python/recipes/mongodb_persistence/","weight":50,"wordcount":1633},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1623084212,"lvl0":"Pip.Services Docs for Python toolkit","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"43c9f2d0f31ce5b405628ba606b38b91","permalink":"/python/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/","section":"python","summary":"Welcome to the Pip.Services documentation site! Pip.Services Toolkit is a collection of patterns and components to simplify the development of microservice systems using multiple programming languages, and enabling deployment onto various on-premises and cloud platforms. With these patterns you can create highly customizable microservices composed of loosely coupled components that process information, persist data in relational and NoSQL databases, communicate through synchronous and asynchronous protocols, monitor performance, process errors, and much more.","tags":null,"title":"Pip.Services Docs for Python toolkit","type":"docs","url":"/hugo-docs/python/","weight":50,"wordcount":228},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/recipes/background_execution/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"section","lang":"en","lastmod":1623538800,"lvl0":"Background Execution","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6439ac67f5f18d11a9b6ac7d37902b0c","permalink":"/python/recipes/background_execution/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/recipes/background_execution/","section":"python","summary":"by Alex Mazur  Introduction Sometimes you may need to use your microservices as background tasks. From an architectural point of view, we call this type of tasks Active Logic, as they don’t need any external event to prompt them but a background task logic only. There are several ways to design this task. One approach consists of adding a timer to the microservice’s controller and distributed locks. Another method would be using a message queue to manage the execution process.","tags":null,"title":"Background Execution","type":"docs","url":"/hugo-docs/python/recipes/background_execution/","weight":60,"wordcount":819},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"java/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1623084212,"lvl0":"Pip.Services Docs for Java toolkit","lvl1":"","lvl2":"java","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3a6471cdecd90f94338fcbb54ac1d372","permalink":"/java/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/java/","section":"java","summary":"Welcome to the Pip.Services documentation site! Pip.Services Toolkit is a collection of patterns and components to simplify the development of microservice systems using multiple programming languages, and enabling deployment onto various on-premises and cloud platforms. With these patterns you can create highly customizable microservices composed of loosely coupled components that process information, persist data in relational and NoSQL databases, communicate through synchronous and asynchronous protocols, monitor performance, process errors, and much more.","tags":null,"title":"Pip.Services Docs for Java toolkit","type":"docs","url":"/hugo-docs/java/","weight":60,"wordcount":228},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1623083137,"lvl0":"Microservices","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ced5c0a9196f150574c8f181e0759dd0","permalink":"/microservices/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/microservices/","section":"microservices","summary":"Overview When creating enterprise systems, functions tend to be duplicated in various parts of these systems. For example: registering system events, working with large binary objects, collecting analytical data, generating keys, managing users, notifications, help systems, and so on.\nUntil recently, companies had just a few options available: either develop this functionality on their own, or pay for a third party SaaS solution. Buying and integrating an existing solution was pretty much impossible, as the microservice market was close to non-existent.","tags":null,"title":"Microservices","type":"docs","url":"/hugo-docs/microservices/","weight":70,"wordcount":451},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"extras/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1623083137,"lvl0":"Extras","lvl1":"","lvl2":"extras","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8f91f8c14e069bdd392494896aa83abb","permalink":"/extras/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/extras/","section":"extras","summary":"Benchmarking Framework Performance, resilience and data integrity are a priority in microservice development. To make your life easier, we implemented a benchmarking framework to keep critical non-functional characteristics under constant control. In a similar vein with Pip.Service Toolkit, the framework has symmetrical implementations to make it easier to switch between programming languages.\nTemplates To get you started faster, we developed a number of microservice templates in all of the supported languages.","tags":null,"title":"Extras","type":"docs","url":"/hugo-docs/extras/","weight":80,"wordcount":167},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"extras/get_help/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"How to Get Help","lvl1":"","lvl2":"extras","lvl3":null,"lvl4":null,"lvl5":"","objectID":"48cb554708be94ec35d441ac7474dd20","permalink":"/extras/get_help/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/extras/get_help/","section":"extras","summary":"Thank you for your interest and for using our products!\nOur projects are constantly being improved and supported, striving to provide the highest possible quality. We mainly focus on helping developers of complex enterprise systems, as the systems they create are meant to be used for decades. Our goal is to provide stable and long living code, as well as maximize compatibility wherever we can.\nIf any questions arise while working with our products, or if you would like to share your ideas on how we could improve, please make a post on stackoverflow.","tags":null,"title":"How to Get Help","type":"docs","url":"/hugo-docs/extras/get_help/","weight":1000,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"get_help/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1623159695,"lvl0":"How to Get Help","lvl1":"","lvl2":"get_help","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bf203ff788bde4ae94ee6b21cf97a1b4","permalink":"/get_help/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/get_help/","section":"get_help","summary":"Thank you for your interest and for using our products!\nOur projects are constantly being improved and supported, striving to provide the highest possible quality. We mainly focus on helping developers of complex enterprise systems, as the systems they create are meant to be used for decades. Our goal is to provide stable and long living code, as well as maximize compatibility wherever we can.\nIf any questions arise while working with our products, or if you would like to share your ideas on how we could improve, please make a post on stackoverflow.","tags":null,"title":"How to Get Help","type":"docs","url":"/hugo-docs/get_help/","weight":1000,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/get_help/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"How to Get Help","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6ba59c5895088e4ff1c1fdb2fd1f16cb","permalink":"/golang/get_help/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/get_help/","section":"golang","summary":"Thank you for your interest and for using our products!\nOur projects are constantly being improved and supported, striving to provide the highest possible quality. We mainly focus on helping developers of complex enterprise systems, as the systems they create are meant to be used for decades. Our goal is to provide stable and long living code, as well as maximize compatibility wherever we can.\nIf any questions arise while working with our products, or if you would like to share your ideas on how we could improve, please make a post on stackoverflow.","tags":null,"title":"How to Get Help","type":"docs","url":"/hugo-docs/golang/get_help/","weight":1000,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"java/get_help/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"How to Get Help","lvl1":"","lvl2":"java","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9b675221a4380bd51ef9e6c03d439d56","permalink":"/java/get_help/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/java/get_help/","section":"java","summary":"Thank you for your interest and for using our products!\nOur projects are constantly being improved and supported, striving to provide the highest possible quality. We mainly focus on helping developers of complex enterprise systems, as the systems they create are meant to be used for decades. Our goal is to provide stable and long living code, as well as maximize compatibility wherever we can.\nIf any questions arise while working with our products, or if you would like to share your ideas on how we could improve, please make a post on stackoverflow.","tags":null,"title":"How to Get Help","type":"docs","url":"/hugo-docs/java/get_help/","weight":1000,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/get_help/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"How to Get Help","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9e23194faf5c01a2988fdfdddb72ab9e","permalink":"/microservices/get_help/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/get_help/","section":"microservices","summary":"Thank you for your interest and for using our products!\nOur projects are constantly being improved and supported, striving to provide the highest possible quality. We mainly focus on helping developers of complex enterprise systems, as the systems they create are meant to be used for decades. Our goal is to provide stable and long living code, as well as maximize compatibility wherever we can.\nIf any questions arise while working with our products, or if you would like to share your ideas on how we could improve, please make a post on stackoverflow.","tags":null,"title":"How to Get Help","type":"docs","url":"/hugo-docs/microservices/get_help/","weight":1000,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/get_help/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"How to Get Help","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c1bbf06a7c0fae0239b991aef43d4329","permalink":"/net/get_help/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/get_help/","section":"net","summary":"Thank you for your interest and for using our products!\nOur projects are constantly being improved and supported, striving to provide the highest possible quality. We mainly focus on helping developers of complex enterprise systems, as the systems they create are meant to be used for decades. Our goal is to provide stable and long living code, as well as maximize compatibility wherever we can.\nIf any questions arise while working with our products, or if you would like to share your ideas on how we could improve, please make a post on stackoverflow.","tags":null,"title":"How to Get Help","type":"docs","url":"/hugo-docs/net/get_help/","weight":1000,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/get_help/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"How to Get Help","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"16ae425022a2a217f883d1377dae122e","permalink":"/node/get_help/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/get_help/","section":"node","summary":"Thank you for your interest and for using our products!\nOur projects are constantly being improved and supported, striving to provide the highest possible quality. We mainly focus on helping developers of complex enterprise systems, as the systems they create are meant to be used for decades. Our goal is to provide stable and long living code, as well as maximize compatibility wherever we can.\nIf any questions arise while working with our products, or if you would like to share your ideas on how we could improve, please make a post on stackoverflow.","tags":null,"title":"How to Get Help","type":"docs","url":"/hugo-docs/node/get_help/","weight":1000,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/get_help/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"How to Get Help","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"766b796932d10bcbc5daa37e4feab2c3","permalink":"/python/get_help/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/get_help/","section":"python","summary":"Thank you for your interest and for using our products!\nOur projects are constantly being improved and supported, striving to provide the highest possible quality. We mainly focus on helping developers of complex enterprise systems, as the systems they create are meant to be used for decades. Our goal is to provide stable and long living code, as well as maximize compatibility wherever we can.\nIf any questions arise while working with our products, or if you would like to share your ideas on how we could improve, please make a post on stackoverflow.","tags":null,"title":"How to Get Help","type":"docs","url":"/hugo-docs/python/get_help/","weight":1000,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"contribute/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1623159695,"lvl0":"Contributing to Pip.Services","lvl1":"","lvl2":"contribute","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2e005fd240db661653d15a874f7fde1d","permalink":"/contribute/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/contribute/","section":"contribute","summary":"Pip.Services is a big project that includes a large amount of components, templates, examples, and documentation. This project could never have become a reality without the help of our active community.\nWe are always open to new ideas and provide everyone with the opportunity to take part in the project and contribute to it. If you decide to step it up a notch and feel ready to become a part of our team - send us a message!","tags":null,"title":"Contributing to Pip.Services","type":"docs","url":"/hugo-docs/contribute/","weight":1010,"wordcount":453},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"extras/contribute/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Contributing to Pip.Services","lvl1":"","lvl2":"extras","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2982f43d3e37d0ad5436fbfa5713f115","permalink":"/extras/contribute/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/extras/contribute/","section":"extras","summary":"Pip.Services is a big project that includes a large amount of components, templates, examples, and documentation. This project could never have become a reality without the help of our active community.\nWe are always open to new ideas and provide everyone with the opportunity to take part in the project and contribute to it. If you decide to step it up a notch and feel ready to become a part of our team - send us a message!","tags":null,"title":"Contributing to Pip.Services","type":"docs","url":"/hugo-docs/extras/contribute/","weight":1010,"wordcount":453},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/contribute/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Contributing to Pip.Services","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4d267837d2517d5a73274cfad28d4687","permalink":"/golang/contribute/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/contribute/","section":"golang","summary":"Pip.Services is a big project that includes a large amount of components, templates, examples, and documentation. This project could never have become a reality without the help of our active community.\nWe are always open to new ideas and provide everyone with the opportunity to take part in the project and contribute to it. If you decide to step it up a notch and feel ready to become a part of our team - send us a message!","tags":null,"title":"Contributing to Pip.Services","type":"docs","url":"/hugo-docs/golang/contribute/","weight":1010,"wordcount":453},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"java/contribute/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Contributing to Pip.Services","lvl1":"","lvl2":"java","lvl3":null,"lvl4":null,"lvl5":"","objectID":"de8aeb41669f971167c028e7c87b78e4","permalink":"/java/contribute/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/java/contribute/","section":"java","summary":"Pip.Services is a big project that includes a large amount of components, templates, examples, and documentation. This project could never have become a reality without the help of our active community.\nWe are always open to new ideas and provide everyone with the opportunity to take part in the project and contribute to it. If you decide to step it up a notch and feel ready to become a part of our team - send us a message!","tags":null,"title":"Contributing to Pip.Services","type":"docs","url":"/hugo-docs/java/contribute/","weight":1010,"wordcount":453},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/contribute/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Contributing to Pip.Services","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4b00e1415abea229f3366076636fa45b","permalink":"/microservices/contribute/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/microservices/contribute/","section":"microservices","summary":"Pip.Services is a big project that includes a large amount of components, templates, examples, and documentation. This project could never have become a reality without the help of our active community.\nWe are always open to new ideas and provide everyone with the opportunity to take part in the project and contribute to it. If you decide to step it up a notch and feel ready to become a part of our team - send us a message!","tags":null,"title":"Contributing to Pip.Services","type":"docs","url":"/hugo-docs/microservices/contribute/","weight":1010,"wordcount":453},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/contribute/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Contributing to Pip.Services","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b65f17575077d17e5f9bbcae78e862c9","permalink":"/net/contribute/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/contribute/","section":"net","summary":"Pip.Services is a big project that includes a large amount of components, templates, examples, and documentation. This project could never have become a reality without the help of our active community.\nWe are always open to new ideas and provide everyone with the opportunity to take part in the project and contribute to it. If you decide to step it up a notch and feel ready to become a part of our team - send us a message!","tags":null,"title":"Contributing to Pip.Services","type":"docs","url":"/hugo-docs/net/contribute/","weight":1010,"wordcount":453},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/contribute/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Contributing to Pip.Services","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d641782d792115483fd6f3ef1ed77573","permalink":"/node/contribute/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/contribute/","section":"node","summary":"Pip.Services is a big project that includes a large amount of components, templates, examples, and documentation. This project could never have become a reality without the help of our active community.\nWe are always open to new ideas and provide everyone with the opportunity to take part in the project and contribute to it. If you decide to step it up a notch and feel ready to become a part of our team - send us a message!","tags":null,"title":"Contributing to Pip.Services","type":"docs","url":"/hugo-docs/node/contribute/","weight":1010,"wordcount":453},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/contribute/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1622738307,"lvl0":"Contributing to Pip.Services","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9c6c42cdf04be600a3a4a70c3cc29632","permalink":"/python/contribute/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/contribute/","section":"python","summary":"Pip.Services is a big project that includes a large amount of components, templates, examples, and documentation. This project could never have become a reality without the help of our active community.\nWe are always open to new ideas and provide everyone with the opportunity to take part in the project and contribute to it. If you decide to step it up a notch and feel ready to become a part of our team - send us a message!","tags":null,"title":"Contributing to Pip.Services","type":"docs","url":"/hugo-docs/python/contribute/","weight":1010,"wordcount":453},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"home","lang":"ru","lastmod":1618875599,"lvl0":"","lvl1":"","lvl2":"","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3976528693a0108357f4928017600865","permalink":"/ru/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/ru/","section":"","summary":"TODO   This language is not implemented yet!   ","tags":null,"title":"","type":"docs","url":"/hugo-docs/ru/","weight":0,"wordcount":7},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to obtain information about running services.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"AboutOperations","lvl1":"Class used to obtain information about running services.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b1764ed455ae097cdc1e547c5a1c5380","permalink":"/golang/rpc/services/about_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/services/about_operations/","section":"golang","summary":"Implements: RestOperations\nDescription The AboutOperations class is used to obtain information about running services.\nMethods About Gets information from a service. Send JSON string with information about the service.\n (c *AboutOperations) About(res http.ResponseWriter, req *http.Request)\n  res: http.ResponseWriter - an HTTP request req: *http.Request - an HTTP response  GetAboutOperation Gets the service\u0026rsquo;s information.\n (c *AboutOperations) GetAboutOperation() func(res http.ResponseWriter, req *http.Request)\n  returns: func(res http.ResponseWriter, req *http.","tags":null,"title":"AboutOperations","type":"docs","url":"/hugo-docs/golang/rpc/services/about_operations/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to obtain information about running services.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623078433,"lvl0":"AboutOperations","lvl1":"Class used to obtain information about running services.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ba3e1d99dc55c4465fafc8439d5016da","permalink":"/node/rpc/services/about_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/services/about_operations/","section":"node","summary":"Extends: RestOperations\nDescription The AboutOperations class is used to obtain information about running services.\nInstance methods about Gets information from a service. Send JSON string with information about the service.\n public about(req, res): void\n  req: any - an HTTP request res: any - an HTTP response  getAboutOperation Gets the service\u0026rsquo;s information.\n public getAboutOperation(): function\n  returns: function - the about method  setReferences Sets the references of the service.","tags":null,"title":"AboutOperations","type":"docs","url":"/hugo-docs/node/rpc/services/about_operations/","weight":0,"wordcount":76},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to obtain information about running services.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622855096,"lvl0":"AboutOperations","lvl1":"Class used to obtain information about running services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b22b1e446a1f466297d93a297769fef9","permalink":"/python/rpc/services/about_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/services/about_operations/","section":"python","summary":"Implements: RestOperations\nDescription The AboutOperations class is used to obtain information about running services.\nInstance methods get_about Gets information from a service.\n get_about(): str\n  returns: str - JSON string with information about the service.  get_about_operation Gets the service\u0026rsquo;s information.\n get_about_operation(): Callable\n  returns: Callable - get_about method  set_references Sets the references of the service.\n set_references(references: IReferences)\n  references: IReferences - service\u0026rsquo;s references.","tags":null,"title":"AboutOperations","type":"docs","url":"/hugo-docs/python/rpc/services/about_operations/","weight":0,"wordcount":60},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract cache class to provide common cache functionality\n","dir":"net/components/cache/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"AbstractCache","lvl1":"Abstract cache class to provide common cache functionality\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"20ed7e4194f3ebccb1a136a308e93565","permalink":"/net/components/cache/abstract_cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/cache/abstract_cache/","section":"net","summary":"Inherits: IConfigurable, ICache, IReferenceable, IOpenable\nDescription TODO: add description\nProperties Timeout Gets or sets the timeout.\n public long Timeout [ get, set ]\n Instance methods CloseAsync Configures component by passing configuration parameters.\n public virtual Task CloseAsync(string correlationId)\n  correlationId: string - (optional) transaction id to trace execution through call chain.  Configure Parameterized configuration template given as string with dynamic parameters.\n public virtual void Configure(ConfigParams config)","tags":null,"title":"AbstractCache","type":"docs","url":"/hugo-docs/net/components/cache/abstract_cache/","weight":0,"wordcount":289},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO: add description\n","dir":"net/components/logic/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"AbstractController","lvl1":"TODO: add description\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7c95afec5df40d34695f27649f4bb857","permalink":"/net/components/logic/abstract_controller/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/components/logic/abstract_controller/","section":"net","summary":"Inherits: IConfigurable, IReconfigurable\nDescription TODO: add description\nFields _dependencyResolver TODO: add description\n protected _dependencyResolver: DependencyResolver = new DependencyResolver()\n _logger TODO: add description\n protected _logger: CompositeLogger = new CompositeLogger()\n _counters TODO: add description\n protected _counters: CompositeCounters = new CompositeCounters()\n _counters TODO: add description\n protected _cache: ICache = new NullCache()\n  Properties Component TODO: add description\n public abstract string Component [ get ]","tags":null,"title":"AbstractController","type":"docs","url":"/hugo-docs/net/components/logic/abstract_controller/","weight":0,"wordcount":547},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that allows you to check combinations of rules created with AND logical operations.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624247355,"lvl0":"AndRule","lvl1":"Validation rule that allows you to check combinations of rules created with AND logical operations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fb655f6ead5473156516023049eb52fa","permalink":"/golang/commons/validate/and_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/and_rule/","section":"golang","summary":"Description The AndRule class allows you to validate combinations of rules created with AND logical operations.\nImportant points\n When one or more of the combined rules return errors, then this rule returns all the errors that appeared. When none of the combined rules returns errors, then this rule also returns no errors.  Constructors NewAndRule Creates a new validation rule and sets its values.\n NewAndRule(rules \u0026hellip;IValidationRule) *AndRule\n  rules: \u0026hellip;IValidationRule - list of rules to join with AND operator  Methods Validate Validates a given value against this rule.","tags":null,"title":"AndRule","type":"docs","url":"/hugo-docs/golang/commons/validate/and_rule/","weight":0,"wordcount":170},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that allows you to check combinations of rules created with AND logical operations.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"AndRule","lvl1":"Validation rule that allows you to check combinations of rules created with AND logical operations.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c63df24718186be54d933843abd533cd","permalink":"/net/commons/validate/and_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/and_rule/","section":"net","summary":"Inherits: IValidationRule\nDescription The AndRule class allows you to validate combinations of rules created with AND logical operations.\nImportant points\n When one or more of the combined rules return errors, then this rule returns all the errors that appeared. When none of the combined rules returns errors, then this rule also returns no errors.  Constructors Creates a new validation rule and sets its values.\n public AndRule(params IValidationRule[] rules)","tags":null,"title":"AndRule","type":"docs","url":"/hugo-docs/net/commons/validate/and_rule/","weight":0,"wordcount":183},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that allows you to check combinations of rules created with AND logical operations.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"AndRule","lvl1":"Validation rule that allows you to check combinations of rules created with AND logical operations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3c9c75a3228ff77e3e26c8ee6b9238c2","permalink":"/node/commons/validate/and_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/and_rule/","section":"node","summary":"Implements: IValidationRule\nDescription The AndRule class allows you to validate combinations of rules created with AND logical operations.\nImportant points\n When one or more of the combined rules return errors, then this rule returns all the errors that appeared. When none of the combined rules returns errors, then this rule also returns no errors.  Constructors Creates a new validation rule and sets its values.\n public constructor(\u0026hellip;rules: IValidationRule[])","tags":null,"title":"AndRule","type":"docs","url":"/hugo-docs/node/commons/validate/and_rule/","weight":0,"wordcount":176},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that allows you to check combinations of rules created with AND logical operations.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"AndRule","lvl1":"Validation rule that allows you to check combinations of rules created with AND logical operations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e0e97a413a573d2cfa145c91d3407e01","permalink":"/python/commons/validate/and_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/and_rule/","section":"python","summary":"Implements: IValidationRule\nDescription The AndRule class allows you to validate combinations of rules created with AND logical operations.\nImportant points\n When one or more of the combined rules return errors, then this rule returns all the errors that appeared. When none of the combined rules returns errors, then this rule also returns no errors.  Constructors Creates a new validation rule and sets its values.\n AndRule(*rules: IValidationRule)\n  rules: IValidationRule - a list of rules to join with AND operator  Instance methods validate Validates a given value against this rule.","tags":null,"title":"AndRule","type":"docs","url":"/hugo-docs/python/commons/validate/and_rule/","weight":0,"wordcount":172},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/support/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Announcements Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4eaea796fc418ed27c45870948b8e522","permalink":"/microservices/support/announcements/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/support/announcements/","section":"microservices","summary":"Allows system administrators and product owners to communicate to users key system events and product updates. Each announcement:\n  Can be written in multiple languages\n  Can include pictures and document attachments\n  Supports editing lifecycle via status tracking\n  Server implementations: NodeJS\n  Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC\n  Persistence: Memory, Flat Files, MongoDB, Couchbase\n  Deployment options: Monolith, Process, Docker, AWS Lambda","tags":null,"title":"Announcements Microservice","type":"docs","url":"/hugo-docs/microservices/support/announcements/","weight":0,"wordcount":82},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic object that can hold a value of any type. It also provides methods to convert the stored value to different types.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":1400,"keywords":null,"kind":"page","lang":"en","lastmod":1623984262,"lvl0":"AnyValue","lvl1":"Cross-language implementation of a dynamic object that can hold a value of any type. It also provides methods to convert the stored value to different types.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2e54beb971be257a50ede83da2c296c9","permalink":"/golang/commons/data/any_value/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/golang/commons/data/any_value/","section":"golang","summary":"Description The AnyValue class provides a cross-language implementation of a dynamic object that can hold a value of any type. In addition, it provides methods to convert the stored value to different types, such as string or integer.\nConstructors NewAnyValue Creates a new instance of the object and assigns its value.\n NewAnyValue(value interface{}) *AnyValue\n  value: interface{} - (optional) value to initialize this object.  NewEmptyAnyValue  NewEmptyAnyValue() *AnyValue","tags":null,"title":"AnyValue","type":"docs","url":"/hugo-docs/golang/commons/data/any_value/","weight":0,"wordcount":1370},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic object that can hold a value of any type. It also provides methods to convert the stored value to different types.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":1500,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"AnyValue","lvl1":"Cross-language implementation of a dynamic object that can hold a value of any type. It also provides methods to convert the stored value to different types.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"555f5f08f80890e37ce8659472f86c61","permalink":"/net/commons/data/any_value/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/net/commons/data/any_value/","section":"net","summary":"Inherits: ICloneable\nDescription The AnyValue class provides a cross-language implementation of a dynamic object that can hold a value of any type. In addition, it provides methods to convert the stored value to different types, such as string or integer.\nConstructors Creates a new instance of the object and assigns its value.\n public AnyValue(object value = null)\n  value: object - (optional) value to initialize this object.  Creates a new instance of the object and assigns its value.","tags":null,"title":"AnyValue","type":"docs","url":"/hugo-docs/net/commons/data/any_value/","weight":0,"wordcount":1411},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic object that can hold a value of any type. It also provides methods to convert the stored value to different types.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":1400,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"AnyValue","lvl1":"Cross-language implementation of a dynamic object that can hold a value of any type. It also provides methods to convert the stored value to different types.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a327529bed01a8aaec7915cdd0564bbe","permalink":"/node/commons/data/any_value/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/node/commons/data/any_value/","section":"node","summary":"Implements: ICloneable\nDescription The AnyValue class provides a cross-language implementation of a dynamic object that can hold a value of any type. In addition, it provides methods to convert the stored value to different types, such as string or integer.\nConstructors Creates a new instance of the object and assigns its value.\n public constructor(value: any = null)\n  value: any - (optional) value to initialize this object.  Fields value The value stored by this object.","tags":null,"title":"AnyValue","type":"docs","url":"/hugo-docs/node/commons/data/any_value/","weight":0,"wordcount":1302},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic object that can hold a value of any type. It also provides methods to convert the stored value to different types.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":1300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"AnyValue","lvl1":"Cross-language implementation of a dynamic object that can hold a value of any type. It also provides methods to convert the stored value to different types.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"498dae088b2e38935d6e6115823d68e1","permalink":"/python/commons/data/any_value/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/python/commons/data/any_value/","section":"python","summary":"Implements: ICloneable\nDescription The AnyValue class provides a cross-language implementation of a dynamic object that can hold a value of any type. In addition, it provides methods to convert the stored value to different types, such as string or integer.\nConstructors Creates a new instance of the object and assigns its value.\n AnyValue(value: Any = None)\n  value: Any - (optional) value to initialize this object.  Fields value The value stored by this object.","tags":null,"title":"AnyValue","type":"docs","url":"/hugo-docs/python/commons/data/any_value/","weight":0,"wordcount":1238},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic array object that can hold values of any type. It also provides methods to convert the stored values to different types.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":2400,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"AnyValueArray","lvl1":"Cross-language implementation of a dynamic array object that can hold values of any type. It also provides methods to convert the stored values to different types.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"50019fe7c35e6ea4bb29ace9a369e61d","permalink":"/golang/commons/data/any_value_array/","publishdate":"0001-01-01T00:00:00Z","readingtime":12,"relpermalink":"/golang/commons/data/any_value_array/","section":"golang","summary":"Description The AnyValueArray class provides a cross-language implementation of a dynamic array object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.\nConstructors NewAnyValueArray Creates a new instance of the array and assigns its value.\n NewAnyValueArray(values []interface{}) *AnyValueArray\n  values: []interface{} - (optional) values to initialize this array.  NewEmptyAnyValueArray Creates a new instance of the empty array.","tags":null,"title":"AnyValueArray","type":"docs","url":"/hugo-docs/golang/commons/data/any_value_array/","weight":0,"wordcount":2383},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic array object that can hold values of any type. It also provides methods to convert the stored values to different types.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":2600,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"AnyValueArray","lvl1":"Cross-language implementation of a dynamic array object that can hold values of any type. It also provides methods to convert the stored values to different types.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b33b7ceead7df25d1c1fd76c27a922f7","permalink":"/net/commons/data/any_value_array/","publishdate":"0001-01-01T00:00:00Z","readingtime":12,"relpermalink":"/net/commons/data/any_value_array/","section":"net","summary":"Inherits: ICloneable, List\u0026lt;object\u0026gt;\nDescription The AnyValueArray class provides a cross-language implementation of a dynamic array object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.\nConstructors Creates a new instance of the array and assigns its value.\n public AnyValueArray(object[] values)\n  values: object[] - (optional) values to initialize this array.  Creates a new instance of the array and assigns its value.","tags":null,"title":"AnyValueArray","type":"docs","url":"/hugo-docs/net/commons/data/any_value_array/","weight":0,"wordcount":2514},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic array object that can hold values of any type. It also provides methods to convert the stored values to different types.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":2300,"keywords":null,"kind":"page","lang":"en","lastmod":1622675980,"lvl0":"AnyValueArray","lvl1":"Cross-language implementation of a dynamic array object that can hold values of any type. It also provides methods to convert the stored values to different types.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5e16866fcf28bc876f41f48fd79083e5","permalink":"/node/commons/data/any_value_array/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/node/commons/data/any_value_array/","section":"node","summary":"Extends: Array\u0026lt;any\u0026gt;\nImplements: ICloneable\nDescription The AnyValueArray class provides a cross-language implementation of a dynamic array object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.\nConstructors Creates a new instance of the array and assigns its value.\n public constructor(values: any[] = null)\n  values: any[] - (optional) values to initialize this array.","tags":null,"title":"AnyValueArray","type":"docs","url":"/hugo-docs/node/commons/data/any_value_array/","weight":0,"wordcount":2215},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic array object that can hold values of any type. It also provides methods to convert the stored values to different types.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":2300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"AnyValueArray","lvl1":"Cross-language implementation of a dynamic array object that can hold values of any type. It also provides methods to convert the stored values to different types.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8e7f07f7bbf18af10014b4e88ed3dc6b","permalink":"/python/commons/data/any_value_array/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/python/commons/data/any_value_array/","section":"python","summary":"Implements: ICloneable, list\nDescription The AnyValueArray class provides a cross-language implementation of a dynamic array object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.\nConstructors Creates a new instance of the array and assigns its value.\n AnyValueArray(values: Sequence[Any] = None)\n  values: Sequence[Any] - (optional) values to initialize this array.","tags":null,"title":"AnyValueArray","type":"docs","url":"/hugo-docs/python/commons/data/any_value_array/","weight":0,"wordcount":2229},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. It also provides several methods to convert the stored values to different types.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":2400,"keywords":null,"kind":"page","lang":"en","lastmod":1624070117,"lvl0":"AnyValueMap","lvl1":"Cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. It also provides several methods to convert the stored values to different types.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8c56e365ad684206deab4c3f696f60e6","permalink":"/golang/commons/data/any_value_map/","publishdate":"0001-01-01T00:00:00Z","readingtime":12,"relpermalink":"/golang/commons/data/any_value_map/","section":"golang","summary":"Description The AnyValueMap class provides a cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.\nConstructors NewAnyValueMap Creates a new instance of the map and assigns its value.\n NewAnyValueMap(value map[string]interface{}) *AnyValueMap\n  values: map[string]interface{} - (optional) values to initialize this map.  InheritAnyValueMap Creates a new instance of the map and assigns base methods from interface.","tags":null,"title":"AnyValueMap","type":"docs","url":"/hugo-docs/golang/commons/data/any_value_map/","weight":0,"wordcount":2349},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. It also provides several methods to convert the stored values to different types.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":2300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"AnyValueMap","lvl1":"Cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. It also provides several methods to convert the stored values to different types.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"139b04f3ff219cb7a998aadccef9ea65","permalink":"/net/commons/data/any_value_map/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/net/commons/data/any_value_map/","section":"net","summary":"Inherits: ICloneable, Dictionary\u0026lt;string, object\u0026gt;\nDescription The AnyValueMap class provides a cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as bool, integer or datetime.\nConstructors Creates a new instance of the map and assigns its value.\n public AnyValueMap(IDictionary\u0026lt;string, object\u0026gt; values)\n  values: any - (optional) values to initialize this map.","tags":null,"title":"AnyValueMap","type":"docs","url":"/hugo-docs/net/commons/data/any_value_map/","weight":0,"wordcount":2296},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. It also provides several methods to convert the stored values to different types.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":2200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"AnyValueMap","lvl1":"Cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. It also provides several methods to convert the stored values to different types.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"222ef2c53526d93493d2b55389cd3b3c","permalink":"/node/commons/data/any_value_map/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/node/commons/data/any_value_map/","section":"node","summary":"Implements: ICloneable\nDescription The AnyValueMap class provides a cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.\nConstructors Creates a new instance of the map and assigns its value.\n public constructor(values: any = null)\n  values: any - (optional) values to initialize this map.","tags":null,"title":"AnyValueMap","type":"docs","url":"/hugo-docs/node/commons/data/any_value_map/","weight":0,"wordcount":2180},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. It also provides several methods to convert the stored values to different types.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":2200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"AnyValueMap","lvl1":"Cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. It also provides several methods to convert the stored values to different types.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9fc7ed411d4483e27d593a14d89adc99","permalink":"/python/commons/data/any_value_map/","publishdate":"0001-01-01T00:00:00Z","readingtime":10,"relpermalink":"/python/commons/data/any_value_map/","section":"python","summary":"Implements: ICloneable, dict\nDescription The AnyValueMap class provides a cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.\nConstructors Creates a new instance of the map and assigns its value.\n AnyValueMap(values: Any = None)\n  values: Any = None - (optional) values to initialize this map.","tags":null,"title":"AnyValueMap","type":"docs","url":"/hugo-docs/python/commons/data/any_value_map/","weight":0,"wordcount":2117},{"authors":null,"categories":null,"date":-62135596800,"description":"\nDefines a base class used to define various application exceptions.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1624226277,"lvl0":"ApplicationError","lvl1":"\nDefines a base class used to define various application exceptions.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cb4d97bfbd57279a959a4c968dbd8225","permalink":"/golang/commons/errors/application_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/errors/application_error/","section":"golang","summary":"Description The ApplicationError class defines a base class used to define various application exceptions.\nImportant points\n Most languages have own definition of base exception (error) types. However, this class is implemented symmetrically in all languages supported by the PipServices toolkit and allows to create portable implementations and support proper error propagation in microservices calls. Error propagation means that when a microservice implemented in one language calls a microservice(s) implemented in a different language(s), errors are returned throught the entire call chain and restored in their original (or close) type.","tags":null,"title":"ApplicationError","type":"docs","url":"/hugo-docs/golang/commons/errors/application_error/","weight":0,"wordcount":779},{"authors":null,"categories":null,"date":-62135596800,"description":"Factory to recreate exceptions from [ErrorDescription](../error_description) values passed through the wire.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624227017,"lvl0":"ApplicationErrorFactory","lvl1":"Factory to recreate exceptions from [ErrorDescription](../error_description) values passed through the wire.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a45d1cb642ef20d96256104d6263de0f","permalink":"/golang/commons/errors/application_error_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/application_error_factory/","section":"golang","summary":"Description The ApplicationErrorFactory acts as a factory to recreate from ErrorDescription values passed through the wire.\nMethods Create Recreates an ApplicationError object from serialized a ErrorDescription. It tries to restore the original exception type using type or error category fields.\n (c *TApplicationErrorFactory) Create(description *ErrorDescription) *ApplicationError\n  description: *ErrorDescription - serialized error description received as a result of remote call  See also   ApplicationError   ErrorDescription   ","tags":null,"title":"ApplicationErrorFactory","type":"docs","url":"/hugo-docs/golang/commons/errors/application_error_factory/","weight":0,"wordcount":62},{"authors":null,"categories":null,"date":-62135596800,"description":"\nDefines a base class used to define various application exceptions.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ApplicationException","lvl1":"\nDefines a base class used to define various application exceptions.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1cfb38bc3967a627b56944503a1f0ccb","permalink":"/net/commons/errors/application_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/net/commons/errors/application_exception/","section":"net","summary":"Inherits: Exception\nDescription The ApplicationException class defines a base class used to define various application exceptions.\nImportant points\n Most languages have own definition of base exception (error) types. However, this class is implemented symmetrically in all languages supported by the PipServices toolkit and allows to create portable implementations and support proper error propagation in microservices calls. Error propagation means that when a microservice implemented in one language calls a microservice(s) implemented in a different language(s), errors are returned throught the entire call chain and restored in their original (or close) type.","tags":null,"title":"ApplicationException","type":"docs","url":"/hugo-docs/net/commons/errors/application_exception/","weight":0,"wordcount":1015},{"authors":null,"categories":null,"date":-62135596800,"description":"\nDefines a base class used to define various application exceptions.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":1000,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ApplicationException","lvl1":"\nDefines a base class used to define various application exceptions.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ca6525ccbdc13771fb59dc101c37aa97","permalink":"/node/commons/errors/application_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/node/commons/errors/application_exception/","section":"node","summary":"Extends: Error\nDescription The ApplicationException class defines a base class used to define various application exceptions.\nImportant points\n Most languages have own definition of base exception (error) types. However, this class is implemented symmetrically in all languages supported by the PipServices toolkit and allows to create portable implementations and support proper error propagation in microservices calls. Error propagation means that when a microservice implemented in one language calls a microservice(s) implemented in a different language(s), errors are returned throught the entire call chain and restored in their original (or close) type.","tags":null,"title":"ApplicationException","type":"docs","url":"/hugo-docs/node/commons/errors/application_exception/","weight":0,"wordcount":990},{"authors":null,"categories":null,"date":-62135596800,"description":"\nDefines a base class used to define various application exceptions.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":1000,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ApplicationException","lvl1":"\nDefines a base class used to define various application exceptions.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"22c915f2bf54f639ce0656a4ca9c9a35","permalink":"/python/commons/errors/application_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/python/commons/errors/application_exception/","section":"python","summary":"Implements: Exception\nDescription The ApplicationException class defines a base class used to define various application exceptions.\nImportant points\n Most languages have own definition of base exception (error) types. However, this class is implemented symmetrically in all languages supported by the PipServices toolkit and allows to create portable implementations and support proper error propagation in microservices calls. Error propagation means that when a microservice implemented in one language calls a microservice(s) implemented in a different language(s), errors are returned throught the entire call chain and restored in their original (or close) type.","tags":null,"title":"ApplicationException","type":"docs","url":"/hugo-docs/python/commons/errors/application_exception/","weight":0,"wordcount":977},{"authors":null,"categories":null,"date":-62135596800,"description":"Factory to recreate exceptions from [ErrorDescription](../error_description) values passed through the wire.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623182740,"lvl0":"ApplicationExceptionFactory","lvl1":"Factory to recreate exceptions from [ErrorDescription](../error_description) values passed through the wire.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c6c095867eaff6704cc232767adead4c","permalink":"/net/commons/errors/application_exception_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/application_exception_factory/","section":"net","summary":"Description The ApplicationExceptionFactory acts as a factory to recreate from ErrorDescription values passed through the wire.\nStatic methods Create Recreates ApplicationException object from serialized ErrorDescription. It tries to restore original exception type using type or error category fields.\n public static ApplicationException Create(ErrorDescription description)\n  description: ErrorDescription - a serialized error description received as a result of remote call returns: ApplicationException - new instance of the ApplicationException  See also   ApplicationException   ErrorDescription   ","tags":null,"title":"ApplicationExceptionFactory","type":"docs","url":"/hugo-docs/net/commons/errors/application_exception_factory/","weight":0,"wordcount":69},{"authors":null,"categories":null,"date":-62135596800,"description":"Factory to recreate exceptions from [ErrorDescription](../error_description) values passed through the wire.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623182740,"lvl0":"ApplicationExceptionFactory","lvl1":"Factory to recreate exceptions from [ErrorDescription](../error_description) values passed through the wire.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f19a21e9c786613ff764711ef60245f8","permalink":"/node/commons/errors/application_exception_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/application_exception_factory/","section":"node","summary":"Description The ApplicationExceptionFactory acts as a factory to recreate from ErrorDescription values passed through the wire.\nStatic methods create Recreates ApplicationException object from serialized ErrorDescription. It tries to restore original exception type using type or error category fields.\n public static create(description: ErrorDescription): ApplicationException\n  description: ErrorDescription - a serialized error description received as a result of remote call returns: ApplicationException - new instance of the ApplicationException  See also   ApplicationException   ErrorDescription   ","tags":null,"title":"ApplicationExceptionFactory","type":"docs","url":"/hugo-docs/node/commons/errors/application_exception_factory/","weight":0,"wordcount":69},{"authors":null,"categories":null,"date":-62135596800,"description":"Factory to recreate exceptions from [ErrorDescription](../error_description) values passed through the wire.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623182740,"lvl0":"ApplicationExceptionFactory","lvl1":"Factory to recreate exceptions from [ErrorDescription](../error_description) values passed through the wire.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2df69bce021593e8b5049c10fa730e19","permalink":"/python/commons/errors/application_exception_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/application_exception_factory/","section":"python","summary":"Description The ApplicationExceptionFactory acts as a factory to recreate from ErrorDescription values passed through the wire.\nStatic methods create Recreates ApplicationException object from serialized ErrorDescription. It tries to restore original exception type using type or error category fields.\n static create(description: ErrorDescription): ApplicationException\n  description: ErrorDescription - a serialized error description received as a result of remote call returns: ApplicationException - new instance of the ApplicationException  See also   ApplicationException   ErrorDescription   ","tags":null,"title":"ApplicationExceptionFactory","type":"docs","url":"/hugo-docs/python/commons/errors/application_exception_factory/","weight":0,"wordcount":68},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Applications Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e22329ece3510c39690d478632952cc1","permalink":"/microservices/content/applications/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/applications/","section":"microservices","summary":"Keeps a list of supported applications that are referenced from other content microservices.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Golang, Dart  ","tags":null,"title":"Applications Microservice","type":"docs","url":"/hugo-docs/microservices/content/applications/","weight":0,"wordcount":43},{"authors":null,"categories":null,"date":-62135596800,"description":"The ArrayConverter class provides methods to create an array from a set of values.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623967016,"lvl0":"ArrayConverter","lvl1":"The ArrayConverter class provides methods to create an array from a set of values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"da0b6cd7fe1b765dfd25a4f2c90af6ff","permalink":"/golang/commons/convert/array_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/convert/array_converter/","section":"golang","summary":"Description The ArrayConverter class provides methods to create an array from a set of values. These values can be in the form of a list, a single value or a string of comma-delimited values.\nMethods ListToArray Converts a list into an array object with empty array as default. Strings with comma-delimited values are split into an array of strings. See ToArray\n ListToArray(value interface{}) []interface{}\n  value: interface{} - list to convert.","tags":null,"title":"ArrayConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/array_converter/","weight":0,"wordcount":232},{"authors":null,"categories":null,"date":-62135596800,"description":"The ArrayConverter class provides methods to create an array from a set of values.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ArrayConverter","lvl1":"The ArrayConverter class provides methods to create an array from a set of values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"01bbdcd360bc46142198f6ff20213792","permalink":"/net/commons/convert/array_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/convert/array_converter/","section":"net","summary":"Description The ArrayConverter class provides methods to create an array from a set of values. These values can be in the form of a list, a single value or a string of comma-delimited values.\nStatic methods ListToArray! TODO: this method is not realized yet for this language\nConverts a list into array object with empty array as default. Strings with comma-delimited values are split into array of strings. See ToArray","tags":null,"title":"ArrayConverter","type":"docs","url":"/hugo-docs/net/commons/convert/array_converter/","weight":0,"wordcount":250},{"authors":null,"categories":null,"date":-62135596800,"description":"The ArrayConverter class provides methods to create an array from a set of values.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623169877,"lvl0":"ArrayConverter","lvl1":"The ArrayConverter class provides methods to create an array from a set of values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c4120fa6a9e12a0acb2a8d85f30ca6cd","permalink":"/node/commons/convert/array_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/convert/array_converter/","section":"node","summary":"Description The ArrayConverter class provides methods to create an array from a set of values. These values can be in the form of a list, a single value or a string of comma-delimited values.\nStatic methods listToArray Converts a list into array object with empty array as default. Strings with comma-delimited values are split into array of strings. See toArray\n public static listToArray(value: any): any[]\n  value: any - the list to convert.","tags":null,"title":"ArrayConverter","type":"docs","url":"/hugo-docs/node/commons/convert/array_converter/","weight":0,"wordcount":254},{"authors":null,"categories":null,"date":-62135596800,"description":"The ArrayConverter class provides methods to create an array from a set of values.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"ArrayConverter","lvl1":"The ArrayConverter class provides methods to create an array from a set of values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7ac156b92818a890b763ccb4d61a3441","permalink":"/python/commons/convert/array_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/convert/array_converter/","section":"python","summary":"Description The ArrayConverter class provides methods to create an array from a set of values. These values can be in the form of a list, a single value or a string of comma-delimited values.\nStatic methods list_to_array Converts a list into an array object, with empty array as default. Strings with comma-delimited values are split into array of strings. See to_array\n static list_to_array(value: Any): List[Any]\n  value: Any - the list to convert.","tags":null,"title":"ArrayConverter","type":"docs","url":"/hugo-docs/python/commons/convert/array_converter/","weight":0,"wordcount":247},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate arrays.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624247593,"lvl0":"ArraySchema","lvl1":"Schema to validate arrays.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1106f49f6ae4fa7b4ea592cfa180e57b","permalink":"/golang/commons/validate/array_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/array_schema/","section":"golang","summary":"Implements: Schema\nDescription The ArraySchema class allows you to validate arrays based on a specified validation rule.\nConstructors NewArraySchema Creates a new validation rule and sets its values. See TypeCode\n NewArraySchema(valueType interface{}) *ArraySchema\n  valueType: interface{} - type of array elements. Null means that elements may have any type.  Methods ValueType Gets the type of array elements. Null means that elements may have any type.\n (c *ArraySchema) ValueType() interface{}","tags":null,"title":"ArraySchema","type":"docs","url":"/hugo-docs/golang/commons/validate/array_schema/","weight":0,"wordcount":172},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate arrays.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ArraySchema","lvl1":"Schema to validate arrays.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d8c163fa40b13bcfd29454f948157212","permalink":"/net/commons/validate/array_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/array_schema/","section":"net","summary":"Inherits: Schema\nDescription The ArraySchema class allows you to validate arrays based on a specified validation rule.\nConstructors Creates a new validation rule and sets its values. See TypeCode\n public ArraySchema(object valueType)\n  valueType: object - a type of array elements. Null means that elements may have any type.  Creates a new instance of validation schema.\n public ArraySchema()\n Properties ValueType Gets and Sets the type of array elements.","tags":null,"title":"ArraySchema","type":"docs","url":"/hugo-docs/net/commons/validate/array_schema/","weight":0,"wordcount":165},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate arrays.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ArraySchema","lvl1":"Schema to validate arrays.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5a142231d6e711b05a87af05ea95d0cb","permalink":"/node/commons/validate/array_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/array_schema/","section":"node","summary":"Extends: Schema\nDescription The ArraySchema class allows you to validate arrays based on a specified validation rule.\nConstructors Creates a new validation rule and sets its values. See TypeCode\n public constructor(valueType?: any, required?: boolean, rules?: IValidationRule[])\n  valueType: any - a type of array elements. Null means that elements may have any type. required: boolean - (optional) true to always require non-null values. rules: IValidationRule[] - (optional) a list with validation rules.","tags":null,"title":"ArraySchema","type":"docs","url":"/hugo-docs/node/commons/validate/array_schema/","weight":0,"wordcount":202},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate arrays.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"ArraySchema","lvl1":"Schema to validate arrays.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"18aab3aab03da344b22ff8814b282727","permalink":"/python/commons/validate/array_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/array_schema/","section":"python","summary":"Implements: Schema\nDescription The ArraySchema class allows you to validate arrays based on a specified validation rule.\nConstructors Creates a new validation rule and sets its values. See TypeCode\n ArraySchema(valueType: Any = None, required: bool = None, rules: List[IValidationRule] = None)\n  valueType: Any - a type of array elements. Null means that elements may have any type. required: bool - (optional) true to always require non-None values. rules: List[IValidationRule] - (optional) a list with validation rules.","tags":null,"title":"ArraySchema","type":"docs","url":"/hugo-docs/python/commons/validate/array_schema/","weight":0,"wordcount":200},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that checks that at least one of the object properties exists.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624247720,"lvl0":"AtLeastOneExistsRule","lvl1":"Validation rule that checks that at least one of the object properties exists.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8f31cc40582d2e6cbe37d1ee78a9fe20","permalink":"/golang/commons/validate/at_least_one_exists_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/at_least_one_exists_rule/","section":"golang","summary":"Description The AtLeastOneExistsRule class allows you to check that given a set of properties, at least one of them exists.\nConstructors NewAtLeastOneExistsRule Creates a new validation rule and sets its values\n NewAtLeastOneExistsRule(properties \u0026hellip;string) *AtLeastOneExistsRule\n  properties: \u0026hellip;string - list of property names where at least one property must exist  Methods Validate Validates a given value against this rule.\n (c *AtLeastOneExistsRule) Validate(path string, schema ISchema, value interface{}) []*ValidationResult","tags":null,"title":"AtLeastOneExistsRule","type":"docs","url":"/hugo-docs/golang/commons/validate/at_least_one_exists_rule/","weight":0,"wordcount":142},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that checks that at least one of the object properties exists.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"AtLeastOneExistsRule","lvl1":"Validation rule that checks that at least one of the object properties exists.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ee1798d1ff9fee69aadd71d7480af9ff","permalink":"/net/commons/validate/at_least_one_exists_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/at_least_one_exists_rule/","section":"net","summary":"Inherits: IValidationRule\nDescription The AtLeastOneExistsRule class allows you to check that given a set of properties, at least one of them exists.\nConstructors Creates a new validation rule and sets its values\n public AtLeastOneExistsRule(params string[] properties)\n  properties: string[] - a list of property names where at least one property must exist  Instance methods Validate Validates a given value against this rule.\n public void Validate(string path, Schema schema, object value, List\u0026lt;ValidationResult\u0026gt; results)","tags":null,"title":"AtLeastOneExistsRule","type":"docs","url":"/hugo-docs/net/commons/validate/at_least_one_exists_rule/","weight":0,"wordcount":153},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that checks that at least one of the object properties exists.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"AtLeastOneExistsRule","lvl1":"Validation rule that checks that at least one of the object properties exists.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b443a43b9bddf707f94d5eb14af6d21d","permalink":"/node/commons/validate/at_least_one_exists_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/at_least_one_exists_rule/","section":"node","summary":"Implements: IValidationRule\nDescription The AtLeastOneExistsRule class allows you to check that given a set of properties, at least one of them exists.\nConstructors Creates a new validation rule and sets its values\n public constructor(\u0026hellip;properties: string[])\n  properties: string[] - a list of property names where at least one property must exist  Instance methods validate Validates a given value against this rule.\n public validate(path: string, schema: Schema, value: any, results: ValidationResult[]): void","tags":null,"title":"AtLeastOneExistsRule","type":"docs","url":"/hugo-docs/node/commons/validate/at_least_one_exists_rule/","weight":0,"wordcount":153},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that checks that at least one of the object properties exists.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"AtLeastOneExistsRule","lvl1":"Validation rule that checks that at least one of the object properties exists.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5c9ffc2bd1b4e21022d2d585f20ba6e5","permalink":"/python/commons/validate/at_least_one_exists_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/at_least_one_exists_rule/","section":"python","summary":"Implements: IValidationRule\nDescription The AtLeastOneExistsRule class allows you to check that given a set of properties, at least one of them exists.\nConstructors Creates a new validation rule and sets its values\n AtLeastOneExistsRule(*properties: str)\n  properties: str - a list of property names where at least one property must exist  Instance methods validate Validates a given value against this rule.\n validate(path: str, schema: Schema, value: Any, results: List[ValidationResult])","tags":null,"title":"AtLeastOneExistsRule","type":"docs","url":"/hugo-docs/python/commons/validate/at_least_one_exists_rule/","weight":0,"wordcount":146},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/auth/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Auth","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8077644ae16c24432f93ea07958b8188","permalink":"/dart/components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/auth/","section":"dart","summary":"","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/dart/components/auth/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains interfaces and classes for credential stores, which can be used to save or retrieve credential parameters. \n","dir":"golang/components/auth/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1623426469,"lvl0":"Auth","lvl1":"\nThis package contains interfaces and classes for credential stores, which can be used to save or retrieve credential parameters. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"acaf895ac72b9bb40755e5053011468a","permalink":"/golang/components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/auth/","section":"golang","summary":"Important points\n Examples of credentials are passwords, logins, application keys, and secrets. Credentials' information is usually linked with connection parameters. Configuration and connection parameters are stored separately from authentication information as they need added security and protection  Interfaces ICredentialStore Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\nClasses CredentialParams Contains credentials used to authenticate against external services. They are used together with connection parameters, but usually stored in a separate store, protected from unauthorized access.","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/golang/components/auth/","weight":0,"wordcount":131},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains interfaces and classes for credential stores, which can be used to save or retrieve credential parameters. \n","dir":"net/components/auth/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621575585,"lvl0":"Auth","lvl1":"\nThis package contains interfaces and classes for credential stores, which can be used to save or retrieve credential parameters. \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5b3b86a604447f7645a6bd8d7ab1d002","permalink":"/net/components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/auth/","section":"net","summary":"Important points\n Examples of credentials are passwords, logins, application keys, and secrets. Credentials' information is usually linked with connection parameters. Configuration and connection parameters are stored separately from authentication information as they need added security and protection  Interfaces ICredentialStore Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\nClasses CredentialParams Contains credentials used to authenticate against external services. They are used together with connection parameters, but usually stored in a separate store, protected from unauthorized access.","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/net/components/auth/","weight":0,"wordcount":131},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains interfaces and classes for credential stores, which can be used to save or retrieve credential parameters. \n","dir":"node/components/auth/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Auth","lvl1":"\nThis package contains interfaces and classes for credential stores, which can be used to save or retrieve credential parameters. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7fcd3409e12e28f739ee972e7f1a5d57","permalink":"/node/components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/auth/","section":"node","summary":"Important points\n Examples of credentials are passwords, logins, application keys, and secrets. Credentials' information is usually linked with connection parameters. Configuration and connection parameters are stored separately from authentication information as they need added security and protection  Interfaces ICredentialStore Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\nClasses CredentialParams Contains credentials used to authenticate against external services. They are used together with connection parameters, but usually stored in a separate store, protected from unauthorized access.","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/node/components/auth/","weight":0,"wordcount":131},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains interfaces and classes for credential stores, which can be used to save or retrieve credential parameters. \n","dir":"python/components/auth/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Auth","lvl1":"\nThis package contains interfaces and classes for credential stores, which can be used to save or retrieve credential parameters. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fb9dccb28019202c80973198f2035ffe","permalink":"/python/components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/auth/","section":"python","summary":"Important points\n Examples of credentials are passwords, logins, application keys, and secrets. Credentials' information is usually linked with connection parameters. Configuration and connection parameters are stored separately from authentication information as they need added security and protection  Interfaces ICredentialStore Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\nClasses CredentialParams Contains credentials used to authenticate against external services. They are used together with connection parameters, but usually stored in a separate store, protected from unauthorized access.","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/python/components/auth/","weight":0,"wordcount":131},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors due to improper user requests. \n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624227201,"lvl0":"BadRequestError","lvl1":"Errors due to improper user requests. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4ad2f6837e9a55c01d76af7b8bcc8bda","permalink":"/golang/commons/errors/bad_request_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/bad_request_error/","section":"golang","summary":"Description The BadRequestError class is used to manage errors created by improper user requests. For example, when there are missing or incorrect parameters in the request.\nConstructors NewBadRequestError Creates an error instance and assigns its values.\n NewBadRequestError(correlationId, code, message string) *ApplicationError\n  correlation_id: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"BadRequestError","type":"docs","url":"/hugo-docs/golang/commons/errors/bad_request_error/","weight":0,"wordcount":75},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors due to improper user requests. \n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"BadRequestException","lvl1":"Errors due to improper user requests. \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"03dc8a611bf14753c10f9c4b593a5a08","permalink":"/net/commons/errors/bad_request_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/bad_request_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The BadRequestException class is used to manage errors created by improper user requests. For example, when there are missing or incorrect parameters in the request.\nConstructors Creates an error instance and assigns its values.\n public BadRequestException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code.","tags":null,"title":"BadRequestException","type":"docs","url":"/hugo-docs/net/commons/errors/bad_request_exception/","weight":0,"wordcount":145},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors due to improper user requests. \n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"BadRequestException","lvl1":"Errors due to improper user requests. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6bd180649e3f9434895bfc6c50a58c0b","permalink":"/node/commons/errors/bad_request_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/bad_request_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The BadRequestException class is used to manage errors created by improper user requests. For example, when there are missing or incorrect parameters in the request.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code.","tags":null,"title":"BadRequestException","type":"docs","url":"/hugo-docs/node/commons/errors/bad_request_exception/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors due to improper user requests. \n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620406151,"lvl0":"BadRequestException","lvl1":"Errors due to improper user requests. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a1b38b1b9a27fb605eaaca1111a26d9b","permalink":"/python/commons/errors/bad_request_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/bad_request_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The BadRequestException class is used to manage errors created by improper user requests. For example, when there are missing or incorrect parameters in the request.\nConstructors Creates an error instance and assigns its values.\n BadRequestException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code.","tags":null,"title":"BadRequestException","type":"docs","url":"/hugo-docs/python/commons/errors/bad_request_exception/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/iot/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Beacons Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aea0fe4a84907c7d590798de281c386a","permalink":"/microservices/iot/beacons/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/iot/beacons/","section":"microservices","summary":"Keeps list of beacons.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Beacons Microservice","type":"docs","url":"/hugo-docs/microservices/iot/beacons/","weight":0,"wordcount":31},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Blob Attachments Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d05aba9a679a32140e1367366b86022b","permalink":"/microservices/content/attachments/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/attachments/","section":"microservices","summary":"Records all documents that attached to a particilar blob. When last document is disattached, the blob gets removed.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Dart  ","tags":null,"title":"Blob Attachments Microservice","type":"docs","url":"/hugo-docs/microservices/content/attachments/","weight":0,"wordcount":47},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Blobs Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e166901c3848ab93a156e0c5c69be3e1","permalink":"/microservices/infrastructure/blobs/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/blobs/","section":"microservices","summary":"Stores large binary blobs, manages references to them from other entities and serves stored content to users. Most often binary blobs are used to store images and document attachments.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase, AWS S3 Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .NET, Golang, Dart  ","tags":null,"title":"Blobs Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/blobs/","weight":0,"wordcount":62},{"authors":null,"categories":null,"date":-62135596800,"description":"The BooleanConverter class allows you to convert different values to boolean values using extended conversion rules.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623967441,"lvl0":"BooleanConverter","lvl1":"The BooleanConverter class allows you to convert different values to boolean values using extended conversion rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e6ec8e0592d96e256ef72be16e0219fa","permalink":"/golang/commons/convert/boolean_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/convert/boolean_converter/","section":"golang","summary":"Description The BooleanConverter class allows you to convert different values to boolean values using the following rules:\n  Numbers: \u0026lt;\u0026gt;0 are true, =0 are false\n  Strings: \u0026ldquo;true\u0026rdquo;, \u0026ldquo;yes\u0026rdquo;, \u0026ldquo;T\u0026rdquo;, \u0026ldquo;Y\u0026rdquo;, \u0026ldquo;1\u0026rdquo; are true; \u0026ldquo;false\u0026rdquo;, \u0026ldquo;no\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;N\u0026rdquo; are false\n  DateTime: \u0026lt;\u0026gt;0 total milliseconds are true, =0 are false\n  Methods ToBoolean Converts value into boolean or returns false when conversion is not possible.\n ToBoolean(value interface{}) bool","tags":null,"title":"BooleanConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/boolean_converter/","weight":0,"wordcount":184},{"authors":null,"categories":null,"date":-62135596800,"description":"The BooleanConverter class allows you to convert different values to boolean values using extended conversion rules.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"BooleanConverter","lvl1":"The BooleanConverter class allows you to convert different values to boolean values using extended conversion rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"550abef9e514be64fcc03caac2efb86c","permalink":"/net/commons/convert/boolean_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/convert/boolean_converter/","section":"net","summary":"Description The BooleanConverter class allows you to convert different values to boolean values using the following rules:\n  Numbers: \u0026lt;\u0026gt;0 are true, =0 are false\n  Strings: \u0026ldquo;true\u0026rdquo;, \u0026ldquo;yes\u0026rdquo;, \u0026ldquo;T\u0026rdquo;, \u0026ldquo;Y\u0026rdquo;, \u0026ldquo;1\u0026rdquo; are true; \u0026ldquo;false\u0026rdquo;, \u0026ldquo;no\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;N\u0026rdquo; are false\n  DateTime: \u0026lt;\u0026gt;0 total milliseconds are true, =0 are false\n  Static methods ToBoolean Converts value into boolean or returns false when conversion is not possible.","tags":null,"title":"BooleanConverter","type":"docs","url":"/hugo-docs/net/commons/convert/boolean_converter/","weight":0,"wordcount":219},{"authors":null,"categories":null,"date":-62135596800,"description":"The BooleanConverter class allows you to convert different values to boolean values using extended conversion rules.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"BooleanConverter","lvl1":"The BooleanConverter class allows you to convert different values to boolean values using extended conversion rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"94f6507b30cf56ef0a397d7086a6728d","permalink":"/node/commons/convert/boolean_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/convert/boolean_converter/","section":"node","summary":"Description The BooleanConverter class allows you to convert different values to boolean values using the following rules:\n  Numbers: \u0026lt;\u0026gt;0 are true, =0 are false\n  Strings: \u0026ldquo;true\u0026rdquo;, \u0026ldquo;yes\u0026rdquo;, \u0026ldquo;T\u0026rdquo;, \u0026ldquo;Y\u0026rdquo;, \u0026ldquo;1\u0026rdquo; are true; \u0026ldquo;false\u0026rdquo;, \u0026ldquo;no\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;N\u0026rdquo; are false\n  DateTime: \u0026lt;\u0026gt;0 total milliseconds are true, =0 are false\n  Static methods toBoolean Converts value into boolean or returns false when conversion is not possible.","tags":null,"title":"BooleanConverter","type":"docs","url":"/hugo-docs/node/commons/convert/boolean_converter/","weight":0,"wordcount":221},{"authors":null,"categories":null,"date":-62135596800,"description":"The BooleanConverter class allows you to convert different values to boolean values using extended conversion rules.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"BooleanConverter","lvl1":"The BooleanConverter class allows you to convert different values to boolean values using extended conversion rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"20c666493393f22395fed8b8a78834ad","permalink":"/python/commons/convert/boolean_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/boolean_converter/","section":"python","summary":"Description The BooleanConverter class allows you to convert different values to boolean values using the following rules:\n  Numbers: \u0026lt;\u0026gt;0 are true, =0 are false\n  Strings: \u0026ldquo;true\u0026rdquo;, \u0026ldquo;yes\u0026rdquo;, \u0026ldquo;T\u0026rdquo;, \u0026ldquo;Y\u0026rdquo;, \u0026ldquo;1\u0026rdquo; are true; \u0026ldquo;false\u0026rdquo;, \u0026ldquo;no\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;N\u0026rdquo; are false\n  DateTime: \u0026lt;\u0026gt;0 total milliseconds are true, =0 are false\n  Static methods to_boolean Converts value into boolean or returns false when conversion is not possible.","tags":null,"title":"BooleanConverter","type":"docs","url":"/hugo-docs/python/commons/convert/boolean_converter/","weight":0,"wordcount":211},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Build","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"197c9812af563633a1177e9e5a514ca7","permalink":"/dart/components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/build/","section":"dart","summary":"","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/dart/components/build/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Build package contains interfaces and classes used to implement the \"factory design pattern\". \n","dir":"golang/components/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1623426469,"lvl0":"Build","lvl1":"\nThe Build package contains interfaces and classes used to implement the \"factory design pattern\". \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"18b6f3dc54126b5d5c36ffe532990345","permalink":"/golang/components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/build/","section":"golang","summary":" Interfaces IFactory Interface for component factories.\nClasses CompositeFactory Aggregates multiple factories into a single factory component.\nCreateException Error raised when factory is not able to create the requested component.\nFactory Basic component factory that creates components using registered types and factory functions.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/golang/components/build/","weight":0,"wordcount":42},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a container factory class used to create default container components. Examples of these components are loggers, counters, caches, and locks.\n","dir":"golang/container/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624022469,"lvl0":"Build","lvl1":"This package contains a container factory class used to create default container components. Examples of these components are loggers, counters, caches, and locks.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"54963e4600ff19d508736eafe5a54441","permalink":"/golang/container/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/build/","section":"golang","summary":" Classes DefaultContainerFactory Creates default container components (loggers, counters, caches, locks, etc.) based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/golang/container/build/","weight":0,"wordcount":15},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create Elasticsearch components.\n","dir":"golang/elasticsearch/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624316020,"lvl0":"Build","lvl1":"This package contains classes used to create Elasticsearch components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b992bbbaedabf1aff52c6e6ccecc0ec0","permalink":"/golang/elasticsearch/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/elasticsearch/build/","section":"golang","summary":" Classes DefaultElasticSearchFactory Creates ElasticSearch components based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/golang/elasticsearch/build/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes used to create message components.\n","dir":"golang/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Build","lvl1":"This package contains interfaces and classes used to create message components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"743f4db06210056676078a84fe9db3b3","permalink":"/golang/messaging/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/build/","section":"golang","summary":" Interfaces IMessageQueueFactory Creates message queue componens.\nClasses DefaultMessagingFactory Creates MemoryMessageQueue components by their descriptors. The name of the created message queue is taken from its descriptor.\nMemoryMessageQueueFactory Creates MemoryMessageQueue components by their descriptors. The name of the created message queue is taken from its descriptor.\nMessageQueueFactory Creates IMessageQueue components by their descriptors. The name of created message queue is taken from its descriptor.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/golang/messaging/build/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to create RPC components.\n","dir":"golang/rpc/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624305939,"lvl0":"Build","lvl1":"This package contains a class used to create RPC components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e94bda2bcb0254d89e090a0f7fb100b0","permalink":"/golang/rpc/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/build/","section":"golang","summary":" Classes DefaultRpcFactory Creates RPC components by their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/golang/rpc/build/","weight":0,"wordcount":8},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Build package contains interfaces and classes used to implement the \"factory design pattern\". \n","dir":"net/components/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621575585,"lvl0":"Build","lvl1":"\nThe Build package contains interfaces and classes used to implement the \"factory design pattern\". \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7562a64d0e8a17cde1ffb87a0090538c","permalink":"/net/components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/build/","section":"net","summary":" Interfaces IFactory Interface for component factories.\nClasses CompositeFactory Aggregates multiple factories into a single factory component.\nCreateException Error raised when factory is not able to create the requested component.\nFactory Basic component factory that creates components using registered types and factory functions.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/net/components/build/","weight":0,"wordcount":42},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Build package contains interfaces and classes used to implement the \"factory design pattern\". \n","dir":"node/components/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Build","lvl1":"\nThe Build package contains interfaces and classes used to implement the \"factory design pattern\". \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4d8a76bc6c2bc86c9340577fc0205b01","permalink":"/node/components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/build/","section":"node","summary":" Interfaces IFactory Interface for component factories.\nClasses CompositeFactory Aggregates multiple factories into a single factory component.\nCreateException Error raised when factory is not able to create the requested component.\nFactory Basic component factory that creates components using registered types and factory functions.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/components/build/","weight":0,"wordcount":42},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a container factory class used to create default container components. Examples of these components are loggers, counters, caches, and locks.\n","dir":"node/container/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622849575,"lvl0":"Build","lvl1":"This package contains a container factory class used to create default container components. Examples of these components are loggers, counters, caches, and locks.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"284f0817f3ab5a8abd96f297d9adb3be","permalink":"/node/container/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/build/","section":"node","summary":" Classes DefaultContainerFactory Creates default container components (loggers, counters, caches, locks, etc.) based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/container/build/","weight":0,"wordcount":15},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create Elasticsearch components.\n","dir":"node/elasticsearch/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622670875,"lvl0":"Build","lvl1":"This package contains classes used to create Elasticsearch components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"37dd930b51c166a92baeebae76980cf0","permalink":"/node/elasticsearch/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/elasticsearch/build/","section":"node","summary":" Classes DefaultElasticSearchFactory Creates ElasticSearch components based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/elasticsearch/build/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes used to create message components.\n","dir":"node/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622571702,"lvl0":"Build","lvl1":"This package contains interfaces and classes used to create message components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4cde00765ea0898af13484a473bad99f","permalink":"/node/messaging/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/build/","section":"node","summary":" Interfaces IMessageQueueFactory Creates message queue componens.\nClasses DefaultMessagingFactory Creates MemoryMessageQueue components by their descriptors. The name of the created message queue is taken from its descriptor.\nMemoryMessageQueueFactory Creates MemoryMessageQueue components by their descriptors. The name of the created message queue is taken from its descriptor.\nMessageQueueFactory Creates IMessageQueue components by their descriptors. The name of created message queue is taken from its descriptor.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/messaging/build/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to build MySQL components.\n","dir":"node/mysql/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622669208,"lvl0":"Build","lvl1":"This package contains classes used to build MySQL components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d2f195cd40fdd47beaf5dd1c775635e3","permalink":"/node/mysql/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/mysql/build/","section":"node","summary":" Classes DefaultMySqlFactory Creates MySQL components based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/mysql/build/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create Postgres components based on their descriptors.\n","dir":"node/postgres/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622674545,"lvl0":"Build","lvl1":"This package contains classes used to create Postgres components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c402994eecd7258d0508339642018475","permalink":"/node/postgres/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/postgres/build/","section":"node","summary":" Classes DefaultPostgresFactory Creates Postgres components based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/postgres/build/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"The Build package contains classes used to create Prometheus components.\n","dir":"node/prometheus/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622665544,"lvl0":"Build","lvl1":"The Build package contains classes used to create Prometheus components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"542027220c878559ace20e9a02437dfd","permalink":"/node/prometheus/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/prometheus/build/","section":"node","summary":" Classes DefaultPrometheusFactory Creates Prometheus components by their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/prometheus/build/","weight":0,"wordcount":8},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to create RPC components.\n","dir":"node/rpc/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1623078433,"lvl0":"Build","lvl1":"This package contains a class used to create RPC components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3d0eacf84262173800e39b2284b73815","permalink":"/node/rpc/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/build/","section":"node","summary":" Classes DefaultRpcFactory Creates RPC components by their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/rpc/build/","weight":0,"wordcount":8},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to create SQLServer components based on their descriptors.\n","dir":"node/sqlserver/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622732567,"lvl0":"Build","lvl1":"This package contains a class used to create SQLServer components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"545f6b89cdac763ff823dee4e35950b0","permalink":"/node/sqlserver/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/sqlserver/build/","section":"node","summary":" Classes DefaultSqlServerFactory Creates SQLServer components by their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/sqlserver/build/","weight":0,"wordcount":8},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Build package contains interfaces and classes used to implement the \"factory design pattern\". \n","dir":"python/components/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Build","lvl1":"\nThe Build package contains interfaces and classes used to implement the \"factory design pattern\". \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e306bc2a7881365705c9a7bb91f6b932","permalink":"/python/components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/build/","section":"python","summary":" Interfaces IFactory Interface for component factories.\nClasses CompositeFactory Aggregates multiple factories into a single factory component.\nCreateException Error raised when factory is not able to create the requested component.\nFactory Basic component factory that creates components using registered types and factory functions.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/components/build/","weight":0,"wordcount":42},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a container factory class used to create default container components. Examples of these components are loggers, counters, caches, and locks.\n","dir":"python/container/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622769847,"lvl0":"Build","lvl1":"This package contains a container factory class used to create default container components. Examples of these components are loggers, counters, caches, and locks.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1259162fe5d54e4bea60872bb2b08562","permalink":"/python/container/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/build/","section":"python","summary":" Classes DefaultContainerFactory Creates default container components (loggers, counters, caches, locks, etc.) based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/container/build/","weight":0,"wordcount":15},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create Elasticsearch components.\n","dir":"python/elasticsearch/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622502933,"lvl0":"Build","lvl1":"This package contains classes used to create Elasticsearch components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6bbad76c4fbd7962e3e1b62feb615187","permalink":"/python/elasticsearch/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/elasticsearch/build/","section":"python","summary":" Classes DefaultElasticSearchFactory Creates ElasticSearch components based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/elasticsearch/build/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to create GRPC components based on their descriptors. [GRPC](https://grpc.io/) is a high performance, open source universal RPC framework that can run in any enviroment. \n","dir":"python/grpc/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622499304,"lvl0":"Build","lvl1":"This package contains a class used to create GRPC components based on their descriptors. [GRPC](https://grpc.io/) is a high performance, open source universal RPC framework that can run in any enviroment. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7d25b655065aab72d2b0be5b2d8c262b","permalink":"/python/grpc/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/grpc/build/","section":"python","summary":" Classes DefaultGrpcFactory Creates GRPC components based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/grpc/build/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes used to create message components.\n","dir":"python/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621274735,"lvl0":"Build","lvl1":"This package contains interfaces and classes used to create message components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6b62dc54f0db868fbf2acb7cb9daaa81","permalink":"/python/messaging/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/build/","section":"python","summary":" Interfaces IMessageQueueFactory Creates message queue componens.\nClasses DefaultMessagingFactory Creates MemoryMessageQueue components by their descriptors. The name of the created message queue is taken from its descriptor.\nMemoryMessageQueueFactory Creates MemoryMessageQueue components by their descriptors. The name of the created message queue is taken from its descriptor.\nMessageQueueFactory Creates IMessageQueue components by their descriptors. The name of created message queue is taken from its descriptor.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/messaging/build/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create MongoDb components.\n","dir":"python/mongodb/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621418985,"lvl0":"Build","lvl1":"This package contains classes used to create MongoDb components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"46fe2543f295239eb250c18e50a4fcbe","permalink":"/python/mongodb/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mongodb/build/","section":"python","summary":" Classes DefaultMongoDbFactory Creates MongoDb components by their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/mongodb/build/","weight":0,"wordcount":8},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to build MySQL components.\n","dir":"python/mysql/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622226189,"lvl0":"Build","lvl1":"This package contains classes used to build MySQL components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0a6d235a87fba21f046c75ccf734f125","permalink":"/python/mysql/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mysql/build/","section":"python","summary":" Classes DefaultMySqlFactory Creates MySQL components based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/mysql/build/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create Postgres components based on their descriptors.\n","dir":"python/postgres/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621532384,"lvl0":"Build","lvl1":"This package contains classes used to create Postgres components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2744609e1898d9c1ac5205ed9471aa47","permalink":"/python/postgres/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/postgres/build/","section":"python","summary":" Classes DefaultPostgresFactory Creates Postgres components based on their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/postgres/build/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"The Build package contains classes used to create Prometheus components.\n","dir":"python/prometheus/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621702072,"lvl0":"Build","lvl1":"The Build package contains classes used to create Prometheus components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"433179fd017ebeaede6f0e4a6453e675","permalink":"/python/prometheus/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/prometheus/build/","section":"python","summary":" Classes DefaultPrometheusFactory Creates Prometheus components by their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/prometheus/build/","weight":0,"wordcount":8},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to create RPC components.\n","dir":"python/rpc/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622832012,"lvl0":"Build","lvl1":"This package contains a class used to create RPC components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8298c868960fd1cf4670521a6b752ce9","permalink":"/python/rpc/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/build/","section":"python","summary":" Classes DefaultRpcFactory Creates RPC components by their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/rpc/build/","weight":0,"wordcount":8},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to create SQLServer components based on their descriptors.\n","dir":"python/sqlserver/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622303486,"lvl0":"Build","lvl1":"This package contains a class used to create SQLServer components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"da505a78541c1dd322569f2466aebb01","permalink":"/python/sqlserver/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/sqlserver/build/","section":"python","summary":" Classes DefaultSqlServerFactory Creates SQLServer components by their descriptors.\n ","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/sqlserver/build/","weight":0,"wordcount":8},{"authors":null,"categories":null,"date":-62135596800,"description":"References decorator that automatically creates missing components using available component factories upon component retrival.\n","dir":"golang/container/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"BuildReferencesDecorator","lvl1":"References decorator that automatically creates missing components using available component factories upon component retrival.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"adc9f4ba6f11ba81256f27e2dc3d5600","permalink":"/golang/container/refer/build_references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/container/refer/build_references_decorator/","section":"golang","summary":"Implements: ReferencesDecorator\nDescription The BuildReferencesDecorator class allows you to create a references decorator that automatically creates missing components using availale component factories upon component retrieval.\nConstructors NewBuildReferencesDecorator Creates a new instance of the decorator.\n NewBuildReferencesDecorator(nextReferences IReferences, topReferences IReferences) *BuildReferencesDecorator\n  nextReferences: IReferences - the next references or decorator in the chain. topReferences: IReferences - the decorator at the top of the chain.  Methods ClarifyLocator Clarifies a component locator by merging two descriptors into one to replace missing fields.","tags":null,"title":"BuildReferencesDecorator","type":"docs","url":"/hugo-docs/golang/container/refer/build_references_decorator/","weight":0,"wordcount":503},{"authors":null,"categories":null,"date":-62135596800,"description":"References decorator that automatically creates missing components using available component factories upon component retrival.\n","dir":"node/container/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"BuildReferencesDecorator","lvl1":"References decorator that automatically creates missing components using available component factories upon component retrival.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"caddb68a575765ae837b7adf77626dcd","permalink":"/node/container/refer/build_references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/container/refer/build_references_decorator/","section":"node","summary":"Implements: ReferencesDecorator\nDescription The BuildReferencesDecorator class allows you to create a references decorator that automatically creates missing components using availale component factories upon component retrieval.\nConstructors Creates a new instance of the decorator.\n public constructor(nextReferences: IReferences, topReferences: IReferences)\n  nextReferences: IReferences - the next references or decorator in the chain. topReferences: IReferences - the decorator at the top of the chain.  Instance methods clarifyLocator Clarifies a component locator by merging two descriptors into one to replace missing fields.","tags":null,"title":"BuildReferencesDecorator","type":"docs","url":"/hugo-docs/node/container/refer/build_references_decorator/","weight":0,"wordcount":267},{"authors":null,"categories":null,"date":-62135596800,"description":"References decorator that automatically creates missing components using available component factories upon component retrival.\n","dir":"python/container/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"BuildReferencesDecorator","lvl1":"References decorator that automatically creates missing components using available component factories upon component retrival.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4f5113d1d3add2e1acd8f3cbc1b99533","permalink":"/python/container/refer/build_references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/container/refer/build_references_decorator/","section":"python","summary":"Implements: ReferencesDecorator\nDescription The BuildReferencesDecorator class allows you to create a references decorator that automatically creates missing components using availale component factories upon component retrieval.\nConstructors Creates a new instance of the decorator.\n BuildReferencesDecorator(next_references: IReferences, top_references: IReferences)\n  next_references: IReferences - the next references or decorator in the chain. top_references: IReferences - the decorator at the top of the chain.  Instance methods clarify_locator Clarifies a component locator by merging two descriptors into one to replace missing fields.","tags":null,"title":"BuildReferencesDecorator","type":"docs","url":"/hugo-docs/python/container/refer/build_references_decorator/","weight":0,"wordcount":262},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/cache/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Cache","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"372c6fb2ff22e722515af74dac9f8528","permalink":"/dart/components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/cache/","section":"dart","summary":"","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/dart/components/cache/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Cache package contains interfaces and classes that can be used to create caches that can be employed to improve a system's performance.\n","dir":"golang/components/cache/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1623426469,"lvl0":"Cache","lvl1":"\nThe Cache package contains interfaces and classes that can be used to create caches that can be employed to improve a system's performance.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3978e7031e16c9684eb3fbdc7a00b7bd","permalink":"/golang/components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/cache/","section":"golang","summary":"Interfaces ICache Interface for caches that are used to cache values to improve performance.\nClasses CacheEntry Data object to store cached values with their keys used by MemoryCache.\nDefaultCacheFactory Creates ICache components by their descriptors.\nMemoryCache Cache that stores values in the process memory. Remember: This implementation is not suitable for synchronization of distributed processes.\nNullCache Dummy cache implementation that doesn\u0026rsquo;t do anything.\nIt can be used in testing or in situations when cache is required but shall be disabled.","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/golang/components/cache/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Cache package contains interfaces and classes that can be used to create caches that can be employed to improve a system's performance.\n","dir":"net/components/cache/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621575585,"lvl0":"Cache","lvl1":"\nThe Cache package contains interfaces and classes that can be used to create caches that can be employed to improve a system's performance.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a8b597d812851fe442b0501f622c51af","permalink":"/net/components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/cache/","section":"net","summary":"Interfaces ICache Interface for caches that are used to cache values to improve performance.\nClasses CacheEntry Data object to store cached values with their keys used by MemoryCache.\nDefaultCacheFactory Creates ICache components by their descriptors.\nMemoryCache Cache that stores values in the process memory. Remember: This implementation is not suitable for synchronization of distributed processes.\nNullCache Dummy cache implementation that doesn\u0026rsquo;t do anything.\nIt can be used in testing or in situations when cache is required but shall be disabled.","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/net/components/cache/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Cache package contains interfaces and classes that can be used to create caches that can be employed to improve a system's performance.\n","dir":"node/components/cache/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Cache","lvl1":"\nThe Cache package contains interfaces and classes that can be used to create caches that can be employed to improve a system's performance.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"adeb3e0b24d454be341ade8b655066fc","permalink":"/node/components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/cache/","section":"node","summary":"Interfaces ICache Interface for caches that are used to cache values to improve performance.\nClasses CacheEntry Data object to store cached values with their keys used by MemoryCache.\nDefaultCacheFactory Creates ICache components by their descriptors.\nMemoryCache Cache that stores values in the process memory. Remember: This implementation is not suitable for synchronization of distributed processes.\nNullCache Dummy cache implementation that doesn\u0026rsquo;t do anything.\nIt can be used in testing or in situations when cache is required but shall be disabled.","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/node/components/cache/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Cache package contains interfaces and classes that can be used to create caches that can be employed to improve a system's performance.\n","dir":"python/components/cache/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Cache","lvl1":"\nThe Cache package contains interfaces and classes that can be used to create caches that can be employed to improve a system's performance.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"904d52cf6a106816666cceb65355bd91","permalink":"/python/components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/cache/","section":"python","summary":"Interfaces ICache Interface for caches that are used to cache values to improve performance.\nClasses CacheEntry Data object to store cached values with their keys used by MemoryCache.\nDefaultCacheFactory Creates ICache components by their descriptors.\nMemoryCache Cache that stores values in the process memory. Remember: This implementation is not suitable for synchronization of distributed processes.\nNullCache Dummy cache implementation that doesn\u0026rsquo;t do anything.\nIt can be used in testing or in situations when cache is required but shall be disabled.","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/python/components/cache/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO: add description\n","dir":"net/components/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"CachedConfigReader","lvl1":"TODO: add description\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6b7f0e292e7866914e26adb845ea17c6","permalink":"/net/components/config/cached_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/config/cached_config_reader/","section":"net","summary":"Inherits: IConfigurable, IReconfigurable\nDescription TODO: add description\nProperties Timeout TODO: add description\n public long Timeout[ get, set ]\n Instance methods ReadConfig Configures component by passing configuration parameters.\n public ConfigParams ReadConfig(string correlationId, ConfigParams parameters)\n  correlationId: string - configuration parameters to be set. parameters: ConfigParams - values to parameters the configuration or null to skip parameterization. returns: ConfigParams - ConfigParams configuration.  ","tags":null,"title":"CachedConfigReader","type":"docs","url":"/hugo-docs/net/components/config/cached_config_reader/","weight":0,"wordcount":59},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to create performace counters that measure and store those values in memory.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CachedCounters","lvl1":"Class used to create performace counters that measure and store those values in memory.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2fbeb075c1df43196f72ef85d25a1047","permalink":"/golang/components/count/cached_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/components/count/cached_counters/","section":"golang","summary":"Description The CachedCounters class allows you to create performace counters that measure and store those values in memory.\nImportant points\n Child classes can implement saving of the counters into various different destinations.  Configuration parameters options:\n interval: interval in milliseconds to save current counters measurements (default: 5 mins) reset_timeout: timeout in milliseconds to reset the counters. 0 disables the reset (default: 0)  Constructors Creates a new CachedCounters object.","tags":null,"title":"CachedCounters","type":"docs","url":"/hugo-docs/golang/components/count/cached_counters/","weight":0,"wordcount":555},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to create performace counters that measure and store those values in memory.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"CachedCounters","lvl1":"Class used to create performace counters that measure and store those values in memory.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f871b52a9082deb906498cefd7b380b6","permalink":"/net/components/count/cached_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/components/count/cached_counters/","section":"net","summary":"Inherits: ICounters, IReconfigurable, ICounterTimingCallback\nDescription The CachedCounters class allows you to create performace counters that measure and store those values in memory.\nImportant points\n Child classes can implement saving of the counters into various different destinations.  Configuration parameters options:\n interval: interval in milliseconds to save current counters measurements (default: 5 mins) reset_timeout: timeout in milliseconds to reset the counters. 0 disables the reset (default: 0)  Constructors Creates a new CachedCounters object.","tags":null,"title":"CachedCounters","type":"docs","url":"/hugo-docs/net/components/count/cached_counters/","weight":0,"wordcount":576},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to create performace counters that measure and store those values in memory.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"CachedCounters","lvl1":"Class used to create performace counters that measure and store those values in memory.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"beed3bb1d1d1e3b36984a0a7de2b09c8","permalink":"/node/components/count/cached_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/components/count/cached_counters/","section":"node","summary":"Implements: ICounters, IReconfigurable, ICounterTimingCallback\nDescription The CachedCounters class allows you to create performace counters that measure and store those values in memory.\nImportant points\n Child classes can implement saving of the counters into various different destinations.  Configuration parameters options:\n interval: interval in milliseconds to save current counters measurements (default: 5 mins) reset_timeout: timeout in milliseconds to reset the counters. 0 disables the reset (default: 0)  Constructors Creates a new CachedCounters object.","tags":null,"title":"CachedCounters","type":"docs","url":"/hugo-docs/node/components/count/cached_counters/","weight":0,"wordcount":598},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to create performace counters that measure and store those values in memory.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"CachedCounters","lvl1":"Class used to create performace counters that measure and store those values in memory.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8f966cea73f089e262a55d98afa71df1","permalink":"/python/components/count/cached_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/components/count/cached_counters/","section":"python","summary":"Implements: ICounters, IReconfigurable, ICounterTimingCallback\nDescription The CachedCounters class allows you to create performace counters that measure and store those values in memory.\nImportant points\n Child classes can implement saving of the counters into various different destinations.  Configuration parameters options:\n interval: interval in milliseconds to save current counters measurements (default: 5 mins) reset_timeout: timeout in milliseconds to reset the counters. 0 disables the reset (default: 0)  Constructors Creates a new CachedCounters object.","tags":null,"title":"CachedCounters","type":"docs","url":"/hugo-docs/python/components/count/cached_counters/","weight":0,"wordcount":546},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that caches captured log messages in memory and periodically dumps them.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CachedLogger","lvl1":"Logger that caches captured log messages in memory and periodically dumps them.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"95ac54d683363aad03edeade15cf4a35","permalink":"/golang/components/log/cached_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/log/cached_logger/","section":"golang","summary":"Implements: Logger\nDescription The CachedLogger class allows you to create a logger that caches captured log messages in memory and periodically dumps them.\nImportant points\n Child classes implement saving cached messages to their specified destinations.  Configuration parameters  level: maximum log level to capture source: source (context) name options:  interval: interval in milliseconds to save log messages (default: 10 seconds) max_cache_size: maximum number of messages stored in this cache (default: 100)    References  *:context-info:*:*:1.","tags":null,"title":"CachedLogger","type":"docs","url":"/hugo-docs/golang/components/log/cached_logger/","weight":0,"wordcount":236},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that caches captured log messages in memory and periodically dumps them.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"CachedLogger","lvl1":"Logger that caches captured log messages in memory and periodically dumps them.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ae63097b81b9bfcf6ac827634d63794b","permalink":"/net/components/log/cached_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/log/cached_logger/","section":"net","summary":"Inherits: Logger\nDescription The CachedLogger class allows you to create a logger that caches captured log messages in memory and periodically dumps them.\nImportant points\n Child classes implement saving cached messages to their specified destinations.  Configuration parameters  level: maximum log level to capture source: source (context) name options:  interval: interval in milliseconds to save log messages (default: 10 seconds) max_cache_size: maximum number of messages stored in this cache (default: 100)    References  *:context-info:*:*:1.","tags":null,"title":"CachedLogger","type":"docs","url":"/hugo-docs/net/components/log/cached_logger/","weight":0,"wordcount":299},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that caches captured log messages in memory and periodically dumps them.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"CachedLogger","lvl1":"Logger that caches captured log messages in memory and periodically dumps them.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f8b0d14bdc400ac3f3da80b4524ba6d9","permalink":"/node/components/log/cached_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/log/cached_logger/","section":"node","summary":"Extends: Logger\nDescription The CachedLogger class allows you to create a logger that caches captured log messages in memory and periodically dumps them.\nImportant points\n Child classes implement saving cached messages to their specified destinations.  Configuration parameters  level: maximum log level to capture source: source (context) name options:  interval: interval in milliseconds to save log messages (default: 10 seconds) max_cache_size: maximum number of messages stored in this cache (default: 100)    References  *:context-info:*:*:1.","tags":null,"title":"CachedLogger","type":"docs","url":"/hugo-docs/node/components/log/cached_logger/","weight":0,"wordcount":232},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that caches captured log messages in memory and periodically dumps them.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"CachedLogger","lvl1":"Logger that caches captured log messages in memory and periodically dumps them.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"828af3cb7ad62beb91b9fcbbf232848a","permalink":"/python/components/log/cached_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/log/cached_logger/","section":"python","summary":"Implements: Logger\nDescription The CachedLogger class allows you to create a logger that caches captured log messages in memory and periodically dumps them.\nImportant points\n Child classes implement saving cached messages to their specified destinations.  Configuration parameters  level: maximum log level to capture source: source (context) name options:  interval: interval in milliseconds to save log messages (default: 10 seconds) max_cache_size: maximum number of messages stored in this cache (default: 100)    References  *:context-info:*:*:1.","tags":null,"title":"CachedLogger","type":"docs","url":"/hugo-docs/python/components/log/cached_logger/","weight":0,"wordcount":217},{"authors":null,"categories":null,"date":-62135596800,"description":"Message queue that caches received messages in memory to allow peek operations that may not be supported by the undelying queue.\n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CachedMessageQueue","lvl1":"Message queue that caches received messages in memory to allow peek operations that may not be supported by the undelying queue.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f79a5cc49a4da53d983ce37a6b31c2e6","permalink":"/golang/messaging/queues/cached_message_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/messaging/queues/cached_message_queue/","section":"golang","summary":"Extends: MessageQueue\nImplements: ICleanable\nDescription The CachedMessageQueue class allows you to create message queues that cache received messages in memory, to allow peek operations that may not be supported by the undelying queue.\nImportant points\n This queue is used as a base implementation for other queues.  Constructors Creates a new instance of the persistence component.\n constructor(name?: string, capabilities?: MessagingCapabilities)\n  name: string - (optional) queue name capabilities: MessagingCapabilities - (optional) capabilities of the message queue  Fields _autoSubscribe Boolean variable indicating whether a message queue auto-subscribes or not.","tags":null,"title":"CachedMessageQueue","type":"docs","url":"/hugo-docs/golang/messaging/queues/cached_message_queue/","weight":0,"wordcount":528},{"authors":null,"categories":null,"date":-62135596800,"description":"Message queue that caches received messages in memory to allow peek operations that may not be supported by the undelying queue.\n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1622675980,"lvl0":"CachedMessageQueue","lvl1":"Message queue that caches received messages in memory to allow peek operations that may not be supported by the undelying queue.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7a1dbec81db1b324964def1f8ac99d94","permalink":"/node/messaging/queues/cached_message_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/messaging/queues/cached_message_queue/","section":"node","summary":"Extends: MessageQueue\nImplements: ICleanable\nDescription The CachedMessageQueue class allows you to create message queues that cache received messages in memory, to allow peek operations that may not be supported by the undelying queue.\nImportant points\n This queue is used as a base implementation for other queues.  Constructors Creates a new instance of the persistence component.\n constructor(name?: string, capabilities?: MessagingCapabilities)\n  name: string - (optional) queue name capabilities: MessagingCapabilities - (optional) capabilities of the message queue  Fields _autoSubscribe Boolean variable indicating whether a message queue auto-subscribes or not.","tags":null,"title":"CachedMessageQueue","type":"docs","url":"/hugo-docs/node/messaging/queues/cached_message_queue/","weight":0,"wordcount":529},{"authors":null,"categories":null,"date":-62135596800,"description":"Message queue that caches received messages in memory to allow peek operations that may not be supported by the undelying queue.\n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"CachedMessageQueue","lvl1":"Message queue that caches received messages in memory to allow peek operations that may not be supported by the undelying queue.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d220d0c263629bda59b4f2c621cb0cb6","permalink":"/python/messaging/queues/cached_message_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/messaging/queues/cached_message_queue/","section":"python","summary":"Implements: ICleanable, MessageQueue\nDescription The CachedMessageQueue class allows you to create message queues that cache received messages in memory, to allow peek operations that may not be supported by the undelying queue.\nImportant points\n This queue is used as a base implementation for other queues.  Constructors Creates a new instance of the persistence component.\n CachedMessageQueue(name: str = None, capabilities: MessagingCapabilities = None)\n  name: str - (optional) queue name capabilities: MessagingCapabilities - (optional) capabilities of the message queue  Fields _auto_subscribe Boolean variable indicating whether a message queue auto-subscribes or not.","tags":null,"title":"CachedMessageQueue","type":"docs","url":"/hugo-docs/python/messaging/queues/cached_message_queue/","weight":0,"wordcount":521},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract tracer that caches recorded traces in memory and periodically dumps them.\n","dir":"golang/components/trace/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CachedTracer","lvl1":"Abstract tracer that caches recorded traces in memory and periodically dumps them.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"471a55769f6ffb39606fc6be3031f28c","permalink":"/golang/components/trace/cached_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/components/trace/cached_tracer/","section":"golang","summary":"Implements: ITracer, IReconfigurable, IReferenceable\nDescription The CachedTracer class allows you to create a tracer that caches the recorded traces in memory and periodically dumps them.\nImportant points\n Child classes implement saving cached traces to their specified destinations.  Configuration parameters  source: source (context) name options:  interval: interval in milliseconds to save log messages (default: 10 seconds) max_cache_size: maximum number of messages stored in this cache (default: 100)    References  *:context-info:*:*:1.","tags":null,"title":"CachedTracer","type":"docs","url":"/hugo-docs/golang/components/trace/cached_tracer/","weight":0,"wordcount":502},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract tracer that caches recorded traces in memory and periodically dumps them.\n","dir":"net/components/trace/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"CachedTracer","lvl1":"Abstract tracer that caches recorded traces in memory and periodically dumps them.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"552df7ebfcb058780a4c8ff4d39b201d","permalink":"/net/components/trace/cached_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/components/trace/cached_tracer/","section":"net","summary":"Inherits: ITracer, IReconfigurable, IReferenceable\nDescription The CachedTracer class allows you to create a tracer that caches the recorded traces in memory and periodically dumps them.\nImportant points\n Child classes implement saving cached traces to their specified destinations.  Configuration parameters  source: source (context) name options:  interval: interval in milliseconds to save log messages (default: 10 seconds) max_cache_size: maximum number of messages stored in this cache (default: 100)    References  *:context-info:*:*:1.","tags":null,"title":"CachedTracer","type":"docs","url":"/hugo-docs/net/components/trace/cached_tracer/","weight":0,"wordcount":502},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract tracer that caches recorded traces in memory and periodically dumps them.\n","dir":"node/components/trace/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"CachedTracer","lvl1":"Abstract tracer that caches recorded traces in memory and periodically dumps them.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b3ce48dcbcbda3242c55fd86186f2517","permalink":"/node/components/trace/cached_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/components/trace/cached_tracer/","section":"node","summary":"Implements: ITracer, IReconfigurable, IReferenceable\nDescription The CachedTracer class allows you to create a tracer that caches the recorded traces in memory and periodically dumps them.\nImportant points\n Child classes implement saving cached traces to their specified destinations.  Configuration parameters  source: source (context) name options:  interval: interval in milliseconds to save log messages (default: 10 seconds) max_cache_size: maximum number of messages stored in this cache (default: 100)    References  *:context-info:*:*:1.","tags":null,"title":"CachedTracer","type":"docs","url":"/hugo-docs/node/components/trace/cached_tracer/","weight":0,"wordcount":497},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract tracer that caches recorded traces in memory and periodically dumps them.\n","dir":"python/components/trace/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"CachedTracer","lvl1":"Abstract tracer that caches recorded traces in memory and periodically dumps them.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6ced7eff302d3b44f108a317cf50641a","permalink":"/python/components/trace/cached_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/components/trace/cached_tracer/","section":"python","summary":"Implements: ITracer, IReconfigurable, IReferenceable\nDescription The CachedTracer class allows you to create a tracer that caches the recorded traces in memory and periodically dumps them.\nImportant points\n Child classes implement saving cached traces to their specified destinations.  Configuration parameters  source: source (context) name options:  interval: interval in milliseconds to save log messages (default: 10 seconds) max_cache_size: maximum number of messages stored in this cache (default: 100)    References  *:context-info:*:*:1.","tags":null,"title":"CachedTracer","type":"docs","url":"/hugo-docs/python/components/trace/cached_tracer/","weight":0,"wordcount":471},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object to store cached values with their keys used by [MemoryCache](../memory_cache).\n","dir":"golang/components/cache/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"CacheEntry","lvl1":"Data object to store cached values with their keys used by [MemoryCache](../memory_cache).\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"02b97a90e7f19c6233871ac58ee82d34","permalink":"/golang/components/cache/cache_entry/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/cache/cache_entry/","section":"golang","summary":"Description The CacheEntry class allows you to create a data object that can be used to store cached values with their keys used by MemoryCache.\nConstructors Creates a new instance of the cache entry and assigns its values.\n NewCacheEntry(key string, value interface{}, timeout int64) *CacheEntry\n  key: string - a unique key to locate the value. value: interface{} - a value to be stored. timeout: int64 - expiration timeout in milliseconds.","tags":null,"title":"CacheEntry","type":"docs","url":"/hugo-docs/golang/components/cache/cache_entry/","weight":0,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object to store cached values with their keys used by [MemoryCache](../memory_cache).\n","dir":"net/components/cache/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"CacheEntry","lvl1":"Data object to store cached values with their keys used by [MemoryCache](../memory_cache).\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"36fc42bf6acdfb6ab24a731f9660e279","permalink":"/net/components/cache/cache_entry/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/cache/cache_entry/","section":"net","summary":"Description The CacheEntry class allows you to create a data object that can be used to store cached values with their keys used by MemoryCache.\nConstructors Creates a new instance of the cache entry and assigns its values.\n public CacheEntry(string key, object value, long timeout)\n  key: string - a unique key to locate the value. value: object - a value to be stored. timeout: long - expiration timeout in milliseconds.","tags":null,"title":"CacheEntry","type":"docs","url":"/hugo-docs/net/components/cache/cache_entry/","weight":0,"wordcount":168},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object to store cached values with their keys used by [MemoryCache](../memory_cache).\n","dir":"node/components/cache/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"CacheEntry","lvl1":"Data object to store cached values with their keys used by [MemoryCache](../memory_cache).\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d6fb95a36d2afe7a57fd63aa53456536","permalink":"/node/components/cache/cache_entry/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/cache/cache_entry/","section":"node","summary":"Description The CacheEntry class allows you to create a data object that can be used to store cached values with their keys used by MemoryCache.\nConstructors Creates a new instance of the cache entry and assigns its values.\n public constructor(key: string, value: any, timeout: number)\n  key: string - a unique key to locate the value. value: any - a value to be stored. timeout: number - expiration timeout in milliseconds.","tags":null,"title":"CacheEntry","type":"docs","url":"/hugo-docs/node/components/cache/cache_entry/","weight":0,"wordcount":174},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object to store cached values with their keys used by [MemoryCache](../memory_cache).\n","dir":"python/components/cache/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"CacheEntry","lvl1":"Data object to store cached values with their keys used by [MemoryCache](../memory_cache).\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"010d9638c538e519a57a3c59760935db","permalink":"/python/components/cache/cache_entry/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/cache/cache_entry/","section":"python","summary":"Description The CacheEntry class allows you to create a data object that can be used to store cached values with their keys used by MemoryCache.\nConstructors Creates a new instance of the cache entry and assigns its values.\n CacheEntry(key: str, value: str, timeout: int)\n  key: str - a unique key to locate the value. value: str - a value to be stored. timeout: int - expiration timeout in milliseconds.","tags":null,"title":"CacheEntry","type":"docs","url":"/hugo-docs/python/components/cache/cache_entry/","weight":0,"wordcount":167},{"authors":null,"categories":null,"date":-62135596800,"description":"Wraps a message callback into [IMessageReceiver](../imessage_receiver)\n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CallbackMessageReceiver","lvl1":"Wraps a message callback into [IMessageReceiver](../imessage_receiver)\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2314cd4026dbec544e9ebf327edd0a21","permalink":"/golang/messaging/queues/callback_message_receiver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/queues/callback_message_receiver/","section":"golang","summary":"Implements: IMessageReceiver\nDescription The CallbackMessageReceiver class allows you to wrap message callbacks into IMessageReceiver.\nConstructors Creates an instance of the CallbackMessageReceiver.\n public constructor(callback: (envelope: MessageEnvelope, queue: IMessageQueue) =\u0026gt; Promise\u0026lt;void\u0026gt;)\n  callback: MessageEnvelope, queue: IMessageQueue) =\u0026gt; Promise\u0026lt;void\u0026gt; - a callback function that shall be wrapped into IMessageReceiver  Methods receiveMessage Receives an incoming message from the queue.\nSee also MessageEnvelope, IMessageQueue\n public receiveMessage(envelope: MessageEnvelope, queue: IMessageQueue): Promise\u0026lt;void\u0026gt;\n  envelope: MessageEnvelope - incoming message queue: IMessageQueue - queue where the message comes from  ","tags":null,"title":"CallbackMessageReceiver","type":"docs","url":"/hugo-docs/golang/messaging/queues/callback_message_receiver/","weight":0,"wordcount":78},{"authors":null,"categories":null,"date":-62135596800,"description":"Wraps a message callback into [IMessageReceiver](../imessage_receiver)\n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"CallbackMessageReceiver","lvl1":"Wraps a message callback into [IMessageReceiver](../imessage_receiver)\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"519746518e84fce6db1465c0760949e3","permalink":"/node/messaging/queues/callback_message_receiver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/queues/callback_message_receiver/","section":"node","summary":"Implements: IMessageReceiver\nDescription The CallbackMessageReceiver class allows you to wrap message callbacks into IMessageReceiver.\nConstructors Creates an instance of the CallbackMessageReceiver.\n public constructor(callback: (envelope: MessageEnvelope, queue: IMessageQueue) =\u0026gt; Promise\u0026lt;void\u0026gt;)\n  callback: MessageEnvelope, queue: IMessageQueue) =\u0026gt; Promise\u0026lt;void\u0026gt; - a callback function that shall be wrapped into IMessageReceiver  Instance methods receiveMessage Receives an incoming message from the queue.\nSee also MessageEnvelope, IMessageQueue\n public receiveMessage(envelope: MessageEnvelope, queue: IMessageQueue): Promise\u0026lt;void\u0026gt;","tags":null,"title":"CallbackMessageReceiver","type":"docs","url":"/hugo-docs/node/messaging/queues/callback_message_receiver/","weight":0,"wordcount":79},{"authors":null,"categories":null,"date":-62135596800,"description":"Wraps a message callback into [IMessageReceiver](../imessage_receiver)\n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622334832,"lvl0":"CallbackMessageReceiver","lvl1":"Wraps a message callback into [IMessageReceiver](../imessage_receiver)\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a6305ffb43242b449903e905c577f4a2","permalink":"/python/messaging/queues/callback_message_receiver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/queues/callback_message_receiver/","section":"python","summary":"Implements: IMessageReceiver\nDescription The CallbackMessageReceiver class allows you to wrap message callbacks into IMessageReceiver.\nConstructors Creates an instance of the CallbackMessageReceiver.\n CallbackMessageReceiver(callback: Callable[[MessageEnvelope, IMessageQueue], None])\n  callback: Callable[[MessageEnvelope, IMessageQueue], None] - a callback function that shall be wrapped into IMessageReceiver  Instance methods receive_message Receives an incoming message from the queue.\nSee also MessageEnvelope, IMessageQueue\n receive_message(envelope: MessageEnvelope, queue: IMessageQueue)\n  envelope: MessageEnvelope - incoming message queue: IMessageQueue - queue where the message comes from  ","tags":null,"title":"CallbackMessageReceiver","type":"docs","url":"/hugo-docs/python/messaging/queues/callback_message_receiver/","weight":0,"wordcount":71},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"lvl0":"Categories","lvl1":"","lvl2":"categories","lvl3":null,"lvl4":null,"lvl5":"","objectID":"","permalink":"/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/hugo-docs/categories/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Change Scopes Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f5ffa0667c9fced416c136cb15408e1a","permalink":"/microservices/infrastructure/change_scopes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/change_scopes/","section":"microservices","summary":"Detects changes made in a particular scope or element of a scope. Intended to implement change detection using simple pull mechanism. For instance: multiple configuration microservices change the scope, and business logic that depends on those configurations periodically reads it to check if anything was changed.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .","tags":null,"title":"Change Scopes Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/change_scopes/","weight":0,"wordcount":74},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to clear the state of components.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624241941,"lvl0":"Cleaner","lvl1":"Helper class that allows you to clear the state of components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"106a35096b1bf8607794ac34facd16ea","permalink":"/golang/commons/run/cleaner/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/cleaner/","section":"golang","summary":"Description The Cleaner class allows you to clear the state of components.\nMethods Clear Clears state of multiple components.\nTo be cleaned, state components must implement the ICleanable interface. If they don\u0026rsquo;t, the call to this method has no effect.\n (c *TCleaner) Clear(correlationId string, components []interface{}) error\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. components: []interface{} - list of components that are to be cleaned.","tags":null,"title":"Cleaner","type":"docs","url":"/hugo-docs/golang/commons/run/cleaner/","weight":0,"wordcount":148},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to clear the state of components.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"Cleaner","lvl1":"Helper class that allows you to clear the state of components.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3a34e78919c31bd85f686a799ce36fca","permalink":"/net/commons/run/cleaner/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/cleaner/","section":"net","summary":"Description The Cleaner class allows you to clear the state of components.\nStatic methods ClearAsync Clears state of multiple components.\nTo be cleaned state components must implement ICleanable interface. If they don\u0026rsquo;t the call to this method has no effect.\n public static Task ClearAsync(string correlationId, IEnumerable components)\n  correlationId: string - (optional) transaction id to trace execution through call chain. components: IEnumerable - the list of components that are to be cleaned.","tags":null,"title":"Cleaner","type":"docs","url":"/hugo-docs/net/commons/run/cleaner/","weight":0,"wordcount":129},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to clear the state of components.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"Cleaner","lvl1":"Helper class that allows you to clear the state of components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5bce72fa4e8a824de0a6fa78d9fae09b","permalink":"/node/commons/run/cleaner/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/cleaner/","section":"node","summary":"Description The Cleaner class allows you to clear the state of components.\nStatic methods clear Clears state of multiple components.\nTo be cleaned state components must implement ICleanable interface. If they don\u0026rsquo;t the call to this method has no effect.\n public static clear(correlationId: string, components: any[]): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain. components: any[] - the list of components that are to be cleaned.","tags":null,"title":"Cleaner","type":"docs","url":"/hugo-docs/node/commons/run/cleaner/","weight":0,"wordcount":129},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to clear the state of components.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621010310,"lvl0":"Cleaner","lvl1":"Helper class that allows you to clear the state of components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"da363c299bb53781b3e78c4a906f48f5","permalink":"/python/commons/run/cleaner/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/cleaner/","section":"python","summary":"Description The Cleaner class allows you to clear the state of components.\nStatic methods clear Clears the state of multiple components.\nTo be cleaned state components must implement ICleanable interface. If they don\u0026rsquo;t the call to this method has no effect.\n static clear(correlation_id: Optional[str], components: List[Any])\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain. components: List[Any] - the list of components that are to be cleaned.","tags":null,"title":"Cleaner","type":"docs","url":"/hugo-docs/python/commons/run/cleaner/","weight":0,"wordcount":128},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":1617908667,"lvl0":"Client Library","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0c7a876127ba9850fd072d26e99885c4","permalink":"/dart/tutorials/client_library/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/dart/tutorials/client_library/","section":"dart","summary":"Introduction Knowing how to create a client library for your microservice is almost as important as knowing how to create the microservice itself. Some people question whether or not client libraries are actually necessary, and say that it’s enough to just describe the external interface and let the users of the microservice implement their own interaction protocol.\nWe strongly recommend the use of client libraries due to the following:\n Client libraries are created once and can be used by all users of the microservice, which significantly reduces development time.","tags":null,"title":"Client Library","type":"docs","url":"/hugo-docs/dart/tutorials/client_library/","weight":0,"wordcount":520},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":1617908667,"lvl0":"Client Library","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a53aaf808f582fe0520435479ae77fc1","permalink":"/golang/tutorials/client_library/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/tutorials/client_library/","section":"golang","summary":"Introduction Knowing how to create a client library for your microservice is almost as important as knowing how to create the microservice itself. Some people question whether or not client libraries are actually necessary, and say that it’s enough to just describe the external interface and let the users of the microservice implement their own interaction protocol.\nWe strongly recommend the use of client libraries due to the following:\n Client libraries are created once and can be used by all users of the microservice, which significantly reduces development time.","tags":null,"title":"Client Library","type":"docs","url":"/hugo-docs/golang/tutorials/client_library/","weight":0,"wordcount":520},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":1617908667,"lvl0":"Client Library","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bb44e24f97a18eb5dfde12eb41669c37","permalink":"/net/tutorials/client_library/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/tutorials/client_library/","section":"net","summary":"Introduction Knowing how to create a client library for your microservice is almost as important as knowing how to create the microservice itself. Some people question whether or not client libraries are actually necessary, and say that it’s enough to just describe the external interface and let the users of the microservice implement their own interaction protocol.\nWe strongly recommend the use of client libraries due to the following:\n Client libraries are created once and can be used by all users of the microservice, which significantly reduces development time.","tags":null,"title":"Client Library","type":"docs","url":"/hugo-docs/net/tutorials/client_library/","weight":0,"wordcount":520},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":1617908667,"lvl0":"Client Library","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fe1773dbd84941641993835bf4231a11","permalink":"/node/tutorials/client_library/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/tutorials/client_library/","section":"node","summary":"Introduction Knowing how to create a client library for your microservice is almost as important as knowing how to create the microservice itself. Some people question whether or not client libraries are actually necessary, and say that it’s enough to just describe the external interface and let the users of the microservice implement their own interaction protocol.\nWe strongly recommend the use of client libraries due to the following:\n Client libraries are created once and can be used by all users of the microservice, which significantly reduces development time.","tags":null,"title":"Client Library","type":"docs","url":"/hugo-docs/node/tutorials/client_library/","weight":0,"wordcount":520},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":1623463015,"lvl0":"Client Library","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a73227805bc8d227e33bca8f368787c3","permalink":"/python/tutorials/client_library/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/client_library/","section":"python","summary":"General considerations Knowing how to create a client library for your microservice is almost as important as knowing how to create the microservice itself. Some people question whether or not client libraries are actually necessary, and say that it’s enough to just describe the external interface and let the users of the microservice implement their own interaction protocol.\nWe strongly recommend the use of client libraries due to the following:","tags":null,"title":"Client Library","type":"docs","url":"/hugo-docs/python/tutorials/client_library/","weight":0,"wordcount":568},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create different types of clients.\n","dir":"golang/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624305939,"lvl0":"Clients","lvl1":"This package contains classes used to create different types of clients.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"88d7ad0a336b1690ff48efd0873f781f","permalink":"/golang/rpc/clients/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/clients/","section":"golang","summary":"Classes CommandableHttpClient Abstract client that calls a commandable HTTP service.\nCommandable services are generated automatically for ICommandable. Each command is exposed as a POST operation that receives all parameters in the body object.\nDirectClient Abstract client that calls a controller directly in the same memory space.\nIt is used when multiple microservices are deployed in a single container (monolyth) and communication between them can be done by direct calls rather than through the network.","tags":null,"title":"Clients","type":"docs","url":"/hugo-docs/golang/rpc/clients/","weight":0,"wordcount":85},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create different types of clients.\n","dir":"node/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1623078433,"lvl0":"Clients","lvl1":"This package contains classes used to create different types of clients.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"781fb21802b10a60ceb2e900d4732e33","permalink":"/node/rpc/clients/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/clients/","section":"node","summary":"Classes CommandableHttpClient Abstract client that calls a commandable HTTP service.\nCommandable services are generated automatically for ICommandable. Each command is exposed as a POST operation that receives all parameters in the body object.\nDirectClient Abstract client that calls a controller directly in the same memory space.\nIt is used when multiple microservices are deployed in a single container (monolyth) and communication between them can be done by direct calls rather than through the network.","tags":null,"title":"Clients","type":"docs","url":"/hugo-docs/node/rpc/clients/","weight":0,"wordcount":85},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create GRPC clients.\n","dir":"python/grpc/clients/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622499394,"lvl0":"Clients","lvl1":"This package contains classes used to create GRPC clients.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7f6645689491f8f280a6b5852d6cbbed","permalink":"/python/grpc/clients/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/grpc/clients/","section":"python","summary":" Classes CommandableGrpcClient Client that calls a commandable GRPC service. Commandable services are generated automatically for ICommandable. Each command is exposed as an invoke method that receives all parameters as args.\nGrpcClient Client that calls remote endpoints using the GRPC protocol.\n ","tags":null,"title":"Clients","type":"docs","url":"/hugo-docs/python/grpc/clients/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create different types of clients.\n","dir":"python/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622840685,"lvl0":"Clients","lvl1":"This package contains classes used to create different types of clients.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"23524f878d767b4d8bfe72822bc6c1f8","permalink":"/python/rpc/clients/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/clients/","section":"python","summary":"Classes CommandableHttpClient Abstract client that calls a commandable HTTP service.\nCommandable services are generated automatically for ICommandable. Each command is exposed as a POST operation that receives all parameters in the body object.\nDirectClient Abstract client that calls a controller directly in the same memory space.\nIt is used when multiple microservices are deployed in a single container (monolyth) and communication between them can be done by direct calls rather than through the network.","tags":null,"title":"Clients","type":"docs","url":"/hugo-docs/python/rpc/clients/","weight":0,"wordcount":85},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to close one or multiple components at the same time.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624243929,"lvl0":"Closer","lvl1":"Helper class that allows you to close one or multiple components at the same time.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"431714b8936ed666ebc434a950f61551","permalink":"/golang/commons/run/closer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/closer/","section":"golang","summary":"Description The Closer class allows you to close one or multiple components at the same time.\nMethods Close Closes multiple components.\nTo be closed components must implement IClosable interface. If they don\u0026rsquo;t the call to this method has no effect.\n (c *TCloser) Close(correlationId string, components []interface{}) error\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. components: []interface{} - list of components that are to be closed.","tags":null,"title":"Closer","type":"docs","url":"/hugo-docs/golang/commons/run/closer/","weight":0,"wordcount":146},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to close one or multiple components at the same time.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"Closer","lvl1":"Helper class that allows you to close one or multiple components at the same time.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4411427b0dbd5d92350b19d6d8c36519","permalink":"/net/commons/run/closer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/closer/","section":"net","summary":"Description The Closer class allows you to close one or multiple components at the same time.\nStatic methods CloseAsync Closes multiple components.\nTo be closed components must implement IClosable interface. If they don\u0026rsquo;t the call to this method has no effect.\n public static Task CloseAsync(string correlationId, IEnumerable components)\n  correlationId: string - (optional) transaction id to trace execution through call chain. components: IEnumerable - the list of components that are to be closed.","tags":null,"title":"Closer","type":"docs","url":"/hugo-docs/net/commons/run/closer/","weight":0,"wordcount":127},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to close one or multiple components at the same time.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"Closer","lvl1":"Helper class that allows you to close one or multiple components at the same time.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5a5a85a63667e0ca216c5890b4c8aaf0","permalink":"/node/commons/run/closer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/closer/","section":"node","summary":"Description The Closer class allows you to close one or multiple components at the same time.\nStatic methods close Closes multiple components.\nTo be closed components must implement IClosable interface. If they don\u0026rsquo;t the call to this method has no effect.\n public static close(correlationId: string, components: any[]): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain. components: any[] - the list of components that are to be closed.","tags":null,"title":"Closer","type":"docs","url":"/hugo-docs/node/commons/run/closer/","weight":0,"wordcount":127},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to close one or multiple components at the same time.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621010884,"lvl0":"Closer","lvl1":"Helper class that allows you to close one or multiple components at the same time.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4ec2c14d926bb5f896b30b07a1f903a0","permalink":"/python/commons/run/closer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/closer/","section":"python","summary":"Description The Closer class allows you to close one or multiple components at the same time.\nStatic methods close Closes multiple components.\nTo be closed components must implement IClosable interface. If they don\u0026rsquo;t, then a call to this method has no effect.\n static close(correlation_id: Optional[str], components: List[Any])\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through a call chain. components: List[Any] - the list of components that are to be closed.","tags":null,"title":"Closer","type":"docs","url":"/hugo-docs/python/commons/run/closer/","weight":0,"wordcount":126},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Clusters Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bf1e035afc995ead57c9e27fbf0439be","permalink":"/microservices/infrastructure/clusters/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/clusters/","section":"microservices","summary":"Keeps list of working clusters.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Clusters Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/clusters/","weight":0,"wordcount":32},{"authors":null,"categories":null,"date":-62135596800,"description":"Command allows to call a method or a function.\n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"Command","lvl1":"Command allows to call a method or a function.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dba5a2c09ff09e0fe8684ccd19f77c06","permalink":"/golang/commons/commands/command/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/commands/command/","section":"golang","summary":"Description The Command class allows you to call a method or a function.\nConstructors NewCommand Creates a new command object and assigns it\u0026rsquo;s parameters.\n NewCommand(name string, schema validate.ISchema, action func(correlationId string, args *run.Parameters) (interface{}, error)) *Command\n  name: string - the command name. schema: Schema - the schema to validate command arguments. action: func(correlationId string, args *run.Parameters) (interface{}, error) - the function to be executed by this command.  Methods Execute Executes the command.","tags":null,"title":"Command","type":"docs","url":"/hugo-docs/golang/commons/commands/command/","weight":0,"wordcount":251},{"authors":null,"categories":null,"date":-62135596800,"description":"Command allows to call a method or a function.\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"Command","lvl1":"Command allows to call a method or a function.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"78d0702ce93ecdd01d61cb54a2637ac6","permalink":"/net/commons/commands/command/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/commands/command/","section":"net","summary":"Inherits: ICommand\nDescription The Command class allows you to call a method or a function.\nConstructors Creates a new command object and assigns it\u0026rsquo;s parameters.\n public Command(string name, Schema schema, ExecutableDelegate function)\n  name: string - the command name. schema: Schema - the schema to validate command arguments. action: ExecutableDelegate - the function to be executed by this command.  Properties Name Gets the command name.\n public string Name [ get ]","tags":null,"title":"Command","type":"docs","url":"/hugo-docs/net/commons/commands/command/","weight":0,"wordcount":228},{"authors":null,"categories":null,"date":-62135596800,"description":"Command allows to call a method or a function.\n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623089238,"lvl0":"Command","lvl1":"Command allows to call a method or a function.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c235334eedfca22ac0bb739951e81524","permalink":"/node/commons/commands/command/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/commands/command/","section":"node","summary":"Implements: ICommand\nDescription The Command class allows you to call a method or a function.\nConstructors Creates a new command object and assigns it\u0026rsquo;s parameters.\n public constructor(name: string, schema: Schema, action: IExecutable | CommandAction)\n  name: string - the command name. schema: Schema - the schema to validate command arguments. action: IExecutable - the function to be executed by this command.  Instance methods execute Executes the command. Before execution it validates args using the defined schema.","tags":null,"title":"Command","type":"docs","url":"/hugo-docs/node/commons/commands/command/","weight":0,"wordcount":242},{"authors":null,"categories":null,"date":-62135596800,"description":"Command allows to call a method or a function.\n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620315877,"lvl0":"Command","lvl1":"Command allows to call a method or a function.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"34a8fea4ae20769670d0182fbd656db5","permalink":"/python/commons/commands/command/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/commands/command/","section":"python","summary":"Implements: ICommand\nDescription The Command class allows you to call a method or a function.\nConstructors Creates a new command object and assigns it\u0026rsquo;s parameters.\n Command(name: str, schema: Schema, function: Union[Callable, IExecutable])\n  name: str - the command name. schema: Schema - the schema to validate command arguments. action: IExecutable - the function to be executed by this command.  Instance methods execute Executes the command. Before execution it validates args using the defined schema.","tags":null,"title":"Command","type":"docs","url":"/hugo-docs/python/commons/commands/command/","weight":0,"wordcount":207},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract client that calls a commandable GRPC service.\n","dir":"python/grpc/clients/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622499582,"lvl0":"CommandableGrpcClient","lvl1":"Abstract client that calls a commandable GRPC service.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8d7c8750e12a16edbaee8f304684447b","permalink":"/python/grpc/clients/commandable_grpc_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/grpc/clients/commandable_grpc_client/","section":"python","summary":"Implements: GrpcClient\nDescription The CommandableGrpcClient class allows you to create clients that call a commandable GRPC service.\nImportant points\n Commandable services are generated automatically for ICommandable. Each command is exposed as an Invoke method that receives all parameters as args.  Configuration parameters connection(s):\n- discovery_key: (optional) a key to retrieve the connection from IDiscovery\n- protocol: connection protocol: http or https\n- host: host name or IP address","tags":null,"title":"CommandableGrpcClient","type":"docs","url":"/hugo-docs/python/grpc/clients/commandable_grpc_client/","weight":0,"wordcount":279},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract service that receives commands via the GRPC protocol.\n","dir":"python/grpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622499987,"lvl0":"CommandableGrpcService","lvl1":"Abstract service that receives commands via the GRPC protocol.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c3bca27a8e3785b73dd26b0eeaa570cc","permalink":"/python/grpc/services/commandable_grpc_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/grpc/services/commandable_grpc_service/","section":"python","summary":"Implements: GrpcClient\nSee also CommandableGrpcClient, GrpcService\nDescription Abstract service that receives commands via GRPC protocol to operations automatically generated for commands defined in ICommandable.\nImportant points\n Each command is exposed as an Invoke method that receives a command name and parameters. Commandable services require only 3 lines of code to implement a robust external GRPC-based remote interface.  Configuration parameters dependencies: - endpoint: override for HTTP Endpoint dependency - controller: override for Controller dependency connection(s): - discovery_key: (optional) key to retrieve the connection from IDiscovery - protocol: connection protocol: http or https - host: host name or IP address - port: port number - uri: resource URI or connection string with all parameters in it","tags":null,"title":"CommandableGrpcService","type":"docs","url":"/hugo-docs/python/grpc/services/commandable_grpc_service/","weight":0,"wordcount":206},{"authors":null,"categories":null,"date":-62135596800,"description":"Commandable services are generated automatically for [ICommandable](../../../commons/commands/icommandable)\n","dir":"golang/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"CommandableHttpClient","lvl1":"Commandable services are generated automatically for [ICommandable](../../../commons/commands/icommandable)\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0c5f2106ad297fb661448b3390311e67","permalink":"/golang/rpc/clients/commandable_http_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/rpc/clients/commandable_http_client/","section":"golang","summary":"Implements: RestClient\nDescription The CommandableHttpClient class allows you to create commandable services. Commandable services are generated automatically for ICommandable objects.\nImportant points\n Each command is exposed as a POST operation that receives all parameters in the body object.  Configuration parameters  base_route: base route for a remote URI connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it   options:  retries: number of retries (default: 3) connect_timeout: connection timeout in milliseconds (default: 10 sec) timeout: invocation timeout in milliseconds (default: 10 sec)    References  *:logger:*:*:1.","tags":null,"title":"CommandableHttpClient","type":"docs","url":"/hugo-docs/golang/rpc/clients/commandable_http_client/","weight":0,"wordcount":331},{"authors":null,"categories":null,"date":-62135596800,"description":"Commandable services are generated automatically for [ICommandable](../../../commons/commands/icommandable)\n","dir":"node/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"CommandableHttpClient","lvl1":"Commandable services are generated automatically for [ICommandable](../../../commons/commands/icommandable)\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4d1478a2e4fda37671828e6ddd427237","permalink":"/node/rpc/clients/commandable_http_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/rpc/clients/commandable_http_client/","section":"node","summary":"Extends: RestClient\nDescription The CommandableHttpClient class allows you to create commandable services. Commandable services are generated automatically for ICommandable objects.\nImportant points\n Each command is exposed as a POST operation that receives all parameters in the body object.  Configuration parameters  base_route: base route for a remote URI connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it   options:  retries: number of retries (default: 3) connect_timeout: connection timeout in milliseconds (default: 10 sec) timeout: invocation timeout in milliseconds (default: 10 sec)    References  *:logger:*:*:1.","tags":null,"title":"CommandableHttpClient","type":"docs","url":"/hugo-docs/node/rpc/clients/commandable_http_client/","weight":0,"wordcount":299},{"authors":null,"categories":null,"date":-62135596800,"description":"Commandable services are generated automatically for [ICommandable](../../../commons/commands/icommandable)\n","dir":"python/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"CommandableHttpClient","lvl1":"Commandable services are generated automatically for [ICommandable](../../../commons/commands/icommandable)\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9736cdf376ef8aebe3d8db4b32694296","permalink":"/python/rpc/clients/commandable_http_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/rpc/clients/commandable_http_client/","section":"python","summary":"Implements: RestClient\nDescription The CommandableHttpClient class allows you to create commandable services. Commandable services are generated automatically for ICommandable objects.\nImportant points\n Each command is exposed as a POST operation that receives all parameters in the body object.  Configuration parameters  base_route: base route for a remote URI connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it   options:  retries: number of retries (default: 3) connect_timeout: connection timeout in milliseconds (default: 10 sec) timeout: invocation timeout in milliseconds (default: 10 sec)    References  *:logger:*:*:1.","tags":null,"title":"CommandableHttpClient","type":"docs","url":"/hugo-docs/python/rpc/clients/commandable_http_client/","weight":0,"wordcount":278},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract service that receives remote calls via HTTP/REST protocol to operations automatically generated for commands defined in ICommandable components. \n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CommandableHttpService","lvl1":"Abstract service that receives remote calls via HTTP/REST protocol to operations automatically generated for commands defined in ICommandable components. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ba0fbcee555e32560417bcb95bf5edbd","permalink":"/golang/rpc/services/commandable_http_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/rpc/services/commandable_http_service/","section":"golang","summary":"Implements: RestService\nDescription The CommandableHttpService class allows you to create services that receive remote calls via the HTTP/REST protocol to operations automatically generated for commands defined in ICommandable components.\nImportant points\n Each command is exposed as POST operation that receives all parameters in the body object. Commandable services require only three lines of code to implement a robust external HTTP-based remote interface.  Configuration parameters  base_route: base route for remote URI dependencies:  endpoint: override for HTTP Endpoint dependency controller: override for Controller dependency   connection(s):  discovery_key: (optional) a key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it    References  *:logger:*:*:1.","tags":null,"title":"CommandableHttpService","type":"docs","url":"/hugo-docs/golang/rpc/services/commandable_http_service/","weight":0,"wordcount":303},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract service that receives remote calls via HTTP/REST protocol to operations automatically generated for commands defined in ICommandable components. \n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"CommandableHttpService","lvl1":"Abstract service that receives remote calls via HTTP/REST protocol to operations automatically generated for commands defined in ICommandable components. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d6b0321846d141170dc30e2028fc206e","permalink":"/node/rpc/services/commandable_http_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/rpc/services/commandable_http_service/","section":"node","summary":"Extends: RestService\nSee also RestService, CommandableHttpClient\nDescription The CommandableHttpService class allows you to create services that receive remote calls via the HTTP/REST protocol to operations automatically generated for commands defined in ICommandable components.\nImportant points\n Each command is exposed as POST operation that receives all parameters in the body object. Commandable services require only three lines of code to implement a robust external HTTP-based remote interface.  Configuration parameters  base_route: base route for remote URI dependencies:  endpoint: override for HTTP Endpoint dependency controller: override for Controller dependency   connection(s):  discovery_key: (optional) a key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it    References  *:logger:*:*:1.","tags":null,"title":"CommandableHttpService","type":"docs","url":"/hugo-docs/node/rpc/services/commandable_http_service/","weight":0,"wordcount":286},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract service that receives remote calls via HTTP/REST protocol to operations automatically generated for commands defined in ICommandable components. \n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"CommandableHttpService","lvl1":"Abstract service that receives remote calls via HTTP/REST protocol to operations automatically generated for commands defined in ICommandable components. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a5d0a6df43ef50ce8740e87c52090734","permalink":"/python/rpc/services/commandable_http_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/rpc/services/commandable_http_service/","section":"python","summary":"Implements: RestService\nSee also RestService, CommandableHttpClient\nDescription The CommandableHttpService class allows you to create services that receive remote calls via the HTTP/REST protocol to operations automatically generated for commands defined in ICommandable components.\nImportant points\n Each command is exposed as POST operation that receives all parameters in the body object. Commandable services require only three lines of code to implement a robust external HTTP-based remote interface.  Configuration parameters  base_route: base route for remote URI dependencies:  endpoint: override for HTTP Endpoint dependency controller: override for Controller dependency   connection(s):  discovery_key: (optional) a key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it    References  *:logger:*:*:1.","tags":null,"title":"CommandableHttpService","type":"docs","url":"/hugo-docs/python/rpc/services/commandable_http_service/","weight":0,"wordcount":276},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to generate Swagger code that describes created REST API methods and their parameters. \n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CommandableSwaggerDocument","lvl1":"Class used to generate Swagger code that describes created REST API methods and their parameters. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a1773b448e009f03a1cf32a82043153d","permalink":"/golang/rpc/services/commandable_swagger_document/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/rpc/services/commandable_swagger_document/","section":"golang","summary":"Description The CommandableSwaggerDocument class allows you to generate Swagger code that describes created REST API methods and their parameters.\nConstructors NewCommandableSwaggerDocument Creates a new instance of the service.\n NewCommandableSwaggerDocument(baseRoute string, config *cconf.ConfigParams, commands []ccomands.ICommand) *CommandableSwaggerDocument\n  baseRoute: string - base route of the service config: *cconf.ConfigParams - configuration parameters commands: []ccomands.ICommand - list of commmands.  Fields Commands List of commmands.\n Commands: []ICommand[]\n Version Version number.","tags":null,"title":"CommandableSwaggerDocument","type":"docs","url":"/hugo-docs/golang/rpc/services/commandable_swagger_document/","weight":0,"wordcount":352},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to generate Swagger code that describes created REST API methods and their parameters. \n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"CommandableSwaggerDocument","lvl1":"Class used to generate Swagger code that describes created REST API methods and their parameters. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"305bf08756763d82b3205452b78bc4e6","permalink":"/node/rpc/services/commandable_swagger_document/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/rpc/services/commandable_swagger_document/","section":"node","summary":"Description The CommandableSwaggerDocument class allows you to generate Swagger code that describes created REST API methods and their parameters.\nConstructors Creates a new instance of the service.\n public constructor(baseRoute: string, config: ConfigParams, commands: ICommand[])\n  baseRoute: string - base route of the service config: ConfigParams - configuration parameters commands: ICommand[] - list of commmands.  Fields commands List of commmands.\n commands: ICommand[]\n version Version number.\n version: string","tags":null,"title":"CommandableSwaggerDocument","type":"docs","url":"/hugo-docs/node/rpc/services/commandable_swagger_document/","weight":0,"wordcount":328},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to generate Swagger description language that represents the created REST API methods and their parameters. \n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623101483,"lvl0":"CommandableSwaggerDocument","lvl1":"Class used to generate Swagger description language that represents the created REST API methods and their parameters. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6a7c991a06ca46b147c1930335d1c44c","permalink":"/python/rpc/services/commandable_swagger_document/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/rpc/services/commandable_swagger_document/","section":"python","summary":"Description The CommandableSwaggerDocument class allows you to generate Swagger description language that represents the created REST API methods and their parameters.\nConstructors Creates a new instance of the service.\n CommandableHttpService(base_route: str, config: ConfigParams, commands: List[ICommand])\n  base_route: str - base route of the service config: ConfigParams - configuration parameters commands: List[ICommand] - list of commands  Fields commands List of commmands.\n commands: List[ICommand]\n version Version number.","tags":null,"title":"CommandableSwaggerDocument","type":"docs","url":"/hugo-docs/python/rpc/services/commandable_swagger_document/","weight":0,"wordcount":322},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Commands","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b17ff7119e787603d5cf0e2b8000036e","permalink":"/dart/commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/commands/","section":"dart","summary":"","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/dart/commons/commands/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes that can be used to implement various remote procedure calls (RPCs). In it, RPCs replace unique calls with universal \"message transfer\" calls, in which the message itself contains the called method's signature, as well as the parameters to pass for its execution.       \n   \n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1623964423,"lvl0":"Commands","lvl1":"This package contains interfaces and classes that can be used to implement various remote procedure calls (RPCs). In it, RPCs replace unique calls with universal \"message transfer\" calls, in which the message itself contains the called method's signature, as well as the parameters to pass for its execution.       \n   \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7861a2398ef8d05f68c4352edfaba6ca","permalink":"/golang/commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/commands/","section":"golang","summary":"Important points\nThis package allows you to create Commandable Interfaces, which are completely universal. Thus, for example, if an object extends ICommandable and returns a CommandSet, then you can implement a commandable client for this object, using various technologies and with minimal code.\n Description The package main components are:\n Commandable Interfaces – used to make classes with a certain logic and, which are capable of receiving and processing commands in this universal form.","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/golang/commons/commands/","weight":0,"wordcount":499},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes that can be used to implement various remote procedure calls (RPCs). In it, RPCs replace unique calls with universal \"message transfer\" calls, in which the message itself contains the called method's signature, as well as the parameters to pass for its execution.       \n   \n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1621267421,"lvl0":"Commands","lvl1":"This package contains interfaces and classes that can be used to implement various remote procedure calls (RPCs). In it, RPCs replace unique calls with universal \"message transfer\" calls, in which the message itself contains the called method's signature, as well as the parameters to pass for its execution.       \n   \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9a6df9a22cf23f58cf9b32e7646ff949","permalink":"/net/commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/commons/commands/","section":"net","summary":"Important points\nThis package allows you to create Commandable Interfaces, which are completely universal. Thus, for example, if an object extends ICommandable and returns a CommandSet, then you can implement a commandable client for this object, using various technologies and with minimal code.\n The package main components are:\n Commandable Interfaces – used to make classes with a certain logic and, which are capable of receiving and processing commands in this universal form.","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/net/commons/commands/","weight":0,"wordcount":497},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes that can be used to implement various remote procedure calls (RPCs). In it, RPCs replace unique calls with universal \"message transfer\" calls, in which the message itself contains the called method's signature, as well as the parameters to pass for its execution.       \n   \n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Commands","lvl1":"This package contains interfaces and classes that can be used to implement various remote procedure calls (RPCs). In it, RPCs replace unique calls with universal \"message transfer\" calls, in which the message itself contains the called method's signature, as well as the parameters to pass for its execution.       \n   \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aadff1e1bc8e503ab4ef65a8d434266f","permalink":"/node/commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/commands/","section":"node","summary":"Important points\nThis package allows you to create Commandable Interfaces, which are completely universal. Thus, for example, if an object extends ICommandable and returns a CommandSet, then you can implement a commandable client for this object, using various technologies and with minimal code.\n Description The package main components are:\n Commandable Interfaces – used to make classes with a certain logic and, which are capable of receiving and processing commands in this universal form.","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/node/commons/commands/","weight":0,"wordcount":498},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes that can be used to implement various remote procedure calls (RPCs). In it, RPCs replace unique calls with universal \"message transfer\" calls, in which the message itself contains the called method's signature, as well as the parameters to pass for its execution.       \n   \n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Commands","lvl1":"This package contains interfaces and classes that can be used to implement various remote procedure calls (RPCs). In it, RPCs replace unique calls with universal \"message transfer\" calls, in which the message itself contains the called method's signature, as well as the parameters to pass for its execution.       \n   \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"21749f2b6ba096cda6cb2fdfb229d742","permalink":"/python/commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/commands/","section":"python","summary":"Important points\nThis package allows you to create Commandable Interfaces, which are completely universal. Thus, for example, if an object extends ICommandable and returns a CommandSet, then you can implement a commandable client for this object, using various technologies and with minimal code.\nDescription The package main components are:\n Commandable Interfaces – used to make classes with a certain logic and, which are capable of receiving and processing commands in this universal form.","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/python/commons/commands/","weight":0,"wordcount":498},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a set of commands and events supported by a [commandable](../icommandable) object. The CommandSet supports command interceptors and command call chains.\n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623899766,"lvl0":"CommandSet","lvl1":"Contains a set of commands and events supported by a [commandable](../icommandable) object. The CommandSet supports command interceptors and command call chains.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3540db8565b4979d0194dc412f705de0","permalink":"/golang/commons/commands/command_set/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/commands/command_set/","section":"golang","summary":"Description The CommandSet class allows you to create a set of commands and events supported by a commandable object. In addition, it supports command interceptors and command call chains.\nImportant points\n CommandSets can be used as an alternative commandable interface to a business object. This class can be used to auto generate multiple external services for a business object.  Constructors NewCommandSet Creates an empty CommandSet object.\n NewCommandSet() *CommandSet","tags":null,"title":"CommandSet","type":"docs","url":"/hugo-docs/golang/commons/commands/command_set/","weight":0,"wordcount":626},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a set of commands and events supported by a [commandable](../icommandable) object. The CommandSet supports command interceptors and command call chains.\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"CommandSet","lvl1":"Contains a set of commands and events supported by a [commandable](../icommandable) object. The CommandSet supports command interceptors and command call chains.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6f5ce93ee2f0bdc35dafe57aa6ab1359","permalink":"/net/commons/commands/command_set/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/commons/commands/command_set/","section":"net","summary":"Description The CommandSet class allows you to create a set of commands and events supported by a commandable object. In addition, it supports command interceptors and command call chains.\nImportant points\n CommandSets can be used as an alternative commandable interface to a business object. This class can be used to auto generate multiple external services for a business object.  Constructors Creates an empty CommandSet object.\n CommandSet()\n Properties Commands Gets all commands registered in this command set.","tags":null,"title":"CommandSet","type":"docs","url":"/hugo-docs/net/commons/commands/command_set/","weight":0,"wordcount":609},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a set of commands and events supported by a [commandable](../icommandable) object. The CommandSet supports command interceptors and command call chains.\n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623089238,"lvl0":"CommandSet","lvl1":"Contains a set of commands and events supported by a [commandable](../icommandable) object. The CommandSet supports command interceptors and command call chains.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6589e87c4031f48543b99dff0494f249","permalink":"/node/commons/commands/command_set/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/commands/command_set/","section":"node","summary":"Description The CommandSet class allows you to create a set of commands and events supported by a commandable object. In addition, it supports command interceptors and command call chains.\nImportant points\n CommandSets can be used as an alternative commandable interface to a business object. This class can be used to auto generate multiple external services for a business object.  Constructors Creates an empty CommandSet object.\n public constructor()","tags":null,"title":"CommandSet","type":"docs","url":"/hugo-docs/node/commons/commands/command_set/","weight":0,"wordcount":627},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a set of commands and events supported by a [commandable](../icommandable) object. The CommandSet supports command interceptors and command call chains.\n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1620317689,"lvl0":"CommandSet","lvl1":"Contains a set of commands and events supported by a [commandable](../icommandable) object. The CommandSet supports command interceptors and command call chains.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"163c5dce730d94389ee2860a833179a9","permalink":"/python/commons/commands/command_set/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/commands/command_set/","section":"python","summary":"Description The CommandSet class allows you to create a set of commands and events supported by a commandable object. In addition, it supports command interceptors and command call chains.\nImportant points\n CommandSets can be used as an alternative commandable interface to a business object. This class can be used to auto generate multiple external services for a business object.  Constructors Creates an empty CommandSet object.\n CommandSet()\n Instance methods add_command Adds a command to this command set.","tags":null,"title":"CommandSet","type":"docs","url":"/hugo-docs/python/commons/commands/command_set/","weight":0,"wordcount":581},{"authors":null,"categories":null,"date":-62135596800,"description":"Component that supports configurable dependencies, logging and performance counters.\n","dir":"net/components/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622047938,"lvl0":"Component","lvl1":"Component that supports configurable dependencies, logging and performance counters.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"958681df8717977c9e81652ef5eda649","permalink":"/net/components/component/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/component/","section":"net","summary":"Inherits: IConfigurable, IReferenceable\nDescription The component class allows you to create components that support configurable dependencies, logging, and performance counters.\nConfiguration parameters  dependencies:  [dependency name 1]: Dependency 1 locator (descriptor) \u0026hellip; [dependency name N]: Dependency N locator (descriptor)    References  *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements *:logger:*:*:1.0 - (optional) ILogger components to pass log messages *:tracer:*:*:1.0 - (optional) ITracer components to trace executed operations \u0026hellip; References must match configured dependencies.","tags":null,"title":"Component","type":"docs","url":"/hugo-docs/net/components/component/","weight":0,"wordcount":146},{"authors":null,"categories":null,"date":-62135596800,"description":"Component that supports configurable dependencies, logging and performance counters.\n","dir":"node/components/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622047938,"lvl0":"Component","lvl1":"Component that supports configurable dependencies, logging and performance counters.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b51e4f21a8d8da28d2522a5eca9edc46","permalink":"/node/components/component/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/component/","section":"node","summary":"Implements: IConfigurable, IReferenceable\nDescription The component class allows you to create components that support configurable dependencies, logging, and performance counters.\nConfiguration parameters  dependencies:  [dependency name 1]: Dependency 1 locator (descriptor) \u0026hellip; [dependency name N]: Dependency N locator (descriptor)    References  *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements *:logger:*:*:1.0 - (optional) ILogger components to pass log messages *:tracer:*:*:1.0 - (optional) ITracer components to trace executed operations \u0026hellip; References must match configured dependencies.","tags":null,"title":"Component","type":"docs","url":"/hugo-docs/node/components/component/","weight":0,"wordcount":146},{"authors":null,"categories":null,"date":-62135596800,"description":"Component that supports configurable dependencies, logging and performance counters.\n","dir":"python/components/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"Component","lvl1":"Component that supports configurable dependencies, logging and performance counters.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f3a4aa8faf0bac77ff791f0c2d067b8a","permalink":"/python/components/component/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/component/","section":"python","summary":"Implements: IConfigurable, IReferenceable\nDescription The component class allows you to create components that support configurable dependencies, logging, and performance counters.\nConfiguration parameters  dependencies:  [dependency name 1]: Dependency 1 locator (descriptor) \u0026hellip; [dependency name N]: Dependency N locator (descriptor)    References  *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements *:logger:*:*:1.0 - (optional) ILogger components to pass log messages *:tracer:*:*:1.0 - (optional) ITracer components to trace executed operations \u0026hellip; References must match configured dependencies.","tags":null,"title":"Component","type":"docs","url":"/hugo-docs/python/components/component/","weight":0,"wordcount":138},{"authors":null,"categories":null,"date":-62135596800,"description":"Configuration of a component inside a container.\n","dir":"golang/container/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ComponentConfig","lvl1":"Configuration of a component inside a container.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fd0d74e792e58a58a7387510adb08491","permalink":"/golang/container/config/component_config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/config/component_config/","section":"golang","summary":"Description The ComponentConfig class allows you to configure a component residing inside a container.\nImportant points\n The configuration includes the type of information or descriptor and component configuration parameters.  Fields Descriptor Component\u0026rsquo;s descriptor (locator).\n Descriptor: Descriptor\n Type Component\u0026rsquo;s type descriptor.\n Type: TypeDescriptor\n Config Component\u0026rsquo;s configuration parameters.\n Config: ConfigParams\n  Constructors NewComponentConfigFromType Creates a new instance of the configuration component.\n NewComponentConfigFromType(typ *reflect.TypeDescriptor, config *config.","tags":null,"title":"ComponentConfig","type":"docs","url":"/hugo-docs/golang/container/config/component_config/","weight":0,"wordcount":156},{"authors":null,"categories":null,"date":-62135596800,"description":"Configuration of a component inside a container.\n","dir":"node/container/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"ComponentConfig","lvl1":"Configuration of a component inside a container.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"55f4e93d62fe9e4fe67f7491278fc9cc","permalink":"/node/container/config/component_config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/config/component_config/","section":"node","summary":"Description The ComponentConfig class allows you to configure a component residing inside a container.\nImportant points\n The configuration includes the type of information or descriptor and component configuration parameters.  Fields descriptor Component\u0026rsquo;s descriptor (locator).\n public descriptor: Descriptor\n type Component\u0026rsquo;s type descriptor.\n public type: TypeDescriptor\n config Component\u0026rsquo;s configuration parameters.\n public config: ConfigParams\n  Constructors Creates a new instance of the configuration component.\n public constructor(descriptor?","tags":null,"title":"ComponentConfig","type":"docs","url":"/hugo-docs/node/container/config/component_config/","weight":0,"wordcount":134},{"authors":null,"categories":null,"date":-62135596800,"description":"Configuration of a component inside a container.\n","dir":"python/container/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"ComponentConfig","lvl1":"Configuration of a component inside a container.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"59170626da8b0399974c8885af9937e8","permalink":"/python/container/config/component_config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/config/component_config/","section":"python","summary":"Description The ComponentConfig class allows you to configure a component residing inside a container.\nImportant points\n The configuration includes the type of information or descriptor and component configuration parameters.  Fields descriptor Component\u0026rsquo;s descriptor (locator).\n descriptor: Descriptor\n type Component\u0026rsquo;s type descriptor.\n type: TypeDescriptor\n config Component\u0026rsquo;s configuration parameters.\n config: ConfigParams\n  Constructors Creates a new instance of the configuration component.\n ComponentConfig(descriptor: Descriptor = None, type: TypeDescriptor = None, config: ConfigParams = None)","tags":null,"title":"ComponentConfig","type":"docs","url":"/hugo-docs/python/container/config/component_config/","weight":0,"wordcount":135},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves connection and credential parameters, validates them and generates connection options.\n","dir":"golang/components/connect/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CompositeConnectionResolver","lvl1":"Helper class that resolves connection and credential parameters, validates them and generates connection options.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cce849c00fd9f123b86d02b71ce2f523","permalink":"/golang/components/connect/composite_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/components/connect/composite_connection_resolver/","section":"golang","summary":"Description The CompositeConnectionResolver class allows you to resolve connection and credential parameters, validate them and generate connection options.\nConfiguration parameters connection(s):\n discovery_key: (optional) a key to retrieve the connection from IDiscovery protocol: communication protocol host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  credential(s):\n store_key: (optional) a key to retrieve the credentials from ICredentialStore username: user name password: user password  References  *:discovery:*:*:1.","tags":null,"title":"CompositeConnectionResolver","type":"docs","url":"/hugo-docs/golang/components/connect/composite_connection_resolver/","weight":0,"wordcount":566},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves connection and credential parameters, validates them and generates connection options.\n","dir":"net/components/connect/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CompositeConnectionResolver","lvl1":"Helper class that resolves connection and credential parameters, validates them and generates connection options.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"695eeaece0702f0457ae3acbd79569b8","permalink":"/net/components/connect/composite_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/components/connect/composite_connection_resolver/","section":"net","summary":"Inherits: IConfigurable, IReferenceable\nDescription The CompositeConnectionResolver class allows you to resolve connection and credential parameters, validate them and generate connection options.\nConfiguration parameters connection(s):\n discovery_key: (optional) a key to retrieve the connection from IDiscovery protocol: communication protocol host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  credential(s):\n store_key: (optional) a key to retrieve the credentials from ICredentialStore username: user name password: user password  References  *:discovery:*:*:1.","tags":null,"title":"CompositeConnectionResolver","type":"docs","url":"/hugo-docs/net/components/connect/composite_connection_resolver/","weight":0,"wordcount":540},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves connection and credential parameters, validates them and generates connection options.\n","dir":"node/components/connect/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CompositeConnectionResolver","lvl1":"Helper class that resolves connection and credential parameters, validates them and generates connection options.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1740f55a098cffe9ea056e37a6a353cb","permalink":"/node/components/connect/composite_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/components/connect/composite_connection_resolver/","section":"node","summary":"Implements: IConfigurable, IReferenceable\nDescription The CompositeConnectionResolver class allows you to resolve connection and credential parameters, validate them and generate connection options.\nConfiguration parameters connection(s):\n discovery_key: (optional) a key to retrieve the connection from IDiscovery protocol: communication protocol host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  credential(s):\n store_key: (optional) a key to retrieve the credentials from ICredentialStore username: user name password: user password  References  *:discovery:*:*:1.","tags":null,"title":"CompositeConnectionResolver","type":"docs","url":"/hugo-docs/node/components/connect/composite_connection_resolver/","weight":0,"wordcount":541},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves connection and credential parameters, validates them and generates connection options.\n","dir":"python/components/connect/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CompositeConnectionResolver","lvl1":"Helper class that resolves connection and credential parameters, validates them and generates connection options.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5aa0eaddd8062b17df1d986645f89cf9","permalink":"/python/components/connect/composite_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/components/connect/composite_connection_resolver/","section":"python","summary":"Implements: IConfigurable, IReferenceable\nDescription The CompositeConnectionResolver class allows you to resolve connection and credential parameters, validate them and generate connection options.\nConfiguration parameters connection(s):\n discovery_key: (optional) a key to retrieve the connection from IDiscovery protocol: communication protocol host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  credential(s):\n store_key: (optional) a key to retrieve the credentials from ICredentialStore username: user name password: user password  References  *:discovery:*:*:1.","tags":null,"title":"CompositeConnectionResolver","type":"docs","url":"/hugo-docs/python/components/connect/composite_connection_resolver/","weight":0,"wordcount":518},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all counters from component references into a single one.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CompositeCounters","lvl1":"Aggregates all counters from component references into a single one.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"11f6a2917a3651aec445a4a97422e8a6","permalink":"/golang/components/count/composite_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/count/composite_counters/","section":"golang","summary":"Description The CompositeCounters allows you to aggregate all counters from different component references into a single one.\nImportant points\n It allows to capture metrics and conveniently send them to multiple destinations.  References  *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements  Constructors NewCompositeCountersFromReferences Creates a new instance of the counters.\n NewCompositeCountersFromReferences(references refer.IReferences) *CompositeCounters\n  references: refer.IReferences - references to locate the component dependencies.  NewCompositeCounters Creates a new instance of the counters.","tags":null,"title":"CompositeCounters","type":"docs","url":"/hugo-docs/golang/components/count/composite_counters/","weight":0,"wordcount":397},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all counters from component references into a single one.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"CompositeCounters","lvl1":"Aggregates all counters from component references into a single one.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"03381fe1102f8b775101382c33f92d74","permalink":"/net/components/count/composite_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/count/composite_counters/","section":"net","summary":"Inherits: ICounters, IReconfigurable, ICounterTimingCallback\nDescription The CompositeCounters allows you to aggregate all counters from different component references into a single one.\nImportant points\n It allows to capture metrics and conveniently send them to multiple destinations.  References  *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements  Constructors Creates a new instance of the counters.\n public CompositeCounters(IReferences references = null)\n  references: IReferences - references to locate the component dependencies.","tags":null,"title":"CompositeCounters","type":"docs","url":"/hugo-docs/net/components/count/composite_counters/","weight":0,"wordcount":391},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all counters from component references into a single one.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"CompositeCounters","lvl1":"Aggregates all counters from component references into a single one.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"015e326eefb41a3c94a6575ca7f4ff9c","permalink":"/node/components/count/composite_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/count/composite_counters/","section":"node","summary":"Implements: ICounters, IReconfigurable, ICounterTimingCallback\nDescription The CompositeCounters allows you to aggregate all counters from different component references into a single one.\nImportant points\n It allows to capture metrics and conveniently send them to multiple destinations.  References  *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements  Constructors Creates a new instance of the counters.\n public constructor(references: IReferences = null)\n  references: IReferences - references to locate the component dependencies.","tags":null,"title":"CompositeCounters","type":"docs","url":"/hugo-docs/node/components/count/composite_counters/","weight":0,"wordcount":393},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all counters from component references into a single one.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"CompositeCounters","lvl1":"Aggregates all counters from component references into a single one.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3137dec1570ce031b0ae710bb0078112","permalink":"/python/components/count/composite_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/count/composite_counters/","section":"python","summary":"Implements: ICounters, IReconfigurable, ICounterTimingCallback\nDescription The CompositeCounters allows you to aggregate all counters from different component references into a single one.\nImportant points\n It allows to capture metrics and conveniently send them to multiple destinations.  References  *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements  Constructors Creates a new instance of the counters.\n CompositeCounters(references: IReferences = None)\n  references: IReferences - references to locate the component dependencies.","tags":null,"title":"CompositeCounters","type":"docs","url":"/hugo-docs/python/components/count/composite_counters/","weight":0,"wordcount":360},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates multiple factories into a single factory component.\n","dir":"golang/components/build/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"CompositeFactory","lvl1":"Aggregates multiple factories into a single factory component.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f1b1b5ade6e8510b088ea1f642dd75a6","permalink":"/golang/components/build/composite_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/build/composite_factory/","section":"golang","summary":"Description The CompositeFactory class allows you to aggregate multiple factories into a single factory component.\nImportant points\n When a new component is requested, it iterates through factories to locate the one able to create the requested component. Usually used to keep all supported factories in a single place.  Constructors NewCompositeFactoryFromFactories Creates a new instance of the factory.\n NewCompositeFactoryFromFactories(factories \u0026hellip;IFactory) *CompositeFactory\n  factories: \u0026hellip;IFactory - a list of factories to embed into this factory.","tags":null,"title":"CompositeFactory","type":"docs","url":"/hugo-docs/golang/components/build/composite_factory/","weight":0,"wordcount":259},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates multiple factories into a single factory component.\n","dir":"net/components/build/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"CompositeFactory","lvl1":"Aggregates multiple factories into a single factory component.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"61bee54917a75bc73638c1aecc2da9a3","permalink":"/net/components/build/composite_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/build/composite_factory/","section":"net","summary":"Inherits: IFactory\nDescription The CompositeFactory class allows you to aggregate multiple factories into a single factory component.\nImportant points\n When a new component is requested, it iterates through factories to locate the one able to create the requested component. Usually used to keep all supported factories in a single place.  Constructors Creates a new instance of the factory.\n public CompositeFactory(params IFactory[] factories)\n  factories: IFactory[] - a list of factories to embed into this factory.","tags":null,"title":"CompositeFactory","type":"docs","url":"/hugo-docs/net/components/build/composite_factory/","weight":0,"wordcount":270},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates multiple factories into a single factory component.\n","dir":"node/components/build/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"CompositeFactory","lvl1":"Aggregates multiple factories into a single factory component.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e22ad744947824ad2eb90492060a1034","permalink":"/node/components/build/composite_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/build/composite_factory/","section":"node","summary":"Implements: IFactory\nDescription The CompositeFactory class allows you to aggregate multiple factories into a single factory component.\nImportant points\n When a new component is requested, it iterates through factories to locate the one able to create the requested component. Usually used to keep all supported factories in a single place.  Constructors Creates a new instance of the factory.\n public constructor(\u0026hellip;factories: IFactory[])\n  factories: IFactory[] - a list of factories to embed into this factory.","tags":null,"title":"CompositeFactory","type":"docs","url":"/hugo-docs/node/components/build/composite_factory/","weight":0,"wordcount":260},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates multiple factories into a single factory component.\n","dir":"python/components/build/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621088064,"lvl0":"CompositeFactory","lvl1":"Aggregates multiple factories into a single factory component.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2602a4819fe480dd9ec238c7bcdc6a54","permalink":"/python/components/build/composite_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/build/composite_factory/","section":"python","summary":"Implements: IFactory\nDescription The CompositeFactory class allows you to aggregate multiple factories into a single factory component.\nImportant points\n When a new component is requested, it iterates through factories to locate the one able to create the requested component. Usually used to keep all supported factories in a single place.  Constructors Creates a new instance of the factory.\n CompositeFactory(*factories: IFactory)\n  factories: IFactory - a list of factories to embed into this factory.","tags":null,"title":"CompositeFactory","type":"docs","url":"/hugo-docs/python/components/build/composite_factory/","weight":0,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all loggers from component references under a single component.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CompositeLogger","lvl1":"Aggregates all loggers from component references under a single component.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4a31ee09ff19356aee3835385cc97863","permalink":"/golang/components/log/composite_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/log/composite_logger/","section":"golang","summary":"Implements: Logger\nDescription The CompositeLogger class allows you to aggregate loggers from component references into a single component.\nImportant points\n It allows to log messages and conveniently send them to multiple destinations.  References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages  Constructors NewCompositeLoggerFromReferences Creates a new instance of the logger.\n NewCompositeLoggerFromReferences(references refer.IReferences) *CompositeLogger\n  references: refer.IReferences - references to locate the component dependencies.  NewCompositeLogger Creates a new instance of the logger.","tags":null,"title":"CompositeLogger","type":"docs","url":"/hugo-docs/golang/components/log/composite_logger/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all loggers from component references under a single component.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"CompositeLogger","lvl1":"Aggregates all loggers from component references under a single component.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f27046373dd094398b3081abdf764331","permalink":"/net/components/log/composite_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/composite_logger/","section":"net","summary":"Inherits: IReferenceable, Logger\nDescription The CompositeLogger class allows you to aggregate loggers from component references into a single component.\nImportant points\n It allows to log messages and conveniently send them to multiple destinations.  References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages  Constructors Creates a new instance of the logger.\n public CompositeLogger(IReferences references = null)\n  references: IReferences - references to locate the component dependencies.","tags":null,"title":"CompositeLogger","type":"docs","url":"/hugo-docs/net/components/log/composite_logger/","weight":0,"wordcount":193},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all loggers from component references under a single component.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622675980,"lvl0":"CompositeLogger","lvl1":"Aggregates all loggers from component references under a single component.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3e0db73aaa0c467ec8d411d0c6865576","permalink":"/node/components/log/composite_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/log/composite_logger/","section":"node","summary":"Implements: IReferenceable\nExtends: Logger\nDescription The CompositeLogger class allows you to aggregate loggers from component references into a single component.\nImportant points\n It allows to log messages and conveniently send them to multiple destinations.  References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages  Constructors Creates a new instance of the logger.\n public constructor(references: IReferences = null)\n  references: IReferences - references to locate the component dependencies.","tags":null,"title":"CompositeLogger","type":"docs","url":"/hugo-docs/node/components/log/composite_logger/","weight":0,"wordcount":186},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all loggers from component references under a single component.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"CompositeLogger","lvl1":"Aggregates all loggers from component references under a single component.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a91f9b25e620fc252f6b4d0b19cf4edf","permalink":"/python/components/log/composite_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/log/composite_logger/","section":"python","summary":"Implements: Logger, IReferenceable\nDescription The CompositeLogger class allows you to aggregate loggers from component references into a single component.\nImportant points\n It allows to log messages and conveniently send them to multiple destinations.  References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages  Constructors Creates a new instance of the logger.\n CompositeLogger(references: IReferences = None)\n  references: IReferences - references to locate the component dependencies.","tags":null,"title":"CompositeLogger","type":"docs","url":"/hugo-docs/python/components/log/composite_logger/","weight":0,"wordcount":161},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all tracers from component references under a single component.\nIt allows to record traces and conveniently send them to multiple destinations. \n","dir":"golang/components/trace/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CompositeTracer","lvl1":"Aggregates all tracers from component references under a single component.\nIt allows to record traces and conveniently send them to multiple destinations. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6362a63061f89c354477abf6a32d24d3","permalink":"/golang/components/trace/composite_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/trace/composite_tracer/","section":"golang","summary":"Description The CompositeTracer class allows you to aggregate all tracers from component references under a single component.\nReferences  *:tracer:*:*:1.0 - (optional) ITracer components to pass operation tracessource  Constructors NewCompositeTracer Creates a new instance of the tracer.\n NewCompositeTracer(references cref.IReferences) *CompositeTracer\n  references: cref.IReferences - references to locate the component dependencies.  Fields Tracers List of tracers\n Tracers: []ITracer\n  Methods BeginTrace Begings recording an operation trace","tags":null,"title":"CompositeTracer","type":"docs","url":"/hugo-docs/golang/components/trace/composite_tracer/","weight":0,"wordcount":299},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all tracers from component references under a single component.\nIt allows to record traces and conveniently send them to multiple destinations. \n","dir":"net/components/trace/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"CompositeTracer","lvl1":"Aggregates all tracers from component references under a single component.\nIt allows to record traces and conveniently send them to multiple destinations. \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2e03e85d69048c035f4af6f13ae0caba","permalink":"/net/components/trace/composite_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/trace/composite_tracer/","section":"net","summary":"Inherits: ITracer, IReferenceable\nDescription The CompositeTracer class allows you to aggregate all tracers from component references under a single component.\nReferences  *:tracer:*:*:1.0 - (optional) ITracer components to pass operation tracessource  Constructors Creates a new instance of the tracer.\n public CompositeTracer(IReferences references = null)\n  references: IReferences - references to locate the component dependencies.  Fields _tracers List of tracers\n protected _tracers: IList\u0026lt;ITracer\u0026gt; = new List\u0026lt;ITracer\u0026gt;()","tags":null,"title":"CompositeTracer","type":"docs","url":"/hugo-docs/net/components/trace/composite_tracer/","weight":0,"wordcount":301},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all tracers from component references under a single component.\nIt allows to record traces and conveniently send them to multiple destinations. \n","dir":"node/components/trace/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"CompositeTracer","lvl1":"Aggregates all tracers from component references under a single component.\nIt allows to record traces and conveniently send them to multiple destinations. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"50efad881792307e2859fa3a86249c5e","permalink":"/node/components/trace/composite_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/trace/composite_tracer/","section":"node","summary":"Implements: ITracer, IReferenceable\nDescription The CompositeTracer class allows you to aggregate all tracers from component references under a single component.\nReferences  *:tracer:*:*:1.0 - (optional) ITracer components to pass operation tracessource  Constructors Creates a new instance of the tracer.\n public constructor(references: IReferences = null)\n  references: IReferences - references to locate the component dependencies.  Fields _tracers List of tracers\n protected _tracers: ITracer[]\n  Instance methods beginTrace Begings recording an operation trace","tags":null,"title":"CompositeTracer","type":"docs","url":"/hugo-docs/node/components/trace/composite_tracer/","weight":0,"wordcount":297},{"authors":null,"categories":null,"date":-62135596800,"description":"Aggregates all tracers from component references under a single component.\nIt allows to record traces and conveniently send them to multiple destinations. \n","dir":"python/components/trace/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"CompositeTracer","lvl1":"Aggregates all tracers from component references under a single component.\nIt allows to record traces and conveniently send them to multiple destinations. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fec0b774a71ab988a65938f59ea87019","permalink":"/python/components/trace/composite_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/trace/composite_tracer/","section":"python","summary":"Implements: ITracer, IReferenceable\nDescription The CompositeTracer class allows you to aggregate all tracers from component references under a single component.\nReferences  *:tracer:*:*:1.0 - (optional) ITracer components to pass operation tracessource  Constructors Creates a new instance of the tracer.\n CompositeTracer(references: IReferences = None)\n  references: IReferences - references to locate the component dependencies.  Fields _TRACERS List of tracers\n _TRACERS: List[ITracer] = []\n  Instance methods begin_trace Begings recording an operation trace","tags":null,"title":"CompositeTracer","type":"docs","url":"/hugo-docs/python/components/trace/composite_tracer/","weight":0,"wordcount":280},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Config","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b8130caeba91c4059682cf70649833f6","permalink":"/dart/commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/config/","section":"dart","summary":"","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/dart/commons/config/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Config","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2d9b2583fa7c39d30701c43a74a904b3","permalink":"/dart/components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/config/","section":"dart","summary":"","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/dart/components/config/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"A package containing  a set of classes and interfaces that allows you to add configurations to components.\n","dir":"golang/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1623089238,"lvl0":"Config","lvl1":"A package containing  a set of classes and interfaces that allows you to add configurations to components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"42316ed106205df35964f727f56ec738","permalink":"/golang/commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/config/","section":"golang","summary":"Description The config package contains a set of classes and interfaces that allows you to add configurations to components. These configurations can contain different sets of configuration paramters, which can be used to define things such as access control credentials.\nInterfaces IConfigurable An interface to set configuration parameters to an object. It can be added to any existing class by implementing a single Configure() method. If you need to emphasise the fact that Configure() method can be called multiple times to change object configuration in runtime, use IReconfigurable interface instead.","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/golang/commons/config/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains interfaces and classes used to create configuration readers from different sources, such as YAML and JSON files. \n","dir":"golang/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1623426469,"lvl0":"Config","lvl1":"\nThis package contains interfaces and classes used to create configuration readers from different sources, such as YAML and JSON files. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"183234077b4b05ad1a04dcc4391c694f","permalink":"/golang/components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/config/","section":"golang","summary":"Interfaces IConfigReader Interface for configuration readers that retrieve configuration from various sources and make it available for other components.\nSome IConfigReader implementations may support configuration parameterization. The parameterization allows to use configuration as a template and inject there dynamic values. The values may come from application command like arguments or environment variables.\nClasses ConfigReader Data object to store cached values with their keys used by MemoryCache\nDefaultConfigReaderFactory Creates IConfigReader components by their descriptors.","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/golang/components/config/","weight":0,"wordcount":134},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create container and component configurations.  \nContainer configuration serves as a recipe for instantiating and  configuring components inside the container.  \n\nExternal configurations (stored as YAML or JSON) are passed to the container  and define the structure of the objects that need to be recreated in the container.  Objects can be defined in two ways:\n- using descriptors (using those registered factories can recreate the object) \n- using hard-coded types (objects are recreated directly, based on their type, bypassing  factories). \n\nIn addition, various configurations are stored for each object. The container recreates the  objects and, if they implement the IConfigurable interface, passes them their configurations. \n","dir":"golang/container/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624022469,"lvl0":"Config","lvl1":"This package contains classes used to create container and component configurations.  \nContainer configuration serves as a recipe for instantiating and  configuring components inside the container.  \n\nExternal configurations (stored as YAML or JSON) are passed to the container  and define the structure of the objects that need to be recreated in the container.  Objects can be defined in two ways:\n- using descriptors (using those registered factories can recreate the object) \n- using hard-coded types (objects are recreated directly, based on their type, bypassing  factories). \n\nIn addition, various configurations are stored for each object. The container recreates the  objects and, if they implement the IConfigurable interface, passes them their configurations. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2d9695dc03d2659dd309ffe816556a98","permalink":"/golang/container/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/config/","section":"golang","summary":" Classes ComponentConfig Class used to configure a component residing inside a container.\nContainerConfig Class used to create a container configuration as a list of component configurations.\nContainerConfigReader Class used to read a container’s configuration from a JSON or YAML file.\n ","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/golang/container/config/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"A package containing  a set of classes and interfaces that allows you to add configurations to components.\n","dir":"net/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621530648,"lvl0":"Config","lvl1":"A package containing  a set of classes and interfaces that allows you to add configurations to components.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9aa5dd25fec9b7501a8b0072b76771d2","permalink":"/net/commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/config/","section":"net","summary":"Description The config package contains a set of classes and interfaces that allows you to add configurations to components. These configurations can contain different sets of configuration paramters, which can be used to define things such as access control credentials.\nInterfaces IConfigurable An interface to set configuration parameters to an object. It can be added to any existing class by implementing a single Сonfigure() method. If you need to emphasise the fact that Сonfigure() method can be called multiple times to change object configuration in runtime, use IReconfigurable interface instead.","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/net/commons/config/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains interfaces and classes used to create configuration readers from different sources, such as YAML and JSON files. \n","dir":"net/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621575585,"lvl0":"Config","lvl1":"\nThis package contains interfaces and classes used to create configuration readers from different sources, such as YAML and JSON files. \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3d1035cb4d93a5a1fff8dedfd88e1bc2","permalink":"/net/components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/config/","section":"net","summary":"Interfaces IConfigReader Interface for configuration readers that retrieve configuration from various sources and make it available for other components.\nSome IConfigReader implementations may support configuration parameterization. The parameterization allows to use configuration as a template and inject there dynamic values. The values may come from application command like arguments or environment variables.\nClasses ConfigReader Data object to store cached values with their keys used by MemoryCache\nDefaultConfigReaderFactory Creates IConfigReader components by their descriptors.","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/net/components/config/","weight":0,"wordcount":134},{"authors":null,"categories":null,"date":-62135596800,"description":"A package containing  a set of classes and interfaces that allows you to add configurations to components.\n","dir":"node/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621269225,"lvl0":"Config","lvl1":"A package containing  a set of classes and interfaces that allows you to add configurations to components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f7b51e1578b29a57a6635d640382dc66","permalink":"/node/commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/config/","section":"node","summary":"Description The config package contains a set of classes and interfaces that allows you to add configurations to components. These configurations can contain different sets of configuration paramters, which can be used to define things such as access control credentials.\nInterfaces IConfigurable An interface to set configuration parameters to an object. It can be added to any existing class by implementing a single configure() method. If you need to emphasise the fact that configure() method can be called multiple times to change object configuration in runtime, use IReconfigurable interface instead.","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/node/commons/config/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains interfaces and classes used to create configuration readers from different sources, such as YAML and JSON files. \n","dir":"node/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Config","lvl1":"\nThis package contains interfaces and classes used to create configuration readers from different sources, such as YAML and JSON files. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d129a104238a10de83f7b090e5cd4c66","permalink":"/node/components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/config/","section":"node","summary":"Interfaces IConfigReader Interface for configuration readers that retrieve configuration from various sources and make it available for other components.\nSome IConfigReader implementations may support configuration parameterization. The parameterization allows to use configuration as a template and inject there dynamic values. The values may come from application command like arguments or environment variables.\nClasses ConfigReader Data object to store cached values with their keys used by MemoryCache\nDefaultConfigReaderFactory Creates IConfigReader components by their descriptors.","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/node/components/config/","weight":0,"wordcount":134},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create container and component configurations.  \nContainer configuration serves as a recipe for instantiating and  configuring components inside the container.  \n\nExternal configurations (stored as YAML or JSON) are passed to the container  and define the structure of the objects that need to be recreated in the container.  Objects can be defined in two ways:\n- using descriptors (using those registered factories can recreate the object) \n- using hard-coded types (objects are recreated directly, based on their type, bypassing  factories). \n\nIn addition, various configurations are stored for each object. The container recreates the  objects and, if they implement the IConfigurable interface, passes them their configurations. \n","dir":"node/container/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622849575,"lvl0":"Config","lvl1":"This package contains classes used to create container and component configurations.  \nContainer configuration serves as a recipe for instantiating and  configuring components inside the container.  \n\nExternal configurations (stored as YAML or JSON) are passed to the container  and define the structure of the objects that need to be recreated in the container.  Objects can be defined in two ways:\n- using descriptors (using those registered factories can recreate the object) \n- using hard-coded types (objects are recreated directly, based on their type, bypassing  factories). \n\nIn addition, various configurations are stored for each object. The container recreates the  objects and, if they implement the IConfigurable interface, passes them their configurations. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"70299d89946cd9582d2594f4c7fac985","permalink":"/node/container/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/config/","section":"node","summary":" Classes ComponentConfig Class used to configure a component residing inside a container.\nContainerConfig Class used to create a container configuration as a list of component configurations.\nContainerConfigReader Class used to read a container’s configuration from a JSON or YAML file.\n ","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/node/container/config/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"A package containing  a set of classes and interfaces that allows you to add configurations to components.\n","dir":"python/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1620901025,"lvl0":"Config","lvl1":"A package containing  a set of classes and interfaces that allows you to add configurations to components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bb24351da4ea574999d793e97cbf1a27","permalink":"/python/commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/config/","section":"python","summary":"Description The config package contains a set of classes and interfaces that allows you to add configurations to components. These configurations can contain different sets of configuration paramters, which can be used to define things such as access control credentials.\nInterfaces IConfigurable An interface to set configuration parameters to an object. It can be added to any existing class by implementing a single configure() method. If you need to emphasise the fact that configure() method can be called multiple times to change object configuration in runtime, use IReconfigurable interface instead.","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/python/commons/config/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains interfaces and classes used to create configuration readers from different sources, such as YAML and JSON files. \n","dir":"python/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Config","lvl1":"\nThis package contains interfaces and classes used to create configuration readers from different sources, such as YAML and JSON files. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ac90a773d7caeabddd1fc6a43a035619","permalink":"/python/components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/config/","section":"python","summary":"Interfaces IConfigReader Interface for configuration readers that retrieve configuration from various sources and make it available for other components.\nSome IConfigReader implementations may support configuration parameterization. The parameterization allows to use configuration as a template and inject there dynamic values. The values may come from application command like arguments or environment variables.\nClasses ConfigReader Data object to store cached values with their keys used by MemoryCache\nDefaultConfigReaderFactory Creates IConfigReader components by their descriptors.","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/python/components/config/","weight":0,"wordcount":134},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create container and component configurations.  \nContainer configuration serves as a recipe for instantiating and  configuring components inside the container.  \n\nExternal configurations (stored as YAML or JSON) are passed to the container  and define the structure of the objects that need to be recreated in the container.  Objects can be defined in two ways:\n- using descriptors (using those registered factories can recreate the object) \n- using hard-coded types (objects are recreated directly, based on their type, bypassing  factories). \n\nIn addition, various configurations are stored for each object. The container recreates the  objects and, if they implement the IConfigurable interface, passes them their configurations. \n","dir":"python/container/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622770713,"lvl0":"Config","lvl1":"This package contains classes used to create container and component configurations.  \nContainer configuration serves as a recipe for instantiating and  configuring components inside the container.  \n\nExternal configurations (stored as YAML or JSON) are passed to the container  and define the structure of the objects that need to be recreated in the container.  Objects can be defined in two ways:\n- using descriptors (using those registered factories can recreate the object) \n- using hard-coded types (objects are recreated directly, based on their type, bypassing  factories). \n\nIn addition, various configurations are stored for each object. The container recreates the  objects and, if they implement the IConfigurable interface, passes them their configurations. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"54bf48d88af7c781121f28721f594db5","permalink":"/python/container/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/config/","section":"python","summary":" Classes ComponentConfig Class used to configure a component residing inside a container.\nContainerConfig Class used to create a container configuration as a list of component configurations.\nContainerConfigReader Class used to read a container’s configuration from a JSON or YAML file.\n ","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/python/container/config/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors related to mistakes in microservice's user-defined configurations.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624227279,"lvl0":"Configerror","lvl1":"Errors related to mistakes in microservice's user-defined configurations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c51a57e9ce3121c08f8ce587e4250f61","permalink":"/golang/commons/errors/config_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/config_error/","section":"golang","summary":"Description The Configerror is used to manage errors related to mistakes in a microservice\u0026rsquo;s user-defined configurations.\nConstructors NewConfigError Creates an error instance and assigns its values.\n NewConfigError(correlationId, code, message string) *ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.  ","tags":null,"title":"Configerror","type":"docs","url":"/hugo-docs/golang/commons/errors/config_error/","weight":0,"wordcount":65},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors related to mistakes in microservice's user-defined configurations.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ConfigException","lvl1":"Errors related to mistakes in microservice's user-defined configurations.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f2a766f7873073ccf22ff8964f37f9f6","permalink":"/net/commons/errors/config_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/config_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The ConfigException is used to manage errors related to mistakes in microservice\u0026rsquo;s user-defined configurations.\nConstructors Creates an error instance and assigns its values.\n public ConfigException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"ConfigException","type":"docs","url":"/hugo-docs/net/commons/errors/config_exception/","weight":0,"wordcount":133},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors related to mistakes in microservice's user-defined configurations.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ConfigException","lvl1":"Errors related to mistakes in microservice's user-defined configurations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c3d14f21cca08bcde3c2908ce0d59bd9","permalink":"/node/commons/errors/config_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/config_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The ConfigException is used to manage errors related to mistakes in microservice\u0026rsquo;s user-defined configurations.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"ConfigException","type":"docs","url":"/hugo-docs/node/commons/errors/config_exception/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors related to mistakes in microservice's user-defined configurations.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620999433,"lvl0":"ConfigException","lvl1":"Errors related to mistakes in microservice's user-defined configurations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4d3c829361b6273337fa5682dd42504b","permalink":"/python/commons/errors/config_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/config_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The ConfigException is used to manage errors related to mistakes in microservice\u0026rsquo;s user-defined configurations.\nConstructors Creates an error instance and assigns its values.\n ConfigException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: str - (optional) a human-readable description of the error.","tags":null,"title":"ConfigException","type":"docs","url":"/hugo-docs/python/commons/errors/config_exception/","weight":0,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a key-value map with configuration parameters. \n\n \n","dir":"golang/commons/config/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1623966079,"lvl0":"ConfigParams","lvl1":"Contains a key-value map with configuration parameters. \n\n \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0043bc6c2e90614bc90342459e324ff7","permalink":"/golang/commons/config/config_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/config/config_params/","section":"golang","summary":"Implements: StringValueMap\nSee also IConfigurable, StringValueMap\nDescription The ConfigParams class contains a key-value map with configuration parameters. It allows you to define configuration parameters that can be used, for example, to define access control credentials.\nImportant points:\n In general, ConfigParams is used to pass configurations to IConfigurable objects. It also serves as a basis for more concrete configurations, such as ConnectionParams or CredentialParams. This class stores all values as strings.","tags":null,"title":"ConfigParams","type":"docs","url":"/hugo-docs/golang/commons/config/config_params/","weight":0,"wordcount":572},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a key-value map with configuration parameters. \n\n \n","dir":"net/commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ConfigParams","lvl1":"Contains a key-value map with configuration parameters. \n\n \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7d06c9b58ebd12b98b97e801a66dca7a","permalink":"/net/commons/config/config_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/commons/config/config_params/","section":"net","summary":"Inherits: StringValueMap\nSee also IConfigurable, StringValueMap\nDescription The ConfigParams class contains a key-value map with configuration parameters. It allows you to define configuration parameters that can be used, for example, to define access control credentials.\nImportant points:\n In general, ConfigParams is used to pass configurations to IConfigurable objects. It also serves as a basis for more concrete configurations, such as ConnectionParams or CredentialParams. This class stores all values as strings.","tags":null,"title":"ConfigParams","type":"docs","url":"/hugo-docs/net/commons/config/config_params/","weight":0,"wordcount":674},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a key-value map with configuration parameters. \n\n \n","dir":"node/commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"ConfigParams","lvl1":"Contains a key-value map with configuration parameters. \n\n \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1e97c1e999fc54995cf5c7deecc59727","permalink":"/node/commons/config/config_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/commons/config/config_params/","section":"node","summary":"Extends: StringValueMap\nSee also IConfigurable, StringValueMap\nDescription The ConfigParams class contains a key-value map with configuration parameters. It allows you to define configuration parameters that can be used, for example, to define access control credentials.\nImportant points:\n In general, ConfigParams is used to pass configurations to IConfigurable objects. It also serves as a basis for more concrete configurations, such as ConnectionParams or CredentialParams. This class stores all values as strings.","tags":null,"title":"ConfigParams","type":"docs","url":"/hugo-docs/node/commons/config/config_params/","weight":0,"wordcount":645},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a key-value map with configuration parameters. \n\n \n","dir":"python/commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"ConfigParams","lvl1":"Contains a key-value map with configuration parameters. \n\n \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fe283e3cd4d1bf4854fd4a9b0183d9ed","permalink":"/python/commons/config/config_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/config/config_params/","section":"python","summary":"Description The ConfigParams class contains a key-value map with configuration parameters. It allows you to define configuration parameters that can be used, for example, to define access control credentials.\nImportant points:\n In general, ConfigParams is used to pass configurations to IConfigurable objects. It also serves as a basis for more concrete configurations, such as ConnectionParams or CredentialParams. This class stores all values as strings. These values can be serialized as JSON or string forms.","tags":null,"title":"ConfigParams","type":"docs","url":"/hugo-docs/python/commons/config/config_params/","weight":0,"wordcount":632},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract config reader that supports configuration parameterization.\n","dir":"golang/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ConfigReader","lvl1":"Abstract config reader that supports configuration parameterization.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9ebc251e7c3ae0c22c8d2a3a92258f97","permalink":"/golang/components/config/config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/config/config_reader/","section":"golang","summary":"Description The ConfigReader class allows you to create config readers that support configuration parameterization.\nConfiguration parameters  parameters: this entire section is used as template parameters  \u0026hellip;    Constructors NewConfigReader Creates a new instance of the config reader.\n NewConfigReader() *ConfigReader\n Methods Configure Configures component by passing configuration parameters.\n (c *ConfigReader) Configure(config *cconfig.ConfigParams)\n  cconfig: *cconfig.ConfigParams - configuration parameters to be set.  Parameterize Parameterized configuration template given as string with dynamic parameters.","tags":null,"title":"ConfigReader","type":"docs","url":"/hugo-docs/golang/components/config/config_reader/","weight":0,"wordcount":108},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract config reader that supports configuration parameterization.\n","dir":"net/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"ConfigReader","lvl1":"Abstract config reader that supports configuration parameterization.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f904ed8b30439a56142649e79528ae3b","permalink":"/net/components/config/config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/config/config_reader/","section":"net","summary":"Inherits: IConfigurable\nDescription The ConfigReader class allows you to create config readers that support configuration parameterization.\nConfiguration parameters  parameters: this entire section is used as template parameters  \u0026hellip;    Instance methods Configure Configures component by passing configuration parameters.\n public void Configure(ConfigParams config)\n  config: ConfigParams - configuration parameters to be set.  Parameterize Parameterized configuration template given as string with dynamic parameters.\n protected string Parameterize(string config, ConfigParams parameters)","tags":null,"title":"ConfigReader","type":"docs","url":"/hugo-docs/net/components/config/config_reader/","weight":0,"wordcount":145},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract config reader that supports configuration parameterization.\n","dir":"node/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"ConfigReader","lvl1":"Abstract config reader that supports configuration parameterization.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9c5639222676645b42e5c3d1de5f6561","permalink":"/node/components/config/config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/config/config_reader/","section":"node","summary":"Implements: IConfigurable\nDescription The ConfigReader class allows you to create config readers that support configuration parameterization.\nConfiguration parameters  parameters: this entire section is used as template parameters  \u0026hellip;    Instance methods configure Configures component by passing configuration parameters.\n public configure(config: ConfigParams): void\n  config: ConfigParams - configuration parameters to be set.  parameterize Parameterized configuration template given as string with dynamic parameters.\n protected parameterize(config: string, parameters: ConfigParams): string","tags":null,"title":"ConfigReader","type":"docs","url":"/hugo-docs/node/components/config/config_reader/","weight":0,"wordcount":145},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract config reader that supports configuration parameterization.\n","dir":"python/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"ConfigReader","lvl1":"Abstract config reader that supports configuration parameterization.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d499f4e861403c02c0f026dceee3954d","permalink":"/python/components/config/config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/config/config_reader/","section":"python","summary":"Implements: IConfigurable\nDescription The ConfigReader class allows you to create config readers that support configuration parameterization.\nConfiguration parameters  parameters: this entire section is used as template parameters  \u0026hellip;    Instance methods configure Configures component by passing configuration parameters.\n configure(config: ConfigParams)\n  config: ConfigParams - configuration parameters to be set.  _parameterize Parameterized configuration template given as string with dynamic parameters.\n _parameterize(config: str, parameters: ConfigParams): str","tags":null,"title":"ConfigReader","type":"docs","url":"/hugo-docs/python/components/config/config_reader/","weight":0,"wordcount":141},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors raised by conflicts between object versions that were posted by the user and those that are stored on the server.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624227383,"lvl0":"Conflicterror","lvl1":"Errors raised by conflicts between object versions that were posted by the user and those that are stored on the server.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"737c86af3763afcc4e795875d09ed3c1","permalink":"/golang/commons/errors/conflict_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/conflict_error/","section":"golang","summary":"Description The Conflicterror class is used to manage errors raised by conflicts between object versions that were posted by the user and those that are stored on the server\nConstructors NewConflictError Creates an error instance and assigns its values.\n NewConflictError(correlationId, code, message string) *ApplicationError\n  correlation_id: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"Conflicterror","type":"docs","url":"/hugo-docs/golang/commons/errors/conflict_error/","weight":0,"wordcount":78},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors raised by conflicts between object versions that were posted by the user and those that are stored on the server.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ConflictException","lvl1":"Errors raised by conflicts between object versions that were posted by the user and those that are stored on the server.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bb293ce90a7f86511379a1e7ae0ebdfa","permalink":"/net/commons/errors/conflict_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/conflict_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The ConflictException class is used to manage errors raised by conflicts between object versions that were posted by the user and those that are stored on the server\nConstructors Creates an error instance and assigns its values.\n public ConflictException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code.","tags":null,"title":"ConflictException","type":"docs","url":"/hugo-docs/net/commons/errors/conflict_exception/","weight":0,"wordcount":147},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors raised by conflicts between object versions that were posted by the user and those that are stored on the server.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ConflictException","lvl1":"Errors raised by conflicts between object versions that were posted by the user and those that are stored on the server.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8a30ee9814f68a2d7ab5d3729d907ff1","permalink":"/node/commons/errors/conflict_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/conflict_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The ConflictException class is used to manage errors raised by conflicts between object versions that were posted by the user and those that are stored on the server\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code.","tags":null,"title":"ConflictException","type":"docs","url":"/hugo-docs/node/commons/errors/conflict_exception/","weight":0,"wordcount":87},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors raised by conflicts between object versions that were posted by the user and those that are stored on the server.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620406470,"lvl0":"ConflictException","lvl1":"Errors raised by conflicts between object versions that were posted by the user and those that are stored on the server.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"40e54f3445e7a92c920e9e17c47b3733","permalink":"/python/commons/errors/conflict_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/conflict_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The ConflictException class is used to manage errors raised by conflicts between object versions that were posted by the user and those that are stored on the server\nConstructors Creates an error instance and assigns its values.\n ConflictException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code.","tags":null,"title":"ConflictException","type":"docs","url":"/hugo-docs/python/commons/errors/conflict_exception/","weight":0,"wordcount":86},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Connect","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1d299e3653d175816cbf1cc185a1dea2","permalink":"/dart/components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/connect/","section":"dart","summary":"","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/dart/components/connect/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\n\nThis package contains interfaces and classes used to define connection parameters\n","dir":"golang/components/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1623426469,"lvl0":"Connect","lvl1":"\n\nThis package contains interfaces and classes used to define connection parameters\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3aa6370177a9286a16ebb1862f960a79","permalink":"/golang/components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/connect/","section":"golang","summary":"Important points\n A Discovery is a service that stores a registry of various end-points. There are two types of discovery:  Static discovery: all services have static IP addresses that are configured from the start and don\u0026rsquo;t change along the way. As of lately, it is used more often than dynamic, because it is simpler to use and more reliable. Dynamic discovery: every time a service starts, it registers its address in the discovery service.","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/golang/components/connect/","weight":0,"wordcount":195},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains an interface used to create message queue connections.\n","dir":"golang/messaging/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Connect","lvl1":"This package contains an interface used to create message queue connections.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f96f09e8d29f7a71d99aeb4b1bc67421","permalink":"/golang/messaging/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/connect/","section":"golang","summary":" Interfaces IMessageQueueConnection Defines an interface for message queue connections\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/golang/messaging/connect/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to retrieve connections for HTTP-based services and clients.\n","dir":"golang/rpc/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624305939,"lvl0":"Connect","lvl1":"This package contains a class used to retrieve connections for HTTP-based services and clients.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eefd34d00f0129b8a9a7bbade349454f","permalink":"/golang/rpc/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/connect/","section":"golang","summary":" Classes HttpConnectionResolver Helper class to retrieve connections for HTTP-based services and clients.\nIn addition to regular functions of ConnectionResolver, this class is able to parse http://URIs and validate connection parameters before returning them.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/golang/rpc/connect/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"\n\nThis package contains interfaces and classes used to define connection parameters\n","dir":"net/components/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621575585,"lvl0":"Connect","lvl1":"\n\nThis package contains interfaces and classes used to define connection parameters\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1b91f3b27480ea3ff427212b9b49b05b","permalink":"/net/components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/connect/","section":"net","summary":"Important points\n A Discovery is a service that stores a registry of various end-points. There are two types of discovery:  Static discovery: all services have static IP addresses that are configured from the start and don\u0026rsquo;t change along the way. As of lately, it is used more often than dynamic, because it is simpler to use and more reliable. Dynamic discovery: every time a service starts, it registers its address in the discovery service.","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/net/components/connect/","weight":0,"wordcount":195},{"authors":null,"categories":null,"date":-62135596800,"description":"\n\nThis package contains interfaces and classes used to define connection parameters\n","dir":"node/components/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Connect","lvl1":"\n\nThis package contains interfaces and classes used to define connection parameters\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"69e8d05726dec2f01e8361bf49939d94","permalink":"/node/components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/connect/","section":"node","summary":"Important points\n A Discovery is a service that stores a registry of various end-points. There are two types of discovery:  Static discovery: all services have static IP addresses that are configured from the start and don\u0026rsquo;t change along the way. As of lately, it is used more often than dynamic, because it is simpler to use and more reliable. Dynamic discovery: every time a service starts, it registers its address in the discovery service.","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/node/components/connect/","weight":0,"wordcount":195},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains an interface used to create message queue connections.\n","dir":"node/messaging/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622571702,"lvl0":"Connect","lvl1":"This package contains an interface used to create message queue connections.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c2fd117a0e212f561d815d57d7752b87","permalink":"/node/messaging/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/connect/","section":"node","summary":" Interfaces IMessageQueueConnection Defines an interface for message queue connections\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/node/messaging/connect/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create connection components for MySQL databases.\n","dir":"node/mysql/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622669208,"lvl0":"Connect","lvl1":"This package contains classes used to create connection components for MySQL databases.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c7bf37a39e9d205398e11cfbd13dcf78","permalink":"/node/mysql/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/mysql/connect/","section":"node","summary":" Classes MySqlConnection MySQL connection using plain driver. By defining a connection and sharing it through multiple persistence components you can reduce number of used database connections.\nMySqlConnectionResolver Helper class that resolves MySQL connection and credential parameters, validates them and generates a connection URI. It is able to process multiple connections to MySQL cluster nodes.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/node/mysql/connect/","weight":0,"wordcount":54},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create connection components for PostgreSQL databases.\n","dir":"node/postgres/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622674545,"lvl0":"Connect","lvl1":"This package contains classes used to create connection components for PostgreSQL databases.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c52e6d1227f12706e03abf6683d7c353","permalink":"/node/postgres/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/postgres/connect/","section":"node","summary":" Classes PostgresConnection PostgreSQL connection using the official driver. By defining a connection and sharing it through multiple persistence components you can reduce the number of used database connections.\nPostgresConnectionResolver Helper class that resolves PostgreSQL connection and credential parameters, validates them and generates a connection URI. It is able to process multiple connections to PostgreSQL cluster nodes.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/node/postgres/connect/","weight":0,"wordcount":56},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to retrieve connections for HTTP-based services and clients.\n","dir":"node/rpc/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1623078433,"lvl0":"Connect","lvl1":"This package contains a class used to retrieve connections for HTTP-based services and clients.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"498bb67ae24501bb36e2844e33b53f00","permalink":"/node/rpc/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/connect/","section":"node","summary":" Classes HttpConnectionResolver Helper class to retrieve connections for HTTP-based services and clients.\nIn addition to regular functions of ConnectionResolver, this class is able to parse http://URIs and validate connection parameters before returning them.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/node/rpc/connect/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create SQLServer connection components.\n","dir":"node/sqlserver/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622732567,"lvl0":"Connect","lvl1":"This package contains classes used to create SQLServer connection components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4bc47f6e14e005e5ceb2e77156fa34d9","permalink":"/node/sqlserver/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/sqlserver/connect/","section":"node","summary":" Classes SqlServerConnection SQLServer connection using the official driver.\nSqlServerConnectionResolver Helper class that resolves SQLServer connection and credential parameters, validates them and generates a connection URI.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/node/sqlserver/connect/","weight":0,"wordcount":25},{"authors":null,"categories":null,"date":-62135596800,"description":"\n\nThis package contains interfaces and classes used to define connection parameters\n","dir":"python/components/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Connect","lvl1":"\n\nThis package contains interfaces and classes used to define connection parameters\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0e490dad3467a993f7a6aa3387e9b9f0","permalink":"/python/components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/connect/","section":"python","summary":"Important points\n A Discovery is a service that stores a registry of various end-points. There are two types of discovery:  Static discovery: all services have static IP addresses that are configured from the start and don\u0026rsquo;t change along the way. As of lately, it is used more often than dynamic, because it is simpler to use and more reliable. Dynamic discovery: every time a service starts, it registers its address in the discovery service.","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/python/components/connect/","weight":0,"wordcount":195},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains an interface used to create message queue connections.\n","dir":"python/messaging/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621275961,"lvl0":"Connect","lvl1":"This package contains an interface used to create message queue connections.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"25358089fa092c85694012702d5262ae","permalink":"/python/messaging/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/connect/","section":"python","summary":" Interfaces IMessageQueueConnection Defines an interface for message queue connections\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/python/messaging/connect/","weight":0,"wordcount":9},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create connections to MongoDBs.\n","dir":"python/mongodb/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622221805,"lvl0":"Connect","lvl1":"This package contains classes used to create connections to MongoDBs.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f48faa716312623c43b1610ebb05466c","permalink":"/python/mongodb/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mongodb/connect/","section":"python","summary":" Classes MongoDbConnection MongoDB connection using the official driver. By defining a connection and sharing it through multiple persistence components you can reduce the number of used database connections.\nMongoDbConnectionResolver Helper class that resolves MongoDB connection and credential parameters, validates them and generates a connection URI. It is able to process multiple connections to MongoDB cluster nodes.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/python/mongodb/connect/","weight":0,"wordcount":56},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create connection components for MySQL databases.\n","dir":"python/mysql/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621503337,"lvl0":"Connect","lvl1":"This package contains classes used to create connection components for MySQL databases.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5b321c19ee7a91af850d2d73e1b5d838","permalink":"/python/mysql/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mysql/connect/","section":"python","summary":" Classes MySqlConnection MySQL connection using plain driver. By defining a connection and sharing it through multiple persistence components you can reduce number of used database connections.\nMySqlConnectionResolver Helper class that resolves MySQL connection and credential parameters, validates them and generates a connection URI. It is able to process multiple connections to MySQL cluster nodes.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/python/mysql/connect/","weight":0,"wordcount":54},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create connection components for PostgreSQL databases.\n","dir":"python/postgres/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622228527,"lvl0":"Connect","lvl1":"This package contains classes used to create connection components for PostgreSQL databases.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1e2955e4b5cc59d33ab0fc45f7d19e95","permalink":"/python/postgres/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/postgres/connect/","section":"python","summary":" Classes PostgresConnection PostgreSQL connection using the official driver. By defining a connection and sharing it through multiple persistence components you can reduce the number of used database connections.\nPostgresConnectionResolver Helper class that resolves PostgreSQL connection and credential parameters, validates them and generates a connection URI. It is able to process multiple connections to PostgreSQL cluster nodes.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/python/postgres/connect/","weight":0,"wordcount":56},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to retrieve connections for HTTP-based services and clients.\n","dir":"python/rpc/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622833670,"lvl0":"Connect","lvl1":"This package contains a class used to retrieve connections for HTTP-based services and clients.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"36cedac0465d7f9e7de8b1ffb9389ea8","permalink":"/python/rpc/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/connect/","section":"python","summary":" Classes HttpConnectionResolver Helper class to retrieve connections for HTTP-based services and clients.\nIn addition to regular functions of ConnectionResolver, this class is able to parse http://URIs and validate connection parameters before returning them.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/python/rpc/connect/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create SQLServer connection components.\n","dir":"python/sqlserver/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621710853,"lvl0":"Connect","lvl1":"This package contains classes used to create SQLServer connection components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c8b4c5af198c7e6eebdf3b8f4982d9bd","permalink":"/python/sqlserver/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/sqlserver/connect/","section":"python","summary":" Classes SqlServerConnection SQLServer connection using the official driver.\nSqlServerConnectionResolver Helper class that resolves SQLServer connection and credential parameters, validates them and generates a connection URI.\n ","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/python/sqlserver/connect/","weight":0,"wordcount":25},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors that occur during connections to remote services.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624227551,"lvl0":"Connectionerror","lvl1":"Errors that occur during connections to remote services.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fa9fa3d86f973ef80e4617071cd1f135","permalink":"/golang/commons/errors/connection_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/connection_error/","section":"golang","summary":"Description The Connectionerror class is used to manage errors that occur during a connection to a remote service. These errors can be related to misconfiguration, network issues, or the remote service itself.\nConstructors NewConnectionError Creates an error instance and assigns its values.\n NewConnectionError(correlationId, code, message string) *ApplicationError\n  correlation_id: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code.","tags":null,"title":"Connectionerror","type":"docs","url":"/hugo-docs/golang/commons/errors/connection_error/","weight":0,"wordcount":81},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors that occur during connections to remote services.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ConnectionException","lvl1":"Errors that occur during connections to remote services.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8a8461f766b40ad9ccfdc109ffbd6f2a","permalink":"/net/commons/errors/connection_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/connection_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The ConnectionException class is used to manage errors that occur during a connection to a remote service. These errors can be related to misconfiguration, network issues, or the remote service itself.\nConstructors Creates an error instance and assigns its values.\n public ConnectionException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain.","tags":null,"title":"ConnectionException","type":"docs","url":"/hugo-docs/net/commons/errors/connection_exception/","weight":0,"wordcount":150},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors that occur during connections to remote services.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ConnectionException","lvl1":"Errors that occur during connections to remote services.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"930d5ce0bdb3ac898c2093ca5b38b7b1","permalink":"/node/commons/errors/connection_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/connection_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The ConnectionException class is used to manage errors that occur during a connection to a remote service. These errors can be related to misconfiguration, network issues, or the remote service itself.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain.","tags":null,"title":"ConnectionException","type":"docs","url":"/hugo-docs/node/commons/errors/connection_exception/","weight":0,"wordcount":90},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors that occur during connections to remote services.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620407636,"lvl0":"ConnectionException","lvl1":"Errors that occur during connections to remote services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"13cb00cd7d519b9489518f88ce0e1030","permalink":"/python/commons/errors/connection_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/connection_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The ConnectionException class is used to manage errors that occur during a connection to a remote service. These errors can be related to misconfiguration, network issues, or the remote service itself.\nConstructors Creates an error instance and assigns its values.\n ConnectionException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain.","tags":null,"title":"ConnectionException","type":"docs","url":"/hugo-docs/python/commons/errors/connection_exception/","weight":0,"wordcount":89},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains connection parameters used to connect to external services.\n","dir":"golang/components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"ConnectionParams","lvl1":"Contains connection parameters used to connect to external services.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"58bf37374c4ffeab57e12561519056ac","permalink":"/golang/components/connect/connection_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/connect/connection_params/","section":"golang","summary":"Implements: ConfigParams\nDescription The ConnectionParams class allows you to create connection parameters used to connect to external services.\nImportant points\n Usually, connection parameters are used together with credential parameters, but are stored separately from these more protected and sensitive values.  Configuration parameters  discovery_key: key to retrieve parameters from discovery service protocol: connection protocol like http, https, tcp, udp host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  In addition to standard parameters ConnectionParams may contain any number of custom parameters.","tags":null,"title":"ConnectionParams","type":"docs","url":"/hugo-docs/golang/components/connect/connection_params/","weight":0,"wordcount":662},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains connection parameters used to connect to external services.\n","dir":"net/components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ConnectionParams","lvl1":"Contains connection parameters used to connect to external services.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f76610d8daa30d3996635b4656ae6940","permalink":"/net/components/connect/connection_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/components/connect/connection_params/","section":"net","summary":"Inherits: ConfigParams\nDescription The ConnectionParams class allows you to create connection parameters used to connect to external services.\nImportant points\n Usually, connection parameters are used together with credential parameters, but are stored separately from these more protected and sensitive values.  Configuration parameters  discovery_key: key to retrieve parameters from discovery service protocol: connection protocol like http, https, tcp, udp host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  In addition to standard parameters ConnectionParams may contain any number of custom parameters.","tags":null,"title":"ConnectionParams","type":"docs","url":"/hugo-docs/net/components/connect/connection_params/","weight":0,"wordcount":616},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains connection parameters used to connect to external services.\n","dir":"node/components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ConnectionParams","lvl1":"Contains connection parameters used to connect to external services.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e0c778721b74e60dcde40e01df4d35d1","permalink":"/node/components/connect/connection_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/components/connect/connection_params/","section":"node","summary":"Extends: ConfigParams\nDescription The ConnectionParams class allows you to create connection parameters used to connect to external services.\nImportant points\n Usually, connection parameters are used together with credential parameters, but are stored separately from these more protected and sensitive values.  Configuration parameters  discovery_key: key to retrieve parameters from discovery service protocol: connection protocol like http, https, tcp, udp host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  In addition to standard parameters ConnectionParams may contain any number of custom parameters.","tags":null,"title":"ConnectionParams","type":"docs","url":"/hugo-docs/node/components/connect/connection_params/","weight":0,"wordcount":659},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains connection parameters used to connect to external services.\n","dir":"python/components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ConnectionParams","lvl1":"Contains connection parameters used to connect to external services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"835b5679fa1f3400da0d8063e749a539","permalink":"/python/components/connect/connection_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/components/connect/connection_params/","section":"python","summary":"Implements: ConfigParams\nDescription The ConnectionParams class allows you to create connection parameters used to connect to external services.\nImportant points\n Usually, connection parameters are used together with credential parameters, but are stored separately from these more protected and sensitive values.  Configuration parameters  discovery_key: key to retrieve parameters from discovery service protocol: connection protocol like http, https, tcp, udp host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  In addition to standard parameters ConnectionParams may contain any number of custom parameters.","tags":null,"title":"ConnectionParams","type":"docs","url":"/hugo-docs/python/components/connect/connection_params/","weight":0,"wordcount":630},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to retrieve component connections.\n","dir":"golang/components/connect/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"ConnectionResolver","lvl1":"Helper class used to retrieve component connections.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9b90e0c2852ab9c51b07eca3e9a0cd95","permalink":"/golang/components/connect/connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/connect/connection_resolver/","section":"golang","summary":"Description The ConnectionResolver class is used to retrieve component connections.\nImportant points\n If the connections are configured to be retrieved from IDiscovery, the connection resolver will automatically locate IDiscovery in component references and retrieve the connections from there using the discovery_key parameter.  Configuration parameters connection:\n discovery_key: (optional) a key to retrieve the connection from IDiscovery \u0026hellip; : other connection parameters  connections: alternative to connection\n [connection params 1]: first connection parameters  \u0026hellip; : connection parameters for key 1   [connection params N]: Nth connection parameters  \u0026hellip; : connection parameters for key N    References  *:discovery:*:*:1.","tags":null,"title":"ConnectionResolver","type":"docs","url":"/hugo-docs/golang/components/connect/connection_resolver/","weight":0,"wordcount":418},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to retrieve component connections.\n","dir":"net/components/connect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ConnectionResolver","lvl1":"Helper class used to retrieve component connections.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2c9e93123a65b72973e8625b193e6fe5","permalink":"/net/components/connect/connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/connect/connection_resolver/","section":"net","summary":"Description The ConnectionResolver class is used to retrieve component connections.\nImportant points\n If the connections are configured to be retrieved from IDiscovery, the connection resolver will automatically locate IDiscovery in component references and retrieve the connections from there using the discovery_key parameter.  Configuration parameters connection:\n discovery_key: (optional) a key to retrieve the connection from IDiscovery \u0026hellip; : other connection parameters  connections: alternative to connection\n [connection params 1]: first connection parameters  \u0026hellip; : connection parameters for key 1   [connection params N]: Nth connection parameters  \u0026hellip; : connection parameters for key N    References  *:discovery:*:*:1.","tags":null,"title":"ConnectionResolver","type":"docs","url":"/hugo-docs/net/components/connect/connection_resolver/","weight":0,"wordcount":396},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to retrieve component connections.\n","dir":"node/components/connect/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"ConnectionResolver","lvl1":"Helper class used to retrieve component connections.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"49e0a11c866e95d6da67ead07d710554","permalink":"/node/components/connect/connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/connect/connection_resolver/","section":"node","summary":"Description The ConnectionResolver class is used to retrieve component connections.\nImportant points\n If the connections are configured to be retrieved from IDiscovery, the connection resolver will automatically locate IDiscovery in component references and retrieve the connections from there using the discovery_key parameter.  Configuration parameters connection:\n discovery_key: (optional) a key to retrieve the connection from IDiscovery \u0026hellip; : other connection parameters  connections: alternative to connection\n [connection params 1]: first connection parameters  \u0026hellip; : connection parameters for key 1   [connection params N]: Nth connection parameters  \u0026hellip; : connection parameters for key N    References  *:discovery:*:*:1.","tags":null,"title":"ConnectionResolver","type":"docs","url":"/hugo-docs/node/components/connect/connection_resolver/","weight":0,"wordcount":403},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to retrieve component connections.\n","dir":"python/components/connect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"ConnectionResolver","lvl1":"Helper class used to retrieve component connections.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"754642d0702d296c5007c1566651ded7","permalink":"/python/components/connect/connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/connect/connection_resolver/","section":"python","summary":"Description The ConnectionResolver class is used to retrieve component connections.\nImportant points\n If the connections are configured to be retrieved from IDiscovery, the connection resolver will automatically locate IDiscovery in component references and retrieve the connections from there using the discovery_key parameter.  Configuration parameters connection:\n discovery_key: (optional) a key to retrieve the connection from IDiscovery \u0026hellip; : other connection parameters  connections: alternative to connection\n [connection params 1]: first connection parameters  \u0026hellip; : connection parameters for key 1   [connection params N]: Nth connection parameters  \u0026hellip; : connection parameters for key N    References  *:discovery:*:*:1.","tags":null,"title":"ConnectionResolver","type":"docs","url":"/hugo-docs/python/components/connect/connection_resolver/","weight":0,"wordcount":379},{"authors":null,"categories":null,"date":-62135596800,"description":"A set of utility functions used to process connection parameters\n","dir":"golang/components/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ConnectionUtils","lvl1":"A set of utility functions used to process connection parameters\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ff9997da5af605f60844b58aa11f82b2","permalink":"/golang/components/connect/connection_utils/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/connect/connection_utils/","section":"golang","summary":"Description The ConnectionUtils class provides a set of utility functions used to process connection parameters.\nMethods ComposeUri Composes URI from config parameters. The result URI will be in the following form: protocol://username@password@host1:port1,host2:port2,\u0026hellip;?param1=abc\u0026amp;param2=xyz\u0026amp;\u0026hellip;\n (c *TConnectionUtils) ComposeUri(options *config.ConfigParams, defaultProtocol string, defaultPort int) string\n  options: *config.ConfigParams - configuration parameters defaultProtocol: string - a default protocol defaultPort: int - a default port returns: string - a composed URI  Concat Concatinates two options by combining duplicated properties into comma-separated list","tags":null,"title":"ConnectionUtils","type":"docs","url":"/hugo-docs/golang/components/connect/connection_utils/","weight":0,"wordcount":251},{"authors":null,"categories":null,"date":-62135596800,"description":"A set of utility functions used to process connection parameters\n","dir":"net/components/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ConnectionUtils","lvl1":"A set of utility functions used to process connection parameters\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1d73b50db51d319b393717383ba5dbc9","permalink":"/net/components/connect/connection_utils/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/connect/connection_utils/","section":"net","summary":"Description The ConnectionUtils class provides a set of utility functions used to process connection parameters.\nStatic methods ComposeUri Composes URI from config parameters. The result URI will be in the following form: protocol://username@password@host1:port1,host2:port2,\u0026hellip;?param1=abc\u0026amp;param2=xyz\u0026amp;\u0026hellip;\n public static string ComposeUri(ConfigParams options, string defaultProtocol, int defaultPort)\n  options: ConfigParams - configuration parameters defaultProtocol: string - a default protocol defaultPort: int - a default port returns: string - a composed URI  Concat Concatinates two options by combining duplicated properties into comma-separated list","tags":null,"title":"ConnectionUtils","type":"docs","url":"/hugo-docs/net/components/connect/connection_utils/","weight":0,"wordcount":255},{"authors":null,"categories":null,"date":-62135596800,"description":"A set of utility functions used to process connection parameters\n","dir":"node/components/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ConnectionUtils","lvl1":"A set of utility functions used to process connection parameters\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a34723acdd29751760bac82eb8625185","permalink":"/node/components/connect/connection_utils/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/connect/connection_utils/","section":"node","summary":"Description The ConnectionUtils class provides a set of utility functions used to process connection parameters.\nStatic methods composeUri Composes URI from config parameters. The result URI will be in the following form: protocol://username@password@host1:port1,host2:port2,\u0026hellip;?param1=abc\u0026amp;param2=xyz\u0026amp;\u0026hellip;\n public static composeUri(options: ConfigParams, defaultProtocol: string, defaultPort: number): string\n  options: ConfigParams - configuration parameters defaultProtocol: string - a default protocol defaultPort: number - a default port returns: string - a composed URI  concat Concatinates two options by combining duplicated properties into comma-separated list","tags":null,"title":"ConnectionUtils","type":"docs","url":"/hugo-docs/node/components/connect/connection_utils/","weight":0,"wordcount":252},{"authors":null,"categories":null,"date":-62135596800,"description":"A set of utility functions used to process connection parameters\n","dir":"python/components/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"ConnectionUtils","lvl1":"A set of utility functions used to process connection parameters\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"81d27e51a488fe6a76e4f839136d37b5","permalink":"/python/components/connect/connection_utils/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/connect/connection_utils/","section":"python","summary":"Description The ConnectionUtils class provides a set of utility functions used to process connection parameters.\nStatic methods compose_uri Composes URI from config parameters. The result URI will be in the following form: protocol://username@password@host1:port1,host2:port2,\u0026hellip;?param1=abc\u0026amp;param2=xyz\u0026amp;\u0026hellip;\n static compose_uri(options: ConfigParams, default_protocol: str, default_port: int): str\n  options: ConfigParams - configuration parameters default_protocol: str - a default protocol default_port: int - a default port returns: str - a composed URI  concat Concatinates two options by combining duplicated properties into comma-separated list","tags":null,"title":"ConnectionUtils","type":"docs","url":"/hugo-docs/python/components/connect/connection_utils/","weight":0,"wordcount":247},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that writes log messages to console.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ConsoleLogger","lvl1":"Logger that writes log messages to console.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3bc4cfa9ace4806bfdbf49eefd7eb020","permalink":"/golang/components/log/console_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/log/console_logger/","section":"golang","summary":"Implements: Logger\nDescription The ConsoleLogger class provides a logger that writes log messages to console.\nImportant points\n Errors are written to standard err stream and all other messages to standard out stream.  Configuration parameters  level: maximum log level to capture source: source (context) name  References  *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Methods Write Writes a log message to the logger destination.","tags":null,"title":"ConsoleLogger","type":"docs","url":"/hugo-docs/golang/components/log/console_logger/","weight":0,"wordcount":132},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that writes log messages to console.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ConsoleLogger","lvl1":"Logger that writes log messages to console.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9d8346812a9546e65dffeeb802f01deb","permalink":"/net/components/log/console_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/console_logger/","section":"net","summary":"Inherits: Logger\nDescription The ConsoleLogger class provides a logger that writes log messages to console.\nImportant points\n Errors are written to standard err stream and all other messages to standard out stream.  Configuration parameters  level: maximum log level to capture source: source (context) name  References  *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Instance methods Write Writes a log message to the logger destination.","tags":null,"title":"ConsoleLogger","type":"docs","url":"/hugo-docs/net/components/log/console_logger/","weight":0,"wordcount":136},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that writes log messages to console.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ConsoleLogger","lvl1":"Logger that writes log messages to console.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"efac65402e229f1befbd59ad99e34f6a","permalink":"/node/components/log/console_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/log/console_logger/","section":"node","summary":"Extends: Logger\nDescription The ConsoleLogger class provides a logger that writes log messages to console.\nImportant points\n Errors are written to standard err stream and all other messages to standard out stream.  Configuration parameters  level: maximum log level to capture source: source (context) name  References  *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Instance methods write Writes a log message to the logger destination.","tags":null,"title":"ConsoleLogger","type":"docs","url":"/hugo-docs/node/components/log/console_logger/","weight":0,"wordcount":135},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that writes log messages to console.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"ConsoleLogger","lvl1":"Logger that writes log messages to console.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7b13962ff3d09435b1cf65a8859e6650","permalink":"/python/components/log/console_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/log/console_logger/","section":"python","summary":"Implements: Logger\nDescription The ConsoleLogger class provides a logger that writes log messages to console.\nImportant points\n Errors are written to standard err stream and all other messages to standard out stream.  Configuration parameters  level: maximum log level to capture source: source (context) name  References  *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Instance methods _write Writes a log message to the logger destination.","tags":null,"title":"ConsoleLogger","type":"docs","url":"/hugo-docs/python/components/log/console_logger/","weight":0,"wordcount":131},{"authors":null,"categories":null,"date":-62135596800,"description":"Inversion of control (IoC) container that creates components and manages their lifecycle.\n","dir":"golang/container/containers/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"Container","lvl1":"Inversion of control (IoC) container that creates components and manages their lifecycle.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5ccd7f3357229eed8314d5c7f769cbce","permalink":"/golang/container/containers/container/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/container/containers/container/","section":"golang","summary":"Description The Container class allows you to create an inversion of control (IoC) container that creates components and manages their lifecycle.\nImportant points\n The container is driven by configuration, which is usually stored in a JSON or YAML file. The configuration contains a list of components identified by their type or locator, followed by their configuration. On start, a container performs the following actions:  Creates components using their types or calls registered factories to create them using their locators.","tags":null,"title":"Container","type":"docs","url":"/hugo-docs/golang/container/containers/container/","weight":0,"wordcount":540},{"authors":null,"categories":null,"date":-62135596800,"description":"Inversion of control (IoC) container that creates components and manages their lifecycle.\n","dir":"node/container/containers/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"Container","lvl1":"Inversion of control (IoC) container that creates components and manages their lifecycle.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"190f3ce5cf72eb83e2e882a3cdf4ca4f","permalink":"/node/container/containers/container/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/container/containers/container/","section":"node","summary":"Implements: IConfigurable interface, IReferenceable interface, IUnreferenceable interface, IOpenable interface\nDescription The Container class allows you to create an inversion of control (IoC) container that creates components and manages their lifecycle.\nImportant points\n The container is driven by configuration, which is usually stored in a JSON or YAML file. The configuration contains a list of components identified by their type or locator, followed by their configuration. On start, a container performs the following actions:  Creates components using their types or calls registered factories to create them using their locators.","tags":null,"title":"Container","type":"docs","url":"/hugo-docs/node/container/containers/container/","weight":0,"wordcount":504},{"authors":null,"categories":null,"date":-62135596800,"description":"Inversion of control (IoC) container that creates components and manages their lifecycle.\n","dir":"python/container/containers/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"Container","lvl1":"Inversion of control (IoC) container that creates components and manages their lifecycle.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3209170a023b152d905c7ab2b7d66e57","permalink":"/python/container/containers/container/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/container/containers/container/","section":"python","summary":"Implements: IConfigurable interface, IReferenceable interface, IUnreferenceable interface, IOpenable interface\nDescription The Container class allows you to create an inversion of control (IoC) container that creates components and manages their lifecycle.\nImportant points\n The container is driven by configuration, which is usually stored in a JSON or YAML file. The configuration contains a list of components identified by their type or locator, followed by their configuration. On start, a container performs the following actions:  Creates components using their types or calls registered factories to create them using their locators.","tags":null,"title":"Container","type":"docs","url":"/hugo-docs/python/container/containers/container/","weight":0,"wordcount":485},{"authors":null,"categories":null,"date":-62135596800,"description":"Container configuration defined as a list of component configurations.\n","dir":"golang/container/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ContainerConfig","lvl1":"Container configuration defined as a list of component configurations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9b8d3ce47d72682c5e57fb3ea7484f93","permalink":"/golang/container/config/container_config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/config/container_config/","section":"golang","summary":"Implements: []ComponentConfig\nDescription The ContainerConfig class allows you to create a container configuration as a list of component configurations.\nConstructors NewContainerConfig Creates a new instance of ContainerConfig.\n NewContainerConfig(components \u0026hellip;*ComponentConfig) ContainerConfig\n  components: \u0026hellip;*ComponentConfig - (optional) list of component configurations.  NewContainerConfigFromValue Creates a new ContainerConfig object filled with key-value pairs from a specified object. The value is converted into ConfigParams object which is used to create the new object.","tags":null,"title":"ContainerConfig","type":"docs","url":"/hugo-docs/golang/container/config/container_config/","weight":0,"wordcount":137},{"authors":null,"categories":null,"date":-62135596800,"description":"Container configuration defined as a list of component configurations.\n","dir":"node/container/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"ContainerConfig","lvl1":"Container configuration defined as a list of component configurations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2741f46cd73831407a3320bfc7ba8093","permalink":"/node/container/config/container_config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/config/container_config/","section":"node","summary":"Implements: Array\u0026lt;ComponentConfig\u0026gt;\nDescription The ContainerConfig class allows you to create a container configuration as a list of component configurations.\nConstructors Creates a new instance of ContainerConfig.\n public constructor(components?: ComponentConfig[])\n  components: ComponentConfig[] - (optional) list of component configurations.  Static methods fromConfig Creates a new ContainerConfig object based on configuration parameters. Each section in the configuration parameters is converted into a component configuration.\n public static fromConfig(config: ConfigParams): ContainerConfig","tags":null,"title":"ContainerConfig","type":"docs","url":"/hugo-docs/node/container/config/container_config/","weight":0,"wordcount":137},{"authors":null,"categories":null,"date":-62135596800,"description":"Container configuration defined as a list of component configurations.\n","dir":"python/container/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"ContainerConfig","lvl1":"Container configuration defined as a list of component configurations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"502e81f3804ae4e3b97c2b840de5fc51","permalink":"/python/container/config/container_config/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/config/container_config/","section":"python","summary":"Implements: list\nDescription The ContainerConfig class allows you to create a container configuration as a list of component configurations.\nConstructors Creates a new instance of ContainerConfig.\n ComponentConfig(components: Sequence[ComponentConfig] = None)\n  components: Sequence[ComponentConfig] - (optional) list of component configurations.  Static methods from_config Creates a new ContainerConfig object based on configuration parameters. Each section in the configuration parameters is converted into a component configuration.\n static from_config(config: ConfigParams): ContainerConfig","tags":null,"title":"ContainerConfig","type":"docs","url":"/hugo-docs/python/container/config/container_config/","weight":0,"wordcount":137},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that reads a container's configuration from a JSON or YAML file.\n","dir":"golang/container/config/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ContainerConfigReader","lvl1":"Helper class that reads a container's configuration from a JSON or YAML file.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"347bb3a57193b2afee4f0fce6dd56cbb","permalink":"/golang/container/config/container_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/config/container_config_reader/","section":"golang","summary":"Description The ContainerConfigReader class allows you to read a container\u0026rsquo;s configuration from a JSON or YAML file.\nMethods ReadFromFile Reads a container\u0026rsquo;s configuration from JSON or YAML file. The type of the file is determined by the file extension.\n (c *TContainerConfigReader) ReadFromFile(correlationId string, path string, parameters *config.ConfigParams) (ContainerConfig, error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. path: string - path to the component\u0026rsquo;s configuration file.","tags":null,"title":"ContainerConfigReader","type":"docs","url":"/hugo-docs/golang/container/config/container_config_reader/","weight":0,"wordcount":203},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that reads a container's configuration from a JSON or YAML file.\n","dir":"node/container/config/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ContainerConfigReader","lvl1":"Helper class that reads a container's configuration from a JSON or YAML file.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"219fc30bd3b9248ed762572eea986beb","permalink":"/node/container/config/container_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/config/container_config_reader/","section":"node","summary":"Description The ContainerConfigReader class allows you to read a container\u0026rsquo;s configuration from a JSON or YAML file.\nStatic methods readFromFile Reads a container\u0026rsquo;s configuration from JSON or YAML file. The type of the file is determined by the file extension.\n public static readFromFile(correlationId: string, path: string, parameters: ConfigParams): ContainerConfig\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. path: string - path to the component\u0026rsquo;s configuration file.","tags":null,"title":"ContainerConfigReader","type":"docs","url":"/hugo-docs/node/container/config/container_config_reader/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that reads a container's configuration from a JSON or YAML file.\n","dir":"python/container/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ContainerConfigReader","lvl1":"Helper class that reads a container's configuration from a JSON or YAML file.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"03b7e474eb2a370befb464a7d68010ad","permalink":"/python/container/config/container_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/config/container_config_reader/","section":"python","summary":"Description The ContainerConfigReader class allows you to read a container\u0026rsquo;s configuration from a JSON or YAML file.\nStatic methods read_from_file Reads a container\u0026rsquo;s configuration from JSON or YAML file. The type of the file is determined by the file extension.\n static read_from_file(correlation_id: Optional[str], path: str, parameters: ConfigParams): ContainerConfig\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. path: str - path to the component\u0026rsquo;s configuration file.","tags":null,"title":"ContainerConfigReader","type":"docs","url":"/hugo-docs/python/container/config/container_config_reader/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"Container's managed references that can be created from container configuration.\n","dir":"golang/container/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ContainerReferences","lvl1":"Container's managed references that can be created from container configuration.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1e8e462c0221ae29d38c5808f9ad721c","permalink":"/golang/container/refer/container_references/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/refer/container_references/","section":"golang","summary":"Implements: ManagedReferences\nDescription The ContainerReferences class allows you to create container\u0026rsquo;s managed references that can be created from a container configuration.\nConstructors NewContainerReferences Creates a new instance of the references\n NewContainerReferences() *ContainerReferences\n Methods PutFromConfig Puts components into the references from the container\u0026rsquo;s configuration.\nThrows CreateException when one of component cannot be created.\n (c *ContainerReferences) PutFromConfig(config config.ContainerConfig) error\n  config: config.ContainerConfig - container\u0026rsquo;s configuration with information of the components to be added.","tags":null,"title":"ContainerReferences","type":"docs","url":"/hugo-docs/golang/container/refer/container_references/","weight":0,"wordcount":81},{"authors":null,"categories":null,"date":-62135596800,"description":"Container's managed references that can be created from container configuration.\n","dir":"node/container/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"ContainerReferences","lvl1":"Container's managed references that can be created from container configuration.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eb06d52703b965a78c65a3f5adb34f86","permalink":"/node/container/refer/container_references/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/refer/container_references/","section":"node","summary":"Extends: ManagedReferences\nDescription The ContainerReferences class allows you to create container\u0026rsquo;s managed references that can be created from a container configuration.\nInstance methods putFromConfig Puts components into the references from the container\u0026rsquo;s configuration.\nThrows CreateException when one of component cannot be created.\n public putFromConfig(config: ContainerConfig): void\n  config: ContainerConfig - container\u0026rsquo;s configuration with information of the components to be added.  See also   ManagedReferences   ","tags":null,"title":"ContainerReferences","type":"docs","url":"/hugo-docs/node/container/refer/container_references/","weight":0,"wordcount":62},{"authors":null,"categories":null,"date":-62135596800,"description":"Container's managed references that can be created from container configuration.\n","dir":"python/container/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"ContainerReferences","lvl1":"Container's managed references that can be created from container configuration.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"70dcd5d4afd60ef910fb85a8b478ad19","permalink":"/python/container/refer/container_references/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/refer/container_references/","section":"python","summary":"Implements: ManagedReferences\nDescription The ContainerReferences class allows you to create container\u0026rsquo;s managed references that can be created from a container configuration.\nInstance methods put_from_config Puts components into the references from the container\u0026rsquo;s configuration.\nThrows CreateException when one of component cannot be created.\n put_from_config(config: ContainerConfig)\n  config: ContainerConfig - container\u0026rsquo;s configuration with information of the components to be added.  See also   ManagedReferences   ","tags":null,"title":"ContainerReferences","type":"docs","url":"/hugo-docs/python/container/refer/container_references/","weight":0,"wordcount":60},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains the Container class, which provides an inversion of control container that creates objects  and controls their lifecycle using various configurations.     \n       \nIn addition, it contains the ProcessContainer class, which represents a system process. It receives its configuration file via the command line,  and creates a container, starts it, reads its configuration, recreates objects, and runs them.   After pressing ctrl-c, the process container turns off and destroys the objects.  \n","dir":"golang/container/containers/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1624022469,"lvl0":"Containers","lvl1":"\nThis package contains the Container class, which provides an inversion of control container that creates objects  and controls their lifecycle using various configurations.     \n       \nIn addition, it contains the ProcessContainer class, which represents a system process. It receives its configuration file via the command line,  and creates a container, starts it, reads its configuration, recreates objects, and runs them.   After pressing ctrl-c, the process container turns off and destroys the objects.  \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"695d04fb21f26aa065c660e1431c5930","permalink":"/golang/container/containers/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/container/containers/","section":"golang","summary":"Lifecycle 1 . Configuration\nExternal configurations (stored as YAML or JSON) are passed to the container and define the structure of objects that need to be recreated in the container. Objects can be defined in two ways:\n using descriptors (using those registered factories can recreate the object) using hard-coded types (objects are recreated directly, based on their type, bypassing factories).  Each object can store various configurations.\n2. Object creation","tags":null,"title":"Containers","type":"docs","url":"/hugo-docs/golang/container/containers/","weight":0,"wordcount":292},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains the Container class, which provides an inversion of control container that creates objects  and controls their lifecycle using various configurations.     \n       \nIn addition, it contains the ProcessContainer class, which represents a system process. It receives its configuration file via the command line,  and creates a container, starts it, reads its configuration, recreates objects, and runs them.   After pressing ctrl-c, the process container turns off and destroys the objects.  \n","dir":"node/container/containers/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622849575,"lvl0":"Containers","lvl1":"\nThis package contains the Container class, which provides an inversion of control container that creates objects  and controls their lifecycle using various configurations.     \n       \nIn addition, it contains the ProcessContainer class, which represents a system process. It receives its configuration file via the command line,  and creates a container, starts it, reads its configuration, recreates objects, and runs them.   After pressing ctrl-c, the process container turns off and destroys the objects.  \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fe0dadcd0f70e18dcfd3b1f6090ec08f","permalink":"/node/container/containers/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/container/containers/","section":"node","summary":"Lifecycle 1 . Configuration\nExternal configurations (stored as YAML or JSON) are passed to the container and define the structure of objects that need to be recreated in the container. Objects can be defined in two ways:\n using descriptors (using those registered factories can recreate the object) using hard-coded types (objects are recreated directly, based on their type, bypassing factories).  Each object can store various configurations.\n2. Object creation","tags":null,"title":"Containers","type":"docs","url":"/hugo-docs/node/container/containers/","weight":0,"wordcount":293},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains the Container class, which provides an inversion of control container that creates objects  and controls their lifecycle using various configurations.     \n       \nIn addition, it contains the ProcessContainer class, which represents a system process. It receives its configuration file via the command line,  and creates a container, starts it, reads its configuration, recreates objects, and runs them.   After pressing ctrl-c, the process container turns off and destroys the objects.  \n","dir":"python/container/containers/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622849575,"lvl0":"Containers","lvl1":"\nThis package contains the Container class, which provides an inversion of control container that creates objects  and controls their lifecycle using various configurations.     \n       \nIn addition, it contains the ProcessContainer class, which represents a system process. It receives its configuration file via the command line,  and creates a container, starts it, reads its configuration, recreates objects, and runs them.   After pressing ctrl-c, the process container turns off and destroys the objects.  \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f50eae3c0583f65343e1d8a54e94af67","permalink":"/python/container/containers/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/container/containers/","section":"python","summary":"Lifecycle 1 . Configuration\nExternal configurations (stored as YAML or JSON) are passed to the container and define the structure of objects that need to be recreated in the container. Objects can be defined in two ways:\n using descriptors (using those registered factories can recreate the object) using hard-coded types (objects are recreated directly, based on their type, bypassing factories).  Each object can store various configurations.\n2. Object creation","tags":null,"title":"Containers","type":"docs","url":"/hugo-docs/python/container/containers/","weight":0,"wordcount":293},{"authors":null,"categories":null,"date":-62135596800,"description":"Context information component that provides detailed information about an execution context.\n","dir":"golang/components/info/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ContextInfo","lvl1":"Context information component that provides detailed information about an execution context.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1e8c690269629809de146f27727a2719","permalink":"/golang/components/info/context_info/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/info/context_info/","section":"golang","summary":"Description The ContextInfo class allows you to create context information components that provide detailed information about execution contexts.\nImportant points\n Most often ContextInfo is used by logging and performance counters to identify the source of the collected logs and metrics.  Configuration parameters  name: the context (container or process) name description: human-readable description of the context properties: entire section of additional descriptive properties \u0026hellip;  Constructors NewContextInfo Creates a new instance of this context info.","tags":null,"title":"ContextInfo","type":"docs","url":"/hugo-docs/golang/components/info/context_info/","weight":0,"wordcount":204},{"authors":null,"categories":null,"date":-62135596800,"description":"Context information component that provides detailed information about an execution context.\n","dir":"net/components/info/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ContextInfo","lvl1":"Context information component that provides detailed information about an execution context.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9931fa3517ddda5d72fcc25d74f7f030","permalink":"/net/components/info/context_info/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/info/context_info/","section":"net","summary":"Inherits: IReconfigurable\nDescription The ContextInfo class allows you to create context information components that provide detailed information about execution contexts.\nImportant points\n Most often ContextInfo is used by logging and performance counters to identify the source of the collected logs and metrics.  Configuration parameters  name: the context (container or process) name description: human-readable description of the context properties: entire section of additional descriptive properties \u0026hellip;  Constructors Creates a new instance of this context info.","tags":null,"title":"ContextInfo","type":"docs","url":"/hugo-docs/net/components/info/context_info/","weight":0,"wordcount":302},{"authors":null,"categories":null,"date":-62135596800,"description":"Context information component that provides detailed information about an execution context.\n","dir":"node/components/info/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"ContextInfo","lvl1":"Context information component that provides detailed information about an execution context.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"760c2c773064b556b1e3a4a115081350","permalink":"/node/components/info/context_info/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/info/context_info/","section":"node","summary":"Implements: IReconfigurable\nDescription The ContextInfo class allows you to create context information components that provide detailed information about execution contexts.\nImportant points\n Most often ContextInfo is used by logging and performance counters to identify the source of the collected logs and metrics.  Configuration parameters  name: the context (container or process) name description: human-readable description of the context properties: entire section of additional descriptive properties \u0026hellip;  Constructors Creates a new instance of this context info.","tags":null,"title":"ContextInfo","type":"docs","url":"/hugo-docs/node/components/info/context_info/","weight":0,"wordcount":370},{"authors":null,"categories":null,"date":-62135596800,"description":"Context information component that provides detailed information about an execution context.\n","dir":"python/components/info/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"ContextInfo","lvl1":"Context information component that provides detailed information about an execution context.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eb12664c0cfcfa95a2504a589b817c9b","permalink":"/python/components/info/context_info/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/info/context_info/","section":"python","summary":"Implements: IReconfigurable\nDescription The ContextInfo class allows you to create context information components that provide detailed information about execution contexts.\nImportant points\n Most often ContextInfo is used by logging and performance counters to identify the source of the collected logs and metrics.  Configuration parameters  name: the context (container or process) name description: human-readable description of the context properties: entire section of additional descriptive properties \u0026hellip;  Constructors Creates a new instance of this context info.","tags":null,"title":"ContextInfo","type":"docs","url":"/hugo-docs/python/components/info/context_info/","weight":0,"wordcount":357},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/convert/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Convert","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7a98ddac3e23c71c584ca853de4e34cd","permalink":"/dart/commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/convert/","section":"dart","summary":"","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/dart/commons/convert/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains \"soft\" data converters. Soft data converters differ from the data conversion algorithms  found in typical programming languages, due to the fact that they support rare conversions between  various data types (such as integer to timespan, timespan to string, and so on).\nThese converters are useful due to the fact that data in enterprise systems is represented in  various forms, requiring frequent conversions and at times in very difficult combinations.  \n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1623973209,"lvl0":"Convert","lvl1":"\nThis package contains \"soft\" data converters. Soft data converters differ from the data conversion algorithms  found in typical programming languages, due to the fact that they support rare conversions between  various data types (such as integer to timespan, timespan to string, and so on).\nThese converters are useful due to the fact that data in enterprise systems is represented in  various forms, requiring frequent conversions and at times in very difficult combinations.  \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a6a54259816037dae0366b5c7cb634ae","permalink":"/golang/commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/convert/","section":"golang","summary":"Constants TypeCode Codes for the data types that can be converted using TypeConverter.\nClasses ArrayConverter Converts arbitrary values into array objects.\nBooleanConverter Converts arbitrary values to boolean values using extended conversion rules:\n Numbers: \u0026lt;\u0026gt;0 are true, =0 are false Strings: \u0026ldquo;true\u0026rdquo;, \u0026ldquo;yes\u0026rdquo;, \u0026ldquo;T\u0026rdquo;, \u0026ldquo;Y\u0026rdquo;, \u0026ldquo;1\u0026rdquo; are true; \u0026ldquo;false\u0026rdquo;, \u0026ldquo;no\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;N\u0026rdquo; are false DateTime: \u0026lt;\u0026gt;0 total milliseconds are true, =0 are false  DateTimeConverter Converts arbitrary values into Date values using extended conversion rules:","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/golang/commons/convert/","weight":0,"wordcount":340},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains \"soft\" data converters. Soft data converters differ from the data conversion algorithms  found in typical programming language, due to the fact that they support rare conversions between  various data types (such as integer to timespan, timespan to string, and so on).\nThese converters are useful due to the fact that data in enterprise systems is represented in  various forms, requiring frequent conversion and at times in very difficult combinations.  \n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1621530648,"lvl0":"Convert","lvl1":"\nThis package contains \"soft\" data converters. Soft data converters differ from the data conversion algorithms  found in typical programming language, due to the fact that they support rare conversions between  various data types (such as integer to timespan, timespan to string, and so on).\nThese converters are useful due to the fact that data in enterprise systems is represented in  various forms, requiring frequent conversion and at times in very difficult combinations.  \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f9c0f7777d410ce0e3d3fb128af8fba5","permalink":"/net/commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/convert/","section":"net","summary":"Constants TypeCode Codes for the data types that can be converted using TypeConverter.\nClasses ArrayConverter Converts arbitrary values into array objects.\nBooleanConverter Converts arbitrary values to boolean values using extended conversion rules:\n Numbers: \u0026lt;\u0026gt;0 are true, =0 are false Strings: \u0026ldquo;true\u0026rdquo;, \u0026ldquo;yes\u0026rdquo;, \u0026ldquo;T\u0026rdquo;, \u0026ldquo;Y\u0026rdquo;, \u0026ldquo;1\u0026rdquo; are true; \u0026ldquo;false\u0026rdquo;, \u0026ldquo;no\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;N\u0026rdquo; are false DateTime: \u0026lt;\u0026gt;0 total milliseconds are true, =0 are false  DateTimeConverter Converts arbitrary values into Date values using extended conversion rules:","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/net/commons/convert/","weight":0,"wordcount":339},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains \"soft\" data converters. Soft data converters differ from the data conversion algorithms  found in typical programming language, due to the fact that they support rare conversions between  various data types (such as integer to timespan, timespan to string, and so on).\nThese converters are useful due to the fact that data in enterprise systems is represented in  various forms, requiring frequent conversion and at times in very difficult combinations.  \n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1621464736,"lvl0":"Convert","lvl1":"\nThis package contains \"soft\" data converters. Soft data converters differ from the data conversion algorithms  found in typical programming language, due to the fact that they support rare conversions between  various data types (such as integer to timespan, timespan to string, and so on).\nThese converters are useful due to the fact that data in enterprise systems is represented in  various forms, requiring frequent conversion and at times in very difficult combinations.  \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7cd0dff0fa27894f8aff0e77ed640da7","permalink":"/node/commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/convert/","section":"node","summary":"Constants TypeCode Codes for the data types that can be converted using TypeConverter.\nClasses ArrayConverter Converts arbitrary values into array objects.\nBooleanConverter Converts arbitrary values to boolean values using extended conversion rules:\n Numbers: \u0026lt;\u0026gt;0 are true, =0 are false Strings: \u0026ldquo;true\u0026rdquo;, \u0026ldquo;yes\u0026rdquo;, \u0026ldquo;T\u0026rdquo;, \u0026ldquo;Y\u0026rdquo;, \u0026ldquo;1\u0026rdquo; are true; \u0026ldquo;false\u0026rdquo;, \u0026ldquo;no\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;N\u0026rdquo; are false DateTime: \u0026lt;\u0026gt;0 total milliseconds are true, =0 are false  DateTimeConverter Converts arbitrary values into Date values using extended conversion rules:","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/node/commons/convert/","weight":0,"wordcount":339},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains \"soft\" data converters. Soft data converters differ from the data conversion algorithms  found in typical programming language, due to the fact that they support rare conversions between  various data types (such as integer to timespan, timespan to string, and so on).\nThese converters are useful due to the fact that data in enterprise systems is represented in  various forms, requiring frequent conversion and at times in very difficult combinations.  \n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1621464736,"lvl0":"Convert","lvl1":"\nThis package contains \"soft\" data converters. Soft data converters differ from the data conversion algorithms  found in typical programming language, due to the fact that they support rare conversions between  various data types (such as integer to timespan, timespan to string, and so on).\nThese converters are useful due to the fact that data in enterprise systems is represented in  various forms, requiring frequent conversion and at times in very difficult combinations.  \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"afe994064617fc1309eaaeb099959525","permalink":"/python/commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/convert/","section":"python","summary":"Constants TypeCode Codes for the data types that can be converted using TypeConverter.\nClasses ArrayConverter Converts arbitrary values into array objects.\nBooleanConverter Converts arbitrary values to boolean values using extended conversion rules:\n Numbers: \u0026lt;\u0026gt;0 are true, =0 are false Strings: \u0026ldquo;true\u0026rdquo;, \u0026ldquo;yes\u0026rdquo;, \u0026ldquo;T\u0026rdquo;, \u0026ldquo;Y\u0026rdquo;, \u0026ldquo;1\u0026rdquo; are true; \u0026ldquo;false\u0026rdquo;, \u0026ldquo;no\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;N\u0026rdquo; are false DateTime: \u0026lt;\u0026gt;0 total milliseconds are true, =0 are false  DateTimeConverter Converts arbitrary values into Date values using extended conversion rules:","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/python/commons/convert/","weight":0,"wordcount":339},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces for data processing components.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622656041,"lvl0":"Core","lvl1":"This package contains interfaces for data processing components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4a9286d196e610546f8ad062ce5b57ff","permalink":"/node/data/core/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/","section":"node","summary":"Interfaces IFilteredPageReader Interface for data processing components that can retrieve a page of data items by using a filter.\nIFilteredReader Interface for data processing components that can retrieve a list of data items by using a filter.\nIGetter Interface for data processing components that can get data items.\nILoader Interface for data processing components that load data items.\nIPartialUpdater Interface for data processing components used to update data items partially.","tags":null,"title":"Core","type":"docs","url":"/hugo-docs/node/data/core/","weight":0,"wordcount":136},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces for data processing components.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622583155,"lvl0":"Core","lvl1":"This package contains interfaces for data processing components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"028a0ef4601e6ae98a03f909489613a4","permalink":"/python/data/core/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/","section":"python","summary":"Interfaces IFilteredPageReader Interface for data processing components that can retrieve a page of data items by using a filter.\nIFilteredReader Interface for data processing components that can retrieve a list of data items by using a filter.\nIGetter Interface for data processing components that can get data items.\nILoader Interface for data processing components that load data items.\nIPartialUpdater Interface for data processing components used to update data items partially.","tags":null,"title":"Core","type":"docs","url":"/hugo-docs/python/data/core/","weight":0,"wordcount":136},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Count","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6d6b0f13d94616b4e85cbf088681bac5","permalink":"/dart/components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/count/","section":"dart","summary":"","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/dart/components/count/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"This packag provides a set of interfaces and classes used to create performance counters.\n \n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Count","lvl1":"This packag provides a set of interfaces and classes used to create performance counters.\n \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b22f2c2be544cb04067d4ea96e83ff99","permalink":"/golang/components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/count/","section":"golang","summary":"Important points\n Performance counters show non-functional characteristics about how the code works, such as times called, response time, objects saved/processed. Using these numbers, it is possible to show how the code works in the system – how stable, fast, expandable it is.  Constants CounterType Types of counters that measure different types of metrics\nInterfaces ICounters Interface for performance counters that measure execution metrics.\nThe performance counters measure how code is performing: how fast or slow, how many transactions performed, how many objects are stored, what was the latest transaction time and so on.","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/golang/components/count/","weight":0,"wordcount":237},{"authors":null,"categories":null,"date":-62135596800,"description":"This packag provides a set of interfaces and classes used to create performance counters.\n \n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621879821,"lvl0":"Count","lvl1":"This packag provides a set of interfaces and classes used to create performance counters.\n \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a1decddf954e2993cbaed179e1193b2a","permalink":"/net/components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/count/","section":"net","summary":"Important points\n Performance counters show non-functional characteristics about how the code works, such as times called, response time, objects saved/processed. Using these numbers, it is possible to show how the code works in the system – how stable, fast, expandable it is.  Constants CounterType Types of counters that measure different types of metrics\nInterfaces ICounters Interface for performance counters that measure execution metrics.\nThe performance counters measure how code is performing: how fast or slow, how many transactions performed, how many objects are stored, what was the latest transaction time and so on.","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/net/components/count/","weight":0,"wordcount":233},{"authors":null,"categories":null,"date":-62135596800,"description":"This packag provides a set of interfaces and classes used to create performance counters.\n \n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621873014,"lvl0":"Count","lvl1":"This packag provides a set of interfaces and classes used to create performance counters.\n \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"140082d7d7c5a0edf8b266ce0366ae3d","permalink":"/node/components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/count/","section":"node","summary":"Important points\n Performance counters show non-functional characteristics about how the code works, such as times called, response time, objects saved/processed. Using these numbers, it is possible to show how the code works in the system – how stable, fast, expandable it is.  Constants CounterType Types of counters that measure different types of metrics\nInterfaces ICounters Interface for performance counters that measure execution metrics.\nThe performance counters measure how code is performing: how fast or slow, how many transactions performed, how many objects are stored, what was the latest transaction time and so on.","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/node/components/count/","weight":0,"wordcount":233},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create Prometheus counters.\n","dir":"node/prometheus/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622665544,"lvl0":"Count","lvl1":"This package contains classes used to create Prometheus counters.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7fb7f218baf75e6115d081ba747ce361","permalink":"/node/prometheus/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/prometheus/count/","section":"node","summary":" Classes PrometheusCounterConverter Helper class that converts performance counter values into a response from Prometheus metrics service.\nPrometheusCounters Performance counters that send their metrics to Prometheus service. The component is normally used in passive mode in conjunction with PrometheusMetricsService. Alternatively when connection parameters are set, it can push metrics to Prometheus PushGateway.\n ","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/node/prometheus/count/","weight":0,"wordcount":51},{"authors":null,"categories":null,"date":-62135596800,"description":"This packag provides a set of interfaces and classes used to create performance counters.\n \n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Count","lvl1":"This packag provides a set of interfaces and classes used to create performance counters.\n \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d887e378ba683aa899545d6787c31049","permalink":"/python/components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/count/","section":"python","summary":"Important points\n Performance counters show non-functional characteristics about how the code works, such as times called, response time, objects saved/processed. Using these numbers, it is possible to show how the code works in the system – how stable, fast, expandable it is.  Constants CounterType Types of counters that measure different types of metrics\nInterfaces ICounters Interface for performance counters that measure execution metrics.\nThe performance counters measure how code is performing: how fast or slow, how many transactions performed, how many objects are stored, what was the latest transaction time and so on.","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/python/components/count/","weight":0,"wordcount":233},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create Prometheus counters.\n","dir":"python/prometheus/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622300583,"lvl0":"Count","lvl1":"This package contains classes used to create Prometheus counters.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1fb5b2eac90a6a8677422cd07cb0e43c","permalink":"/python/prometheus/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/prometheus/count/","section":"python","summary":" Classes PrometheusCounterConverter Helper class that converts performance counter values into a response from Prometheus metrics service.\nPrometheusCounters Performance counters that send their metrics to Prometheus service. The component is normally used in passive mode in conjunction with PrometheusMetricsService. Alternatively when connection parameters are set, it can push metrics to Prometheus PushGateway.\n ","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/python/prometheus/count/","weight":0,"wordcount":51},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store the measurements of a performance counter.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"Counter","lvl1":"Data object used to store the measurements of a performance counter.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2572da29264e06d9e21110a6414b2ed2","permalink":"/golang/components/count/counter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/count/counter/","section":"golang","summary":"Description The Counter class allows you to create data objects used to store the measurements of performance counters.\nImportant points\n This object is used by CachedCounters to store counters.  Constructors NewCounter Creates a instance of the data object.\n NewCounter(name string, typ int) *Counter\n  name: string - a counter name. type: int - a counter type.  Fields Last The last recorded value\n Last: float32","tags":null,"title":"Counter","type":"docs","url":"/hugo-docs/golang/components/count/counter/","weight":0,"wordcount":111},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store the measurements of a performance counter.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"Counter","lvl1":"Data object used to store the measurements of a performance counter.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0aad1b34de9f3d000f83111405905d58","permalink":"/net/components/count/counter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/count/counter/","section":"net","summary":"Description The Counter class allows you to create data objects used to store the measurements of performance counters.\nImportant points\n This object is used by CachedCounters to store counters.  Constructors Creates a instance of the data object.\n public Counter(string name, CounterType type)\n  name: string - a counter name. type: CounterType - a counter type.  Creates a instance of the data object.\n public Counter()","tags":null,"title":"Counter","type":"docs","url":"/hugo-docs/net/components/count/counter/","weight":0,"wordcount":148},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store the measurements of a performance counter.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"Counter","lvl1":"Data object used to store the measurements of a performance counter.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6672d809573dc26bd97c92582fec6f35","permalink":"/node/components/count/counter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/count/counter/","section":"node","summary":"Description The Counter class allows you to create data objects used to store the measurements of performance counters.\nImportant points\n This object is used by CachedCounters to store counters.  Constructors Creates a instance of the data object.\n public constructor(name: string = null, type: CounterType = null)\n  name: string - a counter name. type: CounterType - a counter type.  Fields last The last recorded value","tags":null,"title":"Counter","type":"docs","url":"/hugo-docs/node/components/count/counter/","weight":0,"wordcount":122},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store the measurements of a performance counter.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621101539,"lvl0":"Counter","lvl1":"Data object used to store the measurements of a performance counter.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"276f8c302707805a753a21990339e0f5","permalink":"/python/components/count/counter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/count/counter/","section":"python","summary":"Description The Counter class allows you to create data objects used to store the measurements of performance counters.\nImportant points\n This object is used by CachedCounters to store counters.  Constructors Creates a instance of the data object.\n Counter(name: str = None, tipe: CounterType = None)\n  name: str - a counter name. tipe: CounterType - a counter type.  Fields last The last recorded value\n last: Optional[float]","tags":null,"title":"Counter","type":"docs","url":"/hugo-docs/python/components/count/counter/","weight":0,"wordcount":113},{"authors":null,"categories":null,"date":-62135596800,"description":"Callback object returned by [ICounters.beginTiming](../icounters/#begintiming) to end the timing of an execution block and update the associated counter.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"CounterTiming","lvl1":"Callback object returned by [ICounters.beginTiming](../icounters/#begintiming) to end the timing of an execution block and update the associated counter.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"812125de10343372db03f5630f4a1fd8","permalink":"/golang/components/count/counter_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/count/counter_timing/","section":"golang","summary":"Description The CounterTiming class allows you to create callback objects that are returned by ICounters.BeginTiming to end the timing of execution blocks and update the associated counters.\nConstructors NewCounterTiming Creates a new instance of the timing callback object.\n NewCounterTiming(counter string, callback ICounterTimingCallback) *CounterTiming\n  counter: string - an associated counter name callback: ICounterTimingCallback - a callback that shall be called when end_timing is called.  NewEmptyCounterTiming Creates a new instance of the timing callback object.","tags":null,"title":"CounterTiming","type":"docs","url":"/hugo-docs/golang/components/count/counter_timing/","weight":0,"wordcount":100},{"authors":null,"categories":null,"date":-62135596800,"description":"Callback object returned by [ICounters.beginTiming](../icounters/#begintiming) to end the timing of an execution block and update the associated counter.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"CounterTiming","lvl1":"Callback object returned by [ICounters.beginTiming](../icounters/#begintiming) to end the timing of an execution block and update the associated counter.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3630c0d087c6ed03a3365be81004a366","permalink":"/net/components/count/counter_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/count/counter_timing/","section":"net","summary":"Description The CounterTiming class allows you to create callback objects that are returned by ICounters.BeginTiming to end the timing of execution blocks and update the associated counters.\nConstructors Creates a new instance of the timing callback object.\n public CounterTiming(string counter, ICounterTimingCallback callback)\n  counter: string - an associated counter name callback: ICounterTimingCallback - a callback that shall be called when end_timing is called.  Creates a new instance of the timing callback object.","tags":null,"title":"CounterTiming","type":"docs","url":"/hugo-docs/net/components/count/counter_timing/","weight":0,"wordcount":106},{"authors":null,"categories":null,"date":-62135596800,"description":"Callback object returned by [ICounters.beginTiming](../icounters/#begintiming) to end the timing of an execution block and update the associated counter.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"CounterTiming","lvl1":"Callback object returned by [ICounters.beginTiming](../icounters/#begintiming) to end the timing of an execution block and update the associated counter.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2cb7cfde91066e7db8f95da4ed767b1b","permalink":"/node/components/count/counter_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/count/counter_timing/","section":"node","summary":"Description The CounterTiming class allows you to create callback objects that are returned by ICounters.beginTiming to end the timing of execution blocks and update the associated counters.\nConstructors Creates a new instance of the timing callback object.\n public constructo(counter: string = null, callback: ICounterTimingCallback = null)\n  counter: string - an associated counter name callback: ICounterTimingCallback - a callback that shall be called when end_timing is called.  Fields _counters A list containing different counters","tags":null,"title":"CounterTiming","type":"docs","url":"/hugo-docs/node/components/count/counter_timing/","weight":0,"wordcount":111},{"authors":null,"categories":null,"date":-62135596800,"description":"Callback object returned by [ICounters.begin_timing](../icounters/#begin_timing) to end the timing of an execution block and update the associated counter.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621101640,"lvl0":"CounterTiming","lvl1":"Callback object returned by [ICounters.begin_timing](../icounters/#begin_timing) to end the timing of an execution block and update the associated counter.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8b96939d219c71a61410b4efe194bd88","permalink":"/python/components/count/counter_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/count/counter_timing/","section":"python","summary":"Description The CounterTiming class allows you to create callback objects that are returned by ICounters.begin_timing to end the timing of execution blocks and update the associated counters.\nConstructors Creates a new instance of the timing callback object.\n CounterTiming(counter: str = None, callback: ICounterTimingCallback = None)\n  counter: str - an associated counter name callback: ICounterTimingCallback - a callback that shall be called when end_timing is called.  Fields _counters A list containing different counters","tags":null,"title":"CounterTiming","type":"docs","url":"/hugo-docs/python/components/count/counter_timing/","weight":0,"wordcount":102},{"authors":null,"categories":null,"date":-62135596800,"description":"Counter type enumeration containing the types of counters that measure different types of metrics.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"CounterType","lvl1":"Counter type enumeration containing the types of counters that measure different types of metrics.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6cec104007dd712a7c558cb0fc989bdf","permalink":"/golang/components/count/counter_type/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/count/counter_type/","section":"golang","summary":"Description The CounterType class enumerates the types of counters that measure different types of metrics.\nEnumeration members  Interval = 0 - Counters that measure execution time intervals LastValue = 1 - Counters that keeps the latest measured value Statistics = 2 - Counters that measure min/average/max statistics Timestamp = 3 - Counter that record timestamps Increment = 4 - Counter that increment counters   ","tags":null,"title":"CounterType","type":"docs","url":"/hugo-docs/golang/components/count/counter_type/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"Counter type enumeration containing the types of counters that measure different types of metrics.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"CounterType","lvl1":"Counter type enumeration containing the types of counters that measure different types of metrics.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6f5e126b0c08e5c73ba6a882dddda796","permalink":"/node/components/count/counter_type/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/count/counter_type/","section":"node","summary":"Description The CounterType class enumerates the types of counters that measure different types of metrics.\nEnumeration members  Interval = 0 - Counters that measure execution time intervals LastValue = 1 - Counters that keeps the latest measured value Statistics = 2 - Counters that measure min/average/max statistics Timestamp = 3 - Counter that record timestamps Increment = 4 - Counter that increment counters   ","tags":null,"title":"CounterType","type":"docs","url":"/hugo-docs/node/components/count/counter_type/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"Counter type enumeration containing the types of counters that measure different types of metrics.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620653235,"lvl0":"CounterType","lvl1":"Counter type enumeration containing the types of counters that measure different types of metrics.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9418edc2a41087535c56cb5eb7d29f50","permalink":"/python/components/count/counter_type/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/count/counter_type/","section":"python","summary":"Description The CounterType class enumerates the types of counters that measure different types of metrics.\nEnumeration members  Interval = 0 - Counters that measure execution time intervals LastValue = 1 - Counters that keeps the latest measured value Statistics = 2 - Counters that measure min/average/max statistics Timestamp = 3 - Counter that record timestamps Increment = 4 - Counter that increment counters   ","tags":null,"title":"CounterType","type":"docs","url":"/hugo-docs/python/components/count/counter_type/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"Counter type enumeration containing the types of counters that measure different types of metrics.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"CounterType!","lvl1":"Counter type enumeration containing the types of counters that measure different types of metrics.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4550d0c09ed83f5f7ac50c83302a52d7","permalink":"/net/components/count/counter_type/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/count/counter_type/","section":"net","summary":"Description The CounterType class enumerates the types of counters that measure different types of metrics.\nEnumeration members  Interval = 0 - Counters that measure execution time intervals LastValue = 1 - Counters that keeps the latest measured value Statistics = 2 - Counters that measure min/average/max statistics Timestamp = 3 - Counter that record timestamps Increment = 4 - Counter that increment counters   ","tags":null,"title":"CounterType!","type":"docs","url":"/hugo-docs/net/components/count/counter_type/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"Error raised when factory is not able to create a requested component.\n","dir":"golang/components/build/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"CreateError","lvl1":"Error raised when factory is not able to create a requested component.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c6cdcae17b4c5b66fb5b18b29d2eaf9b","permalink":"/golang/components/build/create_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/build/create_error/","section":"golang","summary":"Description The CreateError class allows you to manage the error raised when a factory is not able to create a requested component.\nConstructors NewCreateError Creates an error instance and assigns its values.\n NewCreateError(correlationId string, message string) *errors.ApplicationError\n  correlationId: string - (optional) a unique transaction id to trace execution through a call chain. message: string - human-readable error of the component that cannot be created.  NewCreateErrorByLocator Creates an error instance and assigns its values.","tags":null,"title":"CreateError","type":"docs","url":"/hugo-docs/golang/components/build/create_error/","weight":0,"wordcount":109},{"authors":null,"categories":null,"date":-62135596800,"description":"Error raised when factory is not able to create a requested component.\n","dir":"net/components/build/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"CreateException","lvl1":"Error raised when factory is not able to create a requested component.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9df242d60bb7473591a1671d2b398caf","permalink":"/net/components/build/create_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/build/create_exception/","section":"net","summary":"Inherits: InternalException\nDescription The CreateException class allows you to manage the error raised when a factory is not able to create a requested component.\nConstructors Creates an error instance and assigns its values.\n public CreateException(string correlationId, string message)\n  correlationId: string - (optional) a unique transaction id to trace execution through a call chain. message: string - human-readable error  Creates an error instance and assigns its values.","tags":null,"title":"CreateException","type":"docs","url":"/hugo-docs/net/components/build/create_exception/","weight":0,"wordcount":107},{"authors":null,"categories":null,"date":-62135596800,"description":"Error raised when factory is not able to create a requested component.\n","dir":"node/components/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"CreateException","lvl1":"Error raised when factory is not able to create a requested component.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"58d28f7975557adc53a820933d2335f8","permalink":"/node/components/build/create_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/build/create_exception/","section":"node","summary":"Implements: InternalException\nDescription The CreateException class allows you to manage the error raised when a factory is not able to create a requested component.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlationId: string = null, messageOrLocator: any)\n  correlationId: string - (optional) a unique transaction id to trace execution through a call chain. messageOrLocator: any - human-readable error or locator of the component that cannot be created.","tags":null,"title":"CreateException","type":"docs","url":"/hugo-docs/node/components/build/create_exception/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"Error raised when factory is not able to create a requested component.\n","dir":"python/components/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621088136,"lvl0":"CreateException","lvl1":"Error raised when factory is not able to create a requested component.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"84e937cf53f8ea21bd9a6ff9883a573b","permalink":"/python/components/build/create_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/build/create_exception/","section":"python","summary":"Implements: InternalException\nDescription The CreateException class allows you to manage the error raised when a factory is not able to create a requested component.\nConstructors Creates an error instance and assigns its values.\n CreateException(correlation_id: Optional[str] = None, message_or_locator: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through a call chain. message_or_locator: str - human-readable error or locator of the component that cannot be created.","tags":null,"title":"CreateException","type":"docs","url":"/hugo-docs/python/components/build/create_exception/","weight":0,"wordcount":74},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains credentials to authenticate against external services.\n","dir":"golang/components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"CredentialParams","lvl1":"Contains credentials to authenticate against external services.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"47a21f75167320bf5b5ea716e001dd0f","permalink":"/golang/components/auth/credential_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/auth/credential_params/","section":"golang","summary":"Implements: ConfigParams\nDescription The CredentialParams class allows you to create credential parameters that can be used to authenticate against external services.\nImportant points\n Credential parameters are used together with connection parameters, but usually stored in a separate store, protected from unauthorized access.  Configuration parameters  store_key: key to retrieve parameters from credential store username: user name user: alternative to username password: user password pass: alternative to password access_id: application access id client_id: alternative to access_id access_key: application secret key client_key: alternative to access_key secret_key: alternative to access_key  In addition to standard parameters CredentialParams may contain any number of custom parameters.","tags":null,"title":"CredentialParams","type":"docs","url":"/hugo-docs/golang/components/auth/credential_params/","weight":0,"wordcount":647},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains credentials to authenticate against external services.\n","dir":"net/components/auth/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622047938,"lvl0":"CredentialParams","lvl1":"Contains credentials to authenticate against external services.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"96ecfc07f5c83c1b774ddbb2b64acd49","permalink":"/net/components/auth/credential_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/components/auth/credential_params/","section":"net","summary":"Implemets: ConfigParams\nDescription The CredentialParams class allows you to create credential parameters that can be used to authenticate against external services.\nImportant points\n Credential parameters are used together with connection parameters, but usually stored in a separate store, protected from unauthorized access.  Configuration parameters  store_key: key to retrieve parameters from credential store username: user name user: alternative to username password: user password pass: alternative to password access_id: application access id client_id: alternative to access_id access_key: application secret key client_key: alternative to access_key secret_key: alternative to access_key  In addition to standard parameters CredentialParams may contain any number of custom parameters.","tags":null,"title":"CredentialParams","type":"docs","url":"/hugo-docs/net/components/auth/credential_params/","weight":0,"wordcount":471},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains credentials to authenticate against external services.\n","dir":"node/components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1622047938,"lvl0":"CredentialParams","lvl1":"Contains credentials to authenticate against external services.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a45408e7b4bb23d8999aab503015ea64","permalink":"/node/components/auth/credential_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/components/auth/credential_params/","section":"node","summary":"Extends: ConfigParams\nDescription The CredentialParams class allows you to create credential parameters that can be used to authenticate against external services.\nImportant points\n Credential parameters are used together with connection parameters, but usually stored in a separate store, protected from unauthorized access.  Configuration parameters  store_key: key to retrieve parameters from credential store username: user name user: alternative to username password: user password pass: alternative to password access_id: application access id client_id: alternative to access_id access_key: application secret key client_key: alternative to access_key secret_key: alternative to access_key  In addition to standard parameters CredentialParams may contain any number of custom parameters.","tags":null,"title":"CredentialParams","type":"docs","url":"/hugo-docs/node/components/auth/credential_params/","weight":0,"wordcount":615},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains credentials to authenticate against external services.\n","dir":"python/components/auth/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"CredentialParams","lvl1":"Contains credentials to authenticate against external services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1a9cb1ac44337cd982aaff6da5090dcd","permalink":"/python/components/auth/credential_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/components/auth/credential_params/","section":"python","summary":"Implements: ConfigParams\nDescription The CredentialParams class allows you to create credential parameters that can be used to authenticate against external services.\nImportant points\n Credential parameters are used together with connection parameters, but usually stored in a separate store, protected from unauthorized access.  Configuration parameters  store_key: key to retrieve parameters from credential store username: user name user: alternative to username password: user password pass: alternative to password access_id: application access id client_id: alternative to access_id access_key: application secret key client_key: alternative to access_key secret_key: alternative to access_key  In addition to standard parameters CredentialParams may contain any number of custom parameters.","tags":null,"title":"CredentialParams","type":"docs","url":"/hugo-docs/python/components/auth/credential_params/","weight":0,"wordcount":589},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to retrieve component credentials.\n","dir":"golang/components/auth/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"CredentialResolver","lvl1":"Helper class used to retrieve component credentials.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fd813ca8c3768b7255df5d4895d4323b","permalink":"/golang/components/auth/credential_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/auth/credential_resolver/","section":"golang","summary":"Description The CredentialResolver class is used to retrieve component credentials.\nImportant points\n If credentials are configured to be retrieved from ICredentialStore, it will automatically locate ICredentialStore in component references and retrieve the credentials from there using the store_key parameter.  Configuration parameters credential:\n store_key: (optional) a key to retrieve the credentials from ICredentialStore \u0026hellip;: other credential parameters  credentials: alternative to credential\n [credential params 1]: first credential parameters  \u0026hellip; : credential parameters for key 1   \u0026hellip; [credential params N]: Nth credential parameters  \u0026hellip; : credential parameters for key N    References  *:credential-store:*:*:1.","tags":null,"title":"CredentialResolver","type":"docs","url":"/hugo-docs/golang/components/auth/credential_resolver/","weight":0,"wordcount":315},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to retrieve component credentials.\n","dir":"net/components/auth/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"CredentialResolver","lvl1":"Helper class used to retrieve component credentials.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3d2438d38091e47ba76e444903b410d0","permalink":"/net/components/auth/credential_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/auth/credential_resolver/","section":"net","summary":"Inherits: IConfigurable, IReferenceable\nDescription The CredentialResolver class is used to retrieve component credentials.\nImportant points\n If credentials are configured to be retrieved from ICredentialStore, it will automatically locate ICredentialStore in component references and retrieve the credentials from there using the store_key parameter.  Configuration parameters credential:\n store_key: (optional) a key to retrieve the credentials from ICredentialStore \u0026hellip;: other credential parameters  credentials: alternative to credential\n [credential params 1]: first credential parameters  \u0026hellip; : credential parameters for key 1   \u0026hellip; [credential params N]: Nth credential parameters  \u0026hellip; : credential parameters for key N    References  *:credential-store:*:*:1.","tags":null,"title":"CredentialResolver","type":"docs","url":"/hugo-docs/net/components/auth/credential_resolver/","weight":0,"wordcount":330},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to retrieve component credentials.\n","dir":"node/components/auth/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"CredentialResolver","lvl1":"Helper class used to retrieve component credentials.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6ab9862b6554d97c0343ab6bd6a2f7cf","permalink":"/node/components/auth/credential_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/auth/credential_resolver/","section":"node","summary":"Implements: IConfigurable, IReferenceable\nDescription The CredentialResolver class is used to retrieve component credentials.\nImportant points\n If credentials are configured to be retrieved from ICredentialStore, it will automatically locate ICredentialStore in component references and retrieve the credentials from there using the store_key parameter.  Configuration parameters credential:\n store_key: (optional) a key to retrieve the credentials from ICredentialStore \u0026hellip;: other credential parameters  credentials: alternative to credential\n [credential params 1]: first credential parameters  \u0026hellip; : credential parameters for key 1   \u0026hellip; [credential params N]: Nth credential parameters  \u0026hellip; : credential parameters for key N    References  *:credential-store:*:*:1.","tags":null,"title":"CredentialResolver","type":"docs","url":"/hugo-docs/node/components/auth/credential_resolver/","weight":0,"wordcount":310},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to retrieve component credentials.\n","dir":"python/components/auth/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"CredentialResolver","lvl1":"Helper class used to retrieve component credentials.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2b9eafa6c76f5e8036c14799e6eda3bc","permalink":"/python/components/auth/credential_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/auth/credential_resolver/","section":"python","summary":"Implements: IConfigurable, IReferenceable\nDescription The CredentialResolver class is used to retrieve component credentials.\nImportant points\n If credentials are configured to be retrieved from ICredentialStore, it will automatically locate ICredentialStore in component references and retrieve the credentials from there using the store_key parameter.  Configuration parameters credential:\n store_key: (optional) a key to retrieve the credentials from ICredentialStore \u0026hellip;: other credential parameters  credentials: alternative to credential\n [credential params 1]: first credential parameters  \u0026hellip; : credential parameters for key 1   \u0026hellip; [credential params N]: Nth credential parameters  \u0026hellip; : credential parameters for key N    References  *:credential-store:*:*:1.","tags":null,"title":"CredentialResolver","type":"docs","url":"/hugo-docs/python/components/auth/credential_resolver/","weight":0,"wordcount":288},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/ecommrce/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Credit cards Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"297564bd305b87071ebfbb31883e6820","permalink":"/microservices/ecommrce/creditcards/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/ecommrce/creditcards/","section":"microservices","summary":"Stores customer credit cards internally or in external PCI-complient service like Paypal\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Credit cards Microservice","type":"docs","url":"/hugo-docs/microservices/ecommrce/creditcards/","weight":0,"wordcount":39},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Dashboards Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ffdbf4b116cdb8237e7b86c32fd921dd","permalink":"/microservices/content/dashboards/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/dashboards/","section":"microservices","summary":"Provides guidance to application users: introduces about application features, tells about new version and so on. Each dashboard:\n Can be written in multiple languages Can include one or more pages with title, text and a picture Supports editing lifecycle via status tracking  ‍\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  This microservice has dependencies on the following microservices:","tags":null,"title":"Dashboards Microservice","type":"docs","url":"/hugo-docs/microservices/content/dashboards/","weight":0,"wordcount":89},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Data","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"304537c047a726f8a97fb69a0693ac33","permalink":"/dart/commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/data/","section":"dart","summary":"","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/dart/commons/data/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a set of abstract, portable data types. Some examples are anytype, anyvalues, anyarrays, anymaps, and stringmaps. Many serializable classes are based on these data types. For example, the classes configmap, filtermaps and  connection parameters, which extend stringvaluemap. The package also includes several classes for working with data (E.g. data paging, filtering, GUIDs). \n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"section","lang":"en","lastmod":1624224787,"lvl0":"Data","lvl1":"This package contains a set of abstract, portable data types. Some examples are anytype, anyvalues, anyarrays, anymaps, and stringmaps. Many serializable classes are based on these data types. For example, the classes configmap, filtermaps and  connection parameters, which extend stringvaluemap. The package also includes several classes for working with data (E.g. data paging, filtering, GUIDs). \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e5d9da568cdb636b8d5b4de049114435","permalink":"/golang/commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/data/","section":"golang","summary":"Interfaces IChangeable Interface for data objects that contain their latest change time.\nICloneable Interface for data objects that are able to create their full binary copy.\nIIdentifiable Generic interface for data objects that can be uniquely identified by an id. The type specified in the interface defines the type of id field.\nINamed Interface for data objects that have human-readable names.\nIStringIdentifiable Interface for data objects that can be uniquely identifed by a string id.","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/golang/commons/data/","weight":0,"wordcount":758},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a set of abstract, portable data types. Some examples are anytype, anyvalues, anyarrays, anymaps, and stringmaps. Many serializable classes are based on these data types. For example, the classes configmap, filtermaps and  connection parameters, which extend stringvaluemap. The package also includes several classes for working with data (E.g. data paging, filtering, GUIDs). \n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"section","lang":"en","lastmod":1621530648,"lvl0":"Data","lvl1":"This package contains a set of abstract, portable data types. Some examples are anytype, anyvalues, anyarrays, anymaps, and stringmaps. Many serializable classes are based on these data types. For example, the classes configmap, filtermaps and  connection parameters, which extend stringvaluemap. The package also includes several classes for working with data (E.g. data paging, filtering, GUIDs). \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"814c206e7d66827a14cd6e3c0a0de76d","permalink":"/net/commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/commons/data/","section":"net","summary":"Interfaces IChangeable Interface for data objects that contain their latest change time.\nICloneable Interface for data objects that are able to create their full binary copy.\nIIdentifiable Generic interface for data objects that can be uniquely identified by an id. The type specified in the interface defines the type of id field.\nINamed Interface for data objects that have human-readable names.\nIStringIdentifiable Interface for data objects that can be uniquely identifed by a string id.","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/net/commons/data/","weight":0,"wordcount":740},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a set of abstract, portable data types. Some examples are anytype, anyvalues, anyarrays, anymaps, and stringmaps. Many serializable classes are based on these data types. For example, the classes configmap, filtermaps and  connection parameters, which extend stringvaluemap. The package also includes several classes for working with data (E.g. data paging, filtering, GUIDs). \n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"section","lang":"en","lastmod":1622669208,"lvl0":"Data","lvl1":"This package contains a set of abstract, portable data types. Some examples are anytype, anyvalues, anyarrays, anymaps, and stringmaps. Many serializable classes are based on these data types. For example, the classes configmap, filtermaps and  connection parameters, which extend stringvaluemap. The package also includes several classes for working with data (E.g. data paging, filtering, GUIDs). \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a3ba9170d3504ab29b47cfc80983bc36","permalink":"/node/commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/commons/data/","section":"node","summary":"Interfaces IChangeable Interface for data objects that contain their latest change time.\nICloneable Interface for data objects that are able to create their full binary copy.\nIIdentifiable Generic interface for data objects that can be uniquely identified by an id. The type specified in the interface defines the type of id field.\nINamed Interface for data objects that have human-readable names.\nIStringIdentifiable Interface for data objects that can be uniquely identifed by a string id.","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/node/commons/data/","weight":0,"wordcount":740},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a set of abstract, portable data types. Some examples are anytype, anyvalues, anyarrays, anymaps, and stringmaps. Many serializable classes are based on these data types. For example, the classes configmap, filtermaps and  connection parameters, which extend stringvaluemap. The package also includes several classes for working with data (E.g. data paging, filtering, GUIDs). \n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Data","lvl1":"This package contains a set of abstract, portable data types. Some examples are anytype, anyvalues, anyarrays, anymaps, and stringmaps. Many serializable classes are based on these data types. For example, the classes configmap, filtermaps and  connection parameters, which extend stringvaluemap. The package also includes several classes for working with data (E.g. data paging, filtering, GUIDs). \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7698b0b48956e94ece0714503886cb57","permalink":"/python/commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/commons/data/","section":"python","summary":"Interfaces IChangeable Interface for data objects that contain their latest change time.\nICloneable Interface for data objects that are able to create their full binary copy.\nIIdentifiable Generic interface for data objects that can be uniquely identified by an id. The type specified in the interface defines the type of id field.\nINamed Interface for data objects that have human-readable names.\nIStringIdentifiable Interface for data objects that can be uniquely identifed by a string id.","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/python/commons/data/","weight":0,"wordcount":740},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1623681884,"lvl0":"Data Microservice","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f12bcda2b2d9328964b063bda3765820","permalink":"/dart/tutorials/data_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/tutorials/data_microservice/","section":"dart","summary":"Overview In this tutorial, we’ll be writing from scratch a fully-functional Data microservice, using the patterns and mechanisms available in the Pip.Services toolkit, as well as the programming language you have selected. The microservice that we are going to be using as an example in this tutorial is called [The Beacons microservice], which is part of [The IoT Microservices Collection]. This microservice is meant to perform the following simple tasks:","tags":null,"title":"Data Microservice","type":"docs","url":"/hugo-docs/dart/tutorials/data_microservice/","weight":0,"wordcount":312},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1623681884,"lvl0":"Data Microservice","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"176cc69970bbf7609b1560cf9ea681d9","permalink":"/golang/tutorials/data_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/tutorials/data_microservice/","section":"golang","summary":"Overview In this tutorial, we’ll be writing from scratch a fully-functional Data microservice, using the patterns and mechanisms available in the Pip.Services toolkit, as well as the programming language you have selected. The microservice that we are going to be using as an example in this tutorial is called [The Beacons microservice], which is part of [The IoT Microservices Collection]. This microservice is meant to perform the following simple tasks:","tags":null,"title":"Data Microservice","type":"docs","url":"/hugo-docs/golang/tutorials/data_microservice/","weight":0,"wordcount":312},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1623681884,"lvl0":"Data Microservice","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cd5eee58587d5d130d197d6a5660a373","permalink":"/net/tutorials/data_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/tutorials/data_microservice/","section":"net","summary":"Overview In this tutorial, we’ll be writing from scratch a fully-functional Data microservice, using the patterns and mechanisms available in the Pip.Services toolkit, as well as the programming language you have selected. The microservice that we are going to be using as an example in this tutorial is called [The Beacons microservice], which is part of [The IoT Microservices Collection]. This microservice is meant to perform the following simple tasks:","tags":null,"title":"Data Microservice","type":"docs","url":"/hugo-docs/net/tutorials/data_microservice/","weight":0,"wordcount":312},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1623681884,"lvl0":"Data Microservice","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"740b169b2ae85fd150c11177eb2b93cf","permalink":"/node/tutorials/data_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/tutorials/data_microservice/","section":"node","summary":"Overview In this tutorial, we’ll be writing from scratch a fully-functional Data microservice, using the patterns and mechanisms available in the Pip.Services toolkit, as well as the programming language you have selected. The microservice that we are going to be using as an example in this tutorial is called [The Beacons microservice], which is part of [The IoT Microservices Collection]. This microservice is meant to perform the following simple tasks:","tags":null,"title":"Data Microservice","type":"docs","url":"/hugo-docs/node/tutorials/data_microservice/","weight":0,"wordcount":318},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1623713057,"lvl0":"Data Microservice","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6a27e33d578ca188240e35f707e59291","permalink":"/python/tutorials/data_microservice/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/tutorials/data_microservice/","section":"python","summary":"Overview In this tutorial, we’ll be writing from scratch a fully-functional Data microservice, using the patterns and mechanisms available in the Pip.Services toolkit, as well as the programming language you have selected. The microservice that we are going to be using as an example in this tutorial is called The Beacons microservice, which is part of The IoT Microservices Collection. This microservice is meant to perform the following simple tasks:","tags":null,"title":"Data Microservice","type":"docs","url":"/hugo-docs/python/tutorials/data_microservice/","weight":0,"wordcount":375},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object that is used to pass the results of a paginated query. This object contains items of the retrieved page.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624070289,"lvl0":"DataPage","lvl1":"Data transfer object that is used to pass the results of a paginated query. This object contains items of the retrieved page.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"26ae7418f471d047fca0dd2503e635d7","permalink":"/golang/commons/data/data_page/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/data/data_page/","section":"golang","summary":"Description The DataPage class allows you to create a data transfer object that can be used to pass the results of a paginated query. This object contains items of the retrieved page.\nImportant points\n Most often, this object type is used to send responses to paginated queries. Pagination parameters are defined by a PagingParams object. The skip parameter in the PagingParams indicates how many items to skip. The takes parameter sets number of items to return in the page.","tags":null,"title":"DataPage","type":"docs","url":"/hugo-docs/golang/commons/data/data_page/","weight":0,"wordcount":213},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object that is used to pass the results of a paginated query. This object contains items of the retrieved page.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"DataPage","lvl1":"Data transfer object that is used to pass the results of a paginated query. This object contains items of the retrieved page.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b2fcea4c7e45de7004bef608efce56ac","permalink":"/net/commons/data/data_page/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/data/data_page/","section":"net","summary":"Description The DataPage class allows you to create a data transfer object that can be used to pass the results of a paginated query. This object contains items of the retrieved page.\nImportant points\n Most often, this object type is used to send responses to paginated queries. Pagination parameters are defined by a PagingParams object. The skip parameter in the PagingParams indicates how many items to skip. The takes parameter sets number of items to return in the page.","tags":null,"title":"DataPage","type":"docs","url":"/hugo-docs/net/commons/data/data_page/","weight":0,"wordcount":226},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object that is used to pass the results of a paginated query. This object contains items of the retrieved page.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621285883,"lvl0":"DataPage","lvl1":"Data transfer object that is used to pass the results of a paginated query. This object contains items of the retrieved page.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4e52e2cbd97b07a79e80013758efb591","permalink":"/node/commons/data/data_page/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/data_page/","section":"node","summary":"Description The DataPage class allows you to create a data transfer object that can be used to pass the results of a paginated query. This object contains items of the retrieved page.\nImportant points\n Most often, this object type is used to send responses to paginated queries. Pagination parameters are defined by a PagingParams object. The skip parameter in the PagingParams indicates how many items to skip. The takes parameter sets number of items to return in the page.","tags":null,"title":"DataPage","type":"docs","url":"/hugo-docs/node/commons/data/data_page/","weight":0,"wordcount":194},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object that is used to pass the results of a paginated query. This object contains items of the retrieved page.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620356279,"lvl0":"DataPage","lvl1":"Data transfer object that is used to pass the results of a paginated query. This object contains items of the retrieved page.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7b6f549344f94cef5b995d5ced41fa26","permalink":"/python/commons/data/data_page/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/data_page/","section":"python","summary":"Description The DataPage class allows you to create a data transfer object that can be used to pass the results of a paginated query. This object contains items of the retrieved page.\nImportant points\n Most often, this object type is used to send responses to paginated queries. Pagination parameters are defined by a PagingParams object. The skip parameter in the PagingParams indicates how many items to skip. The takes parameter sets number of items to return in the page.","tags":null,"title":"DataPage","type":"docs","url":"/hugo-docs/python/commons/data/data_page/","weight":0,"wordcount":193},{"authors":null,"categories":null,"date":-62135596800,"description":"The DateTimeConverter class allows you to convert arbitrary values into Date values using extended conversion rules.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623967565,"lvl0":"DateTimeConverter","lvl1":"The DateTimeConverter class allows you to convert arbitrary values into Date values using extended conversion rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"15f22816d71e32a14a42352590c34324","permalink":"/golang/commons/convert/date_time_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/convert/date_time_converter/","section":"golang","summary":"Description The DateTimeConverter class allows you to convert arbitrary values into Date values using following extended conversion rules:\n Strings: converted using ISO time format Numbers: converted using milliseconds since unix epoch  Methods ToDateTime Converts value into Date or returns current date when conversion is not possible.\nSee ToDateTimeWithDefault\n ToDateTime(value interface{}) time.Time\n  value: interface{} - value to convert. returns: time.Time - Date value or current date when conversion is not supported.","tags":null,"title":"DateTimeConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/date_time_converter/","weight":0,"wordcount":171},{"authors":null,"categories":null,"date":-62135596800,"description":"The DateTimeConverter class allows you to convert arbitrary values into Date values using extended conversion rules.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"DateTimeConverter","lvl1":"The DateTimeConverter class allows you to convert arbitrary values into Date values using extended conversion rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cd6acd819e58ff379abe748fe5325c28","permalink":"/net/commons/convert/date_time_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/date_time_converter/","section":"net","summary":"Description The DateTimeConverter class allows you to convert arbitrary values into Date values using following extended conversion rules:\n Strings: converted using ISO time format Numbers: converted using milliseconds since unix epoch  Static methods ToDateTime Converts value into Date or returns current date when conversion is not possible.\nSee ToDateTimeWithDefault\n public static DateTime ToDateTime(object value)\n  value: object - the value to convert. returns: DateTime - Date value or current date when conversion is not supported.","tags":null,"title":"DateTimeConverter","type":"docs","url":"/hugo-docs/net/commons/convert/date_time_converter/","weight":0,"wordcount":178},{"authors":null,"categories":null,"date":-62135596800,"description":"The DateTimeConverter class allows you to convert arbitrary values into Date values using extended conversion rules.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"DateTimeConverter","lvl1":"The DateTimeConverter class allows you to convert arbitrary values into Date values using extended conversion rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e67f75e185080a6965243b344293ebd9","permalink":"/node/commons/convert/date_time_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/convert/date_time_converter/","section":"node","summary":"Description The DateTimeConverter class allows you to convert arbitrary values into Date values using following extended conversion rules:\n Strings: converted using ISO time format Numbers: converted using milliseconds since unix epoch  Static methods toDateTime Converts value into Date or returns current date when conversion is not possible.\nSee toDateTimeWithDefault\n public static toDateTime(value: any): Date\n  value: any - the value to convert. returns: Date - Date value or current date when conversion is not supported.","tags":null,"title":"DateTimeConverter","type":"docs","url":"/hugo-docs/node/commons/convert/date_time_converter/","weight":0,"wordcount":180},{"authors":null,"categories":null,"date":-62135596800,"description":"The DateTimeConverter class allows you to convert arbitrary values into Date values using extended conversion rules.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"DateTimeConverter","lvl1":"The DateTimeConverter class allows you to convert arbitrary values into Date values using extended conversion rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2f68c6ecd43cadb9f25d20f0ac319354","permalink":"/python/commons/convert/date_time_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/date_time_converter/","section":"python","summary":"Description The DateTimeConverter class allows you to convert arbitrary values into Date values using following extended conversion rules:\n Strings: converted using ISO time format Numbers: converted using milliseconds since unix epoch  Static methods to_date_time Converts value into Date or returns current date when conversion is not possible.\nSee to_date_time_with_default\n static to_date_time(value: Any): datetime\n  value: Any - the value to convert. returns: datetime - Date value or current date when conversion is not supported.","tags":null,"title":"DateTimeConverter","type":"docs","url":"/hugo-docs/python/commons/convert/date_time_converter/","weight":0,"wordcount":162},{"authors":null,"categories":null,"date":-62135596800,"description":"Converts objects to decimals.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"DecimalConverter","lvl1":"Converts objects to decimals.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"80bd46701136d4d04b0e09c4889aae3b","permalink":"/net/commons/convert/decimal_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/decimal_converter/","section":"net","summary":"Description TODO: add description\nStatic methods ToDecimal TODO: add description\n public static decimal ToDecimal (object value)\n  value: object - TODO: add description returns: decimal - TODO: add description  ToDecimalWithDefault TODO: add description\n public static decimal ToDecimalWithDefault (object value, decimal defaultValue)\n  value: object - TODO: add description defaultValue: decimal - TODO: add description returns: decimal - TODO: add description  ToNullableDecimal Converts value into doubles or returns null when conversion is not possible.","tags":null,"title":"DecimalConverter","type":"docs","url":"/hugo-docs/net/commons/convert/decimal_converter/","weight":0,"wordcount":88},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ICache](../icache) components by their descriptors.\n","dir":"golang/components/cache/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"DefaultCacheFactory","lvl1":"Creates [ICache](../icache) components by their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"696797e601812b01e44d55c730ca6421","permalink":"/golang/components/cache/default_cache_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/cache/default_cache_factory/","section":"golang","summary":"Constructors NewDefaultCacheFactory Create a new instance of the factory.\n NewDefaultCacheFactory() *build.Factory\n Fields NullCacheDescriptor A description for a null cache (dummy cache).\n NullCacheDescriptor: Descriptor\n Descriptor A descriptor for a factory cache.\n Descriptor: Descriptor\n  See also   Factory   ICache   MemoryCache   NullCache   ","tags":null,"title":"DefaultCacheFactory","type":"docs","url":"/hugo-docs/golang/components/cache/default_cache_factory/","weight":0,"wordcount":38},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ICache](../icache) components by their descriptors.\n","dir":"net/components/cache/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"DefaultCacheFactory","lvl1":"Creates [ICache](../icache) components by their descriptors.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ba91aa4a3327ae576863e0eab4e6307d","permalink":"/net/components/cache/default_cache_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/cache/default_cache_factory/","section":"net","summary":"Inherits: Factory\nConstructors Create a new instance of the factory.\n public DefaultCacheFactory()\n Fields NullCacheDescriptor A description for a null cache (dummy cache).\n public static NullCacheDescriptor: Descriptor\n MemoryCacheDescriptor A descriptor for a memory cache.\n public static MemoryCacheDescriptor: Descriptor\n Descriptor A descriptor for a factory cache.\n public static Descriptor: Descriptor\n  See also   Factory   ICache   MemoryCache   NullCache   ","tags":null,"title":"DefaultCacheFactory","type":"docs","url":"/hugo-docs/net/components/cache/default_cache_factory/","weight":0,"wordcount":54},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ICache](../icache) components by their descriptors.\n","dir":"node/components/cache/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"DefaultCacheFactory","lvl1":"Creates [ICache](../icache) components by their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"266416cab533aa9bd36d768a7b498176","permalink":"/node/components/cache/default_cache_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/cache/default_cache_factory/","section":"node","summary":"Extends: Factory\nConstructors Create a new instance of the factory.\n public constructor()\n Fields NullCacheDescriptor A description for a null cache (dummy cache).\n public static NullCacheDescriptor: Descriptor\n MemoryCacheDescriptor A descriptor for a memory cache.\n public static MemoryCacheDescriptor: Descriptor\n Descriptor A descriptor for a factory cache.\n public static Descriptor: Descriptor\n  See also   Factory   ICache   MemoryCache   NullCache   ","tags":null,"title":"DefaultCacheFactory","type":"docs","url":"/hugo-docs/node/components/cache/default_cache_factory/","weight":0,"wordcount":54},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ICache](../icache) components by their descriptors.\n","dir":"python/components/cache/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"DefaultCacheFactory","lvl1":"Creates [ICache](../icache) components by their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f75519d131c9cbe3e3ac247622ddc8d1","permalink":"/python/components/cache/default_cache_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/cache/default_cache_factory/","section":"python","summary":"Implements: Factory\nConstructors Create a new instance of the factory.\n DefaultCacheFactory()\n Fields NullCacheDescriptor A description for a null cache (dummy cache).\n NullCacheDescriptor: Descriptor\n MemoryCacheDescriptor A descriptor for a memory cache.\n MemoryCacheDescriptor: Descriptor\n Descriptor A descriptor for a factory cache.\n descriptor: Descriptor\n  See also   Factory   ICache   MemoryCache   NullCache   ","tags":null,"title":"DefaultCacheFactory","type":"docs","url":"/hugo-docs/python/components/cache/default_cache_factory/","weight":0,"wordcount":47},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [IConfigReader](../iconfig_reader) components based on their descriptors.\n","dir":"golang/components/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"DefaultConfigReaderFactory","lvl1":"Creates [IConfigReader](../iconfig_reader) components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e3c39b71162717fd87bca94f7bee310b","permalink":"/golang/components/config/default_config_reader_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/config/default_config_reader_factory/","section":"golang","summary":"Description The DefaultConfigReaderFactory class allows you to create IConfigReader components based on their descriptors.\nConstructors Creates a new instance of the factory.\n NewDefaultConfigReaderFactory() *build.Factory\n See also   Factory   MemoryConfigReader   JsonConfigReader   YamlConfigReader   ","tags":null,"title":"DefaultConfigReaderFactory","type":"docs","url":"/hugo-docs/golang/components/config/default_config_reader_factory/","weight":0,"wordcount":30},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [IConfigReader](../iconfig_reader) components based on their descriptors.\n","dir":"net/components/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"DefaultConfigReaderFactory","lvl1":"Creates [IConfigReader](../iconfig_reader) components based on their descriptors.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f9b50af66649db21aab3135dd9c0b0fe","permalink":"/net/components/config/default_config_reader_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/config/default_config_reader_factory/","section":"net","summary":"Inherits: Factory\nDescription The DefaultConfigReaderFactory class allows you to create IConfigReader components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public DefaultConfigReaderFactory()\n See also   Factory   MemoryConfigReader   JsonConfigReader   YamlConfigReader   ","tags":null,"title":"DefaultConfigReaderFactory","type":"docs","url":"/hugo-docs/net/components/config/default_config_reader_factory/","weight":0,"wordcount":32},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [IConfigReader](../iconfig_reader) components based on their descriptors.\n","dir":"node/components/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"DefaultConfigReaderFactory","lvl1":"Creates [IConfigReader](../iconfig_reader) components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0a71ee2668425bd14cca05a4c44b1ca9","permalink":"/node/components/config/default_config_reader_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/config/default_config_reader_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultConfigReaderFactory class allows you to create IConfigReader components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public constructor()\n See also   Factory   MemoryConfigReader   JsonConfigReader   YamlConfigReader   ","tags":null,"title":"DefaultConfigReaderFactory","type":"docs","url":"/hugo-docs/node/components/config/default_config_reader_factory/","weight":0,"wordcount":32},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [IConfigReader](../iconfig_reader) components based on their descriptors.\n","dir":"python/components/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621093994,"lvl0":"DefaultConfigReaderFactory","lvl1":"Creates [IConfigReader](../iconfig_reader) components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3f3702e6941189e1c1d597345709dd58","permalink":"/python/components/config/default_config_reader_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/config/default_config_reader_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultConfigReaderFactory class allows you to create IConfigReader components based on their descriptors.\nConstructors Creates a new instance of the factory.\n DefaultConfigReaderFactory()\n See also   Factory   MemoryConfigReader   JsonConfigReader   YamlConfigReader   ","tags":null,"title":"DefaultConfigReaderFactory","type":"docs","url":"/hugo-docs/python/components/config/default_config_reader_factory/","weight":0,"wordcount":31},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates default container components (loggers, counters, caches, locks, etc.) by their descriptors.\n","dir":"golang/container/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"DefaultContainerFactory","lvl1":"Creates default container components (loggers, counters, caches, locks, etc.) by their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"06b990bdbfbcfd13d004c2aab4e20151","permalink":"/golang/container/build/default_container_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/build/default_container_factory/","section":"golang","summary":"Implements: CompositeFactory\nDescription The DefaultContainerFactory class allows you to create factories used to create default container components by their descriptors. The factories included are:\n DefaultInfoFactory DefaultLoggerFactory DefaultCountersFactory DefaultConfigReaderFactory DefaultCacheFactory DefaultCredentialStoreFactory DefaultDiscoveryFactory DefaultTestFactory DefaultTracerFactory  Constructors NewDefaultContainerFactoryFromFactories Creates a new instance of the factory and sets nested factories.\n NewDefaultContainerFactoryFromFactories(factories \u0026hellip;IFactory) *CompositeFactory\n  factories: \u0026hellip;IFactory - list of nested factories  NewDefaultContainerFactory Create a new instance of the factory and sets nested factories.","tags":null,"title":"DefaultContainerFactory","type":"docs","url":"/hugo-docs/golang/container/build/default_container_factory/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates default container components (loggers, counters, caches, locks, etc.) by their descriptors.\n","dir":"node/container/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"DefaultContainerFactory","lvl1":"Creates default container components (loggers, counters, caches, locks, etc.) by their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ca1ae6398004fd9e50508cbb353dda57","permalink":"/node/container/build/default_container_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/build/default_container_factory/","section":"node","summary":"Implements: CompositeFactory\nDescription The DefaultContainerFactory class allows you to create factories used to create default container components by their descriptors. The factories included are:\n DefaultInfoFactory DefaultLoggerFactory DefaultCountersFactory DefaultConfigReaderFactory DefaultCacheFactory DefaultCredentialStoreFactory DefaultDiscoveryFactory DefaultTestFactory DefaultTracerFactory  Constructors Creates a new instance of the factory and sets nested factories.\n public constructor(\u0026hellip;factories: IFactory[])\n  factories: IFactory[] - list of nested factories  See also   Factory   ","tags":null,"title":"DefaultContainerFactory","type":"docs","url":"/hugo-docs/node/container/build/default_container_factory/","weight":0,"wordcount":58},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates default container components (loggers, counters, caches, locks, etc.) by their descriptors.\n","dir":"python/container/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622589062,"lvl0":"DefaultContainerFactory","lvl1":"Creates default container components (loggers, counters, caches, locks, etc.) by their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"17e735815ba9825be3a088d1daafc1da","permalink":"/python/container/build/default_container_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/build/default_container_factory/","section":"python","summary":"Implements: CompositeFactory\nDescription The DefaultContainerFactory class allows you to create factories used to create default container components by their descriptors. The factories included are:\n DefaultInfoFactory DefaultLoggerFactory DefaultCountersFactory DefaultConfigReaderFactory DefaultCacheFactory DefaultCredentialStoreFactory DefaultDiscoveryFactory DefaultTestFactory DefaultTracerFactory  Constructors Creates a new instance of the factory and sets nested factories.\n DefaultContainerFactory(*factories: IFactory)\n  factories: IFactory - list of nested factories  See also   Factory   ","tags":null,"title":"DefaultContainerFactory","type":"docs","url":"/hugo-docs/python/container/build/default_container_factory/","weight":0,"wordcount":57},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory that builds [ICounters](../icounters) components based on their descriptors.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"DefaultCountersFactory","lvl1":"Creates a factory that builds [ICounters](../icounters) components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e152dc2910c36537123364c5a5cb5ba7","permalink":"/golang/components/count/default_counters_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/count/default_counters_factory/","section":"golang","summary":"Description The DefaultCountersFactory class allows you to create a factory that builds ICounters components based on their descriptors.\nConstructors NewDefaultCountersFactory Create a new instance of the factory.\n NewDefaultCountersFactory() *build.Factory\n See also   Factory   NullCounters   LogCounters   CompositeCounters   ","tags":null,"title":"DefaultCountersFactory","type":"docs","url":"/hugo-docs/golang/components/count/default_counters_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory that builds [ICounters](../icounters) components based on their descriptors.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"DefaultCountersFactory","lvl1":"Creates a factory that builds [ICounters](../icounters) components based on their descriptors.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"69a8d6d9c7ca60cfcd567a51d49a8186","permalink":"/net/components/count/default_counters_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/count/default_counters_factory/","section":"net","summary":"Inherits: Factory\nDescription The DefaultCountersFactory class allows you to create a factory that builds ICounters components based on their descriptors.\nConstructors Create a new instance of the factory.\n public DefaultCountersFactory()\n See also   Factory   NullCounters   LogCounters   CompositeCounters   ","tags":null,"title":"DefaultCountersFactory","type":"docs","url":"/hugo-docs/net/components/count/default_counters_factory/","weight":0,"wordcount":36},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory that builds [ICounters](../icounters) components based on their descriptors.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"DefaultCountersFactory","lvl1":"Creates a factory that builds [ICounters](../icounters) components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"82cdfd954f9563ac4a28f64ad39d7291","permalink":"/node/components/count/default_counters_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/count/default_counters_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultCountersFactory class allows you to create a factory that builds ICounters components based on their descriptors.\nConstructors Create a new instance of the factory.\n public constructor()\n See also   Factory   NullCounters   LogCounters   CompositeCounters   ","tags":null,"title":"DefaultCountersFactory","type":"docs","url":"/hugo-docs/node/components/count/default_counters_factory/","weight":0,"wordcount":36},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory that builds [ICounters](../icounters) components based on their descriptors.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620653809,"lvl0":"DefaultCountersFactory","lvl1":"Creates a factory that builds [ICounters](../icounters) components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e5fd0beaafa0bb39764fe2e529b30a22","permalink":"/python/components/count/default_counters_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/count/default_counters_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultCountersFactory class allows you to create a factory that builds ICounters components based on their descriptors.\nConstructors Create a new instance of the factory.\n DefaultCountersFactory()\n See also   Factory   NullCounters   LogCounters   CompositeCounters   ","tags":null,"title":"DefaultCountersFactory","type":"docs","url":"/hugo-docs/python/components/count/default_counters_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ICredentialStore](../icredentialStore) components based on their descriptors.\n","dir":"golang/components/auth/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"DefaultCredentialStoreFactory","lvl1":"Creates [ICredentialStore](../icredentialStore) components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4c8c51052ce80c22eff6552be3ab0182","permalink":"/golang/components/auth/default_credential_store_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/auth/default_credential_store_factory/","section":"golang","summary":"Description The DefaultCredentialStoreFactory class is used to create ICredentialStore components based on their descriptors.\nConstructors NewDefaultCredentialStoreFactory Create a new instance of the factory.\n NewDefaultCredentialStoreFactory() *build.Factory\n See also   IFactory   ICredentialStore   MemoryCredentialStore   ","tags":null,"title":"DefaultCredentialStoreFactory","type":"docs","url":"/hugo-docs/golang/components/auth/default_credential_store_factory/","weight":0,"wordcount":30},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ICredentialStore](../icredentialStore) components based on their descriptors.\n","dir":"net/components/auth/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"DefaultCredentialStoreFactory","lvl1":"Creates [ICredentialStore](../icredentialStore) components based on their descriptors.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"93064fc26ce3e0c9b6b5c4d14538b693","permalink":"/net/components/auth/default_credential_store_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/auth/default_credential_store_factory/","section":"net","summary":"Inherits: Factory\nDescription The DefaultCredentialStoreFactory class is used to create ICredentialStore components based on their descriptors.\nConstructors Create a new instance of the factory.\n public DefaultCredentialStoreFactory()\n See also   IFactory   ICredentialStore   MemoryCredentialStore   ","tags":null,"title":"DefaultCredentialStoreFactory","type":"docs","url":"/hugo-docs/net/components/auth/default_credential_store_factory/","weight":0,"wordcount":31},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ICredentialStore](../icredentialStore) components based on their descriptors.\n","dir":"node/components/auth/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"DefaultCredentialStoreFactory","lvl1":"Creates [ICredentialStore](../icredentialStore) components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f0a57d81f40fcadd20afdb024f346f7c","permalink":"/node/components/auth/default_credential_store_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/auth/default_credential_store_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultCredentialStoreFactory class is used to create ICredentialStore components based on their descriptors.\nConstructors Create a new instance of the factory.\n public constructor()\n See also   IFactory   ICredentialStore   MemoryCredentialStore   ","tags":null,"title":"DefaultCredentialStoreFactory","type":"docs","url":"/hugo-docs/node/components/auth/default_credential_store_factory/","weight":0,"wordcount":31},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ICredentialStore](../icredentialStore) components based on their descriptors.\n","dir":"python/components/auth/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620414427,"lvl0":"DefaultCredentialStoreFactory","lvl1":"Creates [ICredentialStore](../icredentialStore) components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cea6e7533b85583cfe5e315acff2111a","permalink":"/python/components/auth/default_credential_store_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/auth/default_credential_store_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultCredentialStoreFactory class is used to create ICredentialStore components based on their descriptors.\nConstructors Create a new instance of the factory.\n DefaultCredentialStoreFactory()\n See also   IFactory   ICredentialStore   MemoryCredentialStore   ","tags":null,"title":"DefaultCredentialStoreFactory","type":"docs","url":"/hugo-docs/python/components/auth/default_credential_store_factory/","weight":0,"wordcount":30},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates an instance of [Factory](../../build/factory).\n","dir":"golang/components/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"DefaultDiscoveryFactory","lvl1":"Creates an instance of [Factory](../../build/factory).\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9c61c88b15c52b71385207cadf613383","permalink":"/golang/components/connect/default_discovery_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/connect/default_discovery_factory/","section":"golang","summary":"Description The DefaultDiscoveryFactory class allows you to create an instance of Factory to create IDiscovery components based on their descriptors.\nConstructors NewDefaultDiscoveryFactory Create a new instance of factory.\n NewDefaultDiscoveryFactory() *build.Factory\n See also   Factory   IDiscovery   MemoryDiscovery   ","tags":null,"title":"DefaultDiscoveryFactory","type":"docs","url":"/hugo-docs/golang/components/connect/default_discovery_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates an instance of [Factory](../../build/factory).\n","dir":"net/components/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"DefaultDiscoveryFactory","lvl1":"Creates an instance of [Factory](../../build/factory).\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b964249f8e25d644e1b4a0aae145e48e","permalink":"/net/components/connect/default_discovery_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/connect/default_discovery_factory/","section":"net","summary":"Inherits: Factory\nDescription The DefaultDiscoveryFactory class allows you to create an instance of Factory to create IDiscovery components based on their descriptors.\nConstructors Create a new instance of factory.\n public DefaultDiscoveryFactory()\n See also   Factory   IDiscovery   MemoryDiscovery   ","tags":null,"title":"DefaultDiscoveryFactory","type":"docs","url":"/hugo-docs/net/components/connect/default_discovery_factory/","weight":0,"wordcount":36},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates an instance of [Factory](../../build/factory).\n","dir":"node/components/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"DefaultDiscoveryFactory","lvl1":"Creates an instance of [Factory](../../build/factory).\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d2631ff825ad05ed2eefcf92319580b2","permalink":"/node/components/connect/default_discovery_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/connect/default_discovery_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultDiscoveryFactory class allows you to create an instance of Factory to create IDiscovery components based on their descriptors.\nConstructors Create a new instance of factory.\n public constructor()\n See also   Factory   IDiscovery   MemoryDiscovery   ","tags":null,"title":"DefaultDiscoveryFactory","type":"docs","url":"/hugo-docs/node/components/connect/default_discovery_factory/","weight":0,"wordcount":36},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates an instance of [Factory](../../build/factory).\n","dir":"python/components/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620572957,"lvl0":"DefaultDiscoveryFactory","lvl1":"Creates an instance of [Factory](../../build/factory).\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2a34d5e3036d802403c6c6dd59929e00","permalink":"/python/components/connect/default_discovery_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/connect/default_discovery_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultDiscoveryFactory class allows you to create an instance of Factory to create IDiscovery components based on their descriptors.\nConstructors Create a new instance of factory.\n DefaultDiscoveryFactory()\n See also   Factory   IDiscovery   MemoryDiscovery   ","tags":null,"title":"DefaultDiscoveryFactory","type":"docs","url":"/hugo-docs/python/components/connect/default_discovery_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates Elasticsearch components based on their descriptors.\n","dir":"golang/elasticsearch/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"DefaultElasticSearchFactory","lvl1":"Creates Elasticsearch components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"84caebf2a75e84dd7b7558520dc35e7f","permalink":"/golang/elasticsearch/build/default_elasticsearch_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/elasticsearch/build/default_elasticsearch_factory/","section":"golang","summary":"Implementss: Factory\nDescription The DefaultElasticSearchFactory class allows you to create a factory used to create Elasticsearch components based on their descriptors.\nConstructors NewDefaultElasticSearchFactory Creates a new instance of the factory.\n NewDefaultElasticSearchFactory() *DefaultElasticSearchFactory\n See also   ElasticSearchLogger   ","tags":null,"title":"DefaultElasticSearchFactory","type":"docs","url":"/hugo-docs/golang/elasticsearch/build/default_elasticsearch_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates Elasticsearch components based on their descriptors.\n","dir":"node/elasticsearch/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622670875,"lvl0":"DefaultElasticSearchFactory","lvl1":"Creates Elasticsearch components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"69f5d6c34e12b8f52abac538540268ee","permalink":"/node/elasticsearch/build/default_elasticsearch_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/elasticsearch/build/default_elasticsearch_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultElasticSearchFactory class allows you to create a factory used to create Elasticsearch components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public constructor()\n See also   ElasticSearchLogger   ","tags":null,"title":"DefaultElasticSearchFactory","type":"docs","url":"/hugo-docs/node/elasticsearch/build/default_elasticsearch_factory/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates Elasticsearch components based on their descriptors.\n","dir":"python/elasticsearch/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622503015,"lvl0":"DefaultElasticSearchFactory","lvl1":"Creates Elasticsearch components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9053a1e40a2951a2687c9f4e2c18a575","permalink":"/python/elasticsearch/build/default_elasticsearch_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/elasticsearch/build/default_elasticsearch_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultElasticSearchFactory class allows you to create a factory used to create Elasticsearch components based on their descriptors.\nConstructors Creates a new instance of the factory.\n DefaultElasticSearchFactory()\n See also   ElasticSearchLogger   ","tags":null,"title":"DefaultElasticSearchFactory","type":"docs","url":"/hugo-docs/python/elasticsearch/build/default_elasticsearch_factory/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates GRPC components based on their descriptors.\n","dir":"python/grpc/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622412841,"lvl0":"DefaultGrpcFactory","lvl1":"Creates GRPC components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9d2dea1621e7fef8d32ce921c789085d","permalink":"/python/grpc/build/default_grpc_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/grpc/build/default_grpc_factory/","section":"python","summary":"Implements: Factory\nSee also Factory GrpcEndpoint\nDescription The DefaultGrpcFactory class allows you to create a factory used to create GRPC components based on their descriptors.\nConstructors Creates a new instance of the factory.\n DefaultGrpcFactory()\n See also   Factory   GrpcEndpoint   ","tags":null,"title":"DefaultGrpcFactory","type":"docs","url":"/hugo-docs/python/grpc/build/default_grpc_factory/","weight":0,"wordcount":38},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory used to create information components based on their descriptors.\n","dir":"golang/components/info/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"DefaultInfoFactory","lvl1":"Creates a factory used to create information components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"44756a9c1d81ced680003c2ff0c3d577","permalink":"/golang/components/info/default_info_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/info/default_info_factory/","section":"golang","summary":"Description The DefaultInfoFactory class allows you to create a factory used to create information components based on their descriptors.\nConstructors NewDefaultInfoFactory Creates a new instance of the factory.\n NewDefaultInfoFactory() *build.Factory\n See also  IFactory ContextInfo  ","tags":null,"title":"DefaultInfoFactory","type":"docs","url":"/hugo-docs/golang/components/info/default_info_factory/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory used to create information components based on their descriptors.\n","dir":"net/components/info/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"DefaultInfoFactory","lvl1":"Creates a factory used to create information components based on their descriptors.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"12f03f1e1726c83a5cbfe5404c95a422","permalink":"/net/components/info/default_info_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/info/default_info_factory/","section":"net","summary":"Inherits: Factory\nDescription The DefaultInfoFactory class allows you to create a factory used to create information components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public DefaultInfoFactory()\n See also  IFactory ContextInfo  ","tags":null,"title":"DefaultInfoFactory","type":"docs","url":"/hugo-docs/net/components/info/default_info_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory used to create information components based on their descriptors.\n","dir":"node/components/info/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"DefaultInfoFactory","lvl1":"Creates a factory used to create information components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7af07f7514d0905aa51e189894a18788","permalink":"/node/components/info/default_info_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/info/default_info_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultInfoFactory class allows you to create a factory used to create information components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public constructor()\n See also  IFactory ContextInfo  ","tags":null,"title":"DefaultInfoFactory","type":"docs","url":"/hugo-docs/node/components/info/default_info_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory used to create information components based on their descriptors.\n","dir":"python/components/info/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"DefaultInfoFactory","lvl1":"Creates a factory used to create information components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c06e0a84a536a50f20b93843f685ed73","permalink":"/python/components/info/default_info_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/info/default_info_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultInfoFactory class allows you to create a factory used to create information components based on their descriptors.\nConstructors Creates a new instance of the factory.\n DefaultInfoFactory()\n See also  IFactory ContextInfo  ","tags":null,"title":"DefaultInfoFactory","type":"docs","url":"/hugo-docs/python/components/info/default_info_factory/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory used to create [ILock](../ilock) components based on their descriptors.\n","dir":"golang/components/lock/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"DefaultLockFactory","lvl1":"Creates a factory used to create [ILock](../ilock) components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c0d4b77ad7759d18c0a296c375d87947","permalink":"/golang/components/lock/default_lock_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/lock/default_lock_factory/","section":"golang","summary":"Description The DefaultLockFactory class allows you to create a factory used to create ILock components based on their descriptors.\nConstructors Create a new instance of the factory.\n NewDefaultLockFactory() *build.Factory\n See also   IFactory   Factory   MemoryLock   NullLock   ","tags":null,"title":"DefaultLockFactory","type":"docs","url":"/hugo-docs/golang/components/lock/default_lock_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory used to create [ILock](../ilock) components based on their descriptors.\n","dir":"net/components/lock/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"DefaultLockFactory","lvl1":"Creates a factory used to create [ILock](../ilock) components based on their descriptors.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ab10488319ab3cf43189c5130cc5c9b2","permalink":"/net/components/lock/default_lock_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/lock/default_lock_factory/","section":"net","summary":"Inherits: Factory\nDescription The DefaultLockFactory class allows you to create a factory used to create ILock components based on their descriptors.\nConstructors Create a new instance of the factory.\n public DefaultLockFactory()\n See also   IFactory   Factory   MemoryLock   NullLock   ","tags":null,"title":"DefaultLockFactory","type":"docs","url":"/hugo-docs/net/components/lock/default_lock_factory/","weight":0,"wordcount":37},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory used to create [ILock](../ilock) components based on their descriptors.\n","dir":"node/components/lock/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"DefaultLockFactory","lvl1":"Creates a factory used to create [ILock](../ilock) components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7925e11849ef3f6e6e867f54b8d517a5","permalink":"/node/components/lock/default_lock_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/lock/default_lock_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultLockFactory class allows you to create a factory used to create ILock components based on their descriptors.\nConstructors Create a new instance of the factory.\n public constructor()\n See also   IFactory   Factory   MemoryLock   NullLock   ","tags":null,"title":"DefaultLockFactory","type":"docs","url":"/hugo-docs/node/components/lock/default_lock_factory/","weight":0,"wordcount":37},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates a factory used to create [ILock](../ilock) components based on their descriptors.\n","dir":"python/components/lock/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"DefaultLockFactory","lvl1":"Creates a factory used to create [ILock](../ilock) components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6ccafc2337d150fb72ea79c0e4e8b18f","permalink":"/python/components/lock/default_lock_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/lock/default_lock_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultLockFactory class allows you to create a factory used to create ILock components based on their descriptors.\nConstructors Create a new instance of the factory.\n DefaultLockFactory()\n See also   IFactory   Factory   MemoryLock   NullLock   ","tags":null,"title":"DefaultLockFactory","type":"docs","url":"/hugo-docs/python/components/lock/default_lock_factory/","weight":0,"wordcount":36},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ILogger](../ilogger) components based on their descriptors.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"DefaultLoggerFactory","lvl1":"Creates [ILogger](../ilogger) components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c21b57e44837fa32af1bb9ec1c83d7a4","permalink":"/golang/components/log/default_logger_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/log/default_logger_factory/","section":"golang","summary":"Implements: Factory\nDescription The DefaultLoggerFactory class provides a factory used to create ILogger components based on their descriptors.\nConstructors Create a new instance of the factory.\n NewDefaultLoggerFactory() *build.Factory\n See also   Factory   NullLogger   ConsoleLogger,   CompositeLogger   ","tags":null,"title":"DefaultLoggerFactory","type":"docs","url":"/hugo-docs/golang/components/log/default_logger_factory/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ILogger](../ilogger) components based on their descriptors.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"DefaultLoggerFactory","lvl1":"Creates [ILogger](../ilogger) components based on their descriptors.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"766d7fa66eff5479767c01cd9c10bc44","permalink":"/net/components/log/default_logger_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/default_logger_factory/","section":"net","summary":"Inherits: Factory\nDescription The DefaultLoggerFactory class provides a factory used to create ILogger components based on their descriptors.\nConstructors Create a new instance of the factory.\n public DefaultLoggerFactory()\n See also   Factory   NullLogger   ConsoleLogger,   CompositeLogger   ","tags":null,"title":"DefaultLoggerFactory","type":"docs","url":"/hugo-docs/net/components/log/default_logger_factory/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ILogger](../ilogger) components based on their descriptors.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"DefaultLoggerFactory","lvl1":"Creates [ILogger](../ilogger) components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b0d8b1b7e5e94060f5000ae1451eca7d","permalink":"/node/components/log/default_logger_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/log/default_logger_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultLoggerFactory class provides a factory used to create ILogger components based on their descriptors.\nConstructors Create a new instance of the factory.\n public constructor()\n See also   Factory   NullLogger   ConsoleLogger,   CompositeLogger   ","tags":null,"title":"DefaultLoggerFactory","type":"docs","url":"/hugo-docs/node/components/log/default_logger_factory/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ILogger](../ilogger) components based on their descriptors.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"DefaultLoggerFactory","lvl1":"Creates [ILogger](../ilogger) components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"99825967b9ddc6befef04c26982caa88","permalink":"/python/components/log/default_logger_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/log/default_logger_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultLoggerFactory class provides a factory used to create ILogger components based on their descriptors.\nConstructors Create a new instance of the factory.\n DefaultLoggerFactory()\n See also   Factory   NullLogger   ConsoleLogger,   CompositeLogger   ","tags":null,"title":"DefaultLoggerFactory","type":"docs","url":"/hugo-docs/python/components/log/default_logger_factory/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [MemoryMessageQueue](../../queues/memory_message_queue)  components based on their descriptors.\n","dir":"golang/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"DefaultMessagingFactory","lvl1":"Creates [MemoryMessageQueue](../../queues/memory_message_queue)  components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d82975d678992cde51058bf77d7a6a31","permalink":"/golang/messaging/build/default_messaging_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/build/default_messaging_factory/","section":"golang","summary":"Extends: Factory\nDescription The DefaultMessagingFactory class allows you to create MemoryMessageQueue components based on their descriptors.\nImportant points\n The name of created message queue is taken from its descriptor.  Constructors Creates a new instance of the factory.\n public constructor()\n See also   Factory   MemoryMessageQueue   ","tags":null,"title":"DefaultMessagingFactory","type":"docs","url":"/hugo-docs/golang/messaging/build/default_messaging_factory/","weight":0,"wordcount":43},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [MemoryMessageQueue](../../queues/memory_message_queue)  components based on their descriptors.\n","dir":"node/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"DefaultMessagingFactory","lvl1":"Creates [MemoryMessageQueue](../../queues/memory_message_queue)  components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8c12c63f93f651a675f8772afd25d565","permalink":"/node/messaging/build/default_messaging_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/build/default_messaging_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultMessagingFactory class allows you to create MemoryMessageQueue components based on their descriptors.\nImportant points\n The name of created message queue is taken from its descriptor.  Constructors Creates a new instance of the factory.\n public constructor()\n See also   Factory   MemoryMessageQueue   ","tags":null,"title":"DefaultMessagingFactory","type":"docs","url":"/hugo-docs/node/messaging/build/default_messaging_factory/","weight":0,"wordcount":43},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [MemoryMessageQueue](../../queues/memory_message_queue)  components based on their descriptors.\n","dir":"python/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622328060,"lvl0":"DefaultMessagingFactory","lvl1":"Creates [MemoryMessageQueue](../../queues/memory_message_queue)  components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c4f3e8b1f0c4e07b6c9c7d61793a4e11","permalink":"/python/messaging/build/default_messaging_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/build/default_messaging_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultMessagingFactory class allows you to create MemoryMessageQueue components based on their descriptors.\nImportant points\n The name of created message queue is taken from its descriptor.  Constructors Creates a new instance of the factory.\n DefaultMessagingFactory()\n See also   Factory   MemoryMessageQueue   ","tags":null,"title":"DefaultMessagingFactory","type":"docs","url":"/hugo-docs/python/messaging/build/default_messaging_factory/","weight":0,"wordcount":42},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates MongoDb components by their descriptors.\n","dir":"python/mongodb/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622221707,"lvl0":"DefaultMongoDbFactory","lvl1":"Creates MongoDb components by their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ea788972fff3e566bd3ba6bdaf409c51","permalink":"/python/mongodb/build/default_mongodb_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mongodb/build/default_mongodb_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultMongoDbFactory class provides a factory used to create MongoDb components based on their descriptors.\nConstructors Creates a new instance of the factory.\n DefaultMongoDbFactory()\n See also   Factory   MemoryMessageQueue   ","tags":null,"title":"DefaultMongoDbFactory","type":"docs","url":"/hugo-docs/python/mongodb/build/default_mongodb_factory/","weight":0,"wordcount":31},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates MySql components based on their descriptors.\n","dir":"node/mysql/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"DefaultMySqlFactory","lvl1":"Creates MySql components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"41d4f58545c70654a32ff0cd4f753a66","permalink":"/node/mysql/build/default_mysql_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/mysql/build/default_mysql_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultMySqlFactory class allows you to create a factory used to create MySql components based on their descriptors.\nConstructors Create a new instance of the factory.\n public constructor()\n See also   Factory   MySqlConnection   ","tags":null,"title":"DefaultMySqlFactory","type":"docs","url":"/hugo-docs/node/mysql/build/default_mysql_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates MySql components based on their descriptors.\n","dir":"python/mysql/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621447098,"lvl0":"DefaultMySqlFactory","lvl1":"Creates MySql components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4ac8396ba1cbbfb56c1141a07150d0dc","permalink":"/python/mysql/build/default_mysql_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mysql/build/default_mysql_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultMySqlFactory class allows you to create a factory used to create MySql components based on their descriptors.\nConstructors Create a new instance of the factory.\n DefaultMySqlFactory()\n See also   Factory   MySqlConnection   ","tags":null,"title":"DefaultMySqlFactory","type":"docs","url":"/hugo-docs/python/mysql/build/default_mysql_factory/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates Postgres components based on their descriptors.\n","dir":"node/postgres/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622674545,"lvl0":"DefaultPostgresFactory","lvl1":"Creates Postgres components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b3149f58492d65b02a5074f0eef16ad9","permalink":"/node/postgres/build/default_postgres_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/postgres/build/default_postgres_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultPostgresFactory class allows you to create a factory used to create Postgres components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public constructor()\n See also   Factory   PostgresConnection   ","tags":null,"title":"DefaultPostgresFactory","type":"docs","url":"/hugo-docs/node/postgres/build/default_postgres_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates Postgres components based on their descriptors.\n","dir":"python/postgres/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622228457,"lvl0":"DefaultPostgresFactory","lvl1":"Creates Postgres components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ba1e86c966d71b67585b2df610774816","permalink":"/python/postgres/build/default_postgres_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/postgres/build/default_postgres_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultPostgresFactory class allows you to create a factory used to create Postgres components based on their descriptors.\nConstructors Creates a new instance of the factory.\n DefaultPostgresFactory()\n See also   Factory   PostgresConnection   ","tags":null,"title":"DefaultPostgresFactory","type":"docs","url":"/hugo-docs/python/postgres/build/default_postgres_factory/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates Prometheus components based on their descriptors.\n","dir":"node/prometheus/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622665544,"lvl0":"DefaultPrometheusFactory","lvl1":"Creates Prometheus components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8ef945c4067d792f12da8734986fe78e","permalink":"/node/prometheus/build/default_prometheus_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/prometheus/build/default_prometheus_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultPrometheusFactory class allows you to create a factory used to create Prometheus components based on their descriptors.\nConstructors Create a new instance of the factory.\n public constructor()\n See also   Factory   PrometheusCounters   PrometheusMetricsService   ","tags":null,"title":"DefaultPrometheusFactory","type":"docs","url":"/hugo-docs/node/prometheus/build/default_prometheus_factory/","weight":0,"wordcount":36},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates Prometheus components based on their descriptors.\n","dir":"python/prometheus/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621701902,"lvl0":"DefaultPrometheusFactory","lvl1":"Creates Prometheus components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"244969a90520a1f0e9417b3d2b92a2ee","permalink":"/python/prometheus/build/default_prometheus_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/prometheus/build/default_prometheus_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultPrometheusFactory class allows you to create a factory used to create Prometheus components based on their descriptors.\nConstructors Create a new instance of the factory.\n DefaultPrometheusFactory()\n See also   Factory   PrometheusCounters   PrometheusMetricsService   ","tags":null,"title":"DefaultPrometheusFactory","type":"docs","url":"/hugo-docs/python/prometheus/build/default_prometheus_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates RPC components based on their descriptors.\n","dir":"golang/rpc/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"DefaultRpcFactory","lvl1":"Creates RPC components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7afe11a675e72ae099ed62821d38787a","permalink":"/golang/rpc/build/default_rpc_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/build/default_rpc_factory/","section":"golang","summary":"Implements: Factory\nDescription The DefaultRpcFactory class allows you to create a factory used to create RPC components based on their descriptors.\nConstructors NewDefaultRpcFactory Creates a new instance of the factory.\n NewDefaultRpcFactory() *DefaultRpcFactory\n See also   Factory   HttpEndpoint   HeartbeatRestService   StatusRestService   ","tags":null,"title":"DefaultRpcFactory","type":"docs","url":"/hugo-docs/golang/rpc/build/default_rpc_factory/","weight":0,"wordcount":38},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates RPC components based on their descriptors.\n","dir":"node/rpc/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623078433,"lvl0":"DefaultRpcFactory","lvl1":"Creates RPC components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5cdd7bf609a8a956d8102a59968c2c84","permalink":"/node/rpc/build/default_rpc_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/build/default_rpc_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultRpcFactory class allows you to create a factory used to create RPC components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public constructor()\n See also   Factory   HttpEndpoint   HeartbeatRestService   StatusRestService   ","tags":null,"title":"DefaultRpcFactory","type":"docs","url":"/hugo-docs/node/rpc/build/default_rpc_factory/","weight":0,"wordcount":37},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates RPC components based on their descriptors.\n","dir":"python/rpc/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622692003,"lvl0":"DefaultRpcFactory","lvl1":"Creates RPC components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f5b4e706c840b1d2263dfdf462d1d26f","permalink":"/python/rpc/build/default_rpc_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/build/default_rpc_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultRpcFactory class allows you to create a factory used to create RPC components based on their descriptors.\nConstructors Creates a new instance of the factory.\n DefaultRpcFactory()\n See also   Factory   HttpEndpoint   HeartbeatRestService   StatusRestService   ","tags":null,"title":"DefaultRpcFactory","type":"docs","url":"/hugo-docs/python/rpc/build/default_rpc_factory/","weight":0,"wordcount":36},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates SQLServer components based on their descriptors.\n","dir":"node/sqlserver/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"DefaultSqlServerFactory","lvl1":"Creates SQLServer components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d3b8ddcebf811fb7729433a59623f4d0","permalink":"/node/sqlserver/build/default_sqlserver_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/sqlserver/build/default_sqlserver_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultSqlServerFactory class allows you to create a factory used to create SQLServer components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public constructor()\n See also   Factory   SqlServerConnection   ","tags":null,"title":"DefaultSqlServerFactory","type":"docs","url":"/hugo-docs/node/sqlserver/build/default_sqlserver_factory/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates SQLServer components based on their descriptors.\n","dir":"python/sqlserver/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622303548,"lvl0":"DefaultSqlServerFactory","lvl1":"Creates SQLServer components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"657c8141d1d30dbd8ca76d8399fbf304","permalink":"/python/sqlserver/build/default_sqlserver_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/sqlserver/build/default_sqlserver_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultSqlServerFactory class allows you to create a factory used to create SQLServer components based on their descriptors.\nConstructors Creates a new instance of the factory.\n DefaultPostgresFactory()\n See also   Factory   SqlServerConnection   ","tags":null,"title":"DefaultSqlServerFactory","type":"docs","url":"/hugo-docs/python/sqlserver/build/default_sqlserver_factory/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"A factory for shutdowns.\n","dir":"golang/components/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"DefaultTestFactory","lvl1":"A factory for shutdowns.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"379b0969555c96164948eeb9dd9fe014","permalink":"/golang/components/test/default_test_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/test/default_test_factory/","section":"golang","summary":"Extends: Factory\nDescription The DefaultLoggerFactory class provides a factory for shutdowns.\nConstructors Create a new instance of the factory.\n public constructor()\n See also   Factory   Shutdown   ","tags":null,"title":"DefaultTestFactory","type":"docs","url":"/hugo-docs/golang/components/test/default_test_factory/","weight":0,"wordcount":25},{"authors":null,"categories":null,"date":-62135596800,"description":"A factory for shutdowns.\n","dir":"net/components/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"DefaultTestFactory","lvl1":"A factory for shutdowns.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"82bc245a04e0c24ada19a558a23aa426","permalink":"/net/components/test/default_test_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/test/default_test_factory/","section":"net","summary":"Inherits: Factory\nDescription The DefaultLoggerFactory class provides a factory for shutdowns.\nConstructors Create a new instance of the factory.\n public DefaultTestFactory()\n See also   Factory   Shutdown   ","tags":null,"title":"DefaultTestFactory","type":"docs","url":"/hugo-docs/net/components/test/default_test_factory/","weight":0,"wordcount":25},{"authors":null,"categories":null,"date":-62135596800,"description":"A factory for shutdowns.\n","dir":"node/components/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"DefaultTestFactory","lvl1":"A factory for shutdowns.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2dc1416d57ac3619c6a1ec656df4016a","permalink":"/node/components/test/default_test_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/test/default_test_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultLoggerFactory class provides a factory for shutdowns.\nConstructors Create a new instance of the factory.\n public constructor()\n See also   Factory   Shutdown   ","tags":null,"title":"DefaultTestFactory","type":"docs","url":"/hugo-docs/node/components/test/default_test_factory/","weight":0,"wordcount":25},{"authors":null,"categories":null,"date":-62135596800,"description":"A factory for shutdowns.\n","dir":"python/components/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"DefaultTestFactory","lvl1":"A factory for shutdowns.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"02d9482fbbca777dab07e9c6fb0de565","permalink":"/python/components/test/default_test_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/test/default_test_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultLoggerFactory class provides a factory for shutdowns.\nConstructors Create a new instance of the factory.\n DefaultLoggerFactory()\n See also   Factory   Shutdown   ","tags":null,"title":"DefaultTestFactory","type":"docs","url":"/hugo-docs/python/components/test/default_test_factory/","weight":0,"wordcount":24},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ITracer](../itracer) components based on their descriptors.\n","dir":"golang/components/trace/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"DefaultTracerFactory","lvl1":"Creates [ITracer](../itracer) components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"21b9422042155088530dfc258f381d80","permalink":"/golang/components/trace/default_tracer_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/trace/default_tracer_factory/","section":"golang","summary":"Implements: Factory\nDescription The DefaultTracerFactory class allows you to create a factory used to create ITracer components based on their descriptors.\nConstructors NewDefaultTracerFactory Creates a new instance of the factory.\n NewDefaultTracerFactory() *DefaultTracerFactory\n See also   Factory   NullTracer   ConsoleTracer   CompositeTracer   ","tags":null,"title":"DefaultTracerFactory","type":"docs","url":"/hugo-docs/golang/components/trace/default_tracer_factory/","weight":0,"wordcount":38},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ITracer](../itracer) components based on their descriptors.\n","dir":"net/components/trace/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"DefaultTracerFactory","lvl1":"Creates [ITracer](../itracer) components based on their descriptors.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3f763530aca2b78b3de5265276031e16","permalink":"/net/components/trace/default_tracer_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/trace/default_tracer_factory/","section":"net","summary":"Inherits: Factory\nDescription The DefaultTracerFactory class allows you to create a factory used to create ITracer components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public DefaultTracerFactory()\n See also   Factory   NullTracer   ConsoleTracer   CompositeTracer   ","tags":null,"title":"DefaultTracerFactory","type":"docs","url":"/hugo-docs/net/components/trace/default_tracer_factory/","weight":0,"wordcount":37},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ITracer](../itracer) components based on their descriptors.\n","dir":"node/components/trace/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"DefaultTracerFactory","lvl1":"Creates [ITracer](../itracer) components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c9fcb438f61f6eb10db0b08cc9ef29b3","permalink":"/node/components/trace/default_tracer_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/trace/default_tracer_factory/","section":"node","summary":"Extends: Factory\nDescription The DefaultTracerFactory class allows you to create a factory used to create ITracer components based on their descriptors.\nConstructors Creates a new instance of the factory.\n public constructor()\n See also   Factory   NullTracer   ConsoleTracer   CompositeTracer   ","tags":null,"title":"DefaultTracerFactory","type":"docs","url":"/hugo-docs/node/components/trace/default_tracer_factory/","weight":0,"wordcount":37},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [ITracer](../itracer) components based on their descriptors.\n","dir":"python/components/trace/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"DefaultTracerFactory","lvl1":"Creates [ITracer](../itracer) components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"43ca0b5496ff3361a128ab8b00f9bd7a","permalink":"/python/components/trace/default_tracer_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/trace/default_tracer_factory/","section":"python","summary":"Implements: Factory\nDescription The DefaultTracerFactory class allows you to create a factory used to create ITracer components based on their descriptors.\nConstructors Creates a new instance of the factory.\n DefaultLoggerFactory()\n See also   Factory   NullTracer   ConsoleTracer   CompositeTracer   ","tags":null,"title":"DefaultTracerFactory","type":"docs","url":"/hugo-docs/python/components/trace/default_tracer_factory/","weight":0,"wordcount":36},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class for resolving component dependencies.  \n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624238168,"lvl0":"DependencyResolver","lvl1":"Helper class for resolving component dependencies.  \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2d59886da0f4a263bdd3293ccd46ec87","permalink":"/golang/commons/refer/dependency_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/refer/dependency_resolver/","section":"golang","summary":"Implements: IReferences\nDescription The DependencyResolver is a helper class that allows you to resolve component dependencies. It is configured to resolve named dependencies by a specific locator.\nImportant points:\n During deployment the dependency locator can be changed. This mechanism can be used to clarify a specific dependency among several alternatives. Typically components are configured to retrieve the first dependency that matches a logical group, type and version. However, if the container contains more than one instance and the resolution has to be specific about those instances; they can be given a unique name, and the dependency resolvers can be reconfigured to retrieve dependencies according to their name.","tags":null,"title":"DependencyResolver","type":"docs","url":"/hugo-docs/golang/commons/refer/dependency_resolver/","weight":0,"wordcount":504},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class for resolving component dependencies.  \n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"DependencyResolver","lvl1":"Helper class for resolving component dependencies.  \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b35c4f41abab7a108a7a4f0553a0e142","permalink":"/net/commons/refer/dependency_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/commons/refer/dependency_resolver/","section":"net","summary":"Inherits: IReferenceable, IReconfigurable\nDescription The DependencyResolver is a helper class that allows you to resolve component dependencies. It is configured to resolve named dependencies by a specific locator.\nImportant points:\n During deployment the dependency locator can be changed. This mechanism can be used to clarify a specific dependency among several alternatives. Typically components are configured to retrieve the first dependency that matches a logical group, type and version. However, if the container contains more than one instance and the resolution has to be specific about those instances; they can be given a unique name, and the dependency resolvers can be reconfigured to retrieve dependencies according to their name.","tags":null,"title":"DependencyResolver","type":"docs","url":"/hugo-docs/net/commons/refer/dependency_resolver/","weight":0,"wordcount":829},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class for resolving component dependencies.  \n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"DependencyResolver","lvl1":"Helper class for resolving component dependencies.  \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"51ac2df8978bef006e113ab3c1287d9d","permalink":"/node/commons/refer/dependency_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/refer/dependency_resolver/","section":"node","summary":"Implements: IReferenceable, IReconfigurable\nDescription The DependencyResolver is a helper class that allows you to resolve component dependencies. It is configured to resolve named dependencies by a specific locator.\nImportant points:\n During deployment the dependency locator can be changed. This mechanism can be used to clarify a specific dependency among several alternatives. Typically components are configured to retrieve the first dependency that matches a logical group, type and version. However, if the container contains more than one instance and the resolution has to be specific about those instances; they can be given a unique name, and the dependency resolvers can be reconfigured to retrieve dependencies according to their name.","tags":null,"title":"DependencyResolver","type":"docs","url":"/hugo-docs/node/commons/refer/dependency_resolver/","weight":0,"wordcount":588},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class for resolving component dependencies.  \n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"DependencyResolver","lvl1":"Helper class for resolving component dependencies.  \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"247d4384b5670a421e751c3dcfea0aed","permalink":"/python/commons/refer/dependency_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/refer/dependency_resolver/","section":"python","summary":"Implements: IReferenceable, IReconfigurable\nDescription The DependencyResolver is a helper class that allows you to resolve component dependencies. It is configured to resolve named dependencies by a specific locator.\nImportant points:\n During deployment the dependency locator can be changed. This mechanism can be used to clarify a specific dependency among several alternatives. Typically components are configured to retrieve the first dependency that matches a logical group, type and version. However, if the container contains more than one instance and the resolution has to be specific about those instances; they can be given a unique name, and the dependency resolvers can be reconfigured to retrieve dependencies according to their name.","tags":null,"title":"DependencyResolver","type":"docs","url":"/hugo-docs/python/commons/refer/dependency_resolver/","weight":0,"wordcount":542},{"authors":null,"categories":null,"date":-62135596800,"description":"Component locator based on group, type, kind, name and version of the component.\n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624235787,"lvl0":"Descriptor","lvl1":"Component locator based on group, type, kind, name and version of the component.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7be9c8971a047c8472377ff5bcab3e60","permalink":"/golang/commons/refer/descriptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/refer/descriptor/","section":"golang","summary":"Description The Descriptor class provides you with a component locator. This locator is often used in the PipServices toolkit. It locates components using the following fields:\n Group: a package or just named group of components, like \u0026ldquo;pip-services\u0026rdquo;. Type: logical component type that defines it\u0026rsquo;s contract, like \u0026ldquo;persistence\u0026rdquo; . Kind: physical implementation type, like \u0026ldquo;mongodb\u0026rdquo;. Name: unique component name, like \u0026ldquo;default\u0026rdquo;. Version: version of the component contract, like \u0026ldquo;1.0\u0026rdquo;.  Important points","tags":null,"title":"Descriptor","type":"docs","url":"/hugo-docs/golang/commons/refer/descriptor/","weight":0,"wordcount":520},{"authors":null,"categories":null,"date":-62135596800,"description":"Component locator based on group, type, kind, name and version of the component.\n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"Descriptor","lvl1":"Component locator based on group, type, kind, name and version of the component.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"236f02f2ef9188124089a6d83ea7db70","permalink":"/net/commons/refer/descriptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/commons/refer/descriptor/","section":"net","summary":"Description The Descriptor class provides you with a component locator. This locator is often used in the PipServices toolkit. It locates components using the following fields:\n Group: a package or just named group of components, like \u0026ldquo;pip-services\u0026rdquo;. Type: logical component type that defines it\u0026rsquo;s contract, like \u0026ldquo;persistence\u0026rdquo; . Kind: physical implementation type, like \u0026ldquo;mongodb\u0026rdquo;. Name: unique component name, like \u0026ldquo;default\u0026rdquo;. Version: version of the component contract, like \u0026ldquo;1.0\u0026rdquo;.  Important points","tags":null,"title":"Descriptor","type":"docs","url":"/hugo-docs/net/commons/refer/descriptor/","weight":0,"wordcount":577},{"authors":null,"categories":null,"date":-62135596800,"description":"Component locator based on group, type, kind, name and version of the component.\n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"Descriptor","lvl1":"Component locator based on group, type, kind, name and version of the component.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ccff988b4837b1ed7bcf81c804c826e5","permalink":"/node/commons/refer/descriptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/refer/descriptor/","section":"node","summary":"Description The Descriptor class provides you with a component locator. This locator is often used in the PipServices toolkit. It locates components using the following fields:\n Group: a package or just named group of components, like \u0026ldquo;pip-services\u0026rdquo;. Type: logical component type that defines it\u0026rsquo;s contract, like \u0026ldquo;persistence\u0026rdquo; . Kind: physical implementation type, like \u0026ldquo;mongodb\u0026rdquo;. Name: unique component name, like \u0026ldquo;default\u0026rdquo;. Version: version of the component contract, like \u0026ldquo;1.0\u0026rdquo;.  Important points","tags":null,"title":"Descriptor","type":"docs","url":"/hugo-docs/node/commons/refer/descriptor/","weight":0,"wordcount":531},{"authors":null,"categories":null,"date":-62135596800,"description":"Component locator based on group, type, kind, name and version of the component.\n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621001523,"lvl0":"Descriptor","lvl1":"Component locator based on group, type, kind, name and version of the component.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ce5a757d196fc0acb88564277d86a2f9","permalink":"/python/commons/refer/descriptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/refer/descriptor/","section":"python","summary":"Description The Descriptor class provides you with a component locator. This locator is often used in the PipServices toolkit. It locates components using the following fields:\n Group: a package or just named group of components, like \u0026ldquo;pip-services\u0026rdquo;. Type: logical component type that defines it\u0026rsquo;s contract, like \u0026ldquo;persistence\u0026rdquo; . Kind: physical implementation type, like \u0026ldquo;mongodb\u0026rdquo;. Name: unique component name, like \u0026ldquo;default\u0026rdquo;. Version: version of the component contract, like \u0026ldquo;1.0\u0026rdquo;.  Important points","tags":null,"title":"Descriptor","type":"docs","url":"/hugo-docs/python/commons/refer/descriptor/","weight":0,"wordcount":512},{"authors":null,"categories":null,"date":-62135596800,"description":"Diagnostic logger.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"DiagnosticsLogger ","lvl1":"Diagnostic logger.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4abdf1baecef3a64e740f47bbdb179c6","permalink":"/net/components/log/diagnostics_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/diagnostics_logger/","section":"net","summary":"Inherits: Logger\nDescription TODO: add description\nInstance methods Write Writes a log message to the logger destination(s).\n public override void Write(LogLevel level, string correlation_id, Exception error, string message)\n  level: LogLevel - a log level. correlation_id: string - (optional) transaction id to trace execution through call chain. error: Exception - an error object associated with this message. message: string - a human-readable message to log.  Examples var logger = new ConsoleLogger(); logger.","tags":null,"title":"DiagnosticsLogger ","type":"docs","url":"/hugo-docs/net/components/log/diagnostics_logger/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract client that calls a controller directly in the same memory space.\n","dir":"golang/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"DirectClient\u003cT\u003e","lvl1":"Abstract client that calls a controller directly in the same memory space.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9625671a506a6d4c2b0363075fca9938","permalink":"/golang/rpc/clients/direct_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/rpc/clients/direct_client/","section":"golang","summary":"Description The DirectClientclass allows you to create clients that call a controller directly in the same memory space.\nImportant points\n It is used when multiple microservices are deployed in a single container (monolyth) and communication between them can be done by direct calls rather than through the network.  Configuration parameters  dependencies:  controller: override controller descriptor    References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages *:counters:*:*:1.","tags":null,"title":"DirectClient\u003cT\u003e","type":"docs","url":"/hugo-docs/golang/rpc/clients/direct_client/","weight":0,"wordcount":420},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract client that calls a controller directly in the same memory space.\n","dir":"node/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"DirectClient\u003cT\u003e","lvl1":"Abstract client that calls a controller directly in the same memory space.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5da1ee8423935d9125683385cf4a70ff","permalink":"/node/rpc/clients/direct_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/rpc/clients/direct_client/","section":"node","summary":"Implements: IConfigurable, IReferenceable, IOpenable\nDescription The DirectClientclass allows you to create clients that call a controller directly in the same memory space.\nImportant points\n It is used when multiple microservices are deployed in a single container (monolyth) and communication between them can be done by direct calls rather than through the network.  Configuration parameters  dependencies:  controller: override controller descriptor    References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages *:counters:*:*:1.","tags":null,"title":"DirectClient\u003cT\u003e","type":"docs","url":"/hugo-docs/node/rpc/clients/direct_client/","weight":0,"wordcount":384},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract client that calls a controller directly in the same memory space.\n","dir":"python/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"DirectClient","lvl1":"Abstract client that calls a controller directly in the same memory space.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8742c1d2c4ff76d81c9afb0e4dfc8cbf","permalink":"/python/rpc/clients/direct_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/rpc/clients/direct_client/","section":"python","summary":"Implements: IConfigurable, IReferenceable, IOpenable\nDescription The DirectClientclass allows you to create clients that call a controller directly in the same memory space.\nImportant points\n It is used when multiple microservices are deployed in a single container (monolyth) and communication between them can be done by direct calls rather than through the network.  Configuration parameters  dependencies:  controller: override controller descriptor    References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages *:counters:*:*:1.","tags":null,"title":"DirectClient","type":"docs","url":"/hugo-docs/python/rpc/clients/direct_client/","weight":0,"wordcount":341},{"authors":null,"categories":null,"date":-62135596800,"description":"The DoubleConverter class allows you to convert arbitrary values into double using extended conversion rules.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623967697,"lvl0":"DoubleConverter","lvl1":"The DoubleConverter class allows you to convert arbitrary values into double using extended conversion rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2cdf5372af2937f07a0818d58375904d","permalink":"/golang/commons/convert/double_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/convert/double_converter/","section":"golang","summary":"Description The DoubleConverter class allows you to convert arbitrary values into double using the following extended conversion rules:\n  Strings are converted to double values\n  DateTime: total number of milliseconds since unix epoсh\n  Boolean: 1 for true and 0 for false\n  Methods toDouble Converts value into doubles or returns 0 when conversion is not possible.\nSee ToDoubleWithDefault\n ToDouble(value interface{}) float64\n  value: interface{} - value to convert.","tags":null,"title":"DoubleConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/double_converter/","weight":0,"wordcount":181},{"authors":null,"categories":null,"date":-62135596800,"description":"The DoubleConverter class allows you to convert arbitrary values into double using extended conversion rules.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"DoubleConverter","lvl1":"The DoubleConverter class allows you to convert arbitrary values into double using extended conversion rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b3628a953f1f2fe46f469e2a0a47f56c","permalink":"/net/commons/convert/double_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/double_converter/","section":"net","summary":"Description The DoubleConverter class allows you to convert arbitrary values into double using the following extended conversion rules:\n  Strings are converted to double values\n  DateTime: total number of milliseconds since unix epoсh\n  Boolean: 1 for true and 0 for false\n  Static methods ToDouble Converts value into doubles or returns 0 when conversion is not possible.\nSee toDoubleWithDefault\n public static double ToDouble(object value)","tags":null,"title":"DoubleConverter","type":"docs","url":"/hugo-docs/net/commons/convert/double_converter/","weight":0,"wordcount":195},{"authors":null,"categories":null,"date":-62135596800,"description":"The DoubleConverter class allows you to convert arbitrary values into double using extended conversion rules.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"DoubleConverter","lvl1":"The DoubleConverter class allows you to convert arbitrary values into double using extended conversion rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"521608e013a5bd79311d0e1c55317e9b","permalink":"/node/commons/convert/double_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/convert/double_converter/","section":"node","summary":"Description The DoubleConverter class allows you to convert arbitrary values into double using the following extended conversion rules:\n  Strings are converted to double values\n  DateTime: total number of milliseconds since unix epoсh\n  Boolean: 1 for true and 0 for false\n  Static methods toDouble Converts value into doubles or returns 0 when conversion is not possible.\nSee toDoubleWithDefault\n public static toDouble(value: any): number","tags":null,"title":"DoubleConverter","type":"docs","url":"/hugo-docs/node/commons/convert/double_converter/","weight":0,"wordcount":199},{"authors":null,"categories":null,"date":-62135596800,"description":"The DoubleConverter class allows you to convert arbitrary values into double using extended conversion rules.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"DoubleConverter","lvl1":"The DoubleConverter class allows you to convert arbitrary values into double using extended conversion rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2b67d7eaccb91e733303db241377f0e5","permalink":"/python/commons/convert/double_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/double_converter/","section":"python","summary":"Description The DoubleConverter class allows you to convert arbitrary values into double using the following extended conversion rules:\n  Strings are converted to double values\n  DateTime: total number of milliseconds since unix epoсh\n  Boolean: 1 for true and 0 for false\n  Static methods to_double Converts value into doubles or returns 0 when conversion is not possible.\nSee to_double_with_default\n static to_double(value: Any): float","tags":null,"title":"DoubleConverter","type":"docs","url":"/hugo-docs/python/commons/convert/double_converter/","weight":0,"wordcount":193},{"authors":null,"categories":null,"date":-62135596800,"description":"Converts arbitrary values into time.Duration values.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623967803,"lvl0":"DurationConverter","lvl1":"Converts arbitrary values into time.Duration values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e8ceb4ee0363960e00f4f470b8b915c9","permalink":"/golang/commons/convert/duration_converter-copy/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/convert/duration_converter-copy/","section":"golang","summary":"Description The DurationConverter class allows you to convert arbitrary values into time.Duration values.\nMethods ToDuration Converts value into time.Duration or returns current when conversion is not possible.\n ToDuration(value interface{}) time.Duration\n  value: interface{} - value to convert. returns: time.Duration - value or current when conversion is not supported.  ToDurationWithDefault Converts value into time.Duration or returns default when conversion is not possible.\n ToDurationWithDefault(value interface{}, defaultValue time.Duration) time.Duration","tags":null,"title":"DurationConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/duration_converter-copy/","weight":0,"wordcount":141},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that dumps execution logs to ElasticSearch service.\n","dir":"golang/elasticsearch/log/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"ElasticSearchLogger","lvl1":"Logger that dumps execution logs to ElasticSearch service.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9cb0437fb91ead59d436caad7b482681","permalink":"/golang/elasticsearch/log/elasticsearch_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/elasticsearch/log/elasticsearch_logger/","section":"golang","summary":"Implements: CachedLogger\nDescription The ElasticSearchLogger class allows you to create loggers that dump execution logs to an ElasticSearch service.\nImportant points\n Elasticsearch is a popular search index. It is often used to store and index execution logs by itself or as a part of ELK (ElasticSearch - Logstash - Kibana) stack. Authentication is not supported in this version.  Configuration parameters  level: maximum log level to capture source: source (context) name  connection(s):","tags":null,"title":"ElasticSearchLogger","type":"docs","url":"/hugo-docs/golang/elasticsearch/log/elasticsearch_logger/","weight":0,"wordcount":428},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that dumps execution logs to ElasticSearch service.\n","dir":"node/elasticsearch/log/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"ElasticSearchLogger","lvl1":"Logger that dumps execution logs to ElasticSearch service.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a80ff3dc300c29f2e87c76b01b2ae992","permalink":"/node/elasticsearch/log/elasticsearch_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/elasticsearch/log/elasticsearch_logger/","section":"node","summary":"Implements: CachedLogger, IReferenceable, IOpenable\nDescription The ElasticSearchLogger class allows you to create loggers that dump execution logs to an ElasticSearch service.\nImportant points\n Elasticsearch is a popular search index. It is often used to store and index execution logs by itself or as a part of ELK (ElasticSearch - Logstash - Kibana) stack. Authentication is not supported in this version.  Configuration parameters  level: maximum log level to capture source: source (context) name  connection(s):","tags":null,"title":"ElasticSearchLogger","type":"docs","url":"/hugo-docs/node/elasticsearch/log/elasticsearch_logger/","weight":0,"wordcount":401},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that dumps execution logs to ElasticSearch service.\n","dir":"python/elasticsearch/log/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"ElasticSearchLogger","lvl1":"Logger that dumps execution logs to ElasticSearch service.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ea407f385c566dcb276720781c0263a7","permalink":"/python/elasticsearch/log/elasticsearch_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/elasticsearch/log/elasticsearch_logger/","section":"python","summary":"Implements: CachedLogger, IReferenceable, IOpenable\nDescription The ElasticSearchLogger class allows you to create loggers that dump execution logs to an ElasticSearch service.\nImportant points\n Elasticsearch is a popular search index. It is often used to store and index execution logs by itself or as a part of ELK (ElasticSearch - Logstash - Kibana) stack. Authentication is not supported in this version.  Configuration parameters  level: maximum log level to capture source: source (context) name  connection(s):","tags":null,"title":"ElasticSearchLogger","type":"docs","url":"/hugo-docs/python/elasticsearch/log/elasticsearch_logger/","weight":0,"wordcount":396},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Email Delivery Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d399141a9f33943cd4fc1173b319c56b","permalink":"/microservices/infrastructure/email_delivery/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/email_delivery/","section":"microservices","summary":"Email delivery microservice, it sends emails to specified recipients.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .NET, Golang, Dart  ","tags":null,"title":"Email Delivery Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/email_delivery/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Email Settings Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7738a3c95f412c1163c2f48afb26656d","permalink":"/microservices/users/email_settings/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/email_settings/","section":"microservices","summary":"Keeps settings of email recipients.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Golang, Dart  This microservice has optional dependencies on the following microservices:\n Party activities - to log user activities Message Templates - to get message templates Email Delivery - to send email messages  ","tags":null,"title":"Email Settings Microservice","type":"docs","url":"/hugo-docs/microservices/users/email_settings/","weight":0,"wordcount":65},{"authors":null,"categories":null,"date":-62135596800,"description":"Converts objects to Enums.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"EnumConverter","lvl1":"Converts objects to Enums.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d5f501089337ba4e81cc5def9cadece1","permalink":"/net/commons/convert/enum_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/enum_converter/","section":"net","summary":"Description TODO add description\nStatic methods ToEnum TODO add description\n public static T ToEnum\u0026lt;T\u0026gt;(object value)\n  value: object - TODO add description returns: T - TODO add description  ToEnumWithDefault TODO add description\n public static T ToEnumWithDefault\u0026lt;T\u0026gt;(object value, T defaultValue)\n  value: any - TODO add description defaultValue: T - TODO add description returns: T - TODO add description  ToNullableEnum TODO add description\n public static T ToNullableEnum\u0026lt;T\u0026gt;(object value)","tags":null,"title":"EnumConverter","type":"docs","url":"/hugo-docs/net/commons/convert/enum_converter/","weight":0,"wordcount":77},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines the 12 standard error categories supported by the PipServices toolkit.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624227773,"lvl0":"ErrorCategory","lvl1":"Defines the 12 standard error categories supported by the PipServices toolkit.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b5487646755571deb0799ac5331fb213","permalink":"/golang/commons/errors/error_category/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/errors/error_category/","section":"golang","summary":"Description The ErrorCategory defines the 12 standard error categories supported by the PipServices toolkit.\nConstants Unknown Unknown or unexpected errors.\n Unknown: string = \u0026ldquo;Unknown\u0026rdquo;\n Internal Internal errors caused by programming mistakes.\n Internal: string = \u0026ldquo;Internal\u0026rdquo;\n Misconfiguration Errors related to mistakes in user-defined configurations.\n Misconfiguration: string = \u0026ldquo;Misconfiguration\u0026rdquo;\n InvalidState Errors caused by an incorrect object state.. For example: business calls when the component is not ready.","tags":null,"title":"ErrorCategory","type":"docs","url":"/hugo-docs/golang/commons/errors/error_category/","weight":0,"wordcount":216},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines the 12 standard error categories supported by the PipServices toolkit.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ErrorCategory","lvl1":"Defines the 12 standard error categories supported by the PipServices toolkit.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"61fabbfe1d8b66453a9c9a62423f0ed1","permalink":"/net/commons/errors/error_category/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/errors/error_category/","section":"net","summary":"Description The ErrorCategory class defines the 12 standard error categories supported by the PipServices toolkit.\nFields Unknown Unknown or unexpected errors.\n public const Unknown: string = \u0026ldquo;Unknown\u0026rdquo;\n Internal Internal errors caused by programming mistakes.\n public const Internal: string = \u0026ldquo;Internal\u0026rdquo;\n Misconfiguration Errors related to mistakes in user-defined configurations.\n public const Misconfiguration: string = \u0026ldquo;Misconfiguration\u0026rdquo;\n InvalidState Errors caused by incorrect object state.. For example: business calls when the component is not ready.","tags":null,"title":"ErrorCategory","type":"docs","url":"/hugo-docs/net/commons/errors/error_category/","weight":0,"wordcount":238},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines the 12 standard error categories supported by the PipServices toolkit.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"ErrorCategory","lvl1":"Defines the 12 standard error categories supported by the PipServices toolkit.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4d0061bb7d2fdb3c03987cabbedd7a8f","permalink":"/node/commons/errors/error_category/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/errors/error_category/","section":"node","summary":"Description The ErrorCategory class defines the 12 standard error categories supported by the PipServices toolkit.\nFields Unknown Unknown or unexpected errors.\n public static Unknown: string = \u0026ldquo;Unknown\u0026rdquo;\n Internal Internal errors caused by programming mistakes.\n public static Internal: string = \u0026ldquo;Internal\u0026rdquo;\n Misconfiguration Errors related to mistakes in user-defined configurations.\n public static Misconfiguration: string = \u0026ldquo;Misconfiguration\u0026rdquo;\n InvalidState Errors caused by incorrect object state.. For example: business calls when the component is not ready.","tags":null,"title":"ErrorCategory","type":"docs","url":"/hugo-docs/node/commons/errors/error_category/","weight":0,"wordcount":239},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines the 12 standard error categories supported by the PipServices toolkit.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"ErrorCategory","lvl1":"Defines the 12 standard error categories supported by the PipServices toolkit.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"05d265475c81f9a6317c1cd4fb627b3e","permalink":"/python/commons/errors/error_category/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/errors/error_category/","section":"python","summary":"Description The ErrorCategory class defines the 12 standard error categories supported by the PipServices toolkit.\nFields Unknown Unknown or unexpected errors.\n static Unknown: str = \u0026ldquo;Unknown\u0026rdquo;\n Internal Internal errors caused by programming mistakes.\n static Internal: str = \u0026ldquo;Internal\u0026rdquo;\n Misconfiguration Errors related to mistakes in user-defined configurations.\n static Misconfiguration: str = \u0026ldquo;Misconfiguration\u0026rdquo;\n InvalidState Errors caused by incorrect object state. For example: business calls when the component is not ready.","tags":null,"title":"ErrorCategory","type":"docs","url":"/hugo-docs/python/commons/errors/error_category/","weight":0,"wordcount":227},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to pass information about errors between microservices implemented in different languages. On the receiving side [ErrorDescription]() is used to recreate the exception object close to its original type without missing additional details.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624227903,"lvl0":"ErrorDescription","lvl1":"Class used to pass information about errors between microservices implemented in different languages. On the receiving side [ErrorDescription]() is used to recreate the exception object close to its original type without missing additional details.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5dd0dcb31ef6db1b195e322fce237a96","permalink":"/golang/commons/errors/error_description/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/error_description/","section":"golang","summary":"Description The ErrorDescription class is used to pass information about errors between microservices implemented in different languages. On the receiving side ErrorDescription is used to recreate the exception object close to its original type without missing additional details. This class is serializeable.\nFields Type Data type of the original error\n Type: string\n Category Standard error category\n Category: string\n Status HTTP status code associated with this error type","tags":null,"title":"ErrorDescription","type":"docs","url":"/hugo-docs/golang/commons/errors/error_description/","weight":0,"wordcount":140},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to pass information about errors between microservices implemented in different languages. On the receiving side [ErrorDescription]() is used to recreate the exception object close to its original type without missing additional details.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ErrorDescription","lvl1":"Class used to pass information about errors between microservices implemented in different languages. On the receiving side [ErrorDescription]() is used to recreate the exception object close to its original type without missing additional details.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ce56e1ada82e1d50f1222ddfa7dacc64","permalink":"/net/commons/errors/error_description/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/error_description/","section":"net","summary":"Description The ErrorDescription class is used to pass information about errors between microservices implemented in different languages. On the receiving side ErrorDescription is used to recreate the exception object close to its original type without missing additional details. This class is serializeable.\nProperties Type Data type of the original error\n public string Type [ get, set ]\n Category Standard error category\n public string Category [ get, set ]","tags":null,"title":"ErrorDescription","type":"docs","url":"/hugo-docs/net/commons/errors/error_description/","weight":0,"wordcount":185},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to pass information about errors between microservices implemented in different languages. On the receiving side [ErrorDescription]() is used to recreate the exception object close to its original type without missing additional details.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"ErrorDescription","lvl1":"Class used to pass information about errors between microservices implemented in different languages. On the receiving side [ErrorDescription]() is used to recreate the exception object close to its original type without missing additional details.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d631929ce99373dd62e180ae5bc0c441","permalink":"/node/commons/errors/error_description/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/error_description/","section":"node","summary":"Description The ErrorDescription class is used to pass information about errors between microservices implemented in different languages. On the receiving side ErrorDescription is used to recreate the exception object close to its original type without missing additional details. This class is serializeable.\nFields type Data type of the original error\n public type: string\n category Standard error category\n public category: string\n status HTTP status code associated with this error type","tags":null,"title":"ErrorDescription","type":"docs","url":"/hugo-docs/node/commons/errors/error_description/","weight":0,"wordcount":149},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to pass information about errors between microservices implemented in different languages. On the receiving side [ErrorDescription]() is used to recreate the exception object close to its original type without missing additional details.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"ErrorDescription","lvl1":"Class used to pass information about errors between microservices implemented in different languages. On the receiving side [ErrorDescription]() is used to recreate the exception object close to its original type without missing additional details.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3dd17e9a6541f82e9b97098834d50f55","permalink":"/python/commons/errors/error_description/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/error_description/","section":"python","summary":"Description The ErrorDescription class is used to pass information about errors between microservices implemented in different languages. On the receiving side ErrorDescription is used to recreate the exception object close to its original type without missing additional details. This class is serializeable.\nFields type Data type of the original error\n type: str\n category Standard error category\n category: str\n status HTTP status code associated with this error type","tags":null,"title":"ErrorDescription","type":"docs","url":"/hugo-docs/python/commons/errors/error_description/","weight":0,"wordcount":140},{"authors":null,"categories":null,"date":-62135596800,"description":"Factory used to create a serializeable [ErrorDescription](../error_description) from [ApplicationError](../application_error) or from arbitrary errors.  \n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624228029,"lvl0":"ErrorDescriptionFactory","lvl1":"Factory used to create a serializeable [ErrorDescription](../error_description) from [ApplicationError](../application_error) or from arbitrary errors.  \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e1cf80b7af8cfdf5fe1f6746ce30666b","permalink":"/golang/commons/errors/error_description_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/error_description_factory/","section":"golang","summary":"Description The ErrorDescriptionFactory class provides a factory to create a serializeable ErrorDescription from ApplicationError or from arbitrary errors.\nImportant points\n Error descriptions are used to pass errors through the wire between microservices implemented in different languages. They allow to restore exceptions on the receiving side close to the original type and preserve additional information.  Methods Create Creates a serializable ErrorDescription from error object.\n (c *TErrorDescriptionFactory) Create(err interface{}) *ErrorDescription","tags":null,"title":"ErrorDescriptionFactory","type":"docs","url":"/hugo-docs/golang/commons/errors/error_description_factory/","weight":0,"wordcount":87},{"authors":null,"categories":null,"date":-62135596800,"description":"Factory used to create a serializeable [ErrorDescription](../error_description) from [ApplicationException](../application_exception) or from arbitrary errors.  \n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ErrorDescriptionFactory","lvl1":"Factory used to create a serializeable [ErrorDescription](../error_description) from [ApplicationException](../application_exception) or from arbitrary errors.  \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6f5d23a84ed6544209019b8b4daa651b","permalink":"/net/commons/errors/error_description_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/error_description_factory/","section":"net","summary":"Description The ErrorDescriptionFactory class provides a factory to create a serializeable ErrorDescription from ApplicationException or from arbitrary errors.\nImportant points\n Error descriptions are used to pass errors through the wire between microservices implemented in different languages. They allow to restore exceptions on the receiving side close to the original type and preserve additional information.  Static methods Create Creates a serializable ErrorDescription from error object.\n public static ErrorDescription Create(ApplicationException error)","tags":null,"title":"ErrorDescriptionFactory","type":"docs","url":"/hugo-docs/net/commons/errors/error_description_factory/","weight":0,"wordcount":142},{"authors":null,"categories":null,"date":-62135596800,"description":"Factory used to create a serializeable [ErrorDescription](../error_description) from [ApplicationException](../application_exception) or from arbitrary errors.  \n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"ErrorDescriptionFactory","lvl1":"Factory used to create a serializeable [ErrorDescription](../error_description) from [ApplicationException](../application_exception) or from arbitrary errors.  \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2c53c8947320dec807d202f0c6dc2a45","permalink":"/node/commons/errors/error_description_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/error_description_factory/","section":"node","summary":"Description The ErrorDescriptionFactory class provides a factory to create a serializeable ErrorDescription from ApplicationException or from arbitrary errors.\nImportant points\n Error descriptions are used to pass errors through the wire between microservices implemented in different languages. They allow to restore exceptions on the receiving side close to the original type and preserve additional information.  Static methods create Creates a serializable ErrorDescription from error object.\n public static create(error: any): ErrorDescription","tags":null,"title":"ErrorDescriptionFactory","type":"docs","url":"/hugo-docs/node/commons/errors/error_description_factory/","weight":0,"wordcount":90},{"authors":null,"categories":null,"date":-62135596800,"description":"Factory used to create a serializeable [ErrorDescription](../error_description) from [ApplicationException](../application_exception) or from arbitrary errors.  \n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"ErrorDescriptionFactory","lvl1":"Factory used to create a serializeable [ErrorDescription](../error_description) from [ApplicationException](../application_exception) or from arbitrary errors.  \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e15ea9e9477d026209cf20048fefd9a8","permalink":"/python/commons/errors/error_description_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/error_description_factory/","section":"python","summary":"Description The ErrorDescriptionFactory class provides a factory to create a serializeable ErrorDescription from ApplicationException or from arbitrary errors.\nImportant points\n Error descriptions are used to pass errors through the wire between microservices implemented in different languages. They allow to restore exceptions on the receiving side close to the original type and preserve additional information.  Static methods create Creates a serializable ErrorDescription from error object.\n static create(error: Any): ErrorDescription","tags":null,"title":"ErrorDescriptionFactory","type":"docs","url":"/hugo-docs/python/commons/errors/error_description_factory/","weight":0,"wordcount":89},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Errors","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"68fbf67eef925862ea10ec9865efbd82","permalink":"/dart/commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/errors/","section":"dart","summary":"","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/dart/commons/errors/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nPortable and localizable Errors classes. Each Error has a unique string code and details array (which can be used for creating  localized strings), in addition to a description and stack trace . \n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1624229285,"lvl0":"Errors","lvl1":"\nPortable and localizable Errors classes. Each Error has a unique string code and details array (which can be used for creating  localized strings), in addition to a description and stack trace . \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"70ab284d888e901ecd118903a0f941b5","permalink":"/golang/commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/errors/","section":"golang","summary":"Important points\n  There are three ways to use these classes:\n Using an existing exception class. Creating a child class that extends ApplicationError. Wrapping an exception in an existing application exception.    Although the exception classes themselves are not serializable, they can be converted to ErrorDescriptions, which are serializable in one language, transferred to the receiving side, and deserialized in another language. After deserialization, the initial exception class can be restored.","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/golang/commons/errors/","weight":0,"wordcount":422},{"authors":null,"categories":null,"date":-62135596800,"description":"\nPortable and localizable Exceptions classes. Each Exception has a unique string code and details array (which can be used for creating  localized strings), in addition to a description and stack trace . \n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1621530648,"lvl0":"Errors","lvl1":"\nPortable and localizable Exceptions classes. Each Exception has a unique string code and details array (which can be used for creating  localized strings), in addition to a description and stack trace . \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"20ad9a8800dc951eab5deb482fdbb80b","permalink":"/net/commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/errors/","section":"net","summary":"Important points\n  There are three ways to use these classes:\n Using an existing exception class. Creating a child class that extends ApplicationException. Wrapping an exception in an existing application exception.    Although the exception classes themselves are not serializable, they can be converted to ErrorDescriptions, which are serializable in one language, transferred to the receiving side, and deserialized in another language. After deserialization, the initial exception class can be restored.","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/net/commons/errors/","weight":0,"wordcount":417},{"authors":null,"categories":null,"date":-62135596800,"description":"\nPortable and localizable Exceptions classes. Each Exception has a unique string code and details array (which can be used for creating  localized strings), in addition to a description and stack trace . \n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Errors","lvl1":"\nPortable and localizable Exceptions classes. Each Exception has a unique string code and details array (which can be used for creating  localized strings), in addition to a description and stack trace . \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"49b811600467ea8f5329521126d41fc1","permalink":"/node/commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/errors/","section":"node","summary":"Important points\n  There are three ways to use these classes:\n Using an existing exception class. Creating a child class that extends ApplicationException. Wrapping an exception in an existing application exception.    Although the exception classes themselves are not serializable, they can be converted to ErrorDescriptions, which are serializable in one language, transferred to the receiving side, and deserialized in another language. After deserialization, the initial exception class can be restored.","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/node/commons/errors/","weight":0,"wordcount":417},{"authors":null,"categories":null,"date":-62135596800,"description":"\nPortable and localizable Exceptions classes. Each Exception has a unique string code and details array (which can be used for creating  localized strings), in addition to a description and stack trace . \n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Errors","lvl1":"\nPortable and localizable Exceptions classes. Each Exception has a unique string code and details array (which can be used for creating  localized strings), in addition to a description and stack trace . \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a9187e8ca26093a2fe43efbd77b1abd5","permalink":"/python/commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/errors/","section":"python","summary":"Important points\n  There are three ways to use these classes:\n Using an existing exception class. Creating a child class that extends ApplicationException. Wrapping an exception in an existing application exception.    Although the exception classes themselves are not serializable, they can be converted to ErrorDescriptions, which are serializable in one language, transferred to the receiving side, and deserialized in another language. After deserialization, the initial exception class can be restored.","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/python/commons/errors/","weight":0,"wordcount":417},{"authors":null,"categories":null,"date":-62135596800,"description":"Concrete implementation of the [IEvent](../ievent) interface.\n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623901224,"lvl0":"Event","lvl1":"Concrete implementation of the [IEvent](../ievent) interface.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"45428c9ea803f4194b7f9712ead60c3a","permalink":"/golang/commons/commands/event/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/event/","section":"golang","summary":"Description The Event class allows you to create events.\nImportant points\n It allows you to send asynchronous notifications to multiple subscribed listeners.  Constructors NewEvent Creates a new event and assigns its name.\nThrows an Error if the name is nil.\n NewEvent(name string) *Event\n  name: string - name of the event that is to be created.  Methods AddListener Adds a listener to receive notifications when this event is fired.","tags":null,"title":"Event","type":"docs","url":"/hugo-docs/golang/commons/commands/event/","weight":0,"wordcount":204},{"authors":null,"categories":null,"date":-62135596800,"description":"Concrete implementation of the [IEvent](../ievent) interface.\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"Event","lvl1":"Concrete implementation of the [IEvent](../ievent) interface.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"266b4c7df7fa0b501a207dde9f06db5e","permalink":"/net/commons/commands/event/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/commands/event/","section":"net","summary":"Inherits: IEvent\nDescription The Event class allows you to create events.\nImportant points\n It allows you to send asynchronous notifications to multiple subscribed listeners.  Constructors Creates a new event and assigns its name.\nThrows an Error if the name is null.\n public Event(string name)\n  name: string - the name of the event that is to be created.  Properties Name Gets the name of the event.","tags":null,"title":"Event","type":"docs","url":"/hugo-docs/net/commons/commands/event/","weight":0,"wordcount":202},{"authors":null,"categories":null,"date":-62135596800,"description":"Concrete implementation of the [IEvent](../ievent) interface.\n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"Event","lvl1":"Concrete implementation of the [IEvent](../ievent) interface.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7cf2f6ecad343556fb1c7141debdbc58","permalink":"/node/commons/commands/event/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/commands/event/","section":"node","summary":"Implements: IEvent\nDescription The Event class allows you to create events.\nImportant points\n It allows you to send asynchronous notifications to multiple subscribed listeners.  Constructors Creates a new event and assigns its name.\nThrows an Error if the name is null.\n public constructor(name: string)\n  name: string - the name of the event that is to be created.  Instance methods addListener Adds a listener to receive notifications when this event is fired.","tags":null,"title":"Event","type":"docs","url":"/hugo-docs/node/commons/commands/event/","weight":0,"wordcount":210},{"authors":null,"categories":null,"date":-62135596800,"description":"Concrete implementation of the [IEvent](../ievent) interface.\n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"Event","lvl1":"Concrete implementation of the [IEvent](../ievent) interface.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bbf7b626faecbdfb36b4bc74f4ea209a","permalink":"/python/commons/commands/event/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/commands/event/","section":"python","summary":"Implements: IEvent\nDescription The Event class allows you to create events.\nImportant points\n It allows you to send asynchronous notifications to multiple subscribed listeners.  Constructors Creates a new event and assigns its name.\nThrows an Error if the name is None.\n Event(name: str)\n  name: str - the name of the event that is to be created.  Instance methods add_listener Adds a listener to receive notifications when this event is fired.","tags":null,"title":"Event","type":"docs","url":"/hugo-docs/python/commons/commands/event/","weight":0,"wordcount":197},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/iot/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Event generation Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2af106cb536dc6801bfef1b97ff2c450","permalink":"/microservices/iot/event_generation/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/iot/event_generation/","section":"microservices","summary":"Processes and generates events for tracking objects based on their state\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Event generation Microservice","type":"docs","url":"/hugo-docs/microservices/iot/event_generation/","weight":0,"wordcount":38},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"EventLog Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"501b37d7c46ab7f648fec76136dc650f","permalink":"/microservices/infrastructure/eventlog/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/eventlog/","section":"microservices","summary":"Logs important system events like starts and stops of servers, upgrades to a new version, fatal system errors or key business transactions.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .NET, Dart  ","tags":null,"title":"EventLog Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/eventlog/","weight":0,"wordcount":52},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO: add description\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"EventLogger ","lvl1":"TODO: add description\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a52efb04233f566796441f670549fc09","permalink":"/net/components/log/event_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/event_logger/","section":"net","summary":"Inherits: Logger\nDescription TODO: add description\nInstance methods Write Writes a log message to the logger destination(s).\n public override void Write(LogLevel level, string correlation_id, Exception error, string message)\n  level: LogLevel - a log level. correlation_id: string - (optional) transaction id to trace execution through call chain. error: Exception - an error object associated with this message. message: string - a human-readable message to log.  Examples var logger = new ConsoleLogger(); logger.","tags":null,"title":"EventLogger ","type":"docs","url":"/hugo-docs/net/components/log/event_logger/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule to check that one or more values are excluded from the list of constants.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624306405,"lvl0":"ExcludedRule","lvl1":"Validation rule to check that one or more values are excluded from the list of constants.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"239bb9e858bdaa08fc3c44c1e7a92a9b","permalink":"/golang/commons/validate/excluded_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/excluded_rule/","section":"golang","summary":"Description The ExcludedRule allows you to verify that none of the values specified in the rule is present in a list of constants.\nConstructors NewExcludedRule Creates a new validation rule and sets its values\n NewExcludedRule(values \u0026hellip;interface{}) *ExcludedRule\n  values: \u0026hellip;interface{} - list of values that must be excluded from a list of constants  Methods Validate Validates the given value. None of the values set in this ExcludedRule object must exist in the value that is given for validation to pass.","tags":null,"title":"ExcludedRule","type":"docs","url":"/hugo-docs/golang/commons/validate/excluded_rule/","weight":0,"wordcount":153},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule to check that one or more values are excluded from the list of constants.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"ExcludedRule","lvl1":"Validation rule to check that one or more values are excluded from the list of constants.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"27291dea8c1fd7ae1ff2997eab537ee2","permalink":"/net/commons/validate/excluded_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/excluded_rule/","section":"net","summary":"Inherits: IValidationRule\nDescription The ExcludedRule allows you to verify that none of the values specified in the rule is present in a list of constants.\nConstructors Creates a new validation rule and sets its values\n public ExcludedRule(params object[] values)\n  values: object[] - a list of constants that value must be excluded from  Instance methods Validate Validates the given value. None of the values set in this ExcludedRule object must exist in the value that is given for validation to pass.","tags":null,"title":"ExcludedRule","type":"docs","url":"/hugo-docs/net/commons/validate/excluded_rule/","weight":0,"wordcount":160},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule to check that one or more values are excluded from the list of constants.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"ExcludedRule","lvl1":"Validation rule to check that one or more values are excluded from the list of constants.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"98468ff8ced243c4a4e94fc35189c520","permalink":"/node/commons/validate/excluded_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/excluded_rule/","section":"node","summary":"Implements: IValidationRule\nDescription The ExcludedRule allows you to verify that none of the values specified in the rule is present in a list of constants.\nConstructors Creates a new validation rule and sets its values\n public constructor(\u0026hellip;values: any[])\n  values: any[] - a list of constants that value must be excluded from  Instance methods validate Validates the given value. null of the values set in this ExcludedRule object must exist in the value that is given for validation to pass.","tags":null,"title":"ExcludedRule","type":"docs","url":"/hugo-docs/node/commons/validate/excluded_rule/","weight":0,"wordcount":160},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule to check that one or more values are excluded from the list of constants.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"ExcludedRule","lvl1":"Validation rule to check that one or more values are excluded from the list of constants.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"57b78993a1fe221f3c9d8edec7f8ef76","permalink":"/python/commons/validate/excluded_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/excluded_rule/","section":"python","summary":"Implements: IValidationRule\nDescription The ExcludedRule allows you to verify that none of the values specified in the rule is present in a list of constants.\nConstructors Creates a new validation rule and sets its values\n ExcludedRule(*values: Any)\n  values: Any - a list of constants that value must be excluded from  Instance methods validate Validates the given value. None of the values set in this ExcludedRule object must exist in the value that is given for validation to pass.","tags":null,"title":"ExcludedRule","type":"docs","url":"/hugo-docs/python/commons/validate/excluded_rule/","weight":0,"wordcount":153},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO add description\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"ExecutableDelegate","lvl1":"TODO add description\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5821d4312c3c66aa4b819c5865e9f5a7","permalink":"/net/commons/commands/executable_delegate/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/commands/executable_delegate/","section":"net","summary":"Delegate: Task\u0026lt;object\u0026gt;\nDescription TODO add description\nConstructors  ExecutableDelegate(string correlationId, Parameters args)\n  correlationId: string - TODO add description args: Parameters - TODO add description  ","tags":null,"title":"ExecutableDelegate","type":"docs","url":"/hugo-docs/net/commons/commands/executable_delegate/","weight":0,"wordcount":23},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to execute one or more components.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624244085,"lvl0":"Executor","lvl1":"Helper class that allows you to execute one or more components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f0cfce34b5e1eb7782f24fa16292a58e","permalink":"/golang/commons/run/executor/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/executor/","section":"golang","summary":"Description The Executor class allows you to execute one or more components.\nMethods Execute Executes multiple components.\nTo be executed components must implement the IExecutable interface. If they don\u0026rsquo;t, the call to this method has no effect.\nSee IExecutable, Parameters\n (c *TExecutor) Execute(correlationId string, components []interface{}, args *Parameters) ([]interface{}, error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. components: []interface{} - list of components that are to be executed.","tags":null,"title":"Executor","type":"docs","url":"/hugo-docs/golang/commons/run/executor/","weight":0,"wordcount":159},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to execute one or more components.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"Executor","lvl1":"Helper class that allows you to execute one or more components.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b0e1f83fe207dd75c38e31419b59903c","permalink":"/net/commons/run/executor/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/executor/","section":"net","summary":"Description The Executor class allows you to execute one or more components.\nStatic methods ExecuteAsync Executes multiple components.\nTo be executed components must implement IExecutable interface. If they don\u0026rsquo;t the call to this method has no effect.\nSee IExecutable, Parameters\n public static Task\u0026lt;List\u0026lt;object\u0026gt;\u0026gt; ExecuteAsync(string correlationId, IEnumerable components, Parameters args)\n  correlationId: string - (optional) transaction id to trace execution through call chain. components: IEnumerable - a list of components that are to be executed.","tags":null,"title":"Executor","type":"docs","url":"/hugo-docs/net/commons/run/executor/","weight":0,"wordcount":152},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to execute one or more components.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621526520,"lvl0":"Executor","lvl1":"Helper class that allows you to execute one or more components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7036fd960ce0e9e0f88b844ca056e15b","permalink":"/node/commons/run/executor/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/executor/","section":"node","summary":"Description The Executor class allows you to execute one or more components.\nStatic methods execute Executes multiple components.\nTo be executed components must implement IExecutable interface. If they don\u0026rsquo;t the call to this method has no effect.\nSee IExecutable, Parameters\n public static execute(correlationId: string, components: any[], args: Parameters): Promise\u0026lt;any[]\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain. components: any[] - a list of components that are to be executed.","tags":null,"title":"Executor","type":"docs","url":"/hugo-docs/node/commons/run/executor/","weight":0,"wordcount":152},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to execute one or more components.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621010954,"lvl0":"Executor","lvl1":"Helper class that allows you to execute one or more components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eb073c59f1151f3709dc1cf564c9eb25","permalink":"/python/commons/run/executor/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/executor/","section":"python","summary":"Description The Executor class allows you to execute one or more components.\nStatic methods execute Executes multiple components.\nTo be executed components must implement IExecutable interface. If they don\u0026rsquo;t, the call to this method has no effect.\nSee IExecutable, Parameters\n static execute(correlation_id: Optional[str], components: List[Any], args: Parameters)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain. components: List[Any] - a list of components that are to be executed.","tags":null,"title":"Executor","type":"docs","url":"/hugo-docs/python/commons/run/executor/","weight":0,"wordcount":136},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Faceted Search Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8e4c3f39d96907e0956ca4b10457c51d","permalink":"/microservices/infrastructure/faceted_search/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/faceted_search/","section":"microservices","summary":"Allows to search \u0026ldquo;facets\u0026rdquo; recorded by other microservices. For instance, statistics microservice can record groups and later use them in counters search.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .NET  ","tags":null,"title":"Faceted Search Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/faceted_search/","weight":0,"wordcount":50},{"authors":null,"categories":null,"date":-62135596800,"description":"Basic component factory that creates components using registered types and factory functions.\n","dir":"golang/components/build/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"Factory","lvl1":"Basic component factory that creates components using registered types and factory functions.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fe0d4bc31fe9330bfb22b13b4baa63ba","permalink":"/golang/components/build/factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/build/factory/","section":"golang","summary":"Description The Factory class allows you to create components using registered types and factory functions.\nConstructors NewFactory Create new factory\n NewFactory() *Factory\n Methods CanCreate Checks if this factory is able to create component by a given locator.\nThis method searches for all registered components and returns a locator for the component it is able to create that matches the given locator. If the factory is not able to create the requested component is returns nil.","tags":null,"title":"Factory","type":"docs","url":"/hugo-docs/golang/components/build/factory/","weight":0,"wordcount":251},{"authors":null,"categories":null,"date":-62135596800,"description":"Basic component factory that creates components using registered types and factory functions.\n","dir":"net/components/build/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"Factory","lvl1":"Basic component factory that creates components using registered types and factory functions.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a997a1ed45c29698139eef889757dc47","permalink":"/net/components/build/factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/build/factory/","section":"net","summary":"Inherits: IFactory\nDescription The Factory class allows you to create components using registered types and factory functions.\nInstance methods CanCreate Checks if this factory is able to create component by a given locator.\nThis method searches for all registered components and returns a locator for the component it is able to create that matches the given locator. If the factory is not able to create the requested component is returns null.","tags":null,"title":"Factory","type":"docs","url":"/hugo-docs/net/components/build/factory/","weight":0,"wordcount":250},{"authors":null,"categories":null,"date":-62135596800,"description":"Basic component factory that creates components using registered types and factory functions.\n","dir":"node/components/build/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"Factory","lvl1":"Basic component factory that creates components using registered types and factory functions.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"292c2f78231c36723aba8e708f6d8b57","permalink":"/node/components/build/factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/build/factory/","section":"node","summary":"Implements: IFactory\nDescription The Factory class allows you to create components using registered types and factory functions.\nInstance methods canCreate Checks if this factory is able to create component by a given locator.\nThis method searches for all registered components and returns a locator for the component it is able to create that matches the given locator. If the factory is not able to create the requested component is returns null.","tags":null,"title":"Factory","type":"docs","url":"/hugo-docs/node/components/build/factory/","weight":0,"wordcount":248},{"authors":null,"categories":null,"date":-62135596800,"description":"Basic component factory that creates components using registered types and factory functions.\n","dir":"python/components/build/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621088277,"lvl0":"Factory","lvl1":"Basic component factory that creates components using registered types and factory functions.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"63bd510b0d46dc61b9aedf5b5b7645fe","permalink":"/python/components/build/factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/build/factory/","section":"python","summary":"Implements: IFactory\nDescription The Factory class allows you to create components using registered types and factory functions.\nInstance methods can_create Checks if this factory is able to create component by a given locator.\nThis method searches for all registered components and returns a locator for the component it is able to create that matches the given locator. If the factory is not able to create the requested component is returns None.","tags":null,"title":"Factory","type":"docs","url":"/hugo-docs/python/components/build/factory/","weight":0,"wordcount":217},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/support/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Feedbacks Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"db37cd8ec0852fd0ee563bbb9d95999c","permalink":"/microservices/support/feedbacks/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/support/feedbacks/","section":"microservices","summary":"Allows users to communicate to application support, request help, share ideas or raise copyright issues. When feedbacks are processed by support personnel, user receives a feedback via provided email.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  This microservice has dependencies on the following microservices:\n Blobs Attachments - to reference pictures and documents associates with feedbacks  ","tags":null,"title":"Feedbacks Microservice","type":"docs","url":"/hugo-docs/microservices/support/feedbacks/","weight":0,"wordcount":75},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads a configuration from a file.\n","dir":"golang/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"FileConfigReader","lvl1":"Config reader that reads a configuration from a file.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3b0421dbdf1f7154e79fc64599e006c7","permalink":"/golang/components/config/file_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/config/file_config_reader/","section":"golang","summary":"Implements: ConfigReader\nDescription The FileConfigReader class allows you to create a config reader that reads a configuration from a file.\nConfiguration parameters  path: path to configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors NewFileConfigReader Creates a new instance of the config reader.\n NewFileConfigReader(path string) *FileConfigReader\n  path: string - (optional) a path to configuration file.  NewEmptyFileConfigReader Creates a new instance of the config reader.","tags":null,"title":"FileConfigReader","type":"docs","url":"/hugo-docs/golang/components/config/file_config_reader/","weight":0,"wordcount":131},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads a configuration from a file.\n","dir":"net/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"FileConfigReader","lvl1":"Config reader that reads a configuration from a file.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4d44fbed7bea37d84ab2f0ca2821f5b4","permalink":"/net/components/config/file_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/config/file_config_reader/","section":"net","summary":"Inherits: ConfigReader\nDescription The FileConfigReader class allows you to create a config reader that reads a configuration from a file.\nConfiguration parameters  path: path to configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of the config reader.\n public FileConfigReader(string path = null)\n  path: string - (optional) a path to configuration file.  Properties Path Gets and sets the path to configuration file.","tags":null,"title":"FileConfigReader","type":"docs","url":"/hugo-docs/net/components/config/file_config_reader/","weight":0,"wordcount":103},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads a configuration from a file.\n","dir":"node/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"FileConfigReader","lvl1":"Config reader that reads a configuration from a file.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dd726733fa25a2a0f5524e97119a3883","permalink":"/node/components/config/file_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/config/file_config_reader/","section":"node","summary":"Extends: ConfigReader\nDescription The FileConfigReader class allows you to create a config reader that reads a configuration from a file.\nConfiguration parameters  path: path to configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of the config reader.\n public constructor(path: string = null)\n  path: string - (optional) a path to configuration file.  Instance methods configure Configures component by passing configuration parameters.","tags":null,"title":"FileConfigReader","type":"docs","url":"/hugo-docs/node/components/config/file_config_reader/","weight":0,"wordcount":119},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads a configuration from a file.\n","dir":"python/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621094106,"lvl0":"FileConfigReader","lvl1":"Config reader that reads a configuration from a file.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3a73fadfdcfb7219e16f7cf9ebf0cf11","permalink":"/python/components/config/file_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/config/file_config_reader/","section":"python","summary":"Implements: ConfigReader\nDescription The FileConfigReader class allows you to create a config reader that reads a configuration from a file.\nConfiguration parameters  path: path to configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of the config reader.\n FileConfigReader(path: str = None)\n  path: str - (optional) a path to configuration file.  Instance methods configure Configures component by passing configuration parameters.","tags":null,"title":"FileConfigReader","type":"docs","url":"/hugo-docs/python/components/config/file_config_reader/","weight":0,"wordcount":115},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors in read/write local disk operations.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624228611,"lvl0":"FileError","lvl1":"Errors in read/write local disk operations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bb0d000ce1b1432f118d6d0b881573f6","permalink":"/golang/commons/errors/file_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/file_error/","section":"golang","summary":"The FileError class is used to manage errors in read/write local disk operations.\nConstructors NewFileError Creates an error instance and assigns its values.\n NewFileError(correlationId, code, message string) *ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.  ","tags":null,"title":"FileError","type":"docs","url":"/hugo-docs/golang/commons/errors/file_error/","weight":0,"wordcount":62},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors in read/write local disk operations.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"FileException","lvl1":"Errors in read/write local disk operations.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1d5ed09854ecd7668dbbdf08c1459a7e","permalink":"/net/commons/errors/file_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/file_exception/","section":"net","summary":"Inherits: ApplicationException\nThe FileException class is used to manage errors in read/write local disk operations.\nConstructors Creates an error instance and assigns its values.\n public FileException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"FileException","type":"docs","url":"/hugo-docs/net/commons/errors/file_exception/","weight":0,"wordcount":127},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors in read/write local disk operations.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"FileException","lvl1":"Errors in read/write local disk operations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fc95fc76e1641b398f670b0e944ce258","permalink":"/node/commons/errors/file_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/file_exception/","section":"node","summary":"Extends: ApplicationException\nThe FileException class is used to manage errors in read/write local disk operations.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"FileException","type":"docs","url":"/hugo-docs/node/commons/errors/file_exception/","weight":0,"wordcount":71},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors in read/write local disk operations.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620408616,"lvl0":"FileException","lvl1":"Errors in read/write local disk operations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bdb3484282886836cf10ae8cd7dba13f","permalink":"/python/commons/errors/file_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/file_exception/","section":"python","summary":"Implements: ApplicationException\nThe FileException class is used to manage errors in read/write local disk operations.\nConstructors Creates an error instance and assigns its values.\n FileException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: str - (optional) a human-readable description of the error.","tags":null,"title":"FileException","type":"docs","url":"/hugo-docs/python/commons/errors/file_exception/","weight":0,"wordcount":70},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in flat files and caches them in memory.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"FilePersistence","lvl1":"Abstract persistence component that stores data in flat files and caches them in memory.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"994e9dbbd5f2c25cbbe3e3f11cc6c19e","permalink":"/golang/data/persistence/file_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/data/persistence/file_persistence/","section":"golang","summary":"Implements: MemoryPersistence\nDescription The FilePersistence class allows you to create persistence components that store data in flat files and chache them in memory.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing the self._items property and calling the save method.  Configuration parameters  path: path to the file where data is stored  References  *:logger:*:*:1.","tags":null,"title":"FilePersistence","type":"docs","url":"/hugo-docs/golang/data/persistence/file_persistence/","weight":0,"wordcount":252},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in flat files and caches them in memory.\n","dir":"node/data/persistence/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622675980,"lvl0":"FilePersistence\u003cT\u003e","lvl1":"Abstract persistence component that stores data in flat files and caches them in memory.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c467b64c056f3caa876e81e27420fdbf","permalink":"/node/data/persistence/file_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/persistence/file_persistence/","section":"node","summary":"Extends: MemoryPersistence\nimplements: IConfigurable\nDescription The FilePersistence class allows you to create persistence components that store data in flat files and chache them in memory.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing the self._items property and calling the save method.  Configuration parameters  path: path to the file where data is stored  References  *:logger:*:*:1.","tags":null,"title":"FilePersistence\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/persistence/file_persistence/","weight":0,"wordcount":206},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in flat files and caches them in memory.\n","dir":"python/data/persistence/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622585823,"lvl0":"FilePersistence","lvl1":"Abstract persistence component that stores data in flat files and caches them in memory.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"726cc18866ac7f99f5cf1ba1b49e6c41","permalink":"/python/data/persistence/file_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/persistence/file_persistence/","section":"python","summary":"Implements: MemoryPersistence, IConfigurable\nDescription The FilePersistence class allows you to create persistence components that store data in flat files and chache them in memory.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing the self._items property and calling the save method.  Configuration parameters  path: path to the file where data is stored  References  *:logger:*:*:1.","tags":null,"title":"FilePersistence","type":"docs","url":"/hugo-docs/python/data/persistence/file_persistence/","weight":0,"wordcount":167},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Files Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1e3f13c36917051089f0d22213ad022a","permalink":"/microservices/content/files/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/files/","section":"microservices","summary":"Keeps lists of files that can be stored in blob storage or linked to external source using uri.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase, AWS S3 Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Files Microservice","type":"docs","url":"/hugo-docs/microservices/content/files/","weight":0,"wordcount":47},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object used to pass filter parameters as key-value pairs.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624070983,"lvl0":"FilterParams","lvl1":"Data transfer object used to pass filter parameters as key-value pairs.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f5a17ab7ba48779400c4ceca55f8fc01","permalink":"/golang/commons/data/filter_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/data/filter_params/","section":"golang","summary":"Implements: StringValueMap\nDescription The FilterParams class allows you to create a data transfer object that can be used to pass filter parameters as key-value pairs.\nConstructors NewFilterParams Creates a new instance and initalizes it with elements from the specified map.\n NewFilterParams(values map[string]string) *FilterParams\n  map: map[string]string - a map to initialize this instance.  NewFilterParams Converts a specified value into FilterParams.\n NewFilterParamsFromValue(value interface{}) *FilterParams\n  value: interface{} - value to be converted returns: *FilterParams - newly created FilterParams.","tags":null,"title":"FilterParams","type":"docs","url":"/hugo-docs/golang/commons/data/filter_params/","weight":0,"wordcount":175},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object used to pass filter parameters as key-value pairs.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"FilterParams","lvl1":"Data transfer object used to pass filter parameters as key-value pairs.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5e88b2f52af3736158a30a49d05a8183","permalink":"/net/commons/data/filter_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/data/filter_params/","section":"net","summary":"Inherits: StringValueMap\nDescription The FilterParams class allows you to create a data transfer object that can be used to pass filter parameters as key-value pairs.\nConstructors Creates a new instance and initalizes it with elements from the specified map.\n public FilterParams(IDictionary\u0026lt;string, string\u0026gt; map)\n  map: IDictionary\u0026lt;string, string\u0026gt; - a map to initialize this instance.  Creates a new instance and initalizes it with elements from the specified map.","tags":null,"title":"FilterParams","type":"docs","url":"/hugo-docs/net/commons/data/filter_params/","weight":0,"wordcount":228},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object used to pass filter parameters as key-value pairs.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"FilterParams","lvl1":"Data transfer object used to pass filter parameters as key-value pairs.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"db1067279fadce0cb94d58f1daa65794","permalink":"/node/commons/data/filter_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/filter_params/","section":"node","summary":"Extends: StringValueMap\nDescription The FilterParams class allows you to create a data transfer object that can be used to pass filter parameters as key-value pairs.\nConstructors Creates a new instance and initalizes it with elements from the specified map.\n public constructor(map: any = null)\n  map: any - a map to initialize this instance.  Static methods fromString Parses semicolon-separated key-value pairs and returns them as a FilterParams.","tags":null,"title":"FilterParams","type":"docs","url":"/hugo-docs/node/commons/data/filter_params/","weight":0,"wordcount":191},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object used to pass filter parameters as key-value pairs.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620931477,"lvl0":"FilterParams","lvl1":"Data transfer object used to pass filter parameters as key-value pairs.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"922e9d2ab9fb784e8eb436550ed2da23","permalink":"/python/commons/data/filter_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/filter_params/","section":"python","summary":"Implements: StringValueMap\nDescription The FilterParams class allows you to create a data transfer object that can be used to pass filter parameters as key-value pairs.\nConstructors Creates a new instance and initalizes it with elements from the specified map.\n FilterParams(map: Any = None)\n  map: Any - a map to initialize this instance.  Static methods from_string Parses semicolon-separated key-value pairs and returns them as a FilterParams.\nSee StringValueMap.","tags":null,"title":"FilterParams","type":"docs","url":"/hugo-docs/python/commons/data/filter_params/","weight":0,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [FilterParams](../../data/filter_params).\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624306511,"lvl0":"FilterParamsSchema","lvl1":"Schema to validate [FilterParams](../../data/filter_params).\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"512012c6a0beb092974d39a5aa4d6a2c","permalink":"/golang/commons/validate/filter_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/filter_params_schema/","section":"golang","summary":"Description The FilterParamsSchema class allows you to create a schema to validate FilterParams.\nConstructors NewFilterParamsSchema Creates a new instance of a validation schema.\n NewFilterParamsSchema() *MapSchema\n See also   FilterParams   ","tags":null,"title":"FilterParamsSchema","type":"docs","url":"/hugo-docs/golang/commons/validate/filter_params_schema/","weight":0,"wordcount":28},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [FilterParams](../../data/filter_params).\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"FilterParamsSchema","lvl1":"Schema to validate [FilterParams](../../data/filter_params).\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c9d72a71a86ead12fe13552236095077","permalink":"/net/commons/validate/filter_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/filter_params_schema/","section":"net","summary":"Inherits: MapSchema\nDescription The FilterParamsSchema class allows you to create a schema to validate FilterParams.\nConstructors Creates a new instance of validation schema.\n public FilterParamsSchema()\n See also   FilterParams   ","tags":null,"title":"FilterParamsSchema","type":"docs","url":"/hugo-docs/net/commons/validate/filter_params_schema/","weight":0,"wordcount":28},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [FilterParams](../../data/filter_params).\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"FilterParamsSchema","lvl1":"Schema to validate [FilterParams](../../data/filter_params).\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"90fc2bf3cfdafd2b73d7e4daddc4ec92","permalink":"/node/commons/validate/filter_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/filter_params_schema/","section":"node","summary":"Extends: MapSchema\nDescription The FilterParamsSchema class allows you to create a schema to validate FilterParams.\nConstructors Creates a new instance of validation schema.\n public constructor()\n See also   FilterParams   ","tags":null,"title":"FilterParamsSchema","type":"docs","url":"/hugo-docs/node/commons/validate/filter_params_schema/","weight":0,"wordcount":28},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [FilterParams](../../data/filter_params).\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620147577,"lvl0":"FilterParamsSchema","lvl1":"Schema to validate [FilterParams](../../data/filter_params).\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9c1bcfc66f731a2f07c73332bf6f217c","permalink":"/python/commons/validate/filter_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/filter_params_schema/","section":"python","summary":"Implements: MapSchema\nDescription The FilterParamsSchema class allows you to create a schema to validate FilterParams.\nConstructors Creates a new instance of validation schema.\n FilterParamsSchema()\n See also   FilterParams   ","tags":null,"title":"FilterParamsSchema","type":"docs","url":"/hugo-docs/python/commons/validate/filter_params_schema/","weight":0,"wordcount":27},{"authors":null,"categories":null,"date":-62135596800,"description":"Timer that is triggered in equal time intervals.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624244694,"lvl0":"FixedRateTimer","lvl1":"Timer that is triggered in equal time intervals.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c0ccd83a6a05df9ad036966b0f0e4237","permalink":"/golang/commons/run/fixed_rate_timer/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/run/fixed_rate_timer/","section":"golang","summary":"Description The FixerRateTimer class represents a timer that is triggered in equal time intervals.\nImportant points\n It has a symmetric cross-language implementation and is often used by the Pip.Services toolkit to perform periodic processing and cleanup in microservices.  Constructors NewFixedRateTimerFromCallback Creates new instance of the timer and sets its values.\n NewFixedRateTimerFromCallback(callback func(), interval int, delay int) *FixedRateTimer\n  callback: func() - (optional) Notifiable object or callback function to call when timer is triggered.","tags":null,"title":"FixedRateTimer","type":"docs","url":"/hugo-docs/golang/commons/run/fixed_rate_timer/","weight":0,"wordcount":483},{"authors":null,"categories":null,"date":-62135596800,"description":"Timer that is triggered in equal time intervals.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"FixedRateTimer","lvl1":"Timer that is triggered in equal time intervals.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f8699701dbf41d8da80918834bea1c45","permalink":"/net/commons/run/fixed_rate_timer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/run/fixed_rate_timer/","section":"net","summary":"Inherits: IClosable\nDescription The FixerRateTimer class represents a timer that is triggered in equal time intervals.\nImportant points\n It has symmetric cross-language implementation and is often used by the Pip.Services toolkit to perform periodic processing and cleanup in microservices.  Constructors Creates new instance of the timer and sets its values.\n public FixedRateTimer(Action task, int interval, int delay)\n  taskOrCallback: Action - (optional) a Notifiable object or callback function to call when timer is triggered.","tags":null,"title":"FixedRateTimer","type":"docs","url":"/hugo-docs/net/commons/run/fixed_rate_timer/","weight":0,"wordcount":271},{"authors":null,"categories":null,"date":-62135596800,"description":"Timer that is triggered in equal time intervals.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"FixedRateTimer","lvl1":"Timer that is triggered in equal time intervals.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"06ce5ce7223defbb9ba12e08636dbad9","permalink":"/node/commons/run/fixed_rate_timer/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/run/fixed_rate_timer/","section":"node","summary":"Implements: IClosable\nDescription The FixerRateTimer class represents a timer that is triggered in equal time intervals.\nImportant points\n It has symmetric cross-language implementation and is often used by the Pip.Services toolkit to perform periodic processing and cleanup in microservices.  Constructors Creates new instance of the timer and sets its values.\n public constructor(taskOrCallback: any = null, interval: number = null, delay: number = null)\n  taskOrCallback: any - (optional) a Notifiable object or callback function to call when timer is triggered.","tags":null,"title":"FixedRateTimer","type":"docs","url":"/hugo-docs/node/commons/run/fixed_rate_timer/","weight":0,"wordcount":432},{"authors":null,"categories":null,"date":-62135596800,"description":"Timer that is triggered in equal time intervals.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"FixedRateTimer","lvl1":"Timer that is triggered in equal time intervals.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1dd5467261df015ef0b0dedfd9b49fab","permalink":"/python/commons/run/fixed_rate_timer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/run/fixed_rate_timer/","section":"python","summary":"Implements: IClosable\nDescription The FixerRateTimer class represents a timer that is triggered in equal time intervals.\nImportant points\n It has symmetric cross-language implementation and is often used by the Pip.Services toolkit to perform periodic processing and cleanup in microservices.  Constructors Creates new instance of the timer and sets its values.\n FixedRateTimer(task_or_object: Any = None, interval: int = None, delay: int = None)\n  task_or_object: Any - (optional) a Notifiable object or callback function to call when timer is triggered.","tags":null,"title":"FixedRateTimer","type":"docs","url":"/hugo-docs/python/commons/run/fixed_rate_timer/","weight":0,"wordcount":390},{"authors":null,"categories":null,"date":-62135596800,"description":"The FloatConverter class allows you to convert arbitrary values into float using extended conversion rules.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623967957,"lvl0":"FloatConverter","lvl1":"The FloatConverter class allows you to convert arbitrary values into float using extended conversion rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"26f57c7c2f9e0b79a35aadc437c416e5","permalink":"/golang/commons/convert/float_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/convert/float_converter/","section":"golang","summary":"Description The FloatConverter class allows you to convert arbitrary values into float using the following extended conversion rules:\n Strings are converted to float values DateTime: total number of milliseconds since unix epoсh Boolean: 1 for true and 0 for false  Methods ToFloat Converts value into float or returns 0 when conversion is not possible.\n ToFloat(value interface{}) float32\n  value: interface{} - value to convert. returns: float32 - float value or 0 when conversion is not supported.","tags":null,"title":"FloatConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/float_converter/","weight":0,"wordcount":184},{"authors":null,"categories":null,"date":-62135596800,"description":"The FloatConverter class allows you to convert arbitrary values into float using extended conversion rules.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"FloatConverter","lvl1":"The FloatConverter class allows you to convert arbitrary values into float using extended conversion rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a45db5eaaa54cbf165c34f9c0a36323d","permalink":"/net/commons/convert/float_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/float_converter/","section":"net","summary":"Description The FloatConverter class allows you to convert arbitrary values into float using the following extended conversion rules:\n Strings are converted to float values DateTime: total number of milliseconds since unix epoсh Boolean: 1 for true and 0 for false  Static methods ToFloat Converts value into float or returns 0 when conversion is not possible.\nSee DoubleConverter.toDouble\n public static float ToFloat(object value)\n  value: object - the value to convert.","tags":null,"title":"FloatConverter","type":"docs","url":"/hugo-docs/net/commons/convert/float_converter/","weight":0,"wordcount":200},{"authors":null,"categories":null,"date":-62135596800,"description":"The FloatConverter class allows you to convert arbitrary values into float using extended conversion rules.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"FloatConverter","lvl1":"The FloatConverter class allows you to convert arbitrary values into float using extended conversion rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3f9936388e0e961ce0e24904fed19ca3","permalink":"/node/commons/convert/float_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/convert/float_converter/","section":"node","summary":"Description The FloatConverter class allows you to convert arbitrary values into float using the following extended conversion rules:\n Strings are converted to float values DateTime: total number of milliseconds since unix epoсh Boolean: 1 for true and 0 for false  Static methods toFloat Converts value into float or returns 0 when conversion is not possible.\nSee DoubleConverter.toDouble\n public static toFloat(value: any): number\n  value: any - the value to convert.","tags":null,"title":"FloatConverter","type":"docs","url":"/hugo-docs/node/commons/convert/float_converter/","weight":0,"wordcount":202},{"authors":null,"categories":null,"date":-62135596800,"description":"The FloatConverter class allows you to convert arbitrary values into float using extended conversion rules.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"FloatConverter","lvl1":"The FloatConverter class allows you to convert arbitrary values into float using extended conversion rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"372cdf7de32ce50cf4de602556e6bbdb","permalink":"/python/commons/convert/float_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/float_converter/","section":"python","summary":"Description The FloatConverter class allows you to convert arbitrary values into float using the following extended conversion rules:\n Strings are converted to float values DateTime: total number of milliseconds since unix epoсh Boolean: 1 for true and 0 for false  Static methods to_float Converts value into float or returns 0 when conversion is not possible.\nSee DoubleConverter.toDouble\n static to_float(value: Any): float\n  value: Any - the value to convert.","tags":null,"title":"FloatConverter","type":"docs","url":"/hugo-docs/python/commons/convert/float_converter/","weight":0,"wordcount":194},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract client that calls remote endpoints using the GRPC protocol.\n","dir":"python/grpc/clients/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"GrpcClient","lvl1":"Abstract client that calls remote endpoints using the GRPC protocol.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"65bcd2863668eb6ea42aea20a4c27158","permalink":"/python/grpc/clients/grpc_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/grpc/clients/grpc_client/","section":"python","summary":"Implements: IOpenable, IReferenceable, IConfigurable\nDescription The GrpcClient class allows you to create clients that call remote endpoints using the GRPC protocol.\nConfiguration parameters connection(s): - discovery_key: (optional) key to retrieve the connection from IDiscovery - protocol: connection protocol: http or https - host: host name or IP address - port: port number - uri: resource URI or connection string with all parameters in it options: - retries: number of retries (default: 3) - connect_timeout: connection timeout in milliseconds (default: 10 sec) - timeout: invocation timeout in milliseconds (default: 10 sec)","tags":null,"title":"GrpcClient","type":"docs","url":"/hugo-docs/python/grpc/clients/grpc_client/","weight":0,"wordcount":547},{"authors":null,"categories":null,"date":-62135596800,"description":"Used for creating GRPC endpoints. \n","dir":"python/grpc/services/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"GrpcEndpoint","lvl1":"Used for creating GRPC endpoints. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"be3888e229bb73ef1c102e4b03eea36d","permalink":"/python/grpc/services/grpc_endpoint/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/grpc/services/grpc_endpoint/","section":"python","summary":"Implements: IOpenable, IConfigurable, IReferenceable\nDescription The GrpcEndpoint class allows you to create GRPC endpoints. An endpoint is a URL, at which a given service can be accessed by a client.\nConfiguration parameters Parameters to pass to the :func:configure method for component configuration:\nconnection(s): the connection resolver\u0026rsquo;s connections:\n \u0026ldquo;connection.discovery_key\u0026rdquo;: key used for connection resolving in a discovery service; \u0026ldquo;connection.protocol\u0026rdquo;: connection\u0026rsquo;s protocol; \u0026ldquo;connection.host\u0026rdquo;: target host; \u0026ldquo;connection.port\u0026rdquo;: target port; \u0026ldquo;connection.uri\u0026rdquo;: target URI. credential: HTTPS credentials: \u0026ldquo;credential.","tags":null,"title":"GrpcEndpoint","type":"docs","url":"/hugo-docs/python/grpc/services/grpc_endpoint/","weight":0,"wordcount":441},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract service that receives remote calls via the GRPC protocol.\n","dir":"python/grpc/services/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"GrpcService","lvl1":"Abstract service that receives remote calls via the GRPC protocol.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"83779a98b6317ee26b85e62b5d445224","permalink":"/python/grpc/services/grpc_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/grpc/services/grpc_service/","section":"python","summary":"Implements: IOpenable, IConfigurable, IRegisterable, IUnreferenceable\nDescription The GrpcService class allows you to create services that receive remote calls via the GRPC protocol.\nConfiguration parameters dependencies:\n- endpoint: override for GRPC Endpoint dependency - controller: override for Controller dependency connection(s): - discovery_key: (optional) key to retrieve the connection from IDiscovery - protocol: connection protocol: http or https - host: host name or IP address - port: port number\n- uri: resource URI or connection string with all parameters in it credentials:","tags":null,"title":"GrpcService","type":"docs","url":"/hugo-docs/python/grpc/services/grpc_service/","weight":0,"wordcount":583},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Guides Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cf160c5b57b20d9ef40f35f56d67d49f","permalink":"/microservices/content/guides/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/guides/","section":"microservices","summary":"Provides guidance to application users: introduces about application features, tells about new version and so on. Each guide:\n  Can be written in multiple languages\n  Can include one or more pages with title, text and a picture\n  Supports editing lifecycle via status tracking\n  Server implementations: NodeJS, Dart\n  Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC\n  Persistence: Memory, Flat Files, MongoDB, Couchbase","tags":null,"title":"Guides Microservice","type":"docs","url":"/hugo-docs/microservices/content/guides/","weight":0,"wordcount":90},{"authors":null,"categories":null,"date":-62135596800,"description":"Handles the operations of a heartbeat service.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HeartBeatOperations","lvl1":"Handles the operations of a heartbeat service.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"71c6c1d242cf43d0c07af0dce866733a","permalink":"/golang/rpc/services/heartbeat_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/services/heartbeat_operations/","section":"golang","summary":"Implements: RestOperations\nDescription The HeartBeatOperations class is used to handle the operations of a heartbeat service.\nConstructors NewHeartbeatOperations NewHeartbeatOperations creates new instance HeartbeatOperations\n NewHeartbeatOperations() *HeartbeatOperations\n Methods Heartbeat Creates a heartbeat. Send request with the current time in UTC.\n (c *HeartbeatOperations) Heartbeat(res http.ResponseWriter, req *http.Request)\n  res: http.ResponseWriter - an HTTP request res: req *http.Request - an HTTP response  GetHeartbeatOperation Gets the heartbeat operation\n (c *HeartbeatOperations) GetHeartbeatOperation() func(res http.","tags":null,"title":"HeartBeatOperations","type":"docs","url":"/hugo-docs/golang/rpc/services/heartbeat_operations/","weight":0,"wordcount":77},{"authors":null,"categories":null,"date":-62135596800,"description":"Handles the operations of a heartbeat service.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623078433,"lvl0":"HeartBeatOperations","lvl1":"Handles the operations of a heartbeat service.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ab28072841ec6db1b400b11bb1025015","permalink":"/node/rpc/services/heartbeat_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/services/heartbeat_operations/","section":"node","summary":"Extends: RestOperations\nDescription The HeartBeatOperations class is used to handle the operations of a heartbeat service.\nInstance methods heartbeat Creates a heartbeat. Send request with the current time in UTC.\n public heartbeat(req, res): void\n  req: any - an HTTP request res: any - an HTTP response  getHeartbeatOperation Gets the heartbeat operation\n public getHeartbeatOperation(): function\n  returns: function - heartbeat operation  ","tags":null,"title":"HeartBeatOperations","type":"docs","url":"/hugo-docs/node/rpc/services/heartbeat_operations/","weight":0,"wordcount":59},{"authors":null,"categories":null,"date":-62135596800,"description":"Handles the operations of a heartbeat service.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622166599,"lvl0":"HeartBeatOperations","lvl1":"Handles the operations of a heartbeat service.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aabd4e84096a323b3a32547af6d3d287","permalink":"/python/rpc/services/heartbeat_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/services/heartbeat_operations/","section":"python","summary":"Implements: RestOperations\nDescription The HeartBeatOperations class is used to handle the operations of a heartbeat service.\nInstance methods heartbeat Creates a heartbeat.\n heartbeat(): str\n  returns: str - string with the current time in UTC.  get_heart_beat_operation Gets the heartbeat operation\n get_heart_beat_operation(): Callable\n  returns: Callable - heartbeat operation  ","tags":null,"title":"HeartBeatOperations","type":"docs","url":"/hugo-docs/python/rpc/services/heartbeat_operations/","weight":0,"wordcount":46},{"authors":null,"categories":null,"date":-62135596800,"description":"Service returns heartbeat via HTTP/REST protocol.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HeartbeatRestService","lvl1":"Service returns heartbeat via HTTP/REST protocol.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"49aa75cbace6fad9ec15c783d2c2fc7c","permalink":"/golang/rpc/services/heartbeat_rest_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/rpc/services/heartbeat_rest_service/","section":"golang","summary":"Implements: RestService\nDescription The HeartbeatRestService class allows you to create services that return heartbeat via HTTP/REST protocol.\nImportant points\n The service responds on /heartbeat route (can be changed) with a string with the current time in UTC. This service route can be used to perform health checks by loadbalancers and container orchestrators.  Configuration parameters  base_route: base route for remote URI (default: \u0026ldquo;\u0026quot;) route: route to heartbeat operation (default: \u0026ldquo;heartbeat\u0026rdquo;) dependencies:  endpoint: override for HTTP Endpoint dependency   connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it    References  *:logger:*:*:1.","tags":null,"title":"HeartbeatRestService","type":"docs","url":"/hugo-docs/golang/rpc/services/heartbeat_rest_service/","weight":0,"wordcount":245},{"authors":null,"categories":null,"date":-62135596800,"description":"Service returns heartbeat via HTTP/REST protocol.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"HeartbeatRestService","lvl1":"Service returns heartbeat via HTTP/REST protocol.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2a6bea5d3a4fbe438a2c983462f3bfb2","permalink":"/node/rpc/services/heartbeat_rest_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/services/heartbeat_rest_service/","section":"node","summary":"Extends: RestService\nDescription The HeartbeatRestService class allows you to create services that return heartbeat via HTTP/REST protocol.\nImportant points\n The service responds on /heartbeat route (can be changed) with a string with the current time in UTC. This service route can be used to perform health checks by loadbalancers and container orchestrators.  Configuration parameters  base_route: base route for remote URI (default: \u0026ldquo;\u0026quot;) route: route to heartbeat operation (default: \u0026ldquo;heartbeat\u0026rdquo;) dependencies:  endpoint: override for HTTP Endpoint dependency   connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it    References  *:logger:*:*:1.","tags":null,"title":"HeartbeatRestService","type":"docs","url":"/hugo-docs/node/rpc/services/heartbeat_rest_service/","weight":0,"wordcount":208},{"authors":null,"categories":null,"date":-62135596800,"description":"Service returns heartbeat via HTTP/REST protocol.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"HeartbeatRestService","lvl1":"Service returns heartbeat via HTTP/REST protocol.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"504ff74101184c56e7ae2cbe1d717ad5","permalink":"/python/rpc/services/heartbeat_rest_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/services/heartbeat_rest_service/","section":"python","summary":"Implements: RestService\nDescription The HeartbeatRestService class allows you to create services that return heartbeat via HTTP/REST protocol.\nImportant points\n The service responds on /heartbeat route (can be changed) with a string with the current time in UTC. This service route can be used to perform health checks by loadbalancers and container orchestrators.  Configuration parameters  base_route: base route for remote URI (default: \u0026ldquo;\u0026quot;) route: route to heartbeat operation (default: \u0026ldquo;heartbeat\u0026rdquo;) dependencies:  endpoint: override for HTTP Endpoint dependency   connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it    References  *:logger:*:*:1.","tags":null,"title":"HeartbeatRestService","type":"docs","url":"/hugo-docs/python/rpc/services/heartbeat_rest_service/","weight":0,"wordcount":208},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Help Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7129f11a8f491e7796c999d1ce77eded","permalink":"/microservices/content/help/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/help/","section":"microservices","summary":"Provides context help to application users broken by topics and articles. Each help:\n  Can be written in multiple languages\n  Can include one or more blocks of content with title, text and a picture\n  Supports editing lifecycle via status tracking\n  Server implementations: NodeJS, Dart\n  Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC\n  Persistence: Memory, Flat Files, MongoDB, Couchbase\n  Deployment options: Monolith, Process, Docker, AWS Lambda","tags":null,"title":"Help Microservice","type":"docs","url":"/hugo-docs/microservices/content/help/","weight":0,"wordcount":87},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class to retrieve connections for HTTP-based services and clients.\n","dir":"golang/rpc/connect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HttpConnectionResolver","lvl1":"Helper class to retrieve connections for HTTP-based services and clients.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"09464ff2a33128bdc98787cd578f8653","permalink":"/golang/rpc/connect/http_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/rpc/connect/http_connection_resolver/","section":"golang","summary":"Description The HttpConnectionResolver class is used to retrieve connections for HTTP-based services and clients.\nImportant points\n In addition to its regular functions, ConnectionResolver is able to parse http:// URIs and validate connection parameters before returning them.  Configuration parameters  connection:  discovery_key: (optional) key to retrieve the connection from IDiscovery \u0026hellip; : other connection parameters   connections: alternative to connection  [connection params 1]: first connection parameters \u0026hellip; [connection params N]: Nth connection parameters \u0026hellip;    References  *:discovery:*:*:1.","tags":null,"title":"HttpConnectionResolver","type":"docs","url":"/hugo-docs/golang/rpc/connect/http_connection_resolver/","weight":0,"wordcount":338},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class to retrieve connections for HTTP-based services and clients.\n","dir":"node/rpc/connect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"HttpConnectionResolver","lvl1":"Helper class to retrieve connections for HTTP-based services and clients.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"829333ff3b669d51f88fe3d5a0971231","permalink":"/node/rpc/connect/http_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/rpc/connect/http_connection_resolver/","section":"node","summary":"Implements: IReferenceable, IConfigurable\nDescription The HttpConnectionResolver class is used to retrieve connections for HTTP-based services and clients.\nImportant points\n In addition to its regular functions, ConnectionResolver is able to parse http:// URIs and validate connection parameters before returning them.  Configuration parameters  connection:  discovery_key: (optional) key to retrieve the connection from IDiscovery \u0026hellip; : other connection parameters   connections: alternative to connection  [connection params 1]: first connection parameters \u0026hellip; [connection params N]: Nth connection parameters \u0026hellip;    References  *:discovery:*:*:1.","tags":null,"title":"HttpConnectionResolver","type":"docs","url":"/hugo-docs/node/rpc/connect/http_connection_resolver/","weight":0,"wordcount":307},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class to retrieve connections for HTTP-based services and clients.\n","dir":"python/rpc/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"HttpConnectionResolver","lvl1":"Helper class to retrieve connections for HTTP-based services and clients.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5d987c11c5b8599056d90edba22078a1","permalink":"/python/rpc/connect/http_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/rpc/connect/http_connection_resolver/","section":"python","summary":"Implements: IReferenceable, IConfigurable\nDescription The HttpConnectionResolver class is used to retrieve connections for HTTP-based services and clients.\nImportant points\n In addition to its regular functions, ConnectionResolver is able to parse http:// URIs and validate connection parameters before returning them.  Configuration parameters  connection:  discovery_key: (optional) key to retrieve the connection from IDiscovery \u0026hellip; : other connection parameters   connections: alternative to connection  [connection params 1]: first connection parameters \u0026hellip; [connection params N]: Nth connection parameters \u0026hellip;    References  *:discovery:*:*:1.","tags":null,"title":"HttpConnectionResolver","type":"docs","url":"/hugo-docs/python/rpc/connect/http_connection_resolver/","weight":0,"wordcount":286},{"authors":null,"categories":null,"date":-62135596800,"description":"Used for creating HTTP endpoints. \n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HttpEndpoint","lvl1":"Used for creating HTTP endpoints. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9a30e8b80e8c6563e6f7668f84faba6e","permalink":"/golang/rpc/services/http_endpoint/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/rpc/services/http_endpoint/","section":"golang","summary":"Description The HttpEndpoint class allows you to create HTTP endpoints.\nImportant points\n An endpoint is a URL, at which a given service can be accessed by a client.  Configuration parameters Parameters to pass to the configure method for component configuration:\n connection(s): the connection resolver\u0026rsquo;s connections:  \u0026ldquo;connection.discovery_key\u0026rdquo;: key to use for connection resolving in a discovery service; \u0026ldquo;connection.protocol\u0026rdquo;: connection\u0026rsquo;s protocol; \u0026ldquo;connection.host\u0026rdquo;: target host; \u0026ldquo;connection.port\u0026rdquo;: target port; \u0026ldquo;connection.uri\u0026rdquo;: target URI.","tags":null,"title":"HttpEndpoint","type":"docs","url":"/hugo-docs/golang/rpc/services/http_endpoint/","weight":0,"wordcount":521},{"authors":null,"categories":null,"date":-62135596800,"description":"Used for creating HTTP endpoints. \n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HttpEndpoint","lvl1":"Used for creating HTTP endpoints. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c2ceb4ae99ea89dc7c8eac6f80301a2d","permalink":"/node/rpc/services/http_endpoint/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/rpc/services/http_endpoint/","section":"node","summary":"Implements: IConfigurable, IReferenceable, IOpenable\nDescription The HttpEndpoint class allows you to create HTTP endpoints.\nImportant points\n An endpoint is a URL, at which a given service can be accessed by a client.  Configuration parameters Parameters to pass to the configure method for component configuration:\n connection(s): the connection resolver\u0026rsquo;s connections:  \u0026ldquo;connection.discovery_key\u0026rdquo;: key to use for connection resolving in a discovery service; \u0026ldquo;connection.protocol\u0026rdquo;: connection\u0026rsquo;s protocol; \u0026ldquo;connection.host\u0026rdquo;: target host; \u0026ldquo;connection.","tags":null,"title":"HttpEndpoint","type":"docs","url":"/hugo-docs/node/rpc/services/http_endpoint/","weight":0,"wordcount":578},{"authors":null,"categories":null,"date":-62135596800,"description":"Used for creating HTTP endpoints. \n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HttpEndpoint","lvl1":"Used for creating HTTP endpoints. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eed0179526dbaf67f739e18005c996c5","permalink":"/python/rpc/services/http_endpoint/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/rpc/services/http_endpoint/","section":"python","summary":"Implements: IConfigurable, IReferenceable, IOpenable\nDescription The HttpEndpoint class allows you to create HTTP endpoints.\nImportant points\n An endpoint is a URL, at which a given service can be accessed by a client.  Configuration parameters Parameters to pass to the configure method for component configuration:\n connection(s): the connection resolver\u0026rsquo;s connections:  \u0026ldquo;connection.discovery_key\u0026rdquo;: key to use for connection resolving in a discovery service; \u0026ldquo;connection.protocol\u0026rdquo;: connection\u0026rsquo;s protocol; \u0026ldquo;connection.host\u0026rdquo;: target host; \u0026ldquo;connection.","tags":null,"title":"HttpEndpoint","type":"docs","url":"/hugo-docs/python/rpc/services/http_endpoint/","weight":0,"wordcount":496},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that retrieves parameters from HTTP requests.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HttpRequestDetector","lvl1":"Helper class that retrieves parameters from HTTP requests.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cf8b4b4aa95876309e4a15c13adfd45e","permalink":"/golang/rpc/services/http_request_detector/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/services/http_request_detector/","section":"golang","summary":"Description The HttpRequestDetector class allows you to retrieve parameters from HTTP requests.\nMethods DetectAddress Detects the IP address from where the given HTTP request was received.\n (c *THttpRequestDetector) DetectAddress(req *http.Request) string\n  req: *http.Request - HTTP request to process. returns: string - detected IP address (without a port). If no IP is detected - nil will be returned.  DetectBrowser Detects the browser (using \u0026ldquo;user-agent\u0026rdquo;) from where the given HTTP request was made.","tags":null,"title":"HttpRequestDetector","type":"docs","url":"/hugo-docs/golang/rpc/services/http_request_detector/","weight":0,"wordcount":209},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that retrieves parameters from HTTP requests.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HttpRequestDetector","lvl1":"Helper class that retrieves parameters from HTTP requests.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fc4e4781715ee78cb7ad4f546dfa8d62","permalink":"/node/rpc/services/http_request_detector/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/services/http_request_detector/","section":"node","summary":"Description The HttpRequestDetector class allows you to retrieve parameters from HTTP requests.\nStatic methods detectAddress Detects the IP address from where the given HTTP request was received.\n static detectAddress(req: any): string\n  req: any - HTTP request to process. returns: string - detected IP address (without a port). If no IP is detected - null will be returned.  detectBrowser Detects the browser (using \u0026ldquo;user-agent\u0026rdquo;) from where the given HTTP request was made.","tags":null,"title":"HttpRequestDetector","type":"docs","url":"/hugo-docs/node/rpc/services/http_request_detector/","weight":0,"wordcount":206},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that retrieves parameters from HTTP requests.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HttpRequestDetector","lvl1":"Helper class that retrieves parameters from HTTP requests.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"50e4ec1ffe340386e710ee2e9b09cfd6","permalink":"/python/rpc/services/http_request_detector/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/services/http_request_detector/","section":"python","summary":"Description The HttpRequestDetector class allows you to retrieve parameters from HTTP requests.\nStatic methods detect_address Detects the IP address from where the given HTTP request was received.\n static detect_address(req: bottle.Request): str\n  req: bottle.Request - HTTP request to process. returns: str - detected IP address (without a port). If no IP is detected - None will be returned.  detect_browser Detects the browser (using \u0026ldquo;user-agent\u0026rdquo;) from where the given HTTP request was made.","tags":null,"title":"HttpRequestDetector","type":"docs","url":"/hugo-docs/python/rpc/services/http_request_detector/","weight":0,"wordcount":206},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that handles HTTP-based responses.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"HttpResponseSender","lvl1":"Helper class that handles HTTP-based responses.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6edd513db685253eb60cd9f497ee9e6c","permalink":"/golang/rpc/services/http_response_sender/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/rpc/services/http_response_sender/","section":"golang","summary":"Description The HttpResponseSender class allows you to handle HTTP-based responses.\nMethods SendCreatedResult Creates a callback function that sends a newly created object as JSON. This callack function call be called directly or passed as a parameter to business logic components.\nIf the object is not nil, it returns 201 status code. For nil results, it returns 204 status code. If an error occurs, it sends ErrorDescription with approproate status code.","tags":null,"title":"HttpResponseSender","type":"docs","url":"/hugo-docs/golang/rpc/services/http_response_sender/","weight":0,"wordcount":400},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that handles HTTP-based responses.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623078433,"lvl0":"HttpResponseSender","lvl1":"Helper class that handles HTTP-based responses.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dad30725169285a5f4dfd5341f5c54e0","permalink":"/node/rpc/services/http_response_sender/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/rpc/services/http_response_sender/","section":"node","summary":"Description The HttpResponseSender class allows you to handle HTTP-based responses.\nStatic methods sendCreatedResult Creates a callback function that sends a newly created object as JSON. This callack function call be called directly or passed as a parameter to business logic components.\nIf the object is not null, it returns 201 status code. For null results, it returns 204 status code. If an error occurs, it sends ErrorDescription with approproate status code.","tags":null,"title":"HttpResponseSender","type":"docs","url":"/hugo-docs/node/rpc/services/http_response_sender/","weight":0,"wordcount":367},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that handles HTTP-based responses.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1622845022,"lvl0":"HttpResponseSender","lvl1":"Helper class that handles HTTP-based responses.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"10f126e2b60ed3d8b5875abe54a5d884","permalink":"/python/rpc/services/http_response_sender/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/rpc/services/http_response_sender/","section":"python","summary":"Description The HttpResponseSender class allows you to handle HTTP-based responses.\nStatic methods send_created_result Creates a callback function that sends a newly created object as JSON. This callack function call be called directly or passed as a parameter to business logic components.\nIf the object is not None, it returns 201 status code. For None results, it returns 204 status code. If an error occurs, it sends ErrorDescription with approproate status code.","tags":null,"title":"HttpResponseSender","type":"docs","url":"/hugo-docs/python/rpc/services/http_response_sender/","weight":0,"wordcount":318},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for caches that are used to cache values to improve performance.\n","dir":"golang/components/cache/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"ICache","lvl1":"Interface for caches that are used to cache values to improve performance.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e325ed6e674964a8ef09b9fab839b0e4","permalink":"/golang/components/cache/icache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/cache/icache/","section":"golang","summary":"Description The ICache interface defines methods for caches that are used to cache values, in order to improve performance.\nMethods Remove Removes a value from the cache by its key.\n Remove(correlationId string, key string) error\n  correlationId: string - (optional) transaction id to trace execution through call chain. key: string - a unique value key. returns: error - return error if not removed.  Retrieve Retrieves cached value from the cache using its key.","tags":null,"title":"ICache","type":"docs","url":"/hugo-docs/golang/components/cache/icache/","weight":0,"wordcount":188},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for caches that are used to cache values to improve performance.\n","dir":"net/components/cache/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"ICache","lvl1":"Interface for caches that are used to cache values to improve performance.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aa50014961e2c4b07967b2d1fc11a1f0","permalink":"/net/components/cache/icache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/cache/icache/","section":"net","summary":"Description The ICache interface defines methods for caches that are used to cache values, in order to improve performance.\nInstance methods reRemoveAsyncmove Removes a value from the cache by its key.\n Task RemoveAsync(string correlationId, string key)\n  correlationId: string - (optional) transaction id to trace execution through call chain. key: string - a unique value key.  RetrieveAsync Retrieves cached value from the cache using its key. If value is missing in the cache or expired it returns null.","tags":null,"title":"ICache","type":"docs","url":"/hugo-docs/net/components/cache/icache/","weight":0,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for caches that are used to cache values to improve performance.\n","dir":"node/components/cache/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"ICache","lvl1":"Interface for caches that are used to cache values to improve performance.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"273d5de4e547214fea2b39f6ba899564","permalink":"/node/components/cache/icache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/cache/icache/","section":"node","summary":"Description The ICache interface defines methods for caches that are used to cache values, in order to improve performance.\nInstance methods remove Removes a value from the cache by its key.\n remove(correlationId: string, key: string): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain. key: string - a unique value key.  retrieve Retrieves cached value from the cache using its key. If value is missing in the cache or expired it returns null.","tags":null,"title":"ICache","type":"docs","url":"/hugo-docs/node/components/cache/icache/","weight":0,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for caches that are used to cache values to improve performance.\n","dir":"python/components/cache/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620488661,"lvl0":"ICache","lvl1":"Interface for caches that are used to cache values to improve performance.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8373a6e42790e4ebc92987e3bfaad9ca","permalink":"/python/components/cache/icache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/cache/icache/","section":"python","summary":"Description The ICache interface defines methods for caches that are used to cache values, in order to improve performance.\nInstance methods remove Removes a value from the cache by its key.\n remove(correlation_id: Optional[str], key: str)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain. key: str - a unique value key.  retrieve Retrieves cached value from the cache using its key. If value is missing in the cache or expired it returns None.","tags":null,"title":"ICache","type":"docs","url":"/hugo-docs/python/components/cache/icache/","weight":0,"wordcount":176},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that need to store the last modified date and time.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"IChangeable","lvl1":"Interface for data objects that need to store the last modified date and time.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"34f27451aca0c37e01950df122f1854c","permalink":"/node/commons/data/ichangeable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/ichangeable/","section":"node","summary":"Description The IChangeable interface allows you to store the last modified date and time in the \u0026ldquo;change_time\u0026rdquo; parameter of a data object.\nFields change_time The UTC time at which the object was last changed (created or updated).\n public change_time: Date\n Examples export class MyData implements IStringIdentifiable, IChangeable { public id: string; public field1: string; public field2: number; public change_time: Date; ... }  ","tags":null,"title":"IChangeable","type":"docs","url":"/hugo-docs/node/commons/data/ichangeable/","weight":0,"wordcount":62},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that need to store the last modified date and time.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"IChangeable","lvl1":"Interface for data objects that need to store the last modified date and time.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ab3171ba6b9ca690bd2a138546e407b9","permalink":"/python/commons/data/ichangeable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/ichangeable/","section":"python","summary":"Description The IChangeable interface allows you to store the last modified date and time in the \u0026ldquo;change_time\u0026rdquo; parameter of a data object.\nFields change_time The UTC time at which the object was last changed (created or updated).\n change_time: datetime\n Examples class MyData(IStringIdentifiable, IChangeable): id: str = \u0026#39;1234567\u0026#39; field1: str = \u0026#39;field1\u0026#39; field2: int = 123 change_time: datetime = datetime.now()  ","tags":null,"title":"IChangeable","type":"docs","url":"/hugo-docs/python/commons/data/ichangeable/","weight":0,"wordcount":59},{"authors":null,"categories":null,"date":-62135596800,"description":"**TODO: this is not implemented for this language yet**\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623415145,"lvl0":"IChangeable!","lvl1":"**TODO: this is not implemented for this language yet**\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5feddf4969b57018b318e9a9cfac4734","permalink":"/golang/commons/data/ichangeable/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/commons/data/ichangeable/","section":"golang","summary":"","tags":null,"title":"IChangeable!","type":"docs","url":"/hugo-docs/golang/commons/data/ichangeable/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that need to store the last modified date and time.\n\n**TODO: this interface is not realized yet for this language**\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IChangeable!","lvl1":"Interface for data objects that need to store the last modified date and time.\n\n**TODO: this interface is not realized yet for this language**\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8a8e0063049b3273d4fc4ba4ac0c4d41","permalink":"/net/commons/data/ichangeable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/ichangeable/","section":"net","summary":"Description The IChangeable interface allows you to store the last modified date and time in the \u0026ldquo;change_time\u0026rdquo; parameter of a data object.\nFields changeTime The UTC time at which the object was last changed (created or updated).\n public DateTime changeTime\n Examples class MyData: IStringIdentifiable, IChangeable { public string id; public string field1; public int field2; public DateTime changeTime; ... }  ","tags":null,"title":"IChangeable!","type":"docs","url":"/hugo-docs/net/commons/data/ichangeable/","weight":0,"wordcount":60},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with a method to clean their states.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624244794,"lvl0":"ICleanable","lvl1":"Interface that allows you to create components with a method to clean their states.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f383b90fb2f2ce1f0cecdc163f39063c","permalink":"/golang/commons/run/icleanable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/icleanable/","section":"golang","summary":"Description The ICleanable interface allows you to create components with a method to clean their states.\nMethods Clear Clears a component\u0026rsquo;s state.\n Clear(correlationId string) error\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. returns: error - returns error if not cleared  Examples type MyObjectWithState { _state interface{} } ... func (mo * MyObjectWithState ) clear(correlationId string) { mo._state = interface{} } See also   Cleaner   ","tags":null,"title":"ICleanable","type":"docs","url":"/hugo-docs/golang/commons/run/icleanable/","weight":0,"wordcount":70},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with a method to clean their states.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ICleanable","lvl1":"Interface that allows you to create components with a method to clean their states.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3c11255b230b21bdef11d5b9530a77f0","permalink":"/net/commons/run/icleanable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/icleanable/","section":"net","summary":"Description The ICleanable interface allows you to create components with a method to clean their states.\nInstance methods ClearAsync Clears component state.\n Task ClearAsync(string correlationId)\n  correlationId: string - (optional) transaction id to trace execution through call chain.  Examples class MyObjectWithState: ICleanable { var _state = new Object[]{}; ... public void Clear(string correlationId) { this._state = new Object[] { }; } } See also   Cleaner   ","tags":null,"title":"ICleanable","type":"docs","url":"/hugo-docs/net/commons/run/icleanable/","weight":0,"wordcount":64},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with a method to clean their states.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621526520,"lvl0":"ICleanable","lvl1":"Interface that allows you to create components with a method to clean their states.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"be637c2a1de331ceab1ec7679b1996f0","permalink":"/node/commons/run/icleanable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/icleanable/","section":"node","summary":"Description The ICleanable interface allows you to create components with a method to clean their states.\nInstance methods clear Clears component state.\n clear(correlationId: string): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain.  Examples class MyObjectWithState implements ICleanable { private _state: any = {}; ... public async clear(correlationId: string): void { this._state = {}; } } See also   Cleaner   ","tags":null,"title":"ICleanable","type":"docs","url":"/hugo-docs/node/commons/run/icleanable/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with a method to clean their states.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620169406,"lvl0":"ICleanable","lvl1":"Interface that allows you to create components with a method to clean their states.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"40af0caa15af800bbc418a6cba0be754","permalink":"/python/commons/run/icleanable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/icleanable/","section":"python","summary":"Description The ICleanable interface allows you to create components with a method to clean their states.\nInstance methods clear Clears component state.\n clear(correlation_id: Optional[str])\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain.  Examples class MyObjectWithState(ICleanable): _state = {} ... def clear(self, correlation_id): self._state = {} See also   Cleaner   ","tags":null,"title":"ICleanable","type":"docs","url":"/hugo-docs/python/commons/run/icleanable/","weight":0,"wordcount":52},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to create objects with binary clones.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623415145,"lvl0":"ICloneable","lvl1":"Interface to create objects with binary clones.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a2727e7c31b1bfa45dba55dc31e71be4","permalink":"/golang/commons/data/icloneable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/data/icloneable/","section":"golang","summary":"Description The ICloneable interface allows you to create objects with binary clones.\nMethods clone Creates a binary clone of this object.\n Clone() interface{}\n  returns: interface{} - a clone of this object.  Examples type MyStruct struct { ... } func (c MyStruct) Clone() interface{} { cloneObj := new(MyStruct) // Copy every attribute from this to cloneObj here. \t... return cloneObj } ","tags":null,"title":"ICloneable","type":"docs","url":"/hugo-docs/golang/commons/data/icloneable/","weight":0,"wordcount":60},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to create objects with binary clones.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ICloneable","lvl1":"Interface to create objects with binary clones.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9e397fb7076b9bd3ec72f9f8a82aaf04","permalink":"/net/commons/data/icloneable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/icloneable/","section":"net","summary":"Description The ICloneable interface allows you to create objects with binary clones.\nInstance methods Clone Creates a binary clone of this object.\n object Clone()\n  returns: object - a clone of this object.  Examples public class MyClass: IMyClass, ICloneable { MyClass() { }; public object clone() { var cloneObj = new Object(this); // Copy every attribute from this to cloneObj here.  ... return cloneObj; } } ","tags":null,"title":"ICloneable","type":"docs","url":"/hugo-docs/net/commons/data/icloneable/","weight":0,"wordcount":65},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to create objects with binary clones.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ICloneable","lvl1":"Interface to create objects with binary clones.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3425d36ba0c51f62604595399c0f4e92","permalink":"/node/commons/data/icloneable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/icloneable/","section":"node","summary":"Description The ICloneable interface allows you to create objects with binary clones.\nInstance methods clone Creates a binary clone of this object.\n clone(): any\n  returns: any - a clone of this object.  Examples export class MyClass implements IMyClass, ICloneable { constructor() { }; public clone(): any { var cloneObj = new (\u0026lt;any\u0026gt;this.constructor()); // Copy every attribute from this to cloneObj here.  ... return cloneObj; } } ","tags":null,"title":"ICloneable","type":"docs","url":"/hugo-docs/node/commons/data/icloneable/","weight":0,"wordcount":66},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to create objects with binary clones.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620241646,"lvl0":"ICloneable","lvl1":"Interface to create objects with binary clones.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a710bae7290e3b9651bb03e509d4b94c","permalink":"/python/commons/data/icloneable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/icloneable/","section":"python","summary":"Description The ICloneable interface allows you to create objects with binary clones.\nInstance methods clone Creates a binary clone of this object.\n clone(): Any\n  returns: Any - a clone of this object.  Examples class MyClass(IMyClass, ICloneable): def __init__(): ... pass def clone(self): clone_obj = self.__init__() return clone_obj ","tags":null,"title":"ICloneable","type":"docs","url":"/hugo-docs/python/commons/data/icloneable/","weight":0,"wordcount":47},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create a component with a method that closes it and frees the used resources.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624245114,"lvl0":"IClosable","lvl1":"Interface that allows you to create a component with a method that closes it and frees the used resources.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8169d1debe56086f437ae323f2d75e98","permalink":"/golang/commons/run/iclosable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/iclosable/","section":"golang","summary":"Description The IClosable interface allows you to create a component with a method that closes it and frees the used resources.\nMethods Close Closes a component and frees the used resources.\n Close(correlationId string) error\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. returns: error - returns an error if not cleared  Examples type MyConnector { _client interface{} } ... // The _client can be lazy created  func (mc *MyConnector) Close(correlationId: string):error { if (mc.","tags":null,"title":"IClosable","type":"docs","url":"/hugo-docs/golang/commons/run/iclosable/","weight":0,"wordcount":95},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create a component with a method that closes it and frees used resources.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"IClosable","lvl1":"Interface that allows you to create a component with a method that closes it and frees used resources.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ab926cd26529592fcf6a2606f4a0af7e","permalink":"/net/commons/run/iclosable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/iclosable/","section":"net","summary":"Description The IClosable interface allows you to create a component with a method that closes it and frees used resources.\nInstance methods CloseAsync Closes component and frees used resources.\n Task CloseAsync(string correlationId)\n  correlationId: string - (optional) transaction id to trace execution through call chain.  Examples class MyConnector: ICloseable { private object _client = null; ... // The _client can be lazy created  public void Close(string correlationId) { if (this.","tags":null,"title":"IClosable","type":"docs","url":"/hugo-docs/net/commons/run/iclosable/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create a component with a method that closes it and frees used resources.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"IClosable","lvl1":"Interface that allows you to create a component with a method that closes it and frees used resources.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"378abb9431edad3619486385024a4d7a","permalink":"/node/commons/run/iclosable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/iclosable/","section":"node","summary":"Description The IClosable interface allows you to create a component with a method that closes it and frees used resources.\nInstance methods close Closes component and frees used resources.\n close(correlationId: string): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain.  Examples class MyConnector implements ICloseable { private _client: any = null; ... // The _client can be lazy created  public async close(correlationId: string): Promise\u0026lt;void\u0026gt; { if (this.","tags":null,"title":"IClosable","type":"docs","url":"/hugo-docs/node/commons/run/iclosable/","weight":0,"wordcount":85},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create a component with a method that closes it and frees used resources.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"IClosable","lvl1":"Interface that allows you to create a component with a method that closes it and frees used resources.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0e6971b775d09384429c1a18b8f5bb22","permalink":"/python/commons/run/iclosable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/iclosable/","section":"python","summary":"Description The IClosable interface allows you to create a component with a method that closes it and frees used resources.\nInstance methods close Closes a component and frees used resources.\n close(correlation_id: Optional[str])\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain.  Examples class MyConnector(ICloseable): _client = None ... # The _client can be lazy created def close(self, correlation_id): if self._client is not None: self.","tags":null,"title":"IClosable","type":"docs","url":"/hugo-docs/python/commons/run/iclosable/","weight":0,"wordcount":74},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to define Commands.\n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623901324,"lvl0":"ICommand","lvl1":"An interface used to define Commands.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"036c8262545b82282b8f2d4c4931dc53","permalink":"/golang/commons/commands/icommand/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/icommand/","section":"golang","summary":"Implements: IExecutable\nDescription The ICommand interface is used to define Commands. Each command wraps a method or function and allows to call them in a uniform and safe manner.\nMethods Name Gets the command name.\n Name() string\n  returns: string - command name.  Validate Validates command arguments before execution using defined schema.\n Validate(args *run.Parameters) []*validate.ValidationResult\n  args: *run.Parameters - parameters (arguments) to validate. returns: []*validate.ValidationResult - command name.","tags":null,"title":"ICommand","type":"docs","url":"/hugo-docs/golang/commons/commands/icommand/","weight":0,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to define Commands.\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ICommand","lvl1":"An interface used to define Commands.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3943decf9902a14f2281e8565fdf9493","permalink":"/net/commons/commands/icommand/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/commands/icommand/","section":"net","summary":"Inherits: IExecutable\nDescription The ICommand interface is used to define Commands. Each command wraps a method or function and allows to call them in a uniform and safe manner.\nProperties Name Gets the command name.\n public string Name [ get ]\n Schema Gets the command schema.\n public Schema Schema [ get ]\n Instance methods Validate Validates command arguments before execution using defined schema.\n IList\u0026lt;ValidationResult\u0026gt; Validate(args: Parameters)","tags":null,"title":"ICommand","type":"docs","url":"/hugo-docs/net/commons/commands/icommand/","weight":0,"wordcount":86},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to define Commands.\n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"ICommand","lvl1":"An interface used to define Commands.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"53cabf53d875142d11486210aa9651df","permalink":"/node/commons/commands/icommand/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/commands/icommand/","section":"node","summary":"Extends: IExecutable\nDescription The ICommand interface is used to define Commands. Each command wraps a method or function and allows to call them in a uniform and safe manner.\nInstance methods getName Gets the command name.\n getName(): string\n  returns: string - the command name.  validate Validates command arguments before execution using defined schema.\n validate(args: Parameters): ValidationResult[]\n  args: Parameters - the parameters (arguments) to validate.","tags":null,"title":"ICommand","type":"docs","url":"/hugo-docs/node/commons/commands/icommand/","weight":0,"wordcount":76},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to define Commands.\n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620899972,"lvl0":"ICommand","lvl1":"An interface used to define Commands.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e5d396ad35a676017c25a5e43d746cec","permalink":"/python/commons/commands/icommand/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/commands/icommand/","section":"python","summary":"Implements: IExecutable\nDescription The ICommand interface is used to define Commands. Each command wraps a method or function and allows to call them in a uniform and safe manner.\nInstance methods get_name Gets the command name.\n get_name(): str\n  returns: str - the command name.  validate Validates command arguments before execution using a defined schema.\n validate(args: Parameters): List[ValidationResult]\n  args: Parameters - the parameters (arguments) to validate.","tags":null,"title":"ICommand","type":"docs","url":"/hugo-docs/python/commons/commands/icommand/","weight":0,"wordcount":77},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to expose the functionality of commandable objects as commands and events grouped into a [CommandSet](../command_set) object.\n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623961974,"lvl0":"ICommandable","lvl1":"An interface used to expose the functionality of commandable objects as commands and events grouped into a [CommandSet](../command_set) object.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"30aaafb23542750f706ac4217c442088","permalink":"/golang/commons/commands/icommandable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/icommandable/","section":"golang","summary":"Description The ICommandable interface allows you to expose the functionality of commandable objects as commands and events grouped into a CommandSet object.\nImportant points\n This interface is typically implemented by controllers and is used to auto generate external interfaces.  Methods GetCommandSet Gets a command set with all supported commands and events.\n GetCommandSet() *CommandSet\n  returns: CommandSet - command set with commands and events.  Examples type MyDataController { _commandSet CommandSet; } func (dc *MyDataController) getCommandSet() CommandSet { if (dc.","tags":null,"title":"ICommandable","type":"docs","url":"/hugo-docs/golang/commons/commands/icommandable/","weight":0,"wordcount":88},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to expose the functionality of commandable objects as commands and events grouped into a [CommandSet](../command_set) object.\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"ICommandable","lvl1":"An interface used to expose the functionality of commandable objects as commands and events grouped into a [CommandSet](../command_set) object.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"02037e9b7aa68429c2a907a438ae1c8e","permalink":"/net/commons/commands/icommandable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/commands/icommandable/","section":"net","summary":"Description The ICommandable interface allows you to expose the functionality of commandable objects as commands and events grouped into a CommandSet object.\nImportant points\n This interface is typically implemented by controllers and is used to auto generate external interfaces.  Instance methods GetCommandSet Gets a command set with all supported commands and events.\n CommandSet GetCommandSet()\n  returns: CommandSet - a command set with commands and events.  Examples public class MyDataController: ICommandable, IMyDataController { private MyDataCommandSet _commandSet; public CommandSet getCommandSet() { if (this.","tags":null,"title":"ICommandable","type":"docs","url":"/hugo-docs/net/commons/commands/icommandable/","weight":0,"wordcount":94},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to expose the functionality of commandable objects as commands and events grouped into a [CommandSet](../command_set) object.\n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"ICommandable","lvl1":"An interface used to expose the functionality of commandable objects as commands and events grouped into a [CommandSet](../command_set) object.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b40ee2c8ccfcd2f0170454f9d8672e7a","permalink":"/node/commons/commands/icommandable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/commands/icommandable/","section":"node","summary":"Description The ICommandable interface allows you to expose the functionality of commandable objects as commands and events grouped into a CommandSet object.\nImportant points\n This interface is typically implemented by controllers and is used to auto generate external interfaces.  Instance methods getCommandSet Gets a command set with all supported commands and events.\n getCommandSet(): CommandSet\n  returns: CommandSet - a command set with commands and events.  Examples export class MyDataController implements ICommandable, IMyDataController { private _commandSet : MyDataCommandSet; public getCommandSet(): CommandSet { if (this.","tags":null,"title":"ICommandable","type":"docs","url":"/hugo-docs/node/commons/commands/icommandable/","weight":0,"wordcount":96},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to expose the functionality of commandable objects as commands and events grouped into a [CommandSet](../command_set) object.\n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620320996,"lvl0":"ICommandable","lvl1":"An interface used to expose the functionality of commandable objects as commands and events grouped into a [CommandSet](../command_set) object.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9d6336cec9eadfc71344f67f5f36ff9c","permalink":"/python/commons/commands/icommandable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/commands/icommandable/","section":"python","summary":"Description The ICommandable interface allows you to expose the functionality of commandable objects as commands and events grouped into a CommandSet object.\nImportant points\n This interface is typically implemented by controllers and is used to auto generate external interfaces.  Instance methods get_command_set Gets a command set with all supported commands and events.\n get_command_set(): CommandSet\n  returns: CommandSet - a command set with commands and events.  Examples class MyDataController(ICommandable, IMyDataController): _commandSet = None def get_command_set(self): if self.","tags":null,"title":"ICommandable","type":"docs","url":"/hugo-docs/python/commons/commands/icommandable/","weight":0,"wordcount":85},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for stackable command interceptors, which can extend and modify the command call chain.\n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623962141,"lvl0":"ICommandInterceptor","lvl1":"An interface for stackable command interceptors, which can extend and modify the command call chain.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"54e0fc1fa70b468f05107dac4b1db718","permalink":"/golang/commons/commands/icommand_interceptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/commands/icommand_interceptor/","section":"golang","summary":"Description The ICommandInterceptor interface is used for stackable command interceptors, which can extend and modify the command call chain.\nImportant points\n This technique can be used for authentication, logging, and several other functions.  Methods Name Gets the name of the wrapped command.\nThe interceptor can use this method to override the command name. Otherwise it shall just delegate the call to the wrapped command.\n Name(command ICommand) string","tags":null,"title":"ICommandInterceptor","type":"docs","url":"/hugo-docs/golang/commons/commands/icommand_interceptor/","weight":0,"wordcount":241},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for stackable command interceptors, which can extend and modify the command call chain.\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"ICommandInterceptor","lvl1":"An interface for stackable command interceptors, which can extend and modify the command call chain.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aa4041236cc3072b54674cb291042acb","permalink":"/net/commons/commands/icommand_interceptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/commands/icommand_interceptor/","section":"net","summary":"Description The ICommandInterceptor interface is used for stackable command interceptors, which can extend and modify the command call chain.\nImportant points\n This technique can be used for authentiction, logging, and several other functions.  Instance methods GetName Gets the name of the wrapped command.\nThe interceptor can use this method to override the command name. Otherwise it shall just delegate the call to the wrapped command.\n string GetName(ICommand command)","tags":null,"title":"ICommandInterceptor","type":"docs","url":"/hugo-docs/net/commons/commands/icommand_interceptor/","weight":0,"wordcount":247},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for stackable command interceptors, which can extend and modify the command call chain.\n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"ICommandInterceptor","lvl1":"An interface for stackable command interceptors, which can extend and modify the command call chain.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"934c2e8dc013bb757d936f91574b82ad","permalink":"/node/commons/commands/icommand_interceptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/commands/icommand_interceptor/","section":"node","summary":"Description The ICommandInterceptor interface is used for stackable command interceptors, which can extend and modify the command call chain.\nImportant points\n This technique can be used for authentiction, logging, and several other functions.  Instance methods getName Gets the name of the wrapped command.\nThe interceptor can use this method to override the command name. Otherwise it shall just delegate the call to the wrapped command.\n getName(command: ICommand): string","tags":null,"title":"ICommandInterceptor","type":"docs","url":"/hugo-docs/node/commons/commands/icommand_interceptor/","weight":0,"wordcount":246},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for stackable command interceptors, which can extend and modify the command call chain.\n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620900607,"lvl0":"ICommandInterceptor","lvl1":"An interface for stackable command interceptors, which can extend and modify the command call chain.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fd39dd557304a1ac5052cb2be0b4fd6f","permalink":"/python/commons/commands/icommand_interceptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/commands/icommand_interceptor/","section":"python","summary":"Description The ICommandInterceptor interface is used for stackable command interceptors, which can extend and modify the command call chain.\nImportant points\n This technique can be used for authentiction, logging, and several other functions.  Instance methods get_name Gets the name of the wrapped command.\nThe interceptor can use this method to override the command name. Otherwise it shall just delegate the call to the wrapped command.\n get_name(command: ICommand): str","tags":null,"title":"ICommandInterceptor","type":"docs","url":"/hugo-docs/python/commons/commands/icommand_interceptor/","weight":0,"wordcount":247},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for configuration readers that retrieve a configuration from various sources and make it available for other components.\n","dir":"golang/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"IConfigReader","lvl1":"Interface for configuration readers that retrieve a configuration from various sources and make it available for other components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b7a0ad74a4689d3f333ff7a97dcc11d3","permalink":"/golang/components/config/iconfig_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/config/iconfig_reader/","section":"golang","summary":"Description The IConfigReader interface is used in configuration readers that retrieve a configuration from various sources and make it availale for other components.\nImportant points\n Some IConfigReader implementations may support configuration parameterization. The parameterization allows to use configuration as a template and inject there dynamic values. The values may come from application command like arguments or environment variables.  Methods ReadConfig Reads configuration and parameterizes it with given values.","tags":null,"title":"IConfigReader","type":"docs","url":"/hugo-docs/golang/components/config/iconfig_reader/","weight":0,"wordcount":104},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for configuration readers that retrieve a configuration from various sources and make it available for other components.\n","dir":"net/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"IConfigReader","lvl1":"Interface for configuration readers that retrieve a configuration from various sources and make it available for other components.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7ab4508fb494b357b1690e8b6a4e7501","permalink":"/net/components/config/iconfig_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/config/iconfig_reader/","section":"net","summary":"Description The IConfigReader interface is used in configuration readers that retrieve a configuration from various sources and make it availale for other components.\nImportant points\n Some IConfigReader implementations may support configuration parameterization. The parameterization allows to use configuration as a template and inject there dynamic values. The values may come from application command like arguments or environment variables.  Instance methods ReadConfig Reads configuration and parameterizes it with given values.","tags":null,"title":"IConfigReader","type":"docs","url":"/hugo-docs/net/components/config/iconfig_reader/","weight":0,"wordcount":105},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for configuration readers that retrieve a configuration from various sources and make it available for other components.\n","dir":"node/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"IConfigReader","lvl1":"Interface for configuration readers that retrieve a configuration from various sources and make it available for other components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7fe883458c1bd97994452171e746044b","permalink":"/node/components/config/iconfig_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/config/iconfig_reader/","section":"node","summary":"Description The IConfigReader interface is used in configuration readers that retrieve a configuration from various sources and make it availale for other components.\nImportant points\n Some IConfigReader implementations may support configuration parameterization. The parameterization allows to use configuration as a template and inject there dynamic values. The values may come from application command like arguments or environment variables.  Instance methods readConfig Reads configuration and parameterizes it with given values.","tags":null,"title":"IConfigReader","type":"docs","url":"/hugo-docs/node/components/config/iconfig_reader/","weight":0,"wordcount":105},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for configuration readers that retrieve a configuration from various sources and make it available for other components.\n","dir":"python/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"IConfigReader","lvl1":"Interface for configuration readers that retrieve a configuration from various sources and make it available for other components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0f91e72f469b75973f66149a3ff13340","permalink":"/python/components/config/iconfig_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/config/iconfig_reader/","section":"python","summary":"Description The IConfigReader interface is used in configuration readers that retrieve a configuration from various sources and make it availale for other components.\nImportant points\n Some IConfigReader implementations may support configuration parameterization. The parameterization allows to use configuration as a template and inject there dynamic values. The values may come from application command like arguments or environment variables.  Abstract methods _read_config Reads configuration and parameterizes it with given values.","tags":null,"title":"IConfigReader","type":"docs","url":"/hugo-docs/python/components/config/iconfig_reader/","weight":0,"wordcount":105},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to set configuration parameters to an object. \n","dir":"golang/commons/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623176691,"lvl0":"IConfigurable","lvl1":"An interface used to set configuration parameters to an object. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4b1c03facbd8190933c21a5527bdcf0a","permalink":"/golang/commons/config/iconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/config/iconfigurable/","section":"golang","summary":"See also ConfigParams\nDescription IConfigurable is an interface used to set configuration parameters. It can be implemented by any class that needs to define configuration parameters, such as access control credentials.\nImportant points:\n A class that implements this interface needs to implement a single Configure() method. If you need to emphasize the fact that Configure() method can be called multiple times to change object configuration in runtime, use IReconfigurable interface instead.","tags":null,"title":"IConfigurable","type":"docs","url":"/hugo-docs/golang/commons/config/iconfigurable/","weight":0,"wordcount":96},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to set configuration parameters to an object. \n","dir":"net/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IConfigurable","lvl1":"An interface used to set configuration parameters to an object. \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"daab2c2cabfd9e296d63d0b3e33c3f55","permalink":"/net/commons/config/iconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/config/iconfigurable/","section":"net","summary":"See also ConfigParams\nDescription IConfigurable is an interface used to set configuration parameters. It can be implemented by any class that needs to define configuration parameters, such as access control credentials.\nImportant points:\n A class that implements this interface needs to implement a single Configure() method. If you need to emphasize the fact that Configure() method can be called multiple times to change object configuration in runtime, use IReconfigurable interface instead.","tags":null,"title":"IConfigurable","type":"docs","url":"/hugo-docs/net/commons/config/iconfigurable/","weight":0,"wordcount":118},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to set configuration parameters to an object. \n","dir":"node/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"IConfigurable","lvl1":"An interface used to set configuration parameters to an object. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"671fd0909547e068269b2e7fe39197fc","permalink":"/node/commons/config/iconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/config/iconfigurable/","section":"node","summary":"See also ConfigParams\nDescription IConfigurable is an interface used to set configuration parameters. It can be implemented by any class that needs to define configuration parameters, such as access control credentials.\nImportant points:\n A class that implements this interface needs to implement a single configure() method. If you need to emphasize the fact that configure() method can be called multiple times to change object configuration in runtime, use IReconfigurable interface instead.","tags":null,"title":"IConfigurable","type":"docs","url":"/hugo-docs/node/commons/config/iconfigurable/","weight":0,"wordcount":122},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to set configuration parameters to an object. \n","dir":"python/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620915352,"lvl0":"IConfigurable","lvl1":"An interface used to set configuration parameters to an object. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"262ec082994cb5ad634bcaafdb60f9e3","permalink":"/python/commons/config/iconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/config/iconfigurable/","section":"python","summary":"See also ConfigParams\nDescription IConfigurable is an interface used to set configuration parameters. It can be implemented by any class that needs to define configuration parameters, such as access control credentials.\nImportant points:\n A class that implements this interface needs to implement a single configure() method. If you need to emphasize the fact that configure() method can be called multiple times to change object configuration in runtime, use IReconfigurable interface instead.","tags":null,"title":"IConfigurable","type":"docs","url":"/hugo-docs/python/commons/config/iconfigurable/","weight":0,"wordcount":110},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for performance counters that measure execution metrics.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ICounters","lvl1":"Interface for performance counters that measure execution metrics.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"26e50d791b0033968861842f5d8fd68c","permalink":"/golang/components/count/icounters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/count/icounters/","section":"golang","summary":"Description The ICounters interface defines the methods for performance counters that measure execution metrics.\nImportant points\n The performance counters measure how code is performing; that is, how fast or slow is, how many transactions were performed, how many objects were stored, what was the latest transaction time and so on. They are critical to monitor and improve performance, scalability and reliability of code in production.  Methods BeginTiming Begins measurement of execution time interval.","tags":null,"title":"ICounters","type":"docs","url":"/hugo-docs/golang/components/count/icounters/","weight":0,"wordcount":272},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for performance counters that measure execution metrics.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ICounters","lvl1":"Interface for performance counters that measure execution metrics.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"52dbfe3a870b894ba2b25f752299e2ca","permalink":"/net/components/count/icounters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/count/icounters/","section":"net","summary":"Description The ICounters interface defines the methods for performance counters that measure execution metrics.\nImportant points\n The performance counters measure how code is performing; that is, how fast or slow is, how many transactions were performed, how many objects were stored, what was the latest transaction time and so on. They are critical to monitor and improve performance, scalability and reliability of code in production.  Instance methods BeginTiming Begins measurement of execution time interval.","tags":null,"title":"ICounters","type":"docs","url":"/hugo-docs/net/components/count/icounters/","weight":0,"wordcount":279},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for performance counters that measure execution metrics.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"ICounters","lvl1":"Interface for performance counters that measure execution metrics.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"de783a337d8d4a878109713f3c1a290d","permalink":"/node/components/count/icounters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/count/icounters/","section":"node","summary":"Description The ICounters interface defines the methods for performance counters that measure execution metrics.\nImportant points\n The performance counters measure how code is performing; that is, how fast or slow is, how many transactions were performed, how many objects were stored, what was the latest transaction time and so on. They are critical to monitor and improve performance, scalability and reliability of code in production.  Instance methods beginTiming Begins measurement of execution time interval.","tags":null,"title":"ICounters","type":"docs","url":"/hugo-docs/node/components/count/icounters/","weight":0,"wordcount":280},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for performance counters that measure execution metrics.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"ICounters","lvl1":"Interface for performance counters that measure execution metrics.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1de64521fec87ef3674db939104644b8","permalink":"/python/components/count/icounters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/count/icounters/","section":"python","summary":"Description The ICounters interface defines the methods for performance counters that measure execution metrics.\nImportant points\n The performance counters measure how code is performing; that is, how fast or slow is, how many transactions were performed, how many objects were stored, what was the latest transaction time and so on. They are critical to monitor and improve performance, scalability and reliability of code in production.  Instance methods begin_timing Begins measurement of execution time interval.","tags":null,"title":"ICounters","type":"docs","url":"/hugo-docs/python/components/count/icounters/","weight":0,"wordcount":273},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO: add description\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ICountersSaver","lvl1":"TODO: add description\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a5ffe1234b39dbf29ef7d56ce6f52e29","permalink":"/golang/components/count/icounters_saver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/count/icounters_saver/","section":"golang","summary":"Description TODO: add description\nMethods Save TODO: add description\n Save(counters []*Counter) error\n  counters: []*Counter - TODO: add description returns: error - TODO: add description  ","tags":null,"title":"ICountersSaver","type":"docs","url":"/hugo-docs/golang/components/count/icounters_saver/","weight":0,"wordcount":24},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for a callback to end the measurement of the execution elapsed time.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ICounterTimingCallback","lvl1":"Interface for a callback to end the measurement of the execution elapsed time.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"80aab35b3647c7d36642d46d5726a29b","permalink":"/golang/components/count/icounter_timing_callback/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/count/icounter_timing_callback/","section":"golang","summary":"Description The ICounterTimingCallback interface defines the method used for a callback to end the measurement of the execution elapsed time.\nMethods EndTiming Ends measurement of execution elapsed time and updates specified counter. See also CounterTiming.EndTiming\n EndTiming(name string, elapsed float32)\n  name: string - a counter name elapsed: float32 - execution elapsed time in milliseconds to update the counter.  ","tags":null,"title":"ICounterTimingCallback","type":"docs","url":"/hugo-docs/golang/components/count/icounter_timing_callback/","weight":0,"wordcount":57},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for a callback to end the measurement of the execution elapsed time.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ICounterTimingCallback","lvl1":"Interface for a callback to end the measurement of the execution elapsed time.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"09125daa8aee1c4c72f66623e5689e2d","permalink":"/net/components/count/icounter_timing_callback/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/count/icounter_timing_callback/","section":"net","summary":"Description The ICounterTimingCallback interface defines the method used for a callback to end the measurement of the execution elapsed time.\nInstance methods EndTiming Ends measurement of execution elapsed time and updates specified counter. See also CounterTiming.EndTiming\n void EndTiming(string name, double elapsed)\n  name: string - a counter name elapsed: double - execution elapsed time in milliseconds to update the counter.  ","tags":null,"title":"ICounterTimingCallback","type":"docs","url":"/hugo-docs/net/components/count/icounter_timing_callback/","weight":0,"wordcount":59},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for a callback to end the measurement of the execution elapsed time.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"ICounterTimingCallback","lvl1":"Interface for a callback to end the measurement of the execution elapsed time.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dca7ae947358f7c3e8296ea9c15bd42a","permalink":"/node/components/count/icounter_timing_callback/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/count/icounter_timing_callback/","section":"node","summary":"Description The ICounterTimingCallback interface defines the method used for a callback to end the measurement of the execution elapsed time.\nInstance methods endTiming Ends measurement of execution elapsed time and updates specified counter. See also CounterTiming.endTiming\n endTiming(name: string, elapsed: number): void\n  name: string - a counter name elapsed: number - execution elapsed time in milliseconds to update the counter.  ","tags":null,"title":"ICounterTimingCallback","type":"docs","url":"/hugo-docs/node/components/count/icounter_timing_callback/","weight":0,"wordcount":59},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for a callback to end the measurement of the execution elapsed time.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620660543,"lvl0":"ICounterTimingCallback","lvl1":"Interface for a callback to end the measurement of the execution elapsed time.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9102aee2938f786cfdc9c9d3d633e2e9","permalink":"/python/components/count/icounter_timing_callback/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/count/icounter_timing_callback/","section":"python","summary":"Description The ICounterTimingCallback interface defines the method used for a callback to end the measurement of the execution elapsed time.\nInstance methods end_timing Ends measurement of execution elapsed time and updates specified counter. See also CounterTiming.end_timing\n end_timing(name: str, elapsed: float)\n  name: str - a counter name elapsed: float - execution elapsed time in milliseconds to update the counter.  ","tags":null,"title":"ICounterTimingCallback","type":"docs","url":"/hugo-docs/python/components/count/icounter_timing_callback/","weight":0,"wordcount":58},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\n","dir":"golang/components/auth/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"ICredentialStore","lvl1":"Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0045bf8240ffda733a5688dda3e1d321","permalink":"/golang/components/auth/icredential_store/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/auth/icredential_store/","section":"golang","summary":"Description The ICredentialStore interface is used to store and look up credentials used to authenticate against external services.\nMethods Lookup Lookups credential parameters by its key.\n Lookup(correlationId string, key string) (*CredentialParams, error)\n  correlationId: string - (optional) transaction id to trace execution through call chain. key: string - a key to uniquely identify the credential. returns: (*CredentialParams, error) - found credential parameters or nil if nothing was found.  Store Stores credential parameters into the store.","tags":null,"title":"ICredentialStore","type":"docs","url":"/hugo-docs/golang/components/auth/icredential_store/","weight":0,"wordcount":123},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\n","dir":"net/components/auth/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ICredentialStore","lvl1":"Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5bc90e964608deef793cc84766908d50","permalink":"/net/components/auth/icredential_store/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/auth/icredential_store/","section":"net","summary":"Inherits: Factory\nDescription The ICredentialStore interface is used to store and look up credentials used to authenticate against external services.\nInstance methods LookupAsync Lookups credential parameters by its key.\n Task\u0026lt;CredentialParams\u0026gt; LookupAsync(string correlationId, stringkey)\n  correlationId: string - (optional) transaction id to trace execution through call chain. key: string - a key to uniquely identify the credential. returns: Task\u0026lt;CredentialParams\u0026gt; - found credential parameters or null if nothing was found.  StoreAsync Stores credential parameters into the store.","tags":null,"title":"ICredentialStore","type":"docs","url":"/hugo-docs/net/components/auth/icredential_store/","weight":0,"wordcount":115},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\n","dir":"node/components/auth/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ICredentialStore","lvl1":"Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a9197b5a9134e4b303e3277ffa08dada","permalink":"/node/components/auth/icredential_store/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/auth/icredential_store/","section":"node","summary":"Implements: Factory\nDescription The ICredentialStore interface is used to store and look up credentials used to authenticate against external services.\nInstance methods lookup Lookups credential parameters by its key.\n lookup(correlationId: string, key: string): Promise\u0026lt;CredentialParams\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain. key: string - a key to uniquely identify the credential. returns: Promise\u0026lt;CredentialParams\u0026gt; - found credential parameters or null if nothing was found.","tags":null,"title":"ICredentialStore","type":"docs","url":"/hugo-docs/node/components/auth/icredential_store/","weight":0,"wordcount":116},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\n","dir":"python/components/auth/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"ICredentialStore","lvl1":"Interface for credential stores which are used to store and lookup credentials to authenticate against external services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"10a552c9edd9f3d87b7d06b1c945c8b2","permalink":"/python/components/auth/icredential_store/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/auth/icredential_store/","section":"python","summary":"Implements: Factory\nDescription The ICredentialStore interface is used to store and look up credentials used to authenticate against external services.\nInstance methods lookup Lookups credential parameters by its key.\n lookup(correlation_id: Optional[str], key: str): CredentialParams\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain. key: str - a key to uniquely identify the credential. returns: CredentialParams - found credential parameters or None if nothing was found.","tags":null,"title":"ICredentialStore","type":"docs","url":"/hugo-docs/python/components/auth/icredential_store/","weight":0,"wordcount":115},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in flat files and implements a number of CRUD operations over data items with unique ids. \n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IdentifiableFilePersistence","lvl1":"Abstract persistence component that stores data in flat files and implements a number of CRUD operations over data items with unique ids. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a3404fb7e70457ab20c2670139c4ba40","permalink":"/golang/data/persistence/identifiable_file_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/data/persistence/identifiable_file_persistence/","section":"golang","summary":"Implements: IdentifiableMemoryPersistence\nDescription The IdentifiableFilePersistence class allows you to create persistence components that store data in flat files and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override GetPageByFilter, GetListByFilter or DeleteByFilter operations with a specific filter function. All other operations can be used out of the box. In complex scenarios child classes can implement additional operations by accessing cached items via the self.","tags":null,"title":"IdentifiableFilePersistence","type":"docs","url":"/hugo-docs/golang/data/persistence/identifiable_file_persistence/","weight":0,"wordcount":347},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in flat files and implements a number of CRUD operations over data items with unique ids. \n","dir":"node/data/persistence/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IdentifiableFilePersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","lvl1":"Abstract persistence component that stores data in flat files and implements a number of CRUD operations over data items with unique ids. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"155942fbe3ef64a3ba7789378f7a15ec","permalink":"/node/data/persistence/identifiable_file_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/data/persistence/identifiable_file_persistence/","section":"node","summary":"Extends: IdentifiableMemoryPersistence\u0026lt;T, K\u0026gt;\nDescription The IdentifiableFilePersistence class allows you to create persistence components that store data in flat files and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override getPageByFilter, getListByFilter or deleteByFilter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableFilePersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","type":"docs","url":"/hugo-docs/node/data/persistence/identifiable_file_persistence/","weight":0,"wordcount":292},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in flat files and implements a number of CRUD operations over data items with unique ids. \n","dir":"python/data/persistence/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IdentifiableFilePersistence","lvl1":"Abstract persistence component that stores data in flat files and implements a number of CRUD operations over data items with unique ids. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"29cd90e585c1b32dee44ef0e21eeaad4","permalink":"/python/data/persistence/identifiable_file_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/data/persistence/identifiable_file_persistence/","section":"python","summary":"Implements: IdentifiableMemoryPersistence, iidentifiable\nDescription The IdentifiableFilePersistence class allows you to create persistence components that store data in flat files and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override get_page_by_filter, get_list_by_filter or delete_by_filter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableFilePersistence","type":"docs","url":"/hugo-docs/python/data/persistence/identifiable_file_persistence/","weight":0,"wordcount":220},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in MySQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","dir":"node/mysql/persistence/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"IdentifiableJsonMySqlPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","lvl1":"Abstract persistence component that stores data in MySQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"297ddee771165610ffb712ec06a180f7","permalink":"/node/mysql/persistence/identifiable_json_mysql_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/mysql/persistence/identifiable_json_mysql_persistence/","section":"node","summary":"Extends: IdentifiableMySqlPersistence\u0026lt;T, K\u0026gt;\nDescription The IdentifiableJsonMySqlPersistence class allows you to create persistence components that store data in JSON or JSONB fields and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The JSON table has only two fields: id and data. In basic scenarios child classes shall only override getPageByFilter, getListByFilter or deleteByFilter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableJsonMySqlPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","type":"docs","url":"/hugo-docs/node/mysql/persistence/identifiable_json_mysql_persistence/","weight":0,"wordcount":527},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in MySQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","dir":"python/mysql/persistence/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622674545,"lvl0":"IdentifiableJsonMySqlPersistence","lvl1":"Abstract persistence component that stores data in MySQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5c4a44916752c661d007c0131e4fa8fa","permalink":"/python/mysql/persistence/identifiable_json_mysql_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/mysql/persistence/identifiable_json_mysql_persistence/","section":"python","summary":"Implements: IdentifiableMySqlPersistence, IIdentifiable\nDescription The IdentifiableJsonMySqlPersistence class allows you to create persistence components that store data in JSON or JSONB fields and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The JSON table has only two fields: id and data. In basic scenarios child classes shall only override get_page_by_filter, get_list_by_filter or delete_by_filter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableJsonMySqlPersistence","type":"docs","url":"/hugo-docs/python/mysql/persistence/identifiable_json_mysql_persistence/","weight":0,"wordcount":470},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in PostgreSQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","dir":"node/postgres/persistence/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1622674545,"lvl0":"IdentifiableJsonPostgresPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","lvl1":"Abstract persistence component that stores data in PostgreSQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d39842b0003fa93fc7fe11b05a047148","permalink":"/node/postgres/persistence/identifiable_json_postgres_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/postgres/persistence/identifiable_json_postgres_persistence/","section":"node","summary":"Extends: IdentifiablePostgresPersistence\u0026lt;T, K\u0026gt;,\nDescription The IdentifiableJsonPostgresPersistence class allows you to create persistence components used to store data in PosgreSQL databases in JSON or JSONB fields and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override the getPageByFilter, getListByFilter or deleteByFilter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableJsonPostgresPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","type":"docs","url":"/hugo-docs/node/postgres/persistence/identifiable_json_postgres_persistence/","weight":0,"wordcount":519},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in PostgreSQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","dir":"python/postgres/persistence/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"IdentifiableJsonPostgresPersistence","lvl1":"Abstract persistence component that stores data in PostgreSQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"254323f8214712838d3c8263b68a69cd","permalink":"/python/postgres/persistence/identifiable_json_postgres_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/postgres/persistence/identifiable_json_postgres_persistence/","section":"python","summary":"Implements: IdentifiablePostgresPersistence, IIdentifiable\nDescription The IdentifiableJsonPostgresPersistence class allows you to create persistence components used to store data in PosgreSQL databases in JSON or JSONB fields and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override the get_page_by_filter, get_list_by_filter or delete_by_filter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableJsonPostgresPersistence","type":"docs","url":"/hugo-docs/python/postgres/persistence/identifiable_json_postgres_persistence/","weight":0,"wordcount":481},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in SQLServer in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","dir":"node/sqlserver/persistence/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"IdentifiableJsonSqlServerPersistence","lvl1":"Abstract persistence component that stores data in SQLServer in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"60fcd6b1afd63492cc8df87d8cdb2adf","permalink":"/node/sqlserver/persistence/identifiable_json_sqlserver_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/sqlserver/persistence/identifiable_json_sqlserver_persistence/","section":"node","summary":"Implements: IdentifiableSqlServerPersistence, IIdentifiable\nDescription The IdentifiableJsonSqlServerPersistence class allows you to create persistence components that store data in an SQLServer database in JSON or JSONB fields and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override getPageByFilter, getListByFilter or deleteByFilter operations with an specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableJsonSqlServerPersistence","type":"docs","url":"/hugo-docs/node/sqlserver/persistence/identifiable_json_sqlserver_persistence/","weight":0,"wordcount":542},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in SQLServer in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","dir":"python/sqlserver/persistence/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"IdentifiableJsonSqlServerPersistence","lvl1":"Abstract persistence component that stores data in SQLServer in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f36df02c24a6f2f4d4c7703a61d2b1fb","permalink":"/python/sqlserver/persistence/identifiable_json_sqlserver_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/sqlserver/persistence/identifiable_json_sqlserver_persistence/","section":"python","summary":"Implements: IdentifiableSqlServerPersistence, IIdentifiable\nDescription The IdentifiableJsonSqlServerPersistence class allows you to create persistence components that store data in an SQLServer database in JSON or JSONB fields and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override get_page_by_filter, get_list_by_filter or delete_by_filter operations with an specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableJsonSqlServerPersistence","type":"docs","url":"/hugo-docs/python/sqlserver/persistence/identifiable_json_sqlserver_persistence/","weight":0,"wordcount":504},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in memory and implements a number of CRUD operations over data items with unique ids.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IdentifiableMemoryPersistence","lvl1":"Abstract persistence component that stores data in memory and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e74ba830ec0951b874d2df6994a02fd2","permalink":"/golang/data/persistence/identifiable_memory_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/data/persistence/identifiable_memory_persistence/","section":"golang","summary":"Implements: MemoryPersistence\nDescription The IdentifiableMemoryPersistence class allows you to create persistence components that store data in memory and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement IIdentifiable. In basic scenarios child classes shall only override GetPageByFilter, GetListByFilter or DeleteByFilter operations with a specific filter function. All other operations can be used out of the box. In complex scenarios child classes can implement additional operations by accessing cached items via the this.","tags":null,"title":"IdentifiableMemoryPersistence","type":"docs","url":"/hugo-docs/golang/data/persistence/identifiable_memory_persistence/","weight":0,"wordcount":715},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in memory and implements a number of CRUD operations over data items with unique ids.\n","dir":"node/data/persistence/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1622675703,"lvl0":"IdentifiableMemoryPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","lvl1":"Abstract persistence component that stores data in memory and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4f119e7050c55e5d19072b95b590928b","permalink":"/node/data/persistence/identifiable_memory_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/data/persistence/identifiable_memory_persistence/","section":"node","summary":"Extends: MemoryPersistence\nImplements: IWriter, IGetter, ISetter\nDescription The IdentifiableMemoryPersistence class allows you to create persistence components that store data in memory and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement IIdentifiable. In basic scenarios child classes shall only override getPageByFilter, getListByFilter or deleteByFilter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableMemoryPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","type":"docs","url":"/hugo-docs/node/data/persistence/identifiable_memory_persistence/","weight":0,"wordcount":632},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in memory and implements a number of CRUD operations over data items with unique ids.\n","dir":"python/data/persistence/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"IdentifiableMemoryPersistence","lvl1":"Abstract persistence component that stores data in memory and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"936be0742b7c81a2d2fd2b5193165d5e","permalink":"/python/data/persistence/identifiable_memory_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/data/persistence/identifiable_memory_persistence/","section":"python","summary":"Implements: MemoryPersistence, IWriter, IGetter, ISetter, iidentifiable\nDescription The IdentifiableMemoryPersistence class allows you to create persistence components that store data in memory and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement IIdentifiable. In basic scenarios child classes shall only override get_page_by_filter, get_list_by_filter or delete_by_filter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableMemoryPersistence","type":"docs","url":"/hugo-docs/python/data/persistence/identifiable_memory_persistence/","weight":0,"wordcount":557},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in MongoDB and implements a number of CRUD operations over data items with unique ids.\n","dir":"python/mongodb/persistence/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"IdentifiableMongoDbPersistence","lvl1":"Abstract persistence component that stores data in MongoDB and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6bae8657822077563181666a87707e5a","permalink":"/python/mongodb/persistence/identifiable_mongodb_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/mongodb/persistence/identifiable_mongodb_persistence/","section":"python","summary":"Implements: MongoDbPersistence, IIdentifiable\nDescription The IdentifiableMongoDbPersistence class allows you to create persistance components that store data in MongoDB databases and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override get_page_by_filter, get_list_by_filter or delete_by_filter operations with specific filter functions. All other operations can be used out of the box. In complex scenarios child classes can implement additional operations by accessing self.","tags":null,"title":"IdentifiableMongoDbPersistence","type":"docs","url":"/hugo-docs/python/mongodb/persistence/identifiable_mongodb_persistence/","weight":0,"wordcount":693},{"authors":null,"categories":null,"date":-62135596800,"description":"\nAbstract persistence component that stores data in MySQL and implements a number of CRUD operations over data items with unique ids.\n","dir":"node/mysql/persistence/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"IdentifiableMySqlPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","lvl1":"\nAbstract persistence component that stores data in MySQL and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3c00f662090fc170f19fe3f567b6c568","permalink":"/node/mysql/persistence/identifiable_mysql_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/mysql/persistence/identifiable_mysql_persistence/","section":"node","summary":"Extends: MySqlPersistence\nDescription The IdentifiableMySqlPersistence class allows you to create persistence components that store data in MySQL databases and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios, child classes shall only override getPageByFilter, getListByFilter or deleteByFilter operations with the specific filter function. All other operations can be used out of the box. In complex scenarios child classes can implement additional operations by accessing the this.","tags":null,"title":"IdentifiableMySqlPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","type":"docs","url":"/hugo-docs/node/mysql/persistence/identifiable_mysql_persistence/","weight":0,"wordcount":763},{"authors":null,"categories":null,"date":-62135596800,"description":"\nAbstract persistence component that stores data in MySQL and implements a number of CRUD operations over data items with unique ids.\n","dir":"python/mysql/persistence/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"IdentifiableMySqlPersistence","lvl1":"\nAbstract persistence component that stores data in MySQL and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8bdc152a9c0f7f37333cf2ff46a254fe","permalink":"/python/mysql/persistence/identifiable_mysql_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/mysql/persistence/identifiable_mysql_persistence/","section":"python","summary":"Implements: MySqlPersistence, IIdentifiable\nDescription The IdentifiableMySqlPersistence class allows you to create persistence components that store data in MySQL databases and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios, child classes shall only override get_page_by_filter, get_list_by_filter or delete_by_filter operations with the specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableMySqlPersistence","type":"docs","url":"/hugo-docs/python/mysql/persistence/identifiable_mysql_persistence/","weight":0,"wordcount":701},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in PostgreSQL and implements a number of CRUD operations over data items with unique ids.\n","dir":"node/postgres/persistence/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1622674545,"lvl0":"IdentifiablePostgresPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","lvl1":"Abstract persistence component that stores data in PostgreSQL and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b3c21c70d70e3a6e1bb7dd81141af44a","permalink":"/node/postgres/persistence/identifiable_postgres_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/postgres/persistence/identifiable_postgres_persistence/","section":"node","summary":"Extends: PostgresPersistence\nDescription The IdentifiablePostgresPersistence class allows you to create persistence components that store data in PostgreSQL databases and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override the getPageByFilter, getListByFilter or deleteByFilter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiablePostgresPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","type":"docs","url":"/hugo-docs/node/postgres/persistence/identifiable_postgres_persistence/","weight":0,"wordcount":741},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in PostgreSQL and implements a number of CRUD operations over data items with unique ids.\n","dir":"python/postgres/persistence/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1622674545,"lvl0":"IdentifiablePostgresPersistence","lvl1":"Abstract persistence component that stores data in PostgreSQL and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"79320b64b94795f9d545168fb0034be8","permalink":"/python/postgres/persistence/identifiable_postgres_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/postgres/persistence/identifiable_postgres_persistence/","section":"python","summary":"Implements: PostgresPersistence, IIdentifiable\nDescription The IdentifiablePostgresPersistence class allows you to create persistence components that store data in PostgreSQL databases and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override the get_page_by_filter, get_list_by_filter or delete_by_filter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiablePostgresPersistence","type":"docs","url":"/hugo-docs/python/postgres/persistence/identifiable_postgres_persistence/","weight":0,"wordcount":702},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in SQLServer and implements a number of CRUD operations over data items with unique ids.\n","dir":"node/sqlserver/persistence/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"IdentifiableSqlServerPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","lvl1":"Abstract persistence component that stores data in SQLServer and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eee07203aa528f99d1517450c307df63","permalink":"/node/sqlserver/persistence/identifiable_postgres_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/sqlserver/persistence/identifiable_postgres_persistence/","section":"node","summary":"Extends: SqlServerPersistence\nDescription The IdentifiableSqlServerPersistence class allows you to create persistence components that store data in SQLServer databases and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override getPageByFilter, getListByFilter or deleteByFilter operations with a specific filter function. All other operations can be used out of the box. In complex scenarios child classes can implement additional operations by accessing this.","tags":null,"title":"IdentifiableSqlServerPersistence\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","type":"docs","url":"/hugo-docs/node/sqlserver/persistence/identifiable_postgres_persistence/","weight":0,"wordcount":738},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in SQLServer and implements a number of CRUD operations over data items with unique ids.\n","dir":"python/sqlserver/persistence/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"IdentifiableSqlServerPersistence","lvl1":"Abstract persistence component that stores data in SQLServer and implements a number of CRUD operations over data items with unique ids.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"27f54fd134235bdc3bcab90911c22dee","permalink":"/python/sqlserver/persistence/identifiable_sqlserver_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/sqlserver/persistence/identifiable_sqlserver_persistence/","section":"python","summary":"Implements: SqlServerPersistence, IIdentifiable\nDescription The IdentifiableSqlServerPersistence class allows you to create persistence components that store data in SQLServer databases and implement a number of CRUD operations over data items with unique ids.\nImportant points\n The data items must implement the IIdentifiable interface. In basic scenarios child classes shall only override get_page_by_filter, get_list_by_filter or delete_by_filter operations with a specific filter function. All other operations can be used out of the box.","tags":null,"title":"IdentifiableSqlServerPersistence","type":"docs","url":"/hugo-docs/python/sqlserver/persistence/identifiable_sqlserver_persistence/","weight":0,"wordcount":697},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to generate object IDs.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624071505,"lvl0":"IdGenerator","lvl1":"Helper class used to generate object IDs.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ee6d3ec26580fcf31c0f6bec2095c860","permalink":"/golang/commons/data/id_generator/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/data/id_generator/","section":"golang","summary":"Description The IdGenerator class allows you to generate IDs for objects.\nImportant points\n It supports two types of IDs: short and long. ShortIDs are 9-digit random numbers. They are not guaranteed be unique. Long IDs are string GUIDs. They are globally unique and 32-character long.  Methods NextLong Generates a globally unique 32-digit object ID. The value is a string representation of a GUID value.\n (c *TIdGenerator) NextLong() string","tags":null,"title":"IdGenerator","type":"docs","url":"/hugo-docs/golang/commons/data/id_generator/","weight":0,"wordcount":116},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to generate object IDs.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IdGenerator","lvl1":"Helper class used to generate object IDs.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"19bce2de4445b5a1e50f6ac157a454bb","permalink":"/net/commons/data/id_generator/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/id_generator/","section":"net","summary":"Description The IdGenerator class allows you to generate IDs for objects.\nImportant points\n It supports two types of IDs: short and long. ShortIDs are 9-digit random numbers. They are not guaranteed be unique. Long IDs are string GUIDs. They are globally unique and 32-character long.  Static methods NextLong Generates a globally unique 32-digit object ID. The value is a string representation of a GUID value.\n public static string NextLong()","tags":null,"title":"IdGenerator","type":"docs","url":"/hugo-docs/net/commons/data/id_generator/","weight":0,"wordcount":118},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to generate object IDs.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"IdGenerator","lvl1":"Helper class used to generate object IDs.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c9de6c006ee1f7d05868a0ba434a7875","permalink":"/node/commons/data/id_generator/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/id_generator/","section":"node","summary":"Description The IdGenerator class allows you to generate IDs for objects.\nImportant points\n It supports two types of IDs: short and long. ShortIDs are 9-digit random numbers. They are not guaranteed be unique. Long IDs are string GUIDs. They are globally unique and 32-character long.  Static methods nextLong Generates a globally unique 32-digit object ID. The value is a string representation of a GUID value.\n public static nextLong(): string","tags":null,"title":"IdGenerator","type":"docs","url":"/hugo-docs/node/commons/data/id_generator/","weight":0,"wordcount":118},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to generate object IDs.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620242241,"lvl0":"IdGenerator","lvl1":"Helper class used to generate object IDs.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7bb1093fe17d1384956982ee8cde9604","permalink":"/python/commons/data/id_generator/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/id_generator/","section":"python","summary":"Description The IdGenerator class allows you to generate IDs for objects.\nImportant points\n It supports two types of IDs: short and long. ShortIDs are 9-digit random numbers. They are not guaranteed be unique. Long IDs are string GUIDs. They are globally unique and 32-character long.  Static methods next_long Generates a globally unique 32-digit object ID. The value is a string representation of a GUID value.\n static next_long(): str","tags":null,"title":"IdGenerator","type":"docs","url":"/hugo-docs/python/commons/data/id_generator/","weight":0,"wordcount":116},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for discovery services which are used to store and resolve connection parameters to connect to external services.\n","dir":"golang/components/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"IDiscovery","lvl1":"Interface for discovery services which are used to store and resolve connection parameters to connect to external services.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e3f31db29405626eebbea39d5251b1d6","permalink":"/golang/components/connect/idiscovery/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/connect/idiscovery/","section":"golang","summary":"Description The IDiscovery interface is used to create discovery services which are used to store and resolve connection parameters used to connect to external services.\nMethods Register Registers connection parameters into the discovery service.\n Register(correlationId string, key string, connection *ConnectionParams) (result *ConnectionParams, err error)\n  correlationId: string - (optional) transaction id to trace execution through call chain. key: string - a key to uniquely identify the connection parameters. connection: *ConnectionParams - a connection to be registered.","tags":null,"title":"IDiscovery","type":"docs","url":"/hugo-docs/golang/components/connect/idiscovery/","weight":0,"wordcount":183},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for discovery services which are used to store and resolve connection parameters to connect to external services.\n","dir":"net/components/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"IDiscovery","lvl1":"Interface for discovery services which are used to store and resolve connection parameters to connect to external services.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3d93b58c963e224fe301b804379ac0e6","permalink":"/net/components/connect/idiscovery/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/connect/idiscovery/","section":"net","summary":"Description The IDiscovery interface is used to create discovery services which are used to store and resolve connection parameters used to connect to external services.\nInstance methods RegisterAsync Registers connection parameters into the discovery service.\n Task\u0026lt;ConnectionParams\u0026gt; RegisterAsync(string correlationId, string key, ConnectionParams connection)\n  correlationId: string - (optional) transaction id to trace execution through call chain. key: string - a key to uniquely identify the connection parameters. connection: ConnectionParams - a connection to be registered.","tags":null,"title":"IDiscovery","type":"docs","url":"/hugo-docs/net/components/connect/idiscovery/","weight":0,"wordcount":166},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for discovery services which are used to store and resolve connection parameters to connect to external services.\n","dir":"node/components/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"IDiscovery","lvl1":"Interface for discovery services which are used to store and resolve connection parameters to connect to external services.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c6f38044c66ba20e54a0019d8c2288b8","permalink":"/node/components/connect/idiscovery/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/connect/idiscovery/","section":"node","summary":"Description The IDiscovery interface is used to create discovery services which are used to store and resolve connection parameters used to connect to external services.\nInstance methods register Registers connection parameters into the discovery service.\n register(correlationId: string, key: string, connection: ConnectionParams): Promise\u0026lt;ConnectionParams\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain. key: string - a key to uniquely identify the connection parameters. connection: ConnectionParams - a connection to be registered.","tags":null,"title":"IDiscovery","type":"docs","url":"/hugo-docs/node/components/connect/idiscovery/","weight":0,"wordcount":166},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for discovery services which are used to store and resolve connection parameters to connect to external services.\n","dir":"python/components/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621097243,"lvl0":"IDiscovery","lvl1":"Interface for discovery services which are used to store and resolve connection parameters to connect to external services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"46df791766d5feee945ecb86880a813e","permalink":"/python/components/connect/idiscovery/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/connect/idiscovery/","section":"python","summary":"Description The IDiscovery interface is used to create discovery services which are used to store and resolve connection parameters used to connect to external services.\nInstance methods register Registers connection parameters into the discovery service.\n register(correlation_id: Optional[str], key: str, connection: ConnectionParams): ConnectionParams\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain. key: str - a key to uniquely identify the connection parameters. connection: ConnectionParams - a connection to be registered.","tags":null,"title":"IDiscovery","type":"docs","url":"/hugo-docs/python/components/connect/idiscovery/","weight":0,"wordcount":166},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for those classes that need an equal method.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624073633,"lvl0":"IEquatable","lvl1":"Interface for those classes that need an equal method.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4d34b72cbaa8cfc9e0257d80c31ffb19","permalink":"/golang/commons/data/iequatable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/data/iequatable/","section":"golang","summary":"Description The IEquatable interface is used by those classes that need an equal method.\nMethods Equals Method used to compare two values. Returns true if these values are equal, and false otherwise.\n Equals(value interface{}) bool\n  value: interface{} - value to compare returns: bool - boolean result of the evaluation  ","tags":null,"title":"IEquatable","type":"docs","url":"/hugo-docs/golang/commons/data/iequatable/","weight":0,"wordcount":49},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for Events that can send asynchronious notifications to multiple subscribed listeners.\n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623963945,"lvl0":"IEvent","lvl1":"An interface for Events that can send asynchronious notifications to multiple subscribed listeners.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c74c687859946e1dacb2b94270721d12","permalink":"/golang/commons/commands/ievent/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/ievent/","section":"golang","summary":"Implements: INotifiable\nDescription The IEvent interface allows you to define events that can send asynchronous notifications to multiple subscribed listeners.\nMethods Name Gets the event\u0026rsquo;s name.\n Name() string\n  returns: string - name of the event.  getListeners Gets all subscribed listeners.\n Listeners() []IEventListener\n  returns: []IEventListener - list of listeners.  AddListener Adds a listener to receive notifications for this event.\n AddListener(listener IEventListener)\n  listener: IEventListener - listener reference to add.","tags":null,"title":"IEvent","type":"docs","url":"/hugo-docs/golang/commons/commands/ievent/","weight":0,"wordcount":93},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for Events that can send asynchronious notifications to multiple subscribed listeners.\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"IEvent","lvl1":"An interface for Events that can send asynchronious notifications to multiple subscribed listeners.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8a0f4c8d91fdffb224c026c6c312bc65","permalink":"/net/commons/commands/ievent/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/commands/ievent/","section":"net","summary":"Inherits: INotifiable\nDescription The IEvent interface allows you to define events that can send asynchronous notifications to multiple subscribed listeners.\nProperties Name Gets the name of the event.\n public string Name [ get ]\n Listeners Gets all listeners registered in this event.\n public List\u0026lt;IEventListener\u0026gt; Listeners [ get ]\n Instance methods AddListener Adds a listener to receive notifications for this event.\n void AddListener(IEventListener listener)\n  listener: IEventListener - the listener reference to add.","tags":null,"title":"IEvent","type":"docs","url":"/hugo-docs/net/commons/commands/ievent/","weight":0,"wordcount":99},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for Events that can send asynchronious notifications to multiple subscribed listeners.\n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"IEvent","lvl1":"An interface for Events that can send asynchronious notifications to multiple subscribed listeners.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f392950a13fb81a81114d1cc3aaa09aa","permalink":"/node/commons/commands/ievent/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/commands/ievent/","section":"node","summary":"Extends: INotifiable\nDescription The IEvent interface allows you to define events that can send asynchronous notifications to multiple subscribed listeners.\nInstance methods getName Gets the event name.\n getName(): string\n  returns: string - the name of the event.  getListeners Gets all subscribed listeners.\n getListeners(): IEventListener[]\n  returns: IEventListener[] - a list of listeners.  addListener Adds a listener to receive notifications for this event.\n addListener(listener: IEventListener): void","tags":null,"title":"IEvent","type":"docs","url":"/hugo-docs/node/commons/commands/ievent/","weight":0,"wordcount":100},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for Events that can send asynchronious notifications to multiple subscribed listeners.\n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620321926,"lvl0":"IEvent","lvl1":"An interface for Events that can send asynchronious notifications to multiple subscribed listeners.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2086a29d224274a1eb862307595958eb","permalink":"/python/commons/commands/ievent/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/commands/ievent/","section":"python","summary":"Implements: INotifiable\nDescription The IEvent interface allows you to define events that can send asynchronous notifications to multiple subscribed listeners.\nInstance methods get_name Gets the event name.\n get_name(): str\n  returns: str - the name of the event.  get_listeners Gets all subscribed listeners.\n get_listeners(): List[IEventListener]\n  returns: List[IEventListener] - a list of listeners.  add_listener Adds a listener to receive notifications for this event.\n add_listener(listener: IEventListener)","tags":null,"title":"IEvent","type":"docs","url":"/hugo-docs/python/commons/commands/ievent/","weight":0,"wordcount":98},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for listener objects that receive notifications on fired events.\n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623964005,"lvl0":"IEventListener","lvl1":"An interface for listener objects that receive notifications on fired events.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3a04740d38fff908df9c1e07a85a1182","permalink":"/golang/commons/commands/ievent_listener/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/ievent_listener/","section":"golang","summary":"Description The IEventListener interface allows you to define actions to be taken by listener objects after receiving a notification on a fired event.\nMethods OnEvent A method called when events this listener is subscrubed to are fired.\n OnEvent(correlationId string, e IEvent, value *run.Parameters)\n  correlationId: string - a fired evemt e: IEvent - (optional) transaction id to used trace execution through the call chain. value: *run.Parameters - event arguments.","tags":null,"title":"IEventListener","type":"docs","url":"/hugo-docs/golang/commons/commands/ievent_listener/","weight":0,"wordcount":112},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for listener objects that receive notifications on fired events.\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"IEventListener","lvl1":"An interface for listener objects that receive notifications on fired events.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"00ec9cc34f6c1fccdeba23f2d84151e9","permalink":"/net/commons/commands/ievent_listener/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/commands/ievent_listener/","section":"net","summary":"Description The IEventListener interface allows you to define actions to be taken by listener objects after receiving a notification on a fired event.\nInstance methods OnEvent A method called when events this listener is subscrubed to are fired.\n void OnEvent(string correlationId, IEvent event, Parameters args)\n  correlationId: string - a fired evemt event: IEvent - (optional) transaction id to trace execution through call chain. args: Parameters - event arguments.","tags":null,"title":"IEventListener","type":"docs","url":"/hugo-docs/net/commons/commands/ievent_listener/","weight":0,"wordcount":109},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for listener objects that receive notifications on fired events.\n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"IEventListener","lvl1":"An interface for listener objects that receive notifications on fired events.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0ac92c9f166e679bda0ae42b962fc4f4","permalink":"/node/commons/commands/ievent_listener/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/commands/ievent_listener/","section":"node","summary":"Description The IEventListener interface allows you to define actions to be taken by listener objects after receiving a notification on a fired event.\nInstance methods onEvent A method called when events this listener is subscrubed to are fired.\n onEvent(correlationId: string, event: IEvent, args: Parameters): void\n  correlationId: string - a fired evemt event: IEvent - (optional) transaction id to trace execution through call chain. args: Parameters - event arguments.","tags":null,"title":"IEventListener","type":"docs","url":"/hugo-docs/node/commons/commands/ievent_listener/","weight":0,"wordcount":111},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface for listener objects that receive notifications on fired events.\n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620395878,"lvl0":"IEventListener","lvl1":"An interface for listener objects that receive notifications on fired events.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cb8c56c11dbcf1088844e3bebac63a6c","permalink":"/python/commons/commands/ievent_listener/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/commands/ievent_listener/","section":"python","summary":"Description The IEventListener interface allows you to define actions to be taken by listener objects after receiving a notification on a fired event.\nInstance methods on_event A method called when events this listener is subscrubed to are fired.\n on_event(correlation_id: Optional[str], event: IEvent, args: Parameters)\n  correlation_id: Optional[str] - a fired evemt event: IEvent - (optional) transaction id to trace execution through call chain. args: Parameters - event arguments.  Examples class MyListener(IEventListener): def on_event(self, correlation_id, event_name, args): print \u0026#34;Fired event_name \u0026#34; + event_name.","tags":null,"title":"IEventListener","type":"docs","url":"/hugo-docs/python/commons/commands/ievent_listener/","weight":0,"wordcount":92},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create a component that can be called to execute work.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624245194,"lvl0":"IExecutable","lvl1":"Interface that allows you to create a component that can be called to execute work.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0b7a6b9944e897cf28ea65a503399e6c","permalink":"/golang/commons/run/iexecutable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/iexecutable/","section":"golang","summary":"Description The IExecutable interface allows you to create a component that can be called to execute work.\nMethods Execute Executes a component with arguments and receives the execution result.\n Execute(correlationId string, args *Parameters) (result interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. args: *Parameters - execution arguments. returns: (result interface{}, err error) - execution result.  Examples type EchoComponent {} .","tags":null,"title":"IExecutable","type":"docs","url":"/hugo-docs/golang/commons/run/iexecutable/","weight":0,"wordcount":105},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create a component that can be called to execute work.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IExecutable","lvl1":"Interface that allows you to create a component that can be called to execute work.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e7bf143f72260861d69713aa5049d823","permalink":"/net/commons/run/iexecutable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/iexecutable/","section":"net","summary":"Description The IExecutable interface allows you to create a component that can be called to execute work.\nInstance methods ExecuteAsync Executes component with arguments and receives execution result.\n Task\u0026lt;object\u0026gt; ExecuteAsync(string correlationId, Parameters args)\n  correlationId: string - (optional) transaction id to trace execution through call chain. args: Parameters - execution arguments. returns: Task\u0026lt;object\u0026gt; - the execution result.  Examples class EchoComponent: IExecutable { ... public void Execute(string correlationId, Parameters args) { var result = args.","tags":null,"title":"IExecutable","type":"docs","url":"/hugo-docs/net/commons/run/iexecutable/","weight":0,"wordcount":92},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create a component that can be called to execute work.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"IExecutable","lvl1":"Interface that allows you to create a component that can be called to execute work.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b80e642a9c5cfa2abb984e5f447011cc","permalink":"/node/commons/run/iexecutable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/iexecutable/","section":"node","summary":"Description The IExecutable interface allows you to create a component that can be called to execute work.\nInstance methods execute Executes component with arguments and receives execution result.\n execute(correlationId: string, args: Parameters): Promise\u0026lt;any\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain. args: Parameters - execution arguments. returns: Promise\u0026lt;any\u0026gt; - the execution result.  Examples class EchoComponent implements IExecutable { ... public async execute(correlationId: string, args: Parameters): Promise\u0026lt;any\u0026gt; { let result = args.","tags":null,"title":"IExecutable","type":"docs","url":"/hugo-docs/node/commons/run/iexecutable/","weight":0,"wordcount":110},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create a component that can be called to execute work.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621012268,"lvl0":"IExecutable","lvl1":"Interface that allows you to create a component that can be called to execute work.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ec8f75fe900cb71e8d64c053d3022c22","permalink":"/python/commons/run/iexecutable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/iexecutable/","section":"python","summary":"Description The IExecutable interface allows you to create a component that can be called to execute work.\nInstance methods execute Executes a component with arguments and receives the execution result.\n execute(correlationId: str, args: Parameters)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain. args: Parameters - execution arguments.  Examples class EchoComponent(IExecutable): ... def execute(self, correlation_id: Optional[str], args: Parameters): result = args.get_as_object(\u0026#34;message\u0026#34;) return result echo = new EchoComponent() message = \u0026#34;Test\u0026#34;; result = echo.","tags":null,"title":"IExecutable","type":"docs","url":"/hugo-docs/python/commons/run/iexecutable/","weight":0,"wordcount":93},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for component factories.\n","dir":"golang/components/build/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"IFactory","lvl1":"Interface for component factories.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b6369928595ec8de1fe5d5b04ff99c81","permalink":"/golang/components/build/ifactory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/build/ifactory/","section":"golang","summary":"Description The IFactory interface defines methods used by component factories to create components.\nImportant points\n Factories use locators to identify components to be created. The locators are similar to those used to locate components in references. They can be of any type, like strings or integers. However the Pip.Services toolkit most often uses Descriptor objects as component locators.  Methods CanCreate Checks if this factory is able to create component by given locator.","tags":null,"title":"IFactory","type":"docs","url":"/hugo-docs/golang/components/build/ifactory/","weight":0,"wordcount":185},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for component factories.\n","dir":"net/components/build/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"IFactory","lvl1":"Interface for component factories.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2a2b65979a75411739e67f22324bdb1a","permalink":"/net/components/build/ifactory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/build/ifactory/","section":"net","summary":"Description The IFactory interface defines methods used by component factories to create components.\nImportant points\n Factories use locators to identify components to be created. The locators are similar to those used to locate components in references. They can be of any type, like strings or integers. However the Pip.Services toolkit most often uses Descriptor objects as component locators.  Instance methods CanCreate Checks if this factory is able to create component by given locator.","tags":null,"title":"IFactory","type":"docs","url":"/hugo-docs/net/components/build/ifactory/","weight":0,"wordcount":184},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for component factories.\n","dir":"node/components/build/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"IFactory","lvl1":"Interface for component factories.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1446f6b9cc053a5ec793fd93f4a633ba","permalink":"/node/components/build/ifactory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/build/ifactory/","section":"node","summary":"Description The IFactory interface defines methods used by component factories to create components.\nImportant points\n Factories use locators to identify components to be created. The locators are similar to those used to locate components in references. They can be of any type, like strings or integers. However the Pip.Services toolkit most often uses Descriptor objects as component locators.  Instance methods canCreate Checks if this factory is able to create component by given locator.","tags":null,"title":"IFactory","type":"docs","url":"/hugo-docs/node/components/build/ifactory/","weight":0,"wordcount":184},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for component factories.\n","dir":"python/components/build/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621088401,"lvl0":"IFactory","lvl1":"Interface for component factories.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eaedaac27a5f3118f7909ea52582ab15","permalink":"/python/components/build/ifactory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/build/ifactory/","section":"python","summary":"Description The IFactory interface defines methods used by component factories to create components.\nImportant points\n Factories use locators to identify components to be created. The locators are similar to those used to locate components in references. They can be of any type, like strings or integers. However the Pip.Services toolkit most often uses Descriptor objects as component locators.  Instance methods can_create Checks if this factory is able to create component by given locator.","tags":null,"title":"IFactory","type":"docs","url":"/hugo-docs/python/components/build/ifactory/","weight":0,"wordcount":184},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can retrieve a page of data items by a filter.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IFilteredPageReader","lvl1":"Interface for data processing components that can retrieve a page of data items by a filter.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dd33ebe0354b51ff09366431c443cc39","permalink":"/golang/data/persistence/ifiltered_page_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/ifiltered_page_reader/","section":"golang","summary":"Description The IFilteredPageReader interface is used by data processing components that can retrieve a page of data items through the use of a filter.\nMethods getPageByFilter Gets a page of data items using filter parameters.\n GetPageByFilter(correlation_id string, filter *data.FilterParams, paging *data.PagingParams, sort *data.SortParams) (page interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. filter: *data.FilterParams - (optional) filter parameters paging: *data.","tags":null,"title":"IFilteredPageReader","type":"docs","url":"/hugo-docs/golang/data/persistence/ifiltered_page_reader/","weight":0,"wordcount":88},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can retrieve a page of data items by a filter.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"IFilteredPageReader\u003cT\u003e","lvl1":"Interface for data processing components that can retrieve a page of data items by a filter.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f235800560fc7ef857b827ccf5bf662a","permalink":"/node/data/core/ifiltered_page_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/ifiltered_page_reader/","section":"node","summary":"Description The IFilteredPageReader interface is used by data processing components that can retrieve a page of data items through the use of a filter.\nInstance methods getPageByFilter Gets a page of data items using filter parameters.\n getPageByFilter(correlationId: string, filter: FilterParams, paging: PagingParams, sort: SortParams): Promise\u0026lt;DataPage\u0026lt;T\u0026gt;\u0026gt;\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. filter: FilterParams - (optional) filter parameters paging: PagingParams - (optional) paging parameters sort: SortParams - (optional) sort parameters returns: Promise\u0026lt;DataPage\u0026lt;T\u0026gt;\u0026gt; - list of items  ","tags":null,"title":"IFilteredPageReader\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/core/ifiltered_page_reader/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can retrieve a page of data items by a filter.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622504235,"lvl0":"IFilteredPageReader","lvl1":"Interface for data processing components that can retrieve a page of data items by a filter.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e0a84b0a35bc6fe98b3805bbf49bbcfe","permalink":"/python/data/core/ifiltered_page_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/ifiltered_page_reader/","section":"python","summary":"Description The IFilteredPageReader interface is used by data processing components that can retrieve a page of data items through the use of a filter.\nInstance methods get_page_by_filter Gets a page of data items using filter parameters.\n get_page_by_filter(correlation_id: Optional[str], filter: Optional[FilterParams], paging: Optional[PagingParams], sort: Optional[SortParams] = None): DataPage\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. filter: Optional[FilterParams] - (optional) filter parameters paging: Optional[PagingParams] - (optional) paging parameters sort: Optional[SortParams] - (optional) sort parameters returns: DataPage - list of items  ","tags":null,"title":"IFilteredPageReader","type":"docs","url":"/hugo-docs/python/data/core/ifiltered_page_reader/","weight":0,"wordcount":85},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can retrieve a list of data items through the use of a filter.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IFilteredReader","lvl1":"Interface for data processing components that can retrieve a list of data items through the use of a filter.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"14ac4c83fe96c445005145f4b25b6735","permalink":"/golang/data/persistence/ifiltered_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/ifiltered_reader/","section":"golang","summary":"Description The IFilteredReader interface is used by data processing components that can retrieve a list of data items through the use of a filter.\nMethods GetListByFilter Gets a list of data items using filter parameters.\n GetListByFilter(correlation_id string, filter *data.FilterParams, sort *data.SortParams) (items []interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. filter: *data.FilterParams - (optional) filter parameters sort: *data.SortParams - (optional) sort parameters returns: (items []interface{}, err error) - list of items  ","tags":null,"title":"IFilteredReader","type":"docs","url":"/hugo-docs/golang/data/persistence/ifiltered_reader/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can retrieve a list of data items through the use of a filter.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"IFilteredReader\u003cT\u003e","lvl1":"Interface for data processing components that can retrieve a list of data items through the use of a filter.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b8d8fd1e144e22d55d3c62fb3040b1ee","permalink":"/node/data/core/ifiltered_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/ifiltered_reader/","section":"node","summary":"Description The IFilteredReader interface is used by data processing components that can retrieve a list of data items through the use of a filter.\nInstance methods getListByFilter Gets a list of data items using filter parameters.\n getListByFilter(correlationId: string, filter: FilterParams, paging: PagingParams, sort: SortParams): DataPage\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. filter: FilterParams - (optional) filter parameters sort: SortParams - (optional) sort parameters returns: Promise\u0026lt;T[]\u0026gt; - list of items  ","tags":null,"title":"IFilteredReader\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/core/ifiltered_reader/","weight":0,"wordcount":77},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can retrieve a list of data items through the use of a filter.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622583230,"lvl0":"IFilteredReader","lvl1":"Interface for data processing components that can retrieve a list of data items through the use of a filter.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"af6f96b7326275bf126a3ae1c8f73822","permalink":"/python/data/core/ifiltered_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/ifiltered_reader/","section":"python","summary":"Description The IFilteredReader interface is used by data processing components that can retrieve a list of data items through the use of a filter.\nInstance methods get_list_by_filter Gets a list of data items using filter parameters.\n get_list_by_filter(correlation_id: Optional[str], filter: Optional[FilterParams], paging: Optional[PagingParams], sort: Optional[SortParams] = None): DataPage\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. filter: Optional[FilterParams] - (optional) filter parameters sort: Optional[SortParams] - (optional) sort parameters returns: List[T] - list of items  ","tags":null,"title":"IFilteredReader","type":"docs","url":"/hugo-docs/python/data/core/ifiltered_reader/","weight":0,"wordcount":79},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can get data items.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IGetter","lvl1":"Interface for data processing components that can get data items.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1472a73055a77773d7469ac0c27423b3","permalink":"/golang/data/persistence/igetter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/igetter/","section":"golang","summary":"Description The IGetter interface is used by data processing components that are capable of getting data items.\nMethods GetOneById Gets a data item by its unique id.\n GetOneById(correlation_id string, id interface{}) (item interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. id: interface{} - id of the item to be retrieved. returns: (item interface{}, err error) - returned item.  ","tags":null,"title":"IGetter","type":"docs","url":"/hugo-docs/golang/data/persistence/igetter/","weight":0,"wordcount":67},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can get data items.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"IGetter\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","lvl1":"Interface for data processing components that can get data items.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"011e243a6b26b2ee6107445656225cdd","permalink":"/node/data/core/igetter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/igetter/","section":"node","summary":"Description The IGetter interface is used by data processing components that are capable of getting data items.\nInstance methods getOneById Gets a data item by its unique id.\n getOneById(correlationId: string, id: K): Promise\u0026lt;T\u0026gt;\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. id: K - id of the item to be retrieved. returns: Promise\u0026lt;T\u0026gt; - returned item.  ","tags":null,"title":"IGetter\u003cT extends IIdentifiable\u003cK\u003e, K\u003e","type":"docs","url":"/hugo-docs/node/data/core/igetter/","weight":0,"wordcount":62},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can get data items.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622583522,"lvl0":"IGetter","lvl1":"Interface for data processing components that can get data items.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1e2108966855d6be7a1efadeb77804a3","permalink":"/python/data/core/igetter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/igetter/","section":"python","summary":"Implements: IIdentifiable\nDescription The IGetter interface is used by data processing components that are capable of getting data items.\nInstance methods get_one_by_id Gets a data item by its unique id.\n get_one_by_id(correlation_id: Optional[str], id: Any): T\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. id: Any - id of the item to be retrieved. returns: T - returned item.  ","tags":null,"title":"IGetter","type":"docs","url":"/hugo-docs/python/data/core/igetter/","weight":0,"wordcount":64},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to create data objects that can be uniquely idendified by an ID.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IIdentifiable\u003cK\u003e","lvl1":"Interface used to create data objects that can be uniquely idendified by an ID.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d52ea367dc514e0fe2b0805fe9520cf9","permalink":"/net/commons/data/iidentifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/iidentifiable/","section":"net","summary":"Description The IIdentifiable interface is used to create data objects that can be uniquely idendified by an ID.\nImportant points\n The type specified in the interface defines the type of the ID field.  Properties Id The unique object identifier of type K.\n T Id [ get, set ]\n Examples public class MyData: IIdentifiable\u0026lt;String\u0026gt; { string id {get; set;} string field1; int field2; ... } ","tags":null,"title":"IIdentifiable\u003cK\u003e","type":"docs","url":"/hugo-docs/net/commons/data/iidentifiable/","weight":0,"wordcount":64},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to create data objects that can be uniquely idendified by an ID.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"IIdentifiable\u003cK\u003e","lvl1":"Interface used to create data objects that can be uniquely idendified by an ID.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b9ae8a0f7463ba08e6fc3ff3eb987e19","permalink":"/node/commons/data/iidentifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/iidentifiable/","section":"node","summary":"Description The IIdentifiable interface is used to create data objects that can be uniquely idendified by an ID.\nImportant points\n The type specified in the interface defines the type of the ID field.  Fields id The unique object identifier of type K.\n id: K\n Examples export class MyData implements IIdentifiable\u0026lt;string\u0026gt; { public id: string; public field1: string; public field2: number; ... }  ","tags":null,"title":"IIdentifiable\u003cK\u003e","type":"docs","url":"/hugo-docs/node/commons/data/iidentifiable/","weight":0,"wordcount":62},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to create data objects that can be uniquely idendified by an ID.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620242549,"lvl0":"IIdentifiable","lvl1":"Interface used to create data objects that can be uniquely idendified by an ID.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7dfe9947cf2fc01b6d0f44e635efaa10","permalink":"/python/commons/data/iidentifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/iidentifiable/","section":"python","summary":"Description The IIdentifiable interface is used to create data objects that can be uniquely idendified by an ID.\nImportant points\n The type specified in the interface defines the type of the ID field.  Fields id The unique object identifier of type K.\n id: K\n Examples class MyData(IIdentifiable): id = None  ","tags":null,"title":"IIdentifiable","type":"docs","url":"/hugo-docs/python/commons/data/iidentifiable/","weight":0,"wordcount":50},{"authors":null,"categories":null,"date":-62135596800,"description":"**TODO: this is not implemented for this language yet**\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623415145,"lvl0":"IIdentifiable!","lvl1":"**TODO: this is not implemented for this language yet**\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"63a24557b765b74529e3a636a0c45ea4","permalink":"/golang/commons/data/iidentifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/commons/data/iidentifiable/","section":"golang","summary":"","tags":null,"title":"IIdentifiable!","type":"docs","url":"/hugo-docs/golang/commons/data/iidentifiable/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that load data items.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"ILoader","lvl1":"Interface for data processing components that load data items.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8201c0662bc64f491de5f5efad0563a6","permalink":"/golang/data/persistence/iloader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/iloader/","section":"golang","summary":"Description The ILoader interface is used by data processing components that load data items.\nMethods Load Loads data items.\n Load(correlation_id string) (items []interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. returns: (items []interface{}, err error) - list of data items  ","tags":null,"title":"ILoader","type":"docs","url":"/hugo-docs/golang/data/persistence/iloader/","weight":0,"wordcount":49},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that load data items.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"ILoader\u003cT\u003e","lvl1":"Interface for data processing components that load data items.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6393bc8d7b9397eea508e916b3e27c16","permalink":"/node/data/core/iloader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/iloader/","section":"node","summary":"Description The ILoader interface is used by data processing components that load data items.\nInstance methods load Loads data items.\n load(correlationId: string): Promise\u0026lt;T[]\u0026gt;\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. returns: Promise\u0026lt;T[]\u0026gt; - list of data items  ","tags":null,"title":"ILoader\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/core/iloader/","weight":0,"wordcount":44},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that load data items.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622505034,"lvl0":"ILoader","lvl1":"Interface for data processing components that load data items.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c1f2f3c4d9c89b504a2fc6f3599e8d12","permalink":"/python/data/core/iloader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/iloader/","section":"python","summary":"Description The ILoader interface is used by data processing components that load data items.\nInstance methods load Loads data items.\n load(correlation_id: Optional[str]): List[T]\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. returns: List[T] - list of data items  ","tags":null,"title":"ILoader","type":"docs","url":"/hugo-docs/python/data/core/iloader/","weight":0,"wordcount":44},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for locks used to synchronize work or parallel processes and to prevent collisions.\n","dir":"golang/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ILock","lvl1":"Interface for locks used to synchronize work or parallel processes and to prevent collisions.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5f6cabb92ae9973ea074f03822dc2eae","permalink":"/golang/components/lock/ilock/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/lock/ilock/","section":"golang","summary":"Description The ILock interface provides the methods to create locks used to synchronize work or parallel processes and to prevent collisions.\nImportant points\n The interface allows to manage multiple locks identified by unique keys.  Methods AcquireLock Makes a single attempt to acquire a lock by its key. It returns immediately a positive or negative result.\n AcquireLock(correlationId string, key string, ttl int64, timeout int64) error\n  correlationId: string -(optional) transaction id to trace execution through a call chain.","tags":null,"title":"ILock","type":"docs","url":"/hugo-docs/golang/components/lock/ilock/","weight":0,"wordcount":218},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for locks used to synchronize work or parallel processes and to prevent collisions.\n","dir":"net/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ILock","lvl1":"Interface for locks used to synchronize work or parallel processes and to prevent collisions.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d2c68dd197c5b115dae67c3285e77cae","permalink":"/net/components/lock/ilock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/lock/ilock/","section":"net","summary":"Description The ILock interface provides the methods to create locks used to synchronize work or parallel processes and to prevent collisions.\nImportant points\n The interface allows to manage multiple locks identified by unique keys.  Instance methods AcquireLock Makes a single attempt to acquire a lock by its key. It returns immediately a positive or negative result.\n void AcquireLock(string correlationId, string key, long ttl, long timeout)\n  correlationId: string -(optional) transaction id to trace execution through a call chain.","tags":null,"title":"ILock","type":"docs","url":"/hugo-docs/net/components/lock/ilock/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for locks used to synchronize work or parallel processes and to prevent collisions.\n","dir":"node/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ILock","lvl1":"Interface for locks used to synchronize work or parallel processes and to prevent collisions.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f1bb8e3b5e56dd50a59fdd6a2a504b9f","permalink":"/node/components/lock/ilock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/lock/ilock/","section":"node","summary":"Description The ILock interface provides the methods to create locks used to synchronize work or parallel processes and to prevent collisions.\nImportant points\n The interface allows to manage multiple locks identified by unique keys.  Instance methods acquireLock Makes a single attempt to acquire a lock by its key. It returns immediately a positive or negative result.\n acquireLock(correlationId: string, key: string, ttl: number, timeout: number): Promise\u0026lt;void\u0026gt;\n  correlationId: string -(optional) transaction id to trace execution through a call chain.","tags":null,"title":"ILock","type":"docs","url":"/hugo-docs/node/components/lock/ilock/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for locks used to synchronize work or parallel processes and to prevent collisions.\n","dir":"python/components/lock/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ILock","lvl1":"Interface for locks used to synchronize work or parallel processes and to prevent collisions.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ce83139de2c8a08a62049d30debe1381","permalink":"/python/components/lock/ilock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/lock/ilock/","section":"python","summary":"Description The ILock interface provides the methods to create locks used to synchronize work or parallel processes and to prevent collisions.\nImportant points\n The interface allows to manage multiple locks identified by unique keys.  Instance methods acquire_lock Makes a single attempt to acquire a lock by its key. It returns immediately a positive or negative result.\n acquire_lock(correlation_id: Optional[str], key: str, ttl: float, timeout: float)\n  correlation_id: Optional[str] -(optional) transaction id to trace execution through a call chain.","tags":null,"title":"ILock","type":"docs","url":"/hugo-docs/python/components/lock/ilock/","weight":0,"wordcount":199},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for logger components that capture execution log messages.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ILogger","lvl1":"Interface for logger components that capture execution log messages.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3c11c4eea17def28d053b911249bc7da","permalink":"/golang/components/log/ilogger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/log/ilogger/","section":"golang","summary":"Description The ILogger interface provides a set of methods for logger components that capture log messages.\nMethods Debug Logs high-level debug information for troubleshooting.\n Debug(correlationId string, message string, args \u0026hellip;interface{})\n  correlationId: string - (optional) transaction id to trace execution through a call chain. message: string - a human-readable message to log. args: \u0026hellip;interface{} - arguments to parameterize the message.  Error Logs recoverable application error.\n Error(correlationId string, err error, message string, args \u0026hellip;interface{})","tags":null,"title":"ILogger","type":"docs","url":"/hugo-docs/golang/components/log/ilogger/","weight":0,"wordcount":378},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for logger components that capture execution log messages.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ILogger","lvl1":"Interface for logger components that capture execution log messages.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e609aa123a22170bc4e071f0a7f32438","permalink":"/net/components/log/ilogger/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/components/log/ilogger/","section":"net","summary":"Description The ILogger interface provides a set of methods for logger components that capture log messages.\nProperties Level Gets or sets the maximum log level. Messages with higher log level are filtered out.\n LogLevel Level [ get, set ]\n Instance methods Debug Logs high-level debug information for troubleshooting.\n void Debug(string correlationId, string message, params object[] args)\n  correlationId: string - (optional) transaction id to trace execution through a call chain.","tags":null,"title":"ILogger","type":"docs","url":"/hugo-docs/net/components/log/ilogger/","weight":0,"wordcount":730},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for logger components that capture execution log messages.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1623078433,"lvl0":"ILogger","lvl1":"Interface for logger components that capture execution log messages.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"80ade39b0646416872f04d440683b559","permalink":"/node/components/log/ilogger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/log/ilogger/","section":"node","summary":"Description The ILogger interface provides a set of methods for logger components that capture log messages.\nInstance methods debug Logs high-level debug information for troubleshooting.\n debug(correlationId: string, message: string, \u0026hellip;args: any[]): void\n  correlationId: string - (optional) transaction id to trace execution through a call chain. message: string - a human-readable message to log. args: any[] - arguments to parameterize the message.  error Logs recoverable application error.","tags":null,"title":"ILogger","type":"docs","url":"/hugo-docs/node/components/log/ilogger/","weight":0,"wordcount":410},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for logger components that capture execution log messages.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ILogger","lvl1":"Interface for logger components that capture execution log messages.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bcda917b89e14078d74fb3c887acd948","permalink":"/python/components/log/ilogger/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/components/log/ilogger/","section":"python","summary":"Description The ILogger interface provides a set of methods for logger components that capture log messages.\nInstance methods debug Logs high-level debug information for troubleshooting.\n debug(correlation_id: Optional[str], message: str, *args: Any, **kwargs: Any)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through a call chain. message: str - a human-readable message to log. args: Any - arguments to parameterize the message. kwargs: Any - arguments to parameterize the message.","tags":null,"title":"ILogger","type":"docs","url":"/hugo-docs/python/components/log/ilogger/","weight":0,"wordcount":472},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"ImageSets Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dcc3a4a331cdbf04daae1766b29719dd","permalink":"/microservices/content/imagesets/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/imagesets/","section":"microservices","summary":"Allows system administrators and product owners to communicate to users key system events and product updates. Each imageset:\n  Can be written in multiple languages\n  Can include pictures and document attachments\n  Supports editing lifecycle via status tracking\n  Server implementations: NodeJS, Dart\n  Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC\n  Persistence: Memory, Flat Files, MongoDB, Couchbase\n  Deployment options: Monolith, Process, Docker, AWS Lambda","tags":null,"title":"ImageSets Microservice","type":"docs","url":"/hugo-docs/microservices/content/imagesets/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to create a map data structure.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624073877,"lvl0":"IMap","lvl1":"Interface used to create a map data structure.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"06479eba682dc01e04120a1f24fa76bc","permalink":"/golang/commons/data/imap/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/data/imap/","section":"golang","summary":"Description The IMap interface is used to create a map data structure.\nMethods Get Gets a value related to a given key.\n Get(key string) interface{}\n  key: string - TODO add description returns: interface{} - TODO add description  Put Inserts the given value and key.\n Put(key string, value interface{})\n  key: string - TODO add description value: interface{} - TODO add description  Remove Removes a value related to a given key.","tags":null,"title":"IMap","type":"docs","url":"/hugo-docs/golang/commons/data/imap/","weight":0,"wordcount":95},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for asynchronous message queues.\n\n \n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"IMessageQueue","lvl1":"Interface for asynchronous message queues.\n\n \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"91661c3ca3b9f6b9186cac2526a0ecdb","permalink":"/golang/messaging/queues/imessage_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/messaging/queues/imessage_queue/","section":"golang","summary":"Extends: IOpenable, IClosable\nDescription The IMessageQueue interface is used for asynchronous message queues.\nImportant points\n Not all queues may implement all the methods. An ttempt to call a non-supported method will result in a NotImplemented exception. To verify if a specific method is supported check MessagingCapabilities.  Methods abandon Returns a message into the queue and makes it available for all subscribers to receive it again. This method is usually used to return a message which could not be processed at the moment, to repeat the attempt.","tags":null,"title":"IMessageQueue","type":"docs","url":"/hugo-docs/golang/messaging/queues/imessage_queue/","weight":0,"wordcount":634},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for asynchronous message queues.\n\n \n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"IMessageQueue","lvl1":"Interface for asynchronous message queues.\n\n \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bca7ca7fe267c99d89ac443a77eb2741","permalink":"/node/messaging/queues/imessage_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/messaging/queues/imessage_queue/","section":"node","summary":"Extends: IOpenable, IClosable\nDescription The IMessageQueue interface is used for asynchronous message queues.\nImportant points\n Not all queues may implement all the methods. An ttempt to call a non-supported method will result in a NotImplemented exception. To verify if a specific method is supported check MessagingCapabilities.  Instance methods abandon Returns a message into the queue and makes it available for all subscribers to receive it again. This method is usually used to return a message which could not be processed at the moment, to repeat the attempt.","tags":null,"title":"IMessageQueue","type":"docs","url":"/hugo-docs/node/messaging/queues/imessage_queue/","weight":0,"wordcount":635},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for asynchronous message queues.\n\n \n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1622335896,"lvl0":"IMessageQueue","lvl1":"Interface for asynchronous message queues.\n\n \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d1e11d8788b11c2179f8f6cf007f66e0","permalink":"/python/messaging/queues/imessage_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/messaging/queues/imessage_queue/","section":"python","summary":"Implements: IOpenable, IClosable\nDescription The IMessageQueue interface is used for asynchronous message queues.\nImportant points\n Not all queues may implement all the methods. An ttempt to call a non-supported method will result in a NotImplemented exception. To verify if a specific method is supported check MessagingCapabilities.  Instance methods abandon Returns a message into the queue and makes it available for all subscribers to receive it again. This method is usually used to return a message which could not be processed at the moment, to repeat the attempt.","tags":null,"title":"IMessageQueue","type":"docs","url":"/hugo-docs/python/messaging/queues/imessage_queue/","weight":0,"wordcount":627},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines an interface for message queue connections\n","dir":"golang/messaging/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"IMessageQueueConnection","lvl1":"Defines an interface for message queue connections\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"98a1eb1947b28b305b6282398e7994a8","permalink":"/golang/messaging/connect/imessage_queue_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/connect/imessage_queue_connection/","section":"golang","summary":"Description The IMessageQueueConnection interface is used to create message queue connections.\nMethods createQueue Creates a message queue. If connection doesn\u0026rsquo;t support this function, it exits without error.\n createQueue(name: string)\n  name: string - name of the queue to be created.  deleteQueue Deletes a message queue. If connection doesn\u0026rsquo;t support this function, it exits without error.\n deleteQueue(name: string)\n  name: string - name of the queue to be deleted.","tags":null,"title":"IMessageQueueConnection","type":"docs","url":"/hugo-docs/golang/messaging/connect/imessage_queue_connection/","weight":0,"wordcount":94},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines an interface for message queue connections\n","dir":"node/messaging/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"IMessageQueueConnection","lvl1":"Defines an interface for message queue connections\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2afb61d6c459fec44b926e19d01fb1f1","permalink":"/node/messaging/connect/imessage_queue_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/connect/imessage_queue_connection/","section":"node","summary":"Description The IMessageQueueConnection interface is used to create message queue connections.\nInstance methods createQueue Creates a message queue. If connection doesn\u0026rsquo;t support this function, it exits without error.\n createQueue(name: string)\n  name: string - name of the queue to be created.  deleteQueue Deletes a message queue. If connection doesn\u0026rsquo;t support this function, it exits without error.\n deleteQueue(name: string)\n  name: string - name of the queue to be deleted.","tags":null,"title":"IMessageQueueConnection","type":"docs","url":"/hugo-docs/node/messaging/connect/imessage_queue_connection/","weight":0,"wordcount":95},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines an interface for message queue connections\n","dir":"python/messaging/connect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622330197,"lvl0":"IMessageQueueConnection","lvl1":"Defines an interface for message queue connections\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e968ce914d69c8e1637e07d5944795da","permalink":"/python/messaging/connect/imessage_queue_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/connect/imessage_queue_connection/","section":"python","summary":"Description The IMessageQueueConnection interface is used to create message queue connections.\nInstance methods create_queue Creates a message queue. If connection doesn\u0026rsquo;t support this function, it exits without error.\n create_queue(name: str)\n  name: str - name of the queue to be created.  delete_queue Deletes a message queue. If connection doesn\u0026rsquo;t support this function, it exits without error.\n delete_queue(name: str)\n  name: str - name of the queue to be deleted.","tags":null,"title":"IMessageQueueConnection","type":"docs","url":"/hugo-docs/python/messaging/connect/imessage_queue_connection/","weight":0,"wordcount":95},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates message queue componens.\n","dir":"golang/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"IMessageQueueFactory","lvl1":"Creates message queue componens.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f80ac853c41b821dca3f0431573a32d9","permalink":"/golang/messaging/build/imemory_message_queue_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/build/imemory_message_queue_factory/","section":"golang","summary":"Description The IMessageQueueFactory interface allows you to create message queue components.\nMethods createQueue Creates a message queue component and assigns its name.\n createQueue(name: string): IMessageQueue\n  name: string - name of the created message queue. returns: IMessageQueue - message queue  See also   IMessageQueue   ","tags":null,"title":"IMessageQueueFactory","type":"docs","url":"/hugo-docs/golang/messaging/build/imemory_message_queue_factory/","weight":0,"wordcount":42},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates message queue componens.\n","dir":"node/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"IMessageQueueFactory","lvl1":"Creates message queue componens.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8c3c48b41abf9776697cbd89e7a044d2","permalink":"/node/messaging/build/imemory_message_queue_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/build/imemory_message_queue_factory/","section":"node","summary":"Description The IMessageQueueFactory interface allows you to create message queue components.\nInstance methods createQueue Creates a message queue component and assigns its name.\n createQueue(name: string): IMessageQueue\n  name: string - name of the created message queue. returns: IMessageQueue - message queue  See also   IMessageQueue   ","tags":null,"title":"IMessageQueueFactory","type":"docs","url":"/hugo-docs/node/messaging/build/imemory_message_queue_factory/","weight":0,"wordcount":43},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates message queue componens.\n","dir":"python/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622329697,"lvl0":"IMessageQueueFactory","lvl1":"Creates message queue componens.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7ebc0a73ab0dd8a7a9f78c7922d3de41","permalink":"/python/messaging/build/imemory_message_queue_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/build/imemory_message_queue_factory/","section":"python","summary":"Description The IMessageQueueFactory interface allows you to create message queue components.\nInstance methods create_queue Creates a message queue component and assigns its name.\n create_queue(name: str): IMessageQueue\n  name: str - name of the created message queue. returns: IMessageQueue - message queue  See also   IMessageQueue   ","tags":null,"title":"IMessageQueueFactory","type":"docs","url":"/hugo-docs/python/messaging/build/imemory_message_queue_factory/","weight":0,"wordcount":43},{"authors":null,"categories":null,"date":-62135596800,"description":"Callback interface to receive incoming messages.\n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"IMessageReceive","lvl1":"Callback interface to receive incoming messages.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1f76e6092b7852c405cd6bb8f858ab41","permalink":"/golang/messaging/queues/imessage_receiver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/queues/imessage_receiver/","section":"golang","summary":"Description The IMessageReceive interface is used to receive incoming messages.\nMethods receiveMessage Receives an incoming message from the queue.\nSee also MessageEnvelope, IMessageQueue\n receiveMessage(envelope: MessageEnvelope, queue: IMessageQueue): Promise\u0026lt;void\u0026gt;\n  envelope: MessageEnvelope - incoming message queue: IMessageQueue - queue where the message comes from  Examples class MyMessageReceiver implements IMessageReceiver { public async receiveMessage(envelop: MessageEnvelop, queue: IMessageQueue): Promise\u0026lt;void\u0026gt; { console.log(\u0026#34;Received message: \u0026#34; + envelop.getMessageAsString()); } } let messageQueue = new MemoryMessageQueue(); messageQueue.","tags":null,"title":"IMessageReceive","type":"docs","url":"/hugo-docs/golang/messaging/queues/imessage_receiver/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"Callback interface to receive incoming messages.\n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"IMessageReceive","lvl1":"Callback interface to receive incoming messages.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9a2b96444b62b3418d2474a20bff8be3","permalink":"/node/messaging/queues/imessage_receiver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/queues/imessage_receiver/","section":"node","summary":"Description The IMessageReceive interface is used to receive incoming messages.\nInstance methods receiveMessage Receives an incoming message from the queue.\nSee also MessageEnvelope, IMessageQueue\n receiveMessage(envelope: MessageEnvelope, queue: IMessageQueue): Promise\u0026lt;void\u0026gt;\n  envelope: MessageEnvelope - incoming message queue: IMessageQueue - queue where the message comes from  Examples class MyMessageReceiver implements IMessageReceiver { public async receiveMessage(envelop: MessageEnvelop, queue: IMessageQueue): Promise\u0026lt;void\u0026gt; { console.log(\u0026#34;Received message: \u0026#34; + envelop.getMessageAsString()); } } let messageQueue = new MemoryMessageQueue(); messageQueue.","tags":null,"title":"IMessageReceive","type":"docs","url":"/hugo-docs/node/messaging/queues/imessage_receiver/","weight":0,"wordcount":85},{"authors":null,"categories":null,"date":-62135596800,"description":"Callback interface to receive incoming messages.\n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621349659,"lvl0":"IMessageReceive","lvl1":"Callback interface to receive incoming messages.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cda8cb9f1a907ab7a03ee6ba39052318","permalink":"/python/messaging/queues/imessage_receiver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/queues/imessage_receiver/","section":"python","summary":"Description The IMessageReceive interface is used to receive incoming messages.\nInstance methods receive_message Receives an incoming message from the queue.\nSee also MessageEnvelope, IMessageQueue\n receive_message(envelope: MessageEnvelope, queue: IMessageQueue)\n  envelope: MessageEnvelope - incoming message queue: IMessageQueue - queue where the message comes from  Examples class MyMessageReceiver(IMessageReceiver): def receive_message(self, envelop, queue): print \u0026#34;Received message: \u0026#34; + envelop.get_message_as_string() messageQueue = MemoryMessageQueue() messageQueue.listen(\u0026#34;123\u0026#34;, MyMessageReceiver()) messageQueue.open(\u0026#34;123\u0026#34;) messageQueue.send(\u0026#34;123\u0026#34;, MessageEnvelope(None, \u0026#34;mymessage\u0026#34;, \u0026#34;ABC\u0026#34;)) # Output in console: \u0026#34;ABC\u0026#34; ","tags":null,"title":"IMessageReceive","type":"docs","url":"/hugo-docs/python/messaging/queues/imessage_receiver/","weight":0,"wordcount":70},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that have human-readable names.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"INamed","lvl1":"Interface for data objects that have human-readable names.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"297823beda8b4ec38e7e7771b1bc1e98","permalink":"/net/commons/data/inamed/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/inamed/","section":"net","summary":"Description The INamed interface is used to define data objects containing a human-readable name.\nProperties Name The object\u0026rsquo;s humand-readable name.\n string Name [ get, set ]\n Examples public class MyData: IStringIdentifiable, INamed { string id {get; set;} string name {get; set;} string field1; int field2; ... } ","tags":null,"title":"INamed","type":"docs","url":"/hugo-docs/net/commons/data/inamed/","weight":0,"wordcount":47},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that have human-readable names.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"INamed","lvl1":"Interface for data objects that have human-readable names.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"028ba7b7a14721d503fb3e07fdf0de86","permalink":"/node/commons/data/inamed/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/inamed/","section":"node","summary":"Description The INamed interface is used to define data objects containing a human-readable name.\nFields name The object\u0026rsquo;s humand-readable name.\n name: string\n Examples export class MyData implements IStringIdentifiable, INamed { public id: string; public name: string; public field1: string; public field2: number; ... }  ","tags":null,"title":"INamed","type":"docs","url":"/hugo-docs/node/commons/data/inamed/","weight":0,"wordcount":44},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that have human-readable names.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620299597,"lvl0":"INamed","lvl1":"Interface for data objects that have human-readable names.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6c54c533dc94ecc95694d2be00ccd6ec","permalink":"/python/commons/data/inamed/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/inamed/","section":"python","summary":"Description The INamed interface is used to define data objects containing a human-readable name.\nFields name The object\u0026rsquo;s humand-readable name.\n name: str\n Examples class MyData(IIdentifiable, INamed): id = None name = None  ","tags":null,"title":"INamed","type":"docs","url":"/hugo-docs/python/commons/data/inamed/","weight":0,"wordcount":32},{"authors":null,"categories":null,"date":-62135596800,"description":"**TODO: this is not implemented for this language yet**\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623415145,"lvl0":"INamed!","lvl1":"**TODO: this is not implemented for this language yet**\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bcd2b93d7ac6caba6b908257db3a5982","permalink":"/golang/commons/data/inamed/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/commons/data/inamed/","section":"golang","summary":"","tags":null,"title":"INamed!","type":"docs","url":"/hugo-docs/golang/commons/data/inamed/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule to check that a list contains only specified values.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624306702,"lvl0":"IncludedRule","lvl1":"Validation rule to check that a list contains only specified values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2e4908b313a39b66524563573b61497b","permalink":"/golang/commons/validate/included_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/included_rule/","section":"golang","summary":"Implements: IValidationRule\nDescription The InclidedRule class allows you to check that a list contains only specified values.\nConstructors NewIncludedRule Creates a new validation rule and sets its values.\n NewIncludedRule(values \u0026hellip;interface{}) *IncludedRule\n  values: \u0026hellip;interface{} - list of constants that value must be included to  Methods validate Validates a given value against this rule.\n (c *IncludedRule) Validate(path string, schema ISchema, value interface{}) []*ValidationResult\n  path: string - dot notation path to the value.","tags":null,"title":"IncludedRule","type":"docs","url":"/hugo-docs/golang/commons/validate/included_rule/","weight":0,"wordcount":124},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule to check that a list contains only specified values.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"IncludedRule","lvl1":"Validation rule to check that a list contains only specified values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"383b0efea73cfa9be0843c18a537b797","permalink":"/net/commons/validate/included_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/included_rule/","section":"net","summary":"Inherits: IValidationRule\nDescription The InclidedRule class allows you to check that a list contains only specified values.\nConstructors Creates a new validation rule and sets its values.\n public IncludedRule(params object[] values)\n  values: object[] - a list of constants that value must be included to  Instance methods Validate Validates a given value against this rule.\n public void Validate(string path, Schema schema, object value, List\u0026lt;ValidationResult\u0026gt; results)\n  path: string - a dot notation path to the value.","tags":null,"title":"IncludedRule","type":"docs","url":"/hugo-docs/net/commons/validate/included_rule/","weight":0,"wordcount":132},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule to check that a list contains only specified values.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"IncludedRule","lvl1":"Validation rule to check that a list contains only specified values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eab318e6fe8bde5640ac30f2c4902942","permalink":"/node/commons/validate/included_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/included_rule/","section":"node","summary":"Implements: IValidationRule\nDescription The InclidedRule class allows you to check that a list contains only specified values.\nConstructors Creates a new validation rule and sets its values.\n public constructor(\u0026hellip;values: any[])\n  values: any[] - a list of constants that value must be included to  Instance methods validate Validates a given value against this rule.\n public validate(path: string, schema: Schema, value: any, results: ValidationResult[]): void\n  path: string - a dot notation path to the value.","tags":null,"title":"IncludedRule","type":"docs","url":"/hugo-docs/node/commons/validate/included_rule/","weight":0,"wordcount":132},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule to check that a list contains only specified values.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"IncludedRule","lvl1":"Validation rule to check that a list contains only specified values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dbbfb7a2e5ac72f094717a0f3f4d5c4a","permalink":"/python/commons/validate/included_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/included_rule/","section":"python","summary":"Implements: IValidationRule\nDescription The InclidedRule class allows you to check that a list contains only specified values.\nConstructors Creates a new validation rule and sets its values.\n IncludedRule(*values: Any)\n  values: Any - a list of constants that value must be included to  Instance methods validate Validates a given value against this rule.\n validate(path: str, schema: Schema, value: Any, results: List[ValidationResult])\n  path: str - a dot notation path to the value.","tags":null,"title":"IncludedRule","type":"docs","url":"/hugo-docs/python/commons/validate/included_rule/","weight":0,"wordcount":126},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/info/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Info","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dfcc4dd063abfbb5bf873f79f45d89b3","permalink":"/dart/components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/info/","section":"dart","summary":"","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/dart/components/info/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains classes used to create context information objects,  which contain information about the context of execution.\n","dir":"golang/components/info/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Info","lvl1":"\nThis package contains classes used to create context information objects,  which contain information about the context of execution.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0e84f857dea73e6ef628d5eae8269f6b","permalink":"/golang/components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/info/","section":"golang","summary":"Important information\n This package is useful for various logging functions where it is necessary to know things like: what source we are logging from, what is the process name, or what the process is/does.  Classes ContextInfo Context information component that provides detail information about execution context: container or/and process.\nMost often ContextInfo is used by logging and performance counters to identify source of the collected logs and metrics.","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/golang/components/info/","weight":0,"wordcount":75},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains classes used to create context information objects,  which contain information about the context of execution.\n","dir":"net/components/info/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621575585,"lvl0":"Info","lvl1":"\nThis package contains classes used to create context information objects,  which contain information about the context of execution.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5ded5f5535a986abb630f3b3c63be684","permalink":"/net/components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/info/","section":"net","summary":"Important information\n This package is useful for various logging functions where it is necessary to know things like: what source we are logging from, what is the process name, or what the process is/does.  Classes ContextInfo Context information component that provides detail information about execution context: container or/and process.\nMost often ContextInfo is used by logging and performance counters to identify source of the collected logs and metrics.","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/net/components/info/","weight":0,"wordcount":75},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains classes used to create context information objects,  which contain information about the context of execution.\n","dir":"node/components/info/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Info","lvl1":"\nThis package contains classes used to create context information objects,  which contain information about the context of execution.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c3c185cb3386c589b33a25b0bd1c95a9","permalink":"/node/components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/info/","section":"node","summary":"Important information\n This package is useful for various logging functions where it is necessary to know things like: what source we are logging from, what is the process name, or what the process is/does.  Classes ContextInfo Context information component that provides detail information about execution context: container or/and process.\nMost often ContextInfo is used by logging and performance counters to identify source of the collected logs and metrics.","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/node/components/info/","weight":0,"wordcount":75},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains classes used to create context information objects,  which contain information about the context of execution.\n","dir":"python/components/info/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Info","lvl1":"\nThis package contains classes used to create context information objects,  which contain information about the context of execution.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"43db622f886ce16b21e2756cbb79c418","permalink":"/python/components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/info/","section":"python","summary":"Important information\n This package is useful for various logging functions where it is necessary to know things like: what source we are logging from, what is the process name, or what the process is/does.  Classes ContextInfo Context information component that provides detail information about execution context: container or/and process.\nMost often ContextInfo is used by logging and performance counters to identify source of the collected logs and metrics.","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/python/components/info/","weight":0,"wordcount":75},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components that can be asynchronously notified.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624245276,"lvl0":"INotifiable","lvl1":"Interface that allows you to create components that can be asynchronously notified.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"adbfc5be1fd5e8a634dea7ec3a010372","permalink":"/golang/commons/run/inotifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/inotifiable/","section":"golang","summary":"Description The INotifiable interface allows you to create components that can be asynchronously notified.\nImportant points\n The notification can include an optional argument that describes an occurred event.  Methods Notify Notifies the component about an occured event.\n Notify(correlationId string, args *Parameters)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. args: *Parameters - notification arguments.  Examples type MyComponent {} .","tags":null,"title":"INotifiable","type":"docs","url":"/hugo-docs/golang/commons/run/inotifiable/","weight":0,"wordcount":88},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components that can be asynchronously notified.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"INotifiable","lvl1":"Interface that allows you to create components that can be asynchronously notified.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"52344d802d99a30453351c948eb0272e","permalink":"/net/commons/run/inotifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/inotifiable/","section":"net","summary":"Description The INotifiable interface allows you to create components that can be asynchronously notified.\nImportant points\n The notification can include an optional argument that describes an occurred event.  Instance methods NotifyAsync Notifies the component about occured event.\n Task NotifyAsync(string correlationId, Parameters args)\n  correlationId: string - (optional) transaction id to trace execution through call chain. args: Parameters - notification arguments.  Examples class MyComponent: INotifable { .","tags":null,"title":"INotifiable","type":"docs","url":"/hugo-docs/net/commons/run/inotifiable/","weight":0,"wordcount":92},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components that can be asynchronously notified.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"INotifiable","lvl1":"Interface that allows you to create components that can be asynchronously notified.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1ce5dd292ffc773bac1fc6209b211f8b","permalink":"/node/commons/run/inotifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/inotifiable/","section":"node","summary":"Description The INotifiable interface allows you to create components that can be asynchronously notified.\nImportant points\n The notification can include an optional argument that describes an occurred event.  Instance methods notify Notifies the component about occured event.\n notify(correlationId: string, args: Parameters): void\n  correlationId: string - (optional) transaction id to trace execution through call chain. args: Parameters - notification arguments.  Examples class MyComponent implements INotifable { .","tags":null,"title":"INotifiable","type":"docs","url":"/hugo-docs/node/commons/run/inotifiable/","weight":0,"wordcount":93},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components that can be asynchronously notified.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621012345,"lvl0":"INotifiable","lvl1":"Interface that allows you to create components that can be asynchronously notified.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5afc5d2fe7eab5671a18cc36fcb1a776","permalink":"/python/commons/run/inotifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/inotifiable/","section":"python","summary":"Description The INotifiable interface allows you to create components that can be asynchronously notified.\nImportant points\n The notification can include an optional argument that describes an occurred event.  Instance methods notify Notifies the component about an occured event.\n notify(correlation_id: Optional[str], args: Parameters)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through the call chain. args: Parameters - notification arguments.  Examples class MyComponent(INotifable): ... def notify(correlationId, args): print(\u0026#34;Occured event \u0026#34; + args.","tags":null,"title":"INotifiable","type":"docs","url":"/hugo-docs/python/commons/run/inotifiable/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates logs, counters and timings for methods that call  Instrument.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"InstrumentTiming","lvl1":"Creates logs, counters and timings for methods that call  Instrument.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a11dadbc5991a3ee04e7af9e3fd6c2b2","permalink":"/golang/rpc/services/instrument_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/services/instrument_timing/","section":"golang","summary":"Description The InstrumentTiming class allows you to create logs, countes and timings for methods that call Instrument.\nConstructors NewInstrumentTiming Creates a new instance of InstrumentTiming.\n NewInstrumentTiming(correlationId string, name string, verb string, logger ILogger, counters ICounters, counterTiming CounterTiming, traceTiming TraceTiming) *InstrumentTiming\n  correlationId: string - transaction id used to trace execution through the call chain. name: string - name verb: string - verb or \u0026lsquo;call\u0026rsquo; logger: ILogger - logger counters: ICounters - counters counterTiming: CounterTiming - counter traceTiming: TraceTiming - time tracer  Methods EndFailure Manages a failed service end.","tags":null,"title":"InstrumentTiming","type":"docs","url":"/hugo-docs/golang/rpc/services/instrument_timing/","weight":0,"wordcount":116},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates logs, counters and timings for methods that call  _instrument.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"InstrumentTiming","lvl1":"Creates logs, counters and timings for methods that call  _instrument.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c3a64c698bebaca07f6f379252743bd1","permalink":"/node/rpc/services/instrument_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/services/instrument_timing/","section":"node","summary":"Description The InstrumentTiming class allows you to create logs, countes and timings for methods that call _instrument.\nConstructors Creates a new instance of InstrumentTiming.\n public constructor((correlationId: string, name: string, verb: string, logger: ILogger, counters: ICounters, counterTiming: CounterTiming, traceTiming: TraceTiming)\n  correlationId: string - transaction id used to trace execution through the call chain. name: string - name verb: string - verb or \u0026lsquo;call\u0026rsquo; logger: ILogger - logger counters: ICounters - counters counterTiming: CounterTiming - counter traceTiming: TraceTiming - time tracer  Instance methods endFailure Manages a failed service end.","tags":null,"title":"InstrumentTiming","type":"docs","url":"/hugo-docs/node/rpc/services/instrument_timing/","weight":0,"wordcount":113},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates logs, counters and timings for methods that call  _instrument.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"InstrumentTiming","lvl1":"Creates logs, counters and timings for methods that call  _instrument.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ada1d99b1ad619f6b93582ec09842084","permalink":"/python/rpc/services/instrument_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/services/instrument_timing/","section":"python","summary":"Description The InstrumentTiming class allows you to create logs, countes and timings for methods that call _instrument.\nConstructors Creates a new instance of InstrumentTiming.\n InstrumentTiming(correlation_id: Optional[str], name: str, verb: str, logger: ILogger, counters: ICounters, counter_timing: Optional[CounterTiming], trace_timing: Optional[TraceTiming])\n  correlation_id: Optional[str] - transaction id used to trace execution through the call chain. name: str - name verb: str - verb or \u0026lsquo;call\u0026rsquo; logger: ILogger - logger counters: ICounters - counters counter_timing: Optional[CounterTiming] - counter trace_timing: Optional[TraceTiming] - time tracer  Instance methods end_failure Manages a failed service end.","tags":null,"title":"InstrumentTiming","type":"docs","url":"/hugo-docs/python/rpc/services/instrument_timing/","weight":0,"wordcount":113},{"authors":null,"categories":null,"date":-62135596800,"description":"The IntegerConverter class allows you to convert arbitrary values into integers using extended conversion rules.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623968342,"lvl0":"IntegerConverter","lvl1":"The IntegerConverter class allows you to convert arbitrary values into integers using extended conversion rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a0f5248082beec3a70cc47cb07f6634f","permalink":"/golang/commons/convert/integer_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/convert/integer_converter/","section":"golang","summary":"Description The IntegerConverter class allows you to convert arbitrary values into integers using the following extended conversion rules:\n Strings are converted to floats, then to integers DateTime: total number of milliseconds since unix epoсh Boolean: 1 for true and 0 for False  Methods toInteger Converts value into integer or returns 0 when conversion is not possible.\nSee LongConverter.ToLong,\nLongConverter.ToLongWithDefault\n ToInteger(value interface{}) int\n  value: interface{} - value to convert.","tags":null,"title":"IntegerConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/integer_converter/","weight":0,"wordcount":304},{"authors":null,"categories":null,"date":-62135596800,"description":"The IntegerConverter class allows you to convert arbitrary values into integers using extended conversion rules.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621570189,"lvl0":"IntegerConverter","lvl1":"The IntegerConverter class allows you to convert arbitrary values into integers using extended conversion rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"12a851da1bdc90cecf4ca0055ea0e427","permalink":"/net/commons/convert/integer_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/integer_converter/","section":"net","summary":"Description The IntegerConverter class allows you to convert arbitrary values into integers using the following extended conversion rules:\n Strings are converted to floats, then to integers DateTime: total number of milliseconds since unix epoсh Boolean: 1 for True and 0 for False  Static methods ToInteger Converts value into integer or returns 0 when conversion is not possible.\nSee LongConverter.ToLong,\nLongConverter.ToLongWithDefault\n public static int ToInteger(object value)\n  value: object - the value to convert.","tags":null,"title":"IntegerConverter","type":"docs","url":"/hugo-docs/net/commons/convert/integer_converter/","weight":0,"wordcount":203},{"authors":null,"categories":null,"date":-62135596800,"description":"The IntegerConverter class allows you to convert arbitrary values into integers using extended conversion rules.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"IntegerConverter","lvl1":"The IntegerConverter class allows you to convert arbitrary values into integers using extended conversion rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ec91d3e101a240827d638ab1ef151493","permalink":"/node/commons/convert/integer_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/convert/integer_converter/","section":"node","summary":"Description The IntegerConverter class allows you to convert arbitrary values into integers using the following extended conversion rules:\n Strings are converted to floats, then to integers DateTime: total number of milliseconds since unix epoсh Boolean: 1 for True and 0 for False  Static methods toInteger Converts value into integer or returns 0 when conversion is not possible.\nSee LongConverter.toLong,\nLongConverter.toLongWithDefault\n public static toInteger(value: any): number\n  value: any - the value to convert.","tags":null,"title":"IntegerConverter","type":"docs","url":"/hugo-docs/node/commons/convert/integer_converter/","weight":0,"wordcount":205},{"authors":null,"categories":null,"date":-62135596800,"description":"The IntegerConverter class allows you to convert arbitrary values into integers using extended conversion rules.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"IntegerConverter","lvl1":"The IntegerConverter class allows you to convert arbitrary values into integers using extended conversion rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"66d2f4faf4e7fc3ca0e11cad2bd33dd3","permalink":"/python/commons/convert/integer_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/integer_converter/","section":"python","summary":"Description The IntegerConverter class allows you to convert arbitrary values into integers using the following extended conversion rules:\n Strings are converted to floats, then to integers DateTime: total number of milliseconds since unix epoсh Boolean: 1 for True and 0 for False  Static methods to_integer Converts value into integer or returns 0 when conversion is not possible.\nSee LongConverter.toLong,\nLongConverter.to_long_with_default\n static toInteger(value: Any): int\n  value: Any - the value to convert.","tags":null,"title":"IntegerConverter","type":"docs","url":"/hugo-docs/python/commons/convert/integer_converter/","weight":0,"wordcount":197},{"authors":null,"categories":null,"date":-62135596800,"description":"Implements a [command](../icommand) wrapped by an interceptor.\n","dir":"golang/commons/commands/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623964153,"lvl0":"InterceptedCommand","lvl1":"Implements a [command](../icommand) wrapped by an interceptor.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f68a275423cbe6480b8e89d301b2efaa","permalink":"/golang/commons/commands/intercepted_command/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/commands/intercepted_command/","section":"golang","summary":"Description The InterceptedCommand allows you to implement a command wrapped by an interceptor. Thus, it allows you to build command call chains, where the interceptor can alter execution and delegate calls to a next command, which can then be intercepted or not.\nConstructors NewInterceptedCommand Creates a new InterceptedCommand, which serves as a link in an execution chain. Contains information about the interceptor that is being used and the next command in the chain.","tags":null,"title":"InterceptedCommand","type":"docs","url":"/hugo-docs/golang/commons/commands/intercepted_command/","weight":0,"wordcount":306},{"authors":null,"categories":null,"date":-62135596800,"description":"Implements a [command](../icommand) wrapped by an interceptor.\n","dir":"net/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"InterceptedCommand","lvl1":"Implements a [command](../icommand) wrapped by an interceptor.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"871b8ccd51a0a984b7dd5af481fe309b","permalink":"/net/commons/commands/intercepted_command/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/commands/intercepted_command/","section":"net","summary":"Inherits: ICommand\nDescription The InterceptedCommand allows you to implement a command wrapped by an interceptor. Thus, it allows you to build command call chains, where the interceptor can alter execution and delegate calls to a next command, which can then be intercepted or not.\nConstructors Creates a new InterceptedCommand, which serves as a link in an execution chain. Contains information about the interceptor that is being used and the next command in the chain.","tags":null,"title":"InterceptedCommand","type":"docs","url":"/hugo-docs/net/commons/commands/intercepted_command/","weight":0,"wordcount":293},{"authors":null,"categories":null,"date":-62135596800,"description":"Implements a [command](../icommand) wrapped by an interceptor.\n","dir":"node/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623089238,"lvl0":"InterceptedCommand","lvl1":"Implements a [command](../icommand) wrapped by an interceptor.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b78364db70c4f11b723f422beadcaf81","permalink":"/node/commons/commands/intercepted_command/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/commands/intercepted_command/","section":"node","summary":"Implements: ICommand\nDescription The InterceptedCommand allows you to implement a command wrapped by an interceptor. Thus, it allows you to build command call chains, where the interceptor can alter execution and delegate calls to a next command, which can then be intercepted or not.\nConstructors Creates a new InterceptedCommand, which serves as a link in an execution chain. Contains information about the interceptor that is being used and the next command in the chain.","tags":null,"title":"InterceptedCommand","type":"docs","url":"/hugo-docs/node/commons/commands/intercepted_command/","weight":0,"wordcount":299},{"authors":null,"categories":null,"date":-62135596800,"description":"Implements a [command](../icommand) wrapped by an interceptor.\n","dir":"python/commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620397120,"lvl0":"InterceptedCommand","lvl1":"Implements a [command](../icommand) wrapped by an interceptor.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"326f7b849ddf7990135f259c117f0ea9","permalink":"/python/commons/commands/intercepted_command/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/commands/intercepted_command/","section":"python","summary":"Implements: ICommand\nDescription The InterceptedCommand allows you to implement a command wrapped by an interceptor. Thus, it allows you to build command call chains, where the interceptor can alter execution and delegate calls to a next command, which can then be intercepted or not.\nConstructors Creates a new InterceptedCommand, which serves as a link in an execution chain. Contains information about the interceptor that is being used and the next command in the chain.","tags":null,"title":"InterceptedCommand","type":"docs","url":"/hugo-docs/python/commons/commands/intercepted_command/","weight":0,"wordcount":258},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by programming mistakes.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624228212,"lvl0":"InternalError","lvl1":"Errors caused by programming mistakes.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f2da99eaf056186e33430f272456fea6","permalink":"/golang/commons/errors/internal_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/internal_error/","section":"golang","summary":"Description The InternalError class is used to manage errors caused by programming mistakes.\nConstructors NewInternalError Creates an error instance and assigns its values.\n NewInternalError(correlationId, code, message string) *ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.  ","tags":null,"title":"InternalError","type":"docs","url":"/hugo-docs/golang/commons/errors/internal_error/","weight":0,"wordcount":62},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by programming mistakes.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"InternalException","lvl1":"Errors caused by programming mistakes.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e07a608062fcb16231932d91e7fafa47","permalink":"/net/commons/errors/internal_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/internal_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The InternalException class is used to manage errors caused by programming mistakes.\nConstructors Creates an error instance and assigns its values.\n public InternalException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"InternalException","type":"docs","url":"/hugo-docs/net/commons/errors/internal_exception/","weight":0,"wordcount":137},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by programming mistakes.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"InternalException","lvl1":"Errors caused by programming mistakes.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d8960d87bcb02367094449d40d48965b","permalink":"/node/commons/errors/internal_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/internal_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The InternalException class is used to manage errors caused by programming mistakes.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"InternalException","type":"docs","url":"/hugo-docs/node/commons/errors/internal_exception/","weight":0,"wordcount":71},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by programming mistakes.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620408677,"lvl0":"InternalException","lvl1":"Errors caused by programming mistakes.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"567dd31f742086db69c11b4bf496c683","permalink":"/python/commons/errors/internal_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/internal_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The InternalException class is used to manage errors caused by programming mistakes.\nConstructors Creates an error instance and assigns its values.\n InternalException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: str - (optional) a human-readable description of the error.","tags":null,"title":"InternalException","type":"docs","url":"/hugo-docs/python/commons/errors/internal_exception/","weight":0,"wordcount":70},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors related to calling operations, which require the component to be in a specific state. For instance: business calls when the component is not ready.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624228290,"lvl0":"InvalidStateError","lvl1":"Errors related to calling operations, which require the component to be in a specific state. For instance: business calls when the component is not ready.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b788b770ab39d8bc85cfaba3776ffeca","permalink":"/golang/commons/errors/invalid_state_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/invalid_state_error/","section":"golang","summary":"Description The InvalidStateError class is used to manage errors related to calling opertaions that require the component to be in a specific state. For example, business calls when the component is not ready.\nConstructors NewInvalidStateError Creates an error instance and assigns its values.\n NewInvalidStateError(correlationId, code, message string) *ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code.","tags":null,"title":"InvalidStateError","type":"docs","url":"/hugo-docs/golang/commons/errors/invalid_state_error/","weight":0,"wordcount":82},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors related to calling operations, which require the component to be in a specific state. For instance: business calls when the component is not ready.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"InvalidStateException","lvl1":"Errors related to calling operations, which require the component to be in a specific state. For instance: business calls when the component is not ready.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"51314105fbedf0459109819e3ad2ade3","permalink":"/net/commons/errors/invalid_state_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/invalid_state_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The InvalidStateException class is used to manage errors related to calling opertaions that require the component to be in a specific state. For example, business calls when the component is not reay.\nConstructors Creates an error instance and assigns its values.\n public InvalidStateException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain.","tags":null,"title":"InvalidStateException","type":"docs","url":"/hugo-docs/net/commons/errors/invalid_state_exception/","weight":0,"wordcount":147},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors related to calling operations, which require the component to be in a specific state. For instance: business calls when the component is not ready.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"InvalidStateException","lvl1":"Errors related to calling operations, which require the component to be in a specific state. For instance: business calls when the component is not ready.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9e68c0832b3ca48e16d85c01ec293380","permalink":"/node/commons/errors/invalid_state_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/invalid_state_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The InvalidStateException class is used to manage errors related to calling opertaions that require the component to be in a specific state. For example, business calls when the component is not reay.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain.","tags":null,"title":"InvalidStateException","type":"docs","url":"/hugo-docs/node/commons/errors/invalid_state_exception/","weight":0,"wordcount":91},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors related to calling operations, which require the component to be in a specific state. For instance: business calls when the component is not ready.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620409295,"lvl0":"InvalidStateException","lvl1":"Errors related to calling operations, which require the component to be in a specific state. For instance: business calls when the component is not ready.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"492838fdbf6d35950bd5b76282dc330f","permalink":"/python/commons/errors/invalid_state_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/invalid_state_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The InvalidStateException class is used to manage errors related to calling opertaions that require the component to be in a specific state. For example, business calls when the component is not reay.\nConstructors Creates an error instance and assigns its values.\n InvalidStateException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain.","tags":null,"title":"InvalidStateException","type":"docs","url":"/hugo-docs/python/commons/errors/invalid_state_exception/","weight":0,"wordcount":90},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors returned by remote services or by the network during call attempts.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624228370,"lvl0":"InvocationError","lvl1":"Errors returned by remote services or by the network during call attempts.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9f0efe625a8c9ca075afa7d061f29491","permalink":"/golang/commons/errors/invocation_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/invocation_error/","section":"golang","summary":"Description The InvocationError class is used to manage errors returned by remote services or by the network during call attempts.\nConstructors NewInvocationError Creates an error instance and assigns its values.\n NewInvocationError(correlationId, code, message string) *ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"InvocationError","type":"docs","url":"/hugo-docs/golang/commons/errors/invocation_error/","weight":0,"wordcount":69},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors returned by remote services or by the network during call attempts.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"InvocationException","lvl1":"Errors returned by remote services or by the network during call attempts.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"676adc1c483cb10ed77ef3ab3cfeb828","permalink":"/net/commons/errors/invocation_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/invocation_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The InvocationException class is used to manage errors returned by remote services or by the network during call attempts.\nConstructors Creates an error instance and assigns its values.\n public InvocationException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"InvocationException","type":"docs","url":"/hugo-docs/net/commons/errors/invocation_exception/","weight":0,"wordcount":134},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors returned by remote services or by the network during call attempts.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"InvocationException","lvl1":"Errors returned by remote services or by the network during call attempts.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5b41f42a47398dafa757a8b9577a4c90","permalink":"/node/commons/errors/invocation_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/invocation_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The InvocationException class is used to manage errors returned by remote services or by the network during call attempts.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"InvocationException","type":"docs","url":"/hugo-docs/node/commons/errors/invocation_exception/","weight":0,"wordcount":78},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors returned by remote services or by the network during call attempts.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620409461,"lvl0":"InvocationException","lvl1":"Errors returned by remote services or by the network during call attempts.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f1d2f7465f0439f19cc32583c04631dc","permalink":"/python/commons/errors/invocation_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/invocation_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The InvocationException class is used to manage errors returned by remote services or by the network during call attempts.\nConstructors Creates an error instance and assigns its values.\n InvocationException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: str - (optional) a human-readable description of the error.","tags":null,"title":"InvocationException","type":"docs","url":"/hugo-docs/python/commons/errors/invocation_exception/","weight":0,"wordcount":77},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with explicit opening and closing.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624245425,"lvl0":"IOpenable","lvl1":"Interface that allows you to create components with explicit opening and closing.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"025303f1ab8819748fd9cfc29824578f","permalink":"/golang/commons/run/iopenable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/iopenable/","section":"golang","summary":"Impements: IClosable\nDescription The IOpenable interface allows you to create components with explicit opening and closing.\nImportant points\n For components that perform opening on demand consider using IClosable interface instead.  Methods IsOpen Checks if the component is opened.\n IsOpen() bool\n  returns: bool - true if the component has been opened and false otherwise.  open Opens the component.\n Open(correlationId string) error\n  correlationId: string - (optional) transaction id used to trace execution through the call chain.","tags":null,"title":"IOpenable","type":"docs","url":"/hugo-docs/golang/commons/run/iopenable/","weight":0,"wordcount":132},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with explicit opening and closing.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"IOpenable","lvl1":"Interface that allows you to create components with explicit opening and closing.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"774b701bd47c2a1bc379dfc6473060b0","permalink":"/net/commons/run/iopenable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/iopenable/","section":"net","summary":"Inherits: IClosable\nDescription The IOpenable interface allows you to create components with explicit opening and closing.\nImportant points\n For components that perform opening on demand consider using IClosable interface instead.  Instance methods IsOpen Checks if the component is opened.\n bool IsOpen()\n  returns: bool - true if the component has been opened and false otherwise.  OpenAsync Opens the component.\n Task OpenAsync(string correlationId)\n  correlationId: string - (optional) transaction id to trace execution through call chain.","tags":null,"title":"IOpenable","type":"docs","url":"/hugo-docs/net/commons/run/iopenable/","weight":0,"wordcount":125},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with explicit opening and closing.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"IOpenable","lvl1":"Interface that allows you to create components with explicit opening and closing.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a77e36ef204a20af4d15a370a2108f59","permalink":"/node/commons/run/iopenable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/iopenable/","section":"node","summary":"Extends: IClosable\nDescription The IOpenable interface allows you to create components with explicit opening and closing.\nImportant points\n For components that perform opening on demand consider using IClosable interface instead.  Instance methods isOpen Checks if the component is opened.\n isOpen(): boolean\n  returns: boolean - true if the component has been opened and false otherwise.  open Opens the component.\n open(correlationId: string): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain.","tags":null,"title":"IOpenable","type":"docs","url":"/hugo-docs/node/commons/run/iopenable/","weight":0,"wordcount":128},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with explicit opening and closing.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"IOpenable","lvl1":"Interface that allows you to create components with explicit opening and closing.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"04fad8d47e6427440c16c410e3686f3a","permalink":"/python/commons/run/iopenable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/iopenable/","section":"python","summary":"Implements: IClosable\nDescription The IOpenable interface allows you to create components with explicit opening and closing.\nImportant points\n For components that perform opening on demand consider using IClosable interface instead.  Instance methods is_open Checks if the component is opened.\n is_open(): bool\n  returns: bool - true if the component has been opened and false otherwise.  open Opens the component.\n open(correlation_id: Optional[str])\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain.","tags":null,"title":"IOpenable","type":"docs","url":"/hugo-docs/python/commons/run/iopenable/","weight":0,"wordcount":109},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with execution parameters.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623338824,"lvl0":"IParameterized","lvl1":"Interface that allows you to create components with execution parameters.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7f758759e1a9887b11e9d3d943ec8ff5","permalink":"/golang/commons/run/iparameterized/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/iparameterized/","section":"golang","summary":"Description The IParameterized interface allows you to create components with execution parameters.\nMethods SetParameters Sets execution parameters.\n SetParameters(parameters *Parameters)\n  parameters: *Parameters - execution parameters.  See also   IConfigurable   ","tags":null,"title":"IParameterized","type":"docs","url":"/hugo-docs/golang/commons/run/iparameterized/","weight":0,"wordcount":27},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with execution parameters.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IParameterized","lvl1":"Interface that allows you to create components with execution parameters.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d443eb30df44bbb650ad2ab3c1a6b1dc","permalink":"/net/commons/run/iparameterized/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/iparameterized/","section":"net","summary":"Description The IParameterized interface allows you to create components with execution parameters.\nInstance methods SetParameters Sets execution parameters.\n void SetParameters(Parameters parameters)\n  parameters: Parameters - execution parameters.  See also   IConfigurable   ","tags":null,"title":"IParameterized","type":"docs","url":"/hugo-docs/net/commons/run/iparameterized/","weight":0,"wordcount":29},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with execution parameters.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621526520,"lvl0":"IParameterized","lvl1":"Interface that allows you to create components with execution parameters.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a48a66bbd70c900051d56890c008e6f0","permalink":"/node/commons/run/iparameterized/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/iparameterized/","section":"node","summary":"Description The IParameterized interface allows you to create components with execution parameters.\nInstance methods setParameters Sets execution parameters.\n setParameters(parameters: Parameters): void\n  parameters: Parameters - execution parameters.  See also   IConfigurable   ","tags":null,"title":"IParameterized","type":"docs","url":"/hugo-docs/node/commons/run/iparameterized/","weight":0,"wordcount":29},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface that allows you to create components with execution parameters.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621526520,"lvl0":"IParameterized","lvl1":"Interface that allows you to create components with execution parameters.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ee665a8fa8eccf773dbff956337eaad7","permalink":"/python/commons/run/iparameterized/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/iparameterized/","section":"python","summary":"Description The IParameterized interface allows you to create components with execution parameters.\nInstance methods set_parameters Sets execution parameters.\n set_parameters(parameters: Parameters)\n  parameters: Parameters - execution parameters.  See also   IConfigurable   ","tags":null,"title":"IParameterized","type":"docs","url":"/hugo-docs/python/commons/run/iparameterized/","weight":0,"wordcount":28},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components to update data items partially.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IPartialUpdater","lvl1":"Interface for data processing components to update data items partially.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0918fae06074c7decb87bceaa985910e","permalink":"/golang/data/persistence/ipartial_updater/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/ipartial_updater/","section":"golang","summary":"Description The IPartialUpdater interface is used by data processing components to update data items partially.\nMethods UpdatePartially Updates only few selected fields in a data item.\n UpdatePartially(correlation_id string, id interface{}, data *data.AnyValueMap) (item interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. id: interface{} - id of the data item to be updated. data: *data.AnyValueMap - map with fields to be updated.","tags":null,"title":"IPartialUpdater","type":"docs","url":"/hugo-docs/golang/data/persistence/ipartial_updater/","weight":0,"wordcount":78},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components to update data items partially.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"IPartialUpdater\u003cT, K\u003e","lvl1":"Interface for data processing components to update data items partially.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cb888d468373fbe32284cf283895c230","permalink":"/node/data/core/ipartial_updater/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/ipartial_updater/","section":"node","summary":"Description The IPartialUpdater interface is used by data processing components to update data items partially.\nInstance methods updatePartially Updates only few selected fields in a data item.\n updatePartially(correlationId: string, id: K, data: AnyValueMap): Promise\u0026lt;T\u0026gt;\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. id: K - id of the data item to be updated. data: AnyValueMap - map with fields to be updated.","tags":null,"title":"IPartialUpdater\u003cT, K\u003e","type":"docs","url":"/hugo-docs/node/data/core/ipartial_updater/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components to update data items partially.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622585083,"lvl0":"IPartialUpdater","lvl1":"Interface for data processing components to update data items partially.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"afae9ac6f8dae3db485a739635d8e5e0","permalink":"/python/data/core/ipartial_updater/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/ipartial_updater/","section":"python","summary":"Description The IPartialUpdater interface is used by data processing components to update data items partially.\nInstance methods update_partially Updates only few selected fields in a data item.\n update_partially(correlation_id: Optional[str], id: Any, data: AnyValueMap): T\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. id: Any - id of the data item to be updated. data: AnyValueMap - map with fields to be updated.","tags":null,"title":"IPartialUpdater","type":"docs","url":"/hugo-docs/python/data/core/ipartial_updater/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO: add description\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IProperties","lvl1":"TODO: add description\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"634f80ba951db5ca67e98122a384b9b6","permalink":"/net/commons/reflect/iproperties/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/reflect/iproperties/","section":"net","summary":"Description TODO: add description\nInstance methods GetPropertyNames TODO: add description\n List\u0026lt;string\u0026gt; GetPropertyNames()\n  returns: List\u0026lt;string\u0026gt; - TODO: add description  GetProperty TODO: add description\n object GetProperty(string name)\n  name: string - TODO: add description returns: object - TODO: add description  SetProperty TODO: add description\n void SetProperty(string name, object value)\n  name: string - TODO: add description value: object - TODO: add description  ","tags":null,"title":"IProperties","type":"docs","url":"/hugo-docs/net/commons/reflect/iproperties/","weight":0,"wordcount":58},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can query a page of data items.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IQuerablePageReader","lvl1":"Interface for data processing components that can query a page of data items.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a246862c3a6e2b71d051ae815608d165","permalink":"/golang/data/persistence/iquerable_page_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/iquerable_page_reader/","section":"golang","summary":"Description The IQuerablePageReader interface is used by data processing components that can query a page of data items.\nMethods GetPageByQuery Gets a page of data items using a query string.\n GetPageByQuery(correlation_id string, query string, paging *data.PagingParams, sort *data.SortParams) (page interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. query: string - (optional) query string paging: *data.PagingParams - (optional) paging parameters sort: *data.","tags":null,"title":"IQuerablePageReader","type":"docs","url":"/hugo-docs/golang/data/persistence/iquerable_page_reader/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can query a page of data items.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"IQuerablePageReader\u003cT\u003e","lvl1":"Interface for data processing components that can query a page of data items.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"00b10ddbef56423092da49b34492d990","permalink":"/node/data/core/iquerable_page_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/iquerable_page_reader/","section":"node","summary":"Description The IQuerablePageReader interface is used by data processing components that can query a page of data items.\nInstance methods getPageByQuery Gets a page of data items using a query string.\n getPageByQuery(correlationId: string, query: string, paging: PagingParams, sort: SortParams): Promise\u0026lt;DataPage\u0026lt;T\u0026gt;\u0026gt;\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. query: string - (optional) query string paging: PagingParams - (optional) paging parameters sort: SortParams - (optional) sorting parameters returns: Promise\u0026lt;DataPage\u0026lt;T\u0026gt;\u0026gt; - list of items  ","tags":null,"title":"IQuerablePageReader\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/core/iquerable_page_reader/","weight":0,"wordcount":78},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can query a page of data items.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622585160,"lvl0":"IQuerablePageReader","lvl1":"Interface for data processing components that can query a page of data items.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6c92c0f7f79b7e40a1210fd8b9518cf3","permalink":"/python/data/core/iquerable_page_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/iquerable_page_reader/","section":"python","summary":"Description The IQuerablePageReader interface is used by data processing components that can query a page of data items.\nInstance methods get_page_by_query Gets a page of data items using a query string.\n get_page_by_query(correlation_id: Optional[str], query: Optional[str], paging: Optional[PagingParams], sort: Optional[SortParams] = None): DataPage\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. query: Optional[str] - (optional) query string paging: Optional[PagingParams] - (optional) paging parameters sort: Optional[SortParams] - (optional) sorting parameters returns: DataPage - list of items  ","tags":null,"title":"IQuerablePageReader","type":"docs","url":"/hugo-docs/python/data/core/iquerable_page_reader/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can query a list of data items.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"IQuerableReader","lvl1":"Interface for data processing components that can query a list of data items.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5cadcf502312838cf9649fbb126ab887","permalink":"/golang/data/persistence/iquerable_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/iquerable_reader/","section":"golang","summary":"Description The IQuerableReader interface is used by data processing components that can query a list of data items.\nMethods GetListByQuery Gets a list of data items using a query string.\n GetListByQuery(correlation_id string, query string, sort *data.SortParams) (items []interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. query: string - (optional) query string sort: *data.SortParams - (optional) sorting parameters returns: (items []interface{}, err error) - list of items  ","tags":null,"title":"IQuerableReader","type":"docs","url":"/hugo-docs/golang/data/persistence/iquerable_reader/","weight":0,"wordcount":75},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can query a list of data items.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"IQuerableReader\u003cT\u003e","lvl1":"Interface for data processing components that can query a list of data items.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cc13ce2f229424cf804480a621564815","permalink":"/node/data/core/iquerable_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/iquerable_reader/","section":"node","summary":"Description The IQuerableReader interface is used by data processing components that can query a list of data items.\nInstance methods getListByQuery Gets a list of data items using a query string.\n getListByQuery(correlationId: string, query: string, sort: SortParams): Promise\u0026lt;T[]\u0026gt;\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. query: string - (optional) query string sort: SortParams - (optional) sorting parameters returns: Promise\u0026lt;T[]\u0026gt; - list of items  ","tags":null,"title":"IQuerableReader\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/core/iquerable_reader/","weight":0,"wordcount":70},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can query a list of data items.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622585227,"lvl0":"IQuerableReader","lvl1":"Interface for data processing components that can query a list of data items.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2a249e7451a22467a3583d03cc170014","permalink":"/python/data/core/iquerable_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/iquerable_reader/","section":"python","summary":"Description The IQuerableReader interface is used by data processing components that can query a list of data items.\nInstance methods get_list_by_query Gets a list of data items using a query string.\n get_list_by_query(correlation_id: Optional[str], query: Optional[str], sort: Optional[SortParams] = None): List[Any]\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. query: Optional[str] - (optional) query string sort: Optional[SortParams] - (optional) sorting parameters returns: List[T] - list of items  ","tags":null,"title":"IQuerableReader","type":"docs","url":"/hugo-docs/python/data/core/iquerable_reader/","weight":0,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to set configuration parameters to an object.  \n","dir":"golang/commons/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623089238,"lvl0":"IReconfigurable","lvl1":"An interface used to set configuration parameters to an object.  \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f591e7b21306c941b5b452302dd9efcc","permalink":"/golang/commons/config/ireconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/config/ireconfigurable/","section":"golang","summary":"Implements: IConfigurable\nSee also IConfigurable\nDescription The IReconfigurable interface is used to set configuration parameters to an object.\nImportant points:\n It is similar to IConfigurable interface, but emphasises the fact that the configure() method can be called more than once to change an object configuration in runtime.  Examples TODO: add example See also   IConfigurable   ","tags":null,"title":"IReconfigurable","type":"docs","url":"/hugo-docs/golang/commons/config/ireconfigurable/","weight":0,"wordcount":54},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to set configuration parameters to an object.  \n","dir":"net/commons/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"IReconfigurable","lvl1":"An interface used to set configuration parameters to an object.  \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b38b64535e0ac1c7a7dd96623b0a5833","permalink":"/net/commons/config/ireconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/config/ireconfigurable/","section":"net","summary":"Inherits: IConfigurable\nSee also IConfigurable\nDescription The IReconfigurable interface is used to set configuration parameters to an object.\nImportant points:\n It is similar to IConfigurable interface, but emphasises the fact that the configure() method can be called more than once to change an object configuration in runtime.  Examples public class MyClass:IReconfigurable { private var _myParam = \u0026#34;default args\u0026#34;; // Implement configure \tpublic Task Configure(ConfigParams config) { this._myParam = config.","tags":null,"title":"IReconfigurable","type":"docs","url":"/hugo-docs/net/commons/config/ireconfigurable/","weight":0,"wordcount":76},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to set configuration parameters to an object.  \n","dir":"node/commons/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"IReconfigurable","lvl1":"An interface used to set configuration parameters to an object.  \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"be00aac521ba24ee3463305fd7674ed7","permalink":"/node/commons/config/ireconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/config/ireconfigurable/","section":"node","summary":"Extends: IConfigurable\nSee also IConfigurable\nDescription The IReconfigurable interface is used to set configuration parameters to an object.\nImportant points:\n It is similar to IConfigurable interface, but emphasises the fact that the configure() method can be called more than once to change an object configuration in runtime.  Examples export class MyClass implements IReconfigurable { private _myParam: string = \u0026#34;default args\u0026#34;; // Implement configure \tpublic configure(config: ConfigParams): void { this.","tags":null,"title":"IReconfigurable","type":"docs","url":"/hugo-docs/node/commons/config/ireconfigurable/","weight":0,"wordcount":78},{"authors":null,"categories":null,"date":-62135596800,"description":"An interface used to set configuration parameters to an object.  \n","dir":"python/commons/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621286381,"lvl0":"IReconfigurable","lvl1":"An interface used to set configuration parameters to an object.  \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6d43dd9bc764fb88592ae4e9e4047ebc","permalink":"/python/commons/config/ireconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/config/ireconfigurable/","section":"python","summary":"Description The IReconfigurable interface is used to set configuration parameters to an object.\nImportant points:\n It is similar to IConfigurable interface, but emphasises the fact that the configure() method can be called more than once to change an object configuration in runtime.  Implements: IConfigurable\nExamples class MyClass(IReconfigurable): _myParam = \u0026#34;default args\u0026#34; # Implement configure def configure(self, config): self._myParam = config.get_as_string_with_default(\u0026#34;options.param\u0026#34;, myParam) See also   IConfigurable   ","tags":null,"title":"IReconfigurable","type":"docs","url":"/hugo-docs/python/commons/config/ireconfigurable/","weight":0,"wordcount":64},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface with methods to set refernces for components that depend on other components. \n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"IReferenceable","lvl1":"Interface with methods to set refernces for components that depend on other components. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"195087457ebda63dce1037e903aed8c4","permalink":"/golang/commons/refer/ireferenceable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/refer/ireferenceable/","section":"golang","summary":"Description The IReferenceable interface allows you to set references for components that depend on other components.\nImportant points\n If component requires explicit notification to unset references, it must also implement the IUnreferenceable interface.  Methods SetReferences Sets references to dependent components.\n SetReferences(references IReferences)\n  references: IReferences - references to locate the component dependencies.  Examples type MyController { _persistence IPersistence } func (mc* MyController) setReferences(references IReferences) { mc.","tags":null,"title":"IReferenceable","type":"docs","url":"/hugo-docs/golang/commons/refer/ireferenceable/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface with methods to set refernces for components that depend on other components. \n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IReferenceable","lvl1":"Interface with methods to set refernces for components that depend on other components. \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ccef52a0a0542221cb77b0f42fd8953a","permalink":"/net/commons/refer/ireferenceable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/refer/ireferenceable/","section":"net","summary":"Description The IReferenceable interface allows you to set references for components that depend on other components.\nImportant points\n If component requires explicit notification to unset references, it must also implement the IUnreferenceable interface.  Instance methods SetReferences Sets references to dependent components.\n void SetReferences(IReferences references)\n  references: IReferences - references to locate the component dependencies.  Examples public class MyController: IReferenceable { public IMyPersistence _persistence; ... public void SetReferences(IReferences references) { this.","tags":null,"title":"IReferenceable","type":"docs","url":"/hugo-docs/net/commons/refer/ireferenceable/","weight":0,"wordcount":86},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface with methods to set refernces for components that depend on other components. \n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"IReferenceable","lvl1":"Interface with methods to set refernces for components that depend on other components. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a3e69d5858962b7019376ec5f04f23be","permalink":"/node/commons/refer/ireferenceable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/refer/ireferenceable/","section":"node","summary":"Description The IReferenceable interface allows you to set references for components that depend on other components.\nImportant points\n If component requires explicit notification to unset references, it must also implement the IUnreferenceable interface.  Instance methods setReferences Sets references to dependent components.\n setReferences(references: IReferences): void\n  references: IReferences - references to locate the component dependencies.  Examples export class MyController implements IReferenceable { public _persistence: IMyPersistence; ... public setReferences(references: IReferences): void { this.","tags":null,"title":"IReferenceable","type":"docs","url":"/hugo-docs/node/commons/refer/ireferenceable/","weight":0,"wordcount":87},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface with methods to set refernces for components that depend on other components. \n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620151112,"lvl0":"IReferenceable","lvl1":"Interface with methods to set refernces for components that depend on other components. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"64998e4d5726873722a255bbb47c4830","permalink":"/python/commons/refer/ireferenceable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/refer/ireferenceable/","section":"python","summary":"Description The IReferenceable interface allows you to set references for components that depend on other components.\nImportant points\n If component requires explicit notification to unset references, it must also implement the IUnreferenceable interface.  Instance methods set_references Sets references to dependent components.\n set_references(references: IReferences)\n  references: IReferences - references to locate the component dependencies.  Examples class MyController(IReferenceable): _persistence = None def set_references(self, references): self._persistence = references.get_one_required(Descriptor(\u0026#34;mygroup\u0026#34;, \u0026#34;persistence\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;1.","tags":null,"title":"IReferenceable","type":"docs","url":"/hugo-docs/python/commons/refer/ireferenceable/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to manage references stored in a map.\n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624236314,"lvl0":"IReferences","lvl1":"Interface to manage references stored in a map.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"559c46d0f508102e027fef0dfccf05ff","permalink":"/golang/commons/refer/ireferences/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/refer/ireferences/","section":"golang","summary":"Description The IReferences interface can be used to manage references stored in a map, and which can be passed to other components to establish dependencies between them.\nGenerally speaking, an IReferences object is a simple map, where keys are locators and values are component references. Thus, it allows you to add, remove and find components by their locators. Locators can be any values like integers, strings or component types.\nImportant points","tags":null,"title":"IReferences","type":"docs","url":"/hugo-docs/golang/commons/refer/ireferences/","weight":0,"wordcount":492},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to manage references stored in a map.\n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IReferences","lvl1":"Interface to manage references stored in a map.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3ef16636b6781a4c39233d0551ee8b5f","permalink":"/net/commons/refer/ireferences/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/commons/refer/ireferences/","section":"net","summary":"Description The IReferences interface can be used to manage references stored in a map, and which can be passed to other components to establish dependencies between them.\nGenerally speaking, an IReferences object is a simple map, where keys are locators and values are component references. Thus, it allows you to add, remove and find components by their locators. Locators can be any values like integers, strings or component types.\nImportant points","tags":null,"title":"IReferences","type":"docs","url":"/hugo-docs/net/commons/refer/ireferences/","weight":0,"wordcount":822},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to manage references stored in a map.\n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"IReferences","lvl1":"Interface to manage references stored in a map.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f21a3a12931f1b8d0fec9023a8bb3147","permalink":"/node/commons/refer/ireferences/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/refer/ireferences/","section":"node","summary":"Description The IReferences interface can be used to manage references stored in a map, and which can be passed to other components to establish dependencies between them.\nGenerally speaking, an IReferences object is a simple map, where keys are locators and values are component references. Thus, it allows you to add, remove and find components by their locators. Locators can be any values like integers, strings or component types.\nImportant points","tags":null,"title":"IReferences","type":"docs","url":"/hugo-docs/node/commons/refer/ireferences/","weight":0,"wordcount":561},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to manage references stored in a map.\n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"IReferences","lvl1":"Interface to manage references stored in a map.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b18986681b034d891b72305e542fc275","permalink":"/python/commons/refer/ireferences/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/refer/ireferences/","section":"python","summary":"Description The IReferences interface can be used to manage references stored in a map, and which can be passed to other components to establish dependencies between them.\nGenerally speaking, an IReferences object is a simple map, where keys are locators and values are component references. Thus, it allows you to add, remove and find components by their locators. Locators can be any values like integers, strings or component types.\nImportant points","tags":null,"title":"IReferences","type":"docs","url":"/hugo-docs/python/commons/refer/ireferences/","weight":0,"wordcount":536},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to perform on-demand registrations.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"IRegisterable","lvl1":"Interface to perform on-demand registrations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ef8396a954b8e98d1ec223d34c289686","permalink":"/golang/rpc/services/iregisterable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/services/iregisterable/","section":"golang","summary":"Description The IRegisterable interface is used to perform on-demand registrations.\nMethods Register Performs the required registration steps.\n Register()\n ","tags":null,"title":"IRegisterable","type":"docs","url":"/hugo-docs/golang/rpc/services/iregisterable/","weight":0,"wordcount":18},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to perform on-demand registrations.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623078433,"lvl0":"IRegisterable","lvl1":"Interface to perform on-demand registrations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0aa37f6520f4fbc05e4a7ea8cec27b8f","permalink":"/node/rpc/services/iregisterable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/services/iregisterable/","section":"node","summary":"Description The IRegisterable interface is used to perform on-demand registrations.\nInstance methods register Performs the required registration steps.\n register(): void\n ","tags":null,"title":"IRegisterable","type":"docs","url":"/hugo-docs/node/rpc/services/iregisterable/","weight":0,"wordcount":20},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to perform on-demand registrations.\n","dir":"python/grpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"IRegisterable","lvl1":"Interface to perform on-demand registrations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"80f40a40064c791aab265c13d5b5a9da","permalink":"/python/grpc/services/iregisterable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/grpc/services/iregisterable/","section":"python","summary":"Description The IRegisterable is used to perform on-demand registration.\nInstance methods register Perform required registration steps.\n register()\n ","tags":null,"title":"IRegisterable","type":"docs","url":"/hugo-docs/python/grpc/services/iregisterable/","weight":0,"wordcount":17},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to perform on-demand registrations.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622158380,"lvl0":"IRegisterable","lvl1":"Interface to perform on-demand registrations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"95881c53d9121ef49e0e0c030f15b298","permalink":"/python/rpc/services/iregisterable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/services/iregisterable/","section":"python","summary":"Description The IRegisterable interface is used to perform on-demand registrations.\nInstance methods register Performs the required registration steps.\n register()\n ","tags":null,"title":"IRegisterable","type":"docs","url":"/hugo-docs/python/rpc/services/iregisterable/","weight":0,"wordcount":19},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that save data items.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"ISaver","lvl1":"Interface for data processing components that save data items.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"793eefad8d5eb648a4ce57ce695cc1b0","permalink":"/golang/data/persistence/isaver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/isaver/","section":"golang","summary":"Description The ISaver interface is used by data processing components that save data items.\nMethods Save Saves given data items.\n Save(correlation_id string, items []interface{}) error\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. items: T[] - a list of items to save. returns: error - returns error if not saved  ","tags":null,"title":"ISaver","type":"docs","url":"/hugo-docs/golang/data/persistence/isaver/","weight":0,"wordcount":56},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that save data items.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"ISaver\u003cT\u003e","lvl1":"Interface for data processing components that save data items.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3fecc9482203c9f199429acf2003899d","permalink":"/node/data/core/isaver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/isaver/","section":"node","summary":"Description The ISaver interface is used by data processing components that save data items.\nInstance methods save Saves given data items.\n save(correlationId: string, items: T[]): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. items: T[] - a list of items to save.  ","tags":null,"title":"ISaver\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/core/isaver/","weight":0,"wordcount":49},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that save data items.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622505674,"lvl0":"ISaver","lvl1":"Interface for data processing components that save data items.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"359d53596eaf3515b6530d059db01725","permalink":"/python/data/core/isaver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/isaver/","section":"python","summary":"Description The ISaver interface is used by data processing components that save data items.\nInstance methods save Saves given data items.\n save(correlation_id: Optional[str], items: List[T])\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. items: List[T] - list of items to save.  ","tags":null,"title":"ISaver","type":"docs","url":"/hugo-docs/python/data/core/isaver/","weight":0,"wordcount":47},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation schema interface\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623338824,"lvl0":"ISchema","lvl1":"Validation schema interface\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e22cc45169edd226d26279cd021a4676","permalink":"/golang/commons/validate/ischema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/ischema/","section":"golang","summary":"Description TODO: add description\nMethods Validate TODO: add description\n Validate(value interface{}) []*ValidationResult\n  value: interface{} - TODO: add description returns: []*ValidationResult - TODO: add description  ValidateAndReturnError TODO: add description\n ValidateAndReturnError(correlationId string, value interface{}, strict bool) *errors.ApplicationError\n  correlationId: string - TODO: add description value: interface{} - TODO: add description strict: bool - TODO: add description returns: *errors.ApplicationError - TODO: add description  ValidateAndThrowError TODO: add description","tags":null,"title":"ISchema","type":"docs","url":"/hugo-docs/golang/commons/validate/ischema/","weight":0,"wordcount":87},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO: add description\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624306878,"lvl0":"ISchemaBase","lvl1":"TODO: add description\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eee9b12bf1c82c06e92937e51f0f1401","permalink":"/golang/commons/validate/ischema_base/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/ischema_base/","section":"golang","summary":"Description TODO: add description\nMethods PerformValidation TODO: add description\n PerformValidation(path string, value interface{}) []*ValidationResult\n  path: interface{} - TODO: add description returns: []*ValidationResult - TODO: add description  ","tags":null,"title":"ISchemaBase","type":"docs","url":"/hugo-docs/golang/commons/validate/ischema_base/","weight":0,"wordcount":26},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can set (create or update) data items.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"ISetter","lvl1":"Interface for data processing components that can set (create or update) data items.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4b13cc6f1b66065eb0e0f95edb63c960","permalink":"/golang/data/persistence/isetter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/isetter/","section":"golang","summary":"Description The ISetter interface is used by data processing components that can set (create or update) data items.\nMethods Set Sets a data item. If the data item exists it updates it, otherwise it creates a new data item.\n Set(correlation_id string, item interface{}) (value interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. item: interface{} - item to be set.","tags":null,"title":"ISetter","type":"docs","url":"/hugo-docs/golang/data/persistence/isetter/","weight":0,"wordcount":76},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can set (create or update) data items.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"ISetter\u003cT\u003e","lvl1":"Interface for data processing components that can set (create or update) data items.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dad40392c32976690b9086e8ad201d20","permalink":"/node/data/core/isetter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/isetter/","section":"node","summary":"Description The ISetter interface is used by data processing components that can set (create or update) data items.\nInstance methods set Sets a data item. If the data item exists it updates it, otherwise it creates a new data item.\n set(correlationId: string, item: T): Promise\u0026lt;T\u0026gt;\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. item: T - item to be set. returns: Promise\u0026lt;T\u0026gt; - updated item  ","tags":null,"title":"ISetter\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/core/isetter/","weight":0,"wordcount":71},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can set (create or update) data items.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622585318,"lvl0":"ISetter","lvl1":"Interface for data processing components that can set (create or update) data items.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f129070aae31c1caf7c92ce5987c9873","permalink":"/python/data/core/isetter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/isetter/","section":"python","summary":"Description The ISetter interface is used by data processing components that can set (create or update) data items.\nInstance methods set Sets a data item. If the data item exists it updates it, otherwise it creates a new data item.\n set(correlation_id: Optional[str], item: T): T\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. item: T - item to be set. returns: T - updated item  ","tags":null,"title":"ISetter","type":"docs","url":"/hugo-docs/python/data/core/isetter/","weight":0,"wordcount":71},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that can be uniquely identifed by a string id. \n\nThe interface extends [IIdentifiable](../iidentifiable) to hardcode id type to string.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"IStringIdentifiable","lvl1":"Interface for data objects that can be uniquely identifed by a string id. \n\nThe interface extends [IIdentifiable](../iidentifiable) to hardcode id type to string.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"29850f7aff9a41cff6e9b1b28c6277d5","permalink":"/net/commons/data/istring_identifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/istring_identifiable/","section":"net","summary":"Inherits: IIdentifiable\nDescription The IIdentifiable interface extends IIdentifiable to hardcode id type to string.\nImportant points\n It is common to use a string GUID as the id, generated by IdGenerator.  Examples public class MyData: IIdentifiable\u0026lt;String\u0026gt; { string id {get; set;} string field1; int field2; ... } See also   IIdentifiable   IdGenerator   ","tags":null,"title":"IStringIdentifiable","type":"docs","url":"/hugo-docs/net/commons/data/istring_identifiable/","weight":0,"wordcount":50},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that can be uniquely identifed by a string id. \n\nThe interface extends [IIdentifiable](../iidentifiable) to hardcode id type to string.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"IStringIdentifiable","lvl1":"Interface for data objects that can be uniquely identifed by a string id. \n\nThe interface extends [IIdentifiable](../iidentifiable) to hardcode id type to string.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"088fdf4d825079f216af17f5e6128201","permalink":"/node/commons/data/istring_identifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/istring_identifiable/","section":"node","summary":"Extends: IIdentifiable\nDescription The IIdentifiable interface extends IIdentifiable to hardcode id type to string.\nImportant points\n It is common to use a string GUID as the id, generated by IdGenerator.  Fields id The object\u0026rsquo;s unique string id.\n id: string\n  Examples export class MyData implements IStringIdentifiable { public id: string; public field1: string; public field2: number; ... } See also   IIdentifiable   IdGenerator   ","tags":null,"title":"IStringIdentifiable","type":"docs","url":"/hugo-docs/node/commons/data/istring_identifiable/","weight":0,"wordcount":61},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that can be uniquely identifed by a string id. \n\nThe interface extends [IIdentifiable](../iidentifiable) to hardcode id type to string.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"IStringIdentifiable","lvl1":"Interface for data objects that can be uniquely identifed by a string id. \n\nThe interface extends [IIdentifiable](../iidentifiable) to hardcode id type to string.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c32e066e218c21bbc1d3e17263e8a33e","permalink":"/python/commons/data/istring_identifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/istring_identifiable/","section":"python","summary":"Implements: IIdentifiable\nDescription The IIdentifiable interface extends IIdentifiable to hardcode id type to string.\nImportant points\n It is common to use a string GUID as the id, generated by IdGenerator.  Fields id The object\u0026rsquo;s unique string id.\n id: str\n  Examples class MyData(IStringIdentifiable): id = None See also   IIdentifiable   IdGenerator   ","tags":null,"title":"IStringIdentifiable","type":"docs","url":"/hugo-docs/python/commons/data/istring_identifiable/","weight":0,"wordcount":49},{"authors":null,"categories":null,"date":-62135596800,"description":"**TODO: this is not implemented for this language yet**\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623415145,"lvl0":"IStringIdentifiable!","lvl1":"**TODO: this is not implemented for this language yet**\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e4a38c23360e6839863cc3d2e5a6fdb9","permalink":"/golang/commons/data/istring_identifiable/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/commons/data/istring_identifiable/","section":"golang","summary":"","tags":null,"title":"IStringIdentifiable!","type":"docs","url":"/hugo-docs/golang/commons/data/istring_identifiable/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to perform Swagger registrations.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"ISwaggerService","lvl1":"Interface to perform Swagger registrations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"779d6b83a85b8de28015537fb146f3ec","permalink":"/golang/rpc/services/iswagger_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/services/iswagger_service/","section":"golang","summary":"Description The ISwaggerService interface is used to perform Swagger registrations.\nMethods RegisterOpenApiSpec Performs the required Swagger registration steps.\n RegisterOpenApiSpec(baseRoute string, content string)\n  baseRoute: string - base route swaggerRoute: string - Swagger route  ","tags":null,"title":"ISwaggerService","type":"docs","url":"/hugo-docs/golang/rpc/services/iswagger_service/","weight":0,"wordcount":32},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to perform Swagger registrations.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623078433,"lvl0":"ISwaggerService","lvl1":"Interface to perform Swagger registrations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"77e0d333488efe0a5554b0da6de1a448","permalink":"/node/rpc/services/iswagger_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/services/iswagger_service/","section":"node","summary":"Description The ISwaggerService interface is used to perform Swagger registrations.\nInstance methods registerOpenApiSpec Performs the required Swagger registration steps.\n registerOpenApiSpec(base_route: string, swagger_route: string): void\n  baseRoute: string - base route swaggerRoute: string - Swagger route  ","tags":null,"title":"ISwaggerService","type":"docs","url":"/hugo-docs/node/rpc/services/iswagger_service/","weight":0,"wordcount":34},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface to perform Swagger registrations.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622164406,"lvl0":"ISwaggerService","lvl1":"Interface to perform Swagger registrations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2bb4ed938ba14bc2bf8e859c56daf905","permalink":"/python/rpc/services/iswagger_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/services/iswagger_service/","section":"python","summary":"Description The ISwaggerService interface is used to perform Swagger registrations.\nInstance methods register_open_api_spec Performs the required Swagger registration steps.\n register_open_api_spec(base_route: str, swagger_route: str)\n  base_route: str - base route swagger_route: str - Swagger route  ","tags":null,"title":"ISwaggerService","type":"docs","url":"/hugo-docs/python/rpc/services/iswagger_service/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for tracer components that capture operation traces.\n","dir":"golang/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"ITracer","lvl1":"Interface for tracer components that capture operation traces.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bccb2092033839efcf372b5911e6572a","permalink":"/golang/components/trace/itracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/trace/itracer/","section":"golang","summary":"Description The ITracer interface is used to create tracer component that capture operation traces.\nMethods BeginTrace Begings recording an operation trace\n BeginTrace(correlationId string, component string, operation string) *TraceTiming\n  correlationId: string - (optional) transaction id to trace execution through a call chain. component: string - name of the called component operation: string - name of the executed operation. return: *TraceTiming - a trace timing object.  Failure Records an operation failure with its name, duration and error.","tags":null,"title":"ITracer","type":"docs","url":"/hugo-docs/golang/components/trace/itracer/","weight":0,"wordcount":185},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for tracer components that capture operation traces.\n","dir":"net/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ITracer","lvl1":"Interface for tracer components that capture operation traces.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f896040e0c87fb47c5c996b16d772fbe","permalink":"/net/components/trace/itracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/trace/itracer/","section":"net","summary":"Description The ITracer interface is used to create tracer component that capture operation traces.\nInstance methods BeginTrace Begings recording an operation trace\n TraceTiming BeginTrace(string correlationId, string component, string operation)\n  correlationId: string - (optional) transaction id to trace execution through a call chain. component: string - name of the called component operation: string - name of the executed operation. return: TraceTiming - a trace timing object.  Failure Records an operation failure with its name, duration and error.","tags":null,"title":"ITracer","type":"docs","url":"/hugo-docs/net/components/trace/itracer/","weight":0,"wordcount":188},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for tracer components that capture operation traces.\n","dir":"node/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"ITracer","lvl1":"Interface for tracer components that capture operation traces.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"960fa202c839e9f83e35f86ffd8dd7af","permalink":"/node/components/trace/itracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/trace/itracer/","section":"node","summary":"Description The ITracer interface is used to create tracer component that capture operation traces.\nInstance methods beginTrace Begings recording an operation trace\n beginTrace(correlationId: string, component: string, operation: string): TraceTiming\n  correlationId: string - (optional) transaction id to trace execution through a call chain. component: string - name of the called component operation: string - name of the executed operation. return: TraceTiming - a trace timing object.  failure Records an operation failure with its name, duration and error.","tags":null,"title":"ITracer","type":"docs","url":"/hugo-docs/node/components/trace/itracer/","weight":0,"wordcount":188},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for tracer components that capture operation traces.\n","dir":"python/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621263555,"lvl0":"ITracer","lvl1":"Interface for tracer components that capture operation traces.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8a1ba4b6610c3e7620bd00c5da022a1c","permalink":"/python/components/trace/itracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/trace/itracer/","section":"python","summary":"Description The ITracer interface is used to create tracer component that capture operation traces.\nInstance methods begin_trace Begings recording an operation trace\n begin_trace(correlation_id: Optional[str], component: str, operation: str): TraceTiming\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through a call chain. component: str - name of the called component operation: str - name of the executed operation. return: TraceTiming - a trace timing object.  failure Records an operation failure with its name, duration and error.","tags":null,"title":"ITracer","type":"docs","url":"/hugo-docs/python/components/trace/itracer/","weight":0,"wordcount":186},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that can track their changes, including logical deletion.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ITrackable","lvl1":"Interface for data objects that can track their changes, including logical deletion.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c6ec7ebf86e3bc8ad7cbed7d96600199","permalink":"/net/commons/data/itrackable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/itrackable/","section":"net","summary":"Inherits: IChangeable\nDescription The ITrackagle interface allows you to define data objects that can track their changes, including logical deletion.\nProperties CreatedTime The UTC time at which the object was created.\n DateTime CreatedTime [ get, set ]\n LastChangeTime The UTC time at which the object was last changed (created, updated, or deleted).\n DateTime LastChangeTime [ get, set ]\n IsDeleted The logical deletion flag. True when object is deleted and null or false otherwise","tags":null,"title":"ITrackable","type":"docs","url":"/hugo-docs/net/commons/data/itrackable/","weight":0,"wordcount":111},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that can track their changes, including logical deletion.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ITrackable","lvl1":"Interface for data objects that can track their changes, including logical deletion.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e2c758e4aaea59483e4e3f05f1e34b32","permalink":"/node/commons/data/itrackable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/itrackable/","section":"node","summary":"Extends: IChangeable\nDescription The ITrackagle interface allows you to define data objects that can track their changes, including logical deletion.\nFields create_time The UTC time at which the object was created.\n create_time: Date\n change_time The UTC time at which the object was last changed (created, updated, or deleted).\n change_time: Date\n deleted The logical deletion flag. True when object is deleted and null or false otherwise\n deleted: boolean","tags":null,"title":"ITrackable","type":"docs","url":"/hugo-docs/node/commons/data/itrackable/","weight":0,"wordcount":98},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data objects that can track their changes, including logical deletion.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620301206,"lvl0":"ITrackable","lvl1":"Interface for data objects that can track their changes, including logical deletion.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"407619719f563f958f5753312319478f","permalink":"/python/commons/data/itrackable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/itrackable/","section":"python","summary":"Implements: IChangeable\nDescription The ITrackagle interface allows you to define data objects that can track their changes, including logical deletion.\nFields create_time The UTC time at which the object was created.\n create_time: datetime\n change_time The UTC time at which the object was last changed (created, updated, or deleted).\n change_time: datetime\n deleted The logical deletion flag. True when object is deleted and None or false otherwise\n deleted: datetime","tags":null,"title":"ITrackable","type":"docs","url":"/hugo-docs/python/commons/data/itrackable/","weight":0,"wordcount":87},{"authors":null,"categories":null,"date":-62135596800,"description":"**TODO: this is not implemented for this language yet**\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623415145,"lvl0":"ITrackable!","lvl1":"**TODO: this is not implemented for this language yet**\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4b3358e1998eddec875b52bf40c80b03","permalink":"/golang/commons/data/itrackable/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/commons/data/itrackable/","section":"golang","summary":"","tags":null,"title":"ITrackable!","type":"docs","url":"/hugo-docs/golang/commons/data/itrackable/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for components that require the capacity to clear previously defined references to dependent components.\n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"IUnreferenceable","lvl1":"Interface for components that require the capacity to clear previously defined references to dependent components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"752988a56976f1b157e1669231aa07aa","permalink":"/golang/commons/refer/iunreferenceable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/refer/iunreferenceable/","section":"golang","summary":"Description The IUnreferenceable interface can be used for components that require the capacity to clear previously defined references to dependent components.\nMethods UnsetReferences Unsets (clears) previously set references to dependent components.\n UnsetReferences()\n Examples type MyController { _persistence IMyPersistence; } func (mc* MyController) SetReferences(references *IReferences) { mc._persistence = references.GetOneRequired( NewDescriptor(\u0026#34;mygroup\u0026#34;, \u0026#34;persistence\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;1.0\u0026#34;) ); } func (mc* MyController) UnsetReferences() { mc._persistence = nil; } See also   IReferences   IReferenceable   ","tags":null,"title":"IUnreferenceable","type":"docs","url":"/hugo-docs/golang/commons/refer/iunreferenceable/","weight":0,"wordcount":68},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for components that require the capacity to clear previously defined references to dependent components.\n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IUnreferenceable","lvl1":"Interface for components that require the capacity to clear previously defined references to dependent components.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ba4f6d06df76d1a10eaaa0a8fc2adec7","permalink":"/net/commons/refer/iunreferenceable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/refer/iunreferenceable/","section":"net","summary":"Description The IUnreferenceable interface can be used for components that require the capacity to clear previously defined references to dependent components.\nInstance methods UnsetReferences Unsets (clears) previously set references to dependent components.\n void UnsetReferences()\n Examples public class MyController: IReferenceable, IUnreferenceable { public IMyPersistence _persistence; ... public void SetReferences(IReferences references) { this._persistence = references.getOneRequired\u0026lt;IMyPersistence\u0026gt;( new Descriptor(\u0026#34;mygroup\u0026#34;, \u0026#34;persistence\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;1.0\u0026#34;) ); } public void UnsetReferences() { this._persistence = null; } .","tags":null,"title":"IUnreferenceable","type":"docs","url":"/hugo-docs/net/commons/refer/iunreferenceable/","weight":0,"wordcount":75},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for components that require the capacity to clear previously defined references to dependent components.\n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"IUnreferenceable","lvl1":"Interface for components that require the capacity to clear previously defined references to dependent components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d0155be53020192533a2b4512d7ce5d2","permalink":"/node/commons/refer/iunreferenceable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/refer/iunreferenceable/","section":"node","summary":"Description The IUnreferenceable interface can be used for components that require the capacity to clear previously defined references to dependent components.\nInstance methods unsetReferences Unsets (clears) previously set references to dependent components.\n unsetReferences(): void\n Examples export class MyController implements IReferenceable, IUnreferenceable { public _persistence: IMyPersistence; ... public setReferences(references: IReferences): void { this._persistence = references.getOneRequired\u0026lt;IMyPersistence\u0026gt;( new Descriptor(\u0026#34;mygroup\u0026#34;, \u0026#34;persistence\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;1.0\u0026#34;) ); } public unsetReferences(): void { this._persistence = null; } .","tags":null,"title":"IUnreferenceable","type":"docs","url":"/hugo-docs/node/commons/refer/iunreferenceable/","weight":0,"wordcount":76},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for components that require the capacity to clear previously defined references to dependent components.\n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1619975497,"lvl0":"IUnreferenceable","lvl1":"Interface for components that require the capacity to clear previously defined references to dependent components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e3faaa9405d22876189a4c3efb09ef60","permalink":"/python/commons/refer/iunreferenceable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/refer/iunreferenceable/","section":"python","summary":"Description The IUnreferenceable interface can be used for components that require the capacity to clear previously defined references to dependent components.\nInstance methods unset_references Unsets (clears) previously set references to dependent components.\n unset_references()\n Examples class MyController(IReferenceable): _persistence = None def set_references(self, references): self._persistence = references.getOneRequired(Descriptor(\u0026#34;mygroup\u0026#34;, \u0026#34;persistence\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;1.0\u0026#34;)) def unset_references(self): self._persistence = None See also   IReferences   IReferenceable   ","tags":null,"title":"IUnreferenceable","type":"docs","url":"/hugo-docs/python/commons/refer/iunreferenceable/","weight":0,"wordcount":58},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to implement custom validation rules.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623338824,"lvl0":"IValidationRule","lvl1":"Interface used to implement custom validation rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"57ee65b4572737cea77db8b811c34c6c","permalink":"/golang/commons/validate/ivalidation_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/ivalidation_rule/","section":"golang","summary":"Description The IValidationRule interface allows you to implement custom validation rules.\nMethods Validate Validates a given value against this rule.\n Validate(path string, schema ISchema, value interface{}) []*ValidationResult\n  path: string - a dot notation path to the value. schema: ISchema - a schema this rule is called from value: interface{} - a value to be validated. results: []*ValidationResult - a list with validation results to add new results.  ","tags":null,"title":"IValidationRule","type":"docs","url":"/hugo-docs/golang/commons/validate/ivalidation_rule/","weight":0,"wordcount":67},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to implement custom validation rules.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IValidationRule","lvl1":"Interface used to implement custom validation rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a0e371ed137674a979696058c4d6c0f9","permalink":"/net/commons/validate/ivalidation_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/ivalidation_rule/","section":"net","summary":"Description The IValidationRule interface allows you to implement custom validation rules.\nInstance methods Validate Validates a given value against this rule.\n public void Validate(string path, Schema schema, object value, List\u0026lt;ValidationResult\u0026gt; results)\n  path: string - a dot notation path to the value. schema: Schema - a schema this rule is called from value: object - a value to be validated. results: List\u0026lt;ValidationResult\u0026gt; - a list with validation results to add new results.","tags":null,"title":"IValidationRule","type":"docs","url":"/hugo-docs/net/commons/validate/ivalidation_rule/","weight":0,"wordcount":71},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to implement custom validation rules.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"IValidationRule","lvl1":"Interface used to implement custom validation rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1a68ed8a2a16e93cf2d1d23afd755749","permalink":"/node/commons/validate/ivalidation_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/ivalidation_rule/","section":"node","summary":"Description The IValidationRule interface allows you to implement custom validation rules.\nInstance methods validate Validates a given value against this rule.\n public validate(path: string, schema: Schema, value: any, results: ValidationResult[]): void\n  path: string - a dot notation path to the value. schema: Schema - a schema this rule is called from value: any - a value to be validated. results: ValidationResult[] - a list with validation results to add new results.","tags":null,"title":"IValidationRule","type":"docs","url":"/hugo-docs/node/commons/validate/ivalidation_rule/","weight":0,"wordcount":71},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to implement custom validation rules.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620151040,"lvl0":"IValidationRule","lvl1":"Interface used to implement custom validation rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fb5e67b9e180685b4fc02e2d8e851dbc","permalink":"/python/commons/validate/ivalidation_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/ivalidation_rule/","section":"python","summary":"Description The IValidationRule interface allows you to implement custom validation rules.\nInstance methods validate Validates a given value against this rule.\n validate(path: str, schema: Schema, value: Any, results: List[ValidationResult])\n  path: str - a dot notation path to the value. schema: Schema - a schema this rule is called from value: Any - a value to be validated. results: List[ValidationResult] - a list with validation results to add new results.","tags":null,"title":"IValidationRule","type":"docs","url":"/hugo-docs/python/commons/validate/ivalidation_rule/","weight":0,"wordcount":69},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to define data objects that can be versioned.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"IVersioned","lvl1":"Interface used to define data objects that can be versioned.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"54d8ef8e564e0c7a103acc2ed8cccb03","permalink":"/net/commons/data/iversioned/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/iversioned/","section":"net","summary":"Description The IVersioned interface allows you to define data objects that can be versioned.\nImportant points\n Versioning is often used as an optimistic concurrency mechanism. The version doesn\u0026rsquo;t have to be a number, but it is recommended to use sequential values to determine if one object has a newer or older version than another one. It is common to use the time of change as the object version.  Properties Version The object\u0026rsquo;s version.","tags":null,"title":"IVersioned","type":"docs","url":"/hugo-docs/net/commons/data/iversioned/","weight":0,"wordcount":127},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to define data objects that can be versioned.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"IVersioned","lvl1":"Interface used to define data objects that can be versioned.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a92b5bdecbd38e1c195015f7b46af91b","permalink":"/node/commons/data/iversioned/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/iversioned/","section":"node","summary":"Description The IVersioned interface allows you to define data objects that can be versioned.\nImportant points\n Versioning is often used as an optimistic concurrency mechanism. The version doesn\u0026rsquo;t have to be a number, but it is recommended to use sequential values to determine if one object has a newer or older version than another one. It is common to use the time of change as the object version.  Fields version The object\u0026rsquo;s version.","tags":null,"title":"IVersioned","type":"docs","url":"/hugo-docs/node/commons/data/iversioned/","weight":0,"wordcount":124},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface used to define data objects that can be versioned.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620932887,"lvl0":"IVersioned","lvl1":"Interface used to define data objects that can be versioned.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"88a65cac233169b4a43e9f4dbab6782a","permalink":"/python/commons/data/iversioned/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/iversioned/","section":"python","summary":"Description The IVersioned interface allows you to define data objects that can be versioned.\nImportant points\n Versioning is often used as an optimistic concurrency mechanism. The version doesn\u0026rsquo;t have to be a number, but it is recommended to use sequential values to determine if one object has a newer or older version than another one. It is common to use the time of change as the object version.  Fields version The object\u0026rsquo;s version.","tags":null,"title":"IVersioned","type":"docs","url":"/hugo-docs/python/commons/data/iversioned/","weight":0,"wordcount":110},{"authors":null,"categories":null,"date":-62135596800,"description":"**TODO: this is not implemented for this language yet**\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623415145,"lvl0":"IVersioned!","lvl1":"**TODO: this is not implemented for this language yet**\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5304f3f385c8556e7fdd75d320ae8cdf","permalink":"/golang/commons/data/iversioned/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/commons/data/iversioned/","section":"golang","summary":"","tags":null,"title":"IVersioned!","type":"docs","url":"/hugo-docs/golang/commons/data/iversioned/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can create, update and delete data items.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"IWriter","lvl1":"Interface for data processing components that can create, update and delete data items.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e5a71a22252d78a6ff8390df5cfe861b","permalink":"/golang/data/persistence/iwriter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/data/persistence/iwriter/","section":"golang","summary":"Description The IWriter interface is used by data processng components that can create, update and delete data items.\nMethods Create Creates a data item.\n Create(correlation_id string, item interface{}) (value interface{}, err error)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. item: interface{} - item to be created. returns: (value interface{}, err error) - created item  Update Updates a data item.","tags":null,"title":"IWriter","type":"docs","url":"/hugo-docs/golang/data/persistence/iwriter/","weight":0,"wordcount":148},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can create, update and delete data items.\n","dir":"node/data/core/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"IWriter\u003cT, K\u003e","lvl1":"Interface for data processing components that can create, update and delete data items.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"699914475772824c63abc2bb161e68dd","permalink":"/node/data/core/iwriter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/data/core/iwriter/","section":"node","summary":"Description The IWriter interface is used by data processng components that can create, update and delete data items.\nInstance methods create Creates a data item.\n create(correlationId: string, item: T): Promise\u0026lt;T\u0026gt;\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. item: T - item to be created. returns: T - created item  update Updates a data item.\n update(correlationId: string, item: T): Promise\u0026lt;T\u0026gt;","tags":null,"title":"IWriter\u003cT, K\u003e","type":"docs","url":"/hugo-docs/node/data/core/iwriter/","weight":0,"wordcount":131},{"authors":null,"categories":null,"date":-62135596800,"description":"Interface for data processing components that can create, update and delete data items.\n","dir":"python/data/core/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"IWriter","lvl1":"Interface for data processing components that can create, update and delete data items.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"983507edda60e1bb48a0bf357b87c121","permalink":"/python/data/core/iwriter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/core/iwriter/","section":"python","summary":"Description The IWriter interface is used by data processng components that can create, update and delete data items.\nInstance methods create Creates a data item.\n create(correlation_id: Optional[str], item: T): T\n  correlation_id: Optional[str] - (optional) transaction id used to trace execution through the call chain. item: T - item to be created. returns: T - created item  update Updates a data item.\n update(correlation_id: Optional[str], item: T): T","tags":null,"title":"IWriter","type":"docs","url":"/hugo-docs/python/data/core/iwriter/","weight":0,"wordcount":131},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Jobs Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"831d4bcc2c763e192034471a56f9e5e0","permalink":"/microservices/infrastructure/jobs/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/jobs/","section":"microservices","summary":"Keeps list of working jobs. The service allows you to manage tasks in those cases when the generation (statement) of the task is performed in a separate microservice, and direct execution is implemented in one way or another.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Dart  ","tags":null,"title":"Jobs Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/jobs/","weight":0,"wordcount":67},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads a configuration from a JSON file.\n","dir":"golang/components/config/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"JsonConfigReader","lvl1":"Config reader that reads a configuration from a JSON file.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"45c59f579615c00a02e09abcbe2cae7d","permalink":"/golang/components/config/json_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/config/json_config_reader/","section":"golang","summary":"Implements: FileConfigReader\nDescription The JsonConfigReader class allows you to create a config reader that reads a configuration from a JSON file.\nImportant points\n The reader supports parameterization using Handlebar template engine.  Configuration parameters  path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors NewJsonConfigReader Creates a new instance of the config reader.\n NewJsonConfigReader(path string) *JsonConfigReader\n  path: string - (optional) path to the configuration file.","tags":null,"title":"JsonConfigReader","type":"docs","url":"/hugo-docs/golang/components/config/json_config_reader/","weight":0,"wordcount":339},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads a configuration from a JSON file.\n","dir":"net/components/config/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1622131251,"lvl0":"JsonConfigReader","lvl1":"Config reader that reads a configuration from a JSON file.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6cc9aee28bf7e0f602e68dfc395e8c6b","permalink":"/net/components/config/json_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/config/json_config_reader/","section":"net","summary":"Inherits: FileConfigReader\nDescription The JsonConfigReader class allows you to create a config reader that reads a configuration from a JSON file.\nImportant points\n The reader supports parameterization using Handlebar template engine.  Configuration parameters  path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of the config reader.\n public JsonConfigReader(string path = null)\n  path: string - (optional) path to the configuration file.","tags":null,"title":"JsonConfigReader","type":"docs","url":"/hugo-docs/net/components/config/json_config_reader/","weight":0,"wordcount":321},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads a configuration from a JSON file.\n","dir":"node/components/config/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1622131251,"lvl0":"JsonConfigReader","lvl1":"Config reader that reads a configuration from a JSON file.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3d93478bdfc30097bbe81460ed23417e","permalink":"/node/components/config/json_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/config/json_config_reader/","section":"node","summary":"Extends: FileConfigReader\nDescription The JsonConfigReader class allows you to create a config reader that reads a configuration from a JSON file.\nImportant points\n The reader supports parameterization using Handlebar template engine.  Configuration parameters  path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of the config reader.\n public constructor(path: string = null)\n  path: string - (optional) path to the configuration file.","tags":null,"title":"JsonConfigReader","type":"docs","url":"/hugo-docs/node/components/config/json_config_reader/","weight":0,"wordcount":327},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads a configuration from a JSON file.\n","dir":"python/components/config/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1622131251,"lvl0":"JsonConfigReader","lvl1":"Config reader that reads a configuration from a JSON file.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1413ae2ffc8409749069ff2576f3f36d","permalink":"/python/components/config/json_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/config/json_config_reader/","section":"python","summary":"Implements: FileConfigReader\nDescription The JsonConfigReader class allows you to create a config reader that reads a configuration from a JSON file.\nImportant points\n The reader supports parameterization using Handlebar template engine.  Configuration parameters  path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of the config reader.\n JsonConfigReader(path: str = None)\n  path: str - (optional) path to the configuration file.","tags":null,"title":"JsonConfigReader","type":"docs","url":"/hugo-docs/python/components/config/json_config_reader/","weight":0,"wordcount":310},{"authors":null,"categories":null,"date":-62135596800,"description":"The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623968895,"lvl0":"JsonConverter","lvl1":"The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"86050b23561fcb170d969070347ad869","permalink":"/golang/commons/convert/json_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/convert/json_converter/","section":"golang","summary":"Description The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\nMethods FromJson Converts value from JSON string\n FromJson(value string) (interface{}, error)\n  value: string - JSON string to convert. returns: (interface{}, error) - converted object value or nil when value is nil.  FromJsonAs Converts a JSON string into a value of type specified by a TypeCode.","tags":null,"title":"JsonConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/json_converter/","weight":0,"wordcount":296},{"authors":null,"categories":null,"date":-62135596800,"description":"The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"JsonConverter","lvl1":"The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a37e6c92cc8e8cd075aae53b32c28338","permalink":"/net/commons/convert/json_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/convert/json_converter/","section":"net","summary":"Description The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\nStatic methods FromJson Converts value from JSON string\n public static object FromJson(string value)\n  value: string - the JSON string to convert. returns: T - converted object value or null when value is null.  FromJson Converts value from JSON string to T object\n public static T FromJson\u0026lt;T\u0026gt;(string value)","tags":null,"title":"JsonConverter","type":"docs","url":"/hugo-docs/net/commons/convert/json_converter/","weight":0,"wordcount":284},{"authors":null,"categories":null,"date":-62135596800,"description":"The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"JsonConverter","lvl1":"The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1b30357bee53baf41e25c8767e7e5b57","permalink":"/node/commons/convert/json_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/convert/json_converter/","section":"node","summary":"Description The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\nStatic methods fromJson Converts JSON string into a value of type specified by a TypeCode.\n public static fromJson\u0026lt;T\u0026gt;(type: TypeCode, value: string): T\n  type: TypeCode - the TypeCode for the data type into which \u0026lsquo;value\u0026rsquo; is to be converted. value: string - the JSON string to convert.","tags":null,"title":"JsonConverter","type":"docs","url":"/hugo-docs/node/commons/convert/json_converter/","weight":0,"wordcount":267},{"authors":null,"categories":null,"date":-62135596800,"description":"The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"JsonConverter","lvl1":"The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e21ffce2eab14b76aaa8f6e3d104224c","permalink":"/python/commons/convert/json_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/convert/json_converter/","section":"python","summary":"Description The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.\nStatic methods from_json Converts JSON string into a value of type specified by a TypeCode.\n static from_json(type: TypeCode, value: str): Any\n  type: TypeCode - the TypeCode for the data type into which \u0026lsquo;value\u0026rsquo; is to be converted. value: str - the JSON string to convert. returns: Any - converted object value or None when value is None.","tags":null,"title":"JsonConverter","type":"docs","url":"/hugo-docs/python/commons/convert/json_converter/","weight":0,"wordcount":250},{"authors":null,"categories":null,"date":-62135596800,"description":"Persistence component that loads and saves data from/to a flat file.\nIt is used by [FilePersistence](../file_persistence), but can be useful on its own.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"JsonFilePersister","lvl1":"Persistence component that loads and saves data from/to a flat file.\nIt is used by [FilePersistence](../file_persistence), but can be useful on its own.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1be59b29a4245d8583c7a6f601a07a79","permalink":"/golang/data/persistence/json_file_persister/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/data/persistence/json_file_persister/","section":"golang","summary":"Description The JsonFilePersister class allows you to create persistence components that load and save data from/to a flat file\nConfiguration parameters  path: path to the file where the data is stored  Constructors NewJsonFilePersister Creates a new instance of the JSON file persistence component.\n NewJsonFilePersister(prototype reflect.Type, path string) *JsonFilePersister\n  prototype: reflect.Type - data type path: string - (optional) path to the file where the data is stored.","tags":null,"title":"JsonFilePersister","type":"docs","url":"/hugo-docs/golang/data/persistence/json_file_persister/","weight":0,"wordcount":254},{"authors":null,"categories":null,"date":-62135596800,"description":"Persistence component that loads and saves data from/to a flat file.\nIt is used by [FilePersistence](../file_persistence), but can be useful on its own.\n","dir":"node/data/persistence/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"JsonFilePersister\u003cT\u003e","lvl1":"Persistence component that loads and saves data from/to a flat file.\nIt is used by [FilePersistence](../file_persistence), but can be useful on its own.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"31ea84324722279b649f6fe59971bea8","permalink":"/node/data/persistence/json_file_persister/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/data/persistence/json_file_persister/","section":"node","summary":"Implements: IConfigurable, ILoader, ISaver\nDescription The JsonFilePersister class allows you to create persistence components that load and save data from/to a flat file\nConfiguration parameters  path: path to the file where the data is stored  Constructors Creates a new instance of the JSON file persistence component.\n public constructor(path?: string)\n  path: string - (optional) path to the file where the data is stored.  Properties path Gets the file path where the data is stored.","tags":null,"title":"JsonFilePersister\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/persistence/json_file_persister/","weight":0,"wordcount":223},{"authors":null,"categories":null,"date":-62135596800,"description":"Persistence component that loads and saves data from/to a flat file.\nIt is used by [FilePersistence](../file_persistence), but can be useful on its own.\n","dir":"python/data/persistence/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"JsonFilePersister","lvl1":"Persistence component that loads and saves data from/to a flat file.\nIt is used by [FilePersistence](../file_persistence), but can be useful on its own.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ee15b7366abef254d12c833a281bd7b1","permalink":"/python/data/persistence/json_file_persister/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/data/persistence/json_file_persister/","section":"python","summary":"Implements: IConfigurable, ILoader, ISaver\nDescription The JsonFilePersister class allows you to create persistence components that load and save data from/to a flat file\nConfiguration parameters  path: path to the file where the data is stored  Constructors Creates a new instance of the JSON file persistence component.\n JsonFilePersister(path: str = None)\n  path: str - (optional) path to the file where the data is stored.  Properties path Gets the file path where the data is stored.","tags":null,"title":"JsonFilePersister","type":"docs","url":"/hugo-docs/python/data/persistence/json_file_persister/","weight":0,"wordcount":206},{"authors":null,"categories":null,"date":-62135596800,"description":"References decorator that automatically sets references to newly added components that implement [IReferenceable interface](../../../commons/refer/ireferenceable), and unsets references from removed components that implement [IUnreferenceable interface](../../../commons/refer/iunreferenceable).\n","dir":"golang/container/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"LinkReferencesDecorator","lvl1":"References decorator that automatically sets references to newly added components that implement [IReferenceable interface](../../../commons/refer/ireferenceable), and unsets references from removed components that implement [IUnreferenceable interface](../../../commons/refer/iunreferenceable).\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b763d298e2f3c9d1da5fbcdd749fdee3","permalink":"/golang/container/refer/link_references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/container/refer/link_references_decorator/","section":"golang","summary":"Implements: ReferencesDecorator\nDescription The LinkReferencesDecorator class allows you to create a references decorator that automatically sets references to newly added components that implement the IReferenceable interface, and unsets references from removed components that implement the IUnreferenceable interface.\nConstructors NewLinkReferencesDecorator Creates a new instance of the decorator.\n NewLinkReferencesDecorator(nextReferences IReferences, topReferences IReferences) *LinkReferencesDecorator\n  nextReferences: IReferences - next references or decorator in the chain. topReferences: IReferences - decorator at the top of the chain.","tags":null,"title":"LinkReferencesDecorator","type":"docs","url":"/hugo-docs/golang/container/refer/link_references_decorator/","weight":0,"wordcount":276},{"authors":null,"categories":null,"date":-62135596800,"description":"References decorator that automatically sets references to newly added components that implement [IReferenceable interface](../../../commons/refer/ireferenceable), and unsets references from removed components that implement [IUnreferenceable interface](../../../commons/refer/iunreferenceable).\n","dir":"node/container/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"LinkReferencesDecorator","lvl1":"References decorator that automatically sets references to newly added components that implement [IReferenceable interface](../../../commons/refer/ireferenceable), and unsets references from removed components that implement [IUnreferenceable interface](../../../commons/refer/iunreferenceable).\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8be98756d2b71c366f5d5631dac0b2b5","permalink":"/node/container/refer/link_references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/container/refer/link_references_decorator/","section":"node","summary":"Extends: ReferencesDecorator\nImplements: IOpenable\nDescription The LinkReferencesDecorator class allows you to create a references decorator that automatically sets references to newly added components that implement the IReferenceable interface, and unsets references from removed components that implement the IUnreferenceable interface.\nConstructors Creates a new instance of the decorator.\n public constructor(nextReferences: IReferences, topReferences: IReferences)\n  nextReferences: IReferences - next references or decorator in the chain. topReferences: IReferences - decorator at the top of the chain.","tags":null,"title":"LinkReferencesDecorator","type":"docs","url":"/hugo-docs/node/container/refer/link_references_decorator/","weight":0,"wordcount":255},{"authors":null,"categories":null,"date":-62135596800,"description":"References decorator that automatically sets references to newly added components that implement [IReferenceable interface](../../../commons/refer/ireferenceable), and unsets references from removed components that implement [IUnreferenceable interface](../../../commons/refer/iunreferenceable).\n","dir":"python/container/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622802250,"lvl0":"LinkReferencesDecorator","lvl1":"References decorator that automatically sets references to newly added components that implement [IReferenceable interface](../../../commons/refer/ireferenceable), and unsets references from removed components that implement [IUnreferenceable interface](../../../commons/refer/iunreferenceable).\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0aa736b94340f56bbc61cfe73d5e2413","permalink":"/python/container/refer/link_references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/container/refer/link_references_decorator/","section":"python","summary":"Implements: ReferencesDecorator, IOpenable\nDescription The LinkReferencesDecorator class allows you to create a references decorator that automatically sets references to newly added components that implement the IReferenceable interface, and unsets references from removed components that implement the IUnreferenceable interface.\nConstructors Creates a new instance of the decorator.\n LinkReferencesDecorator(next_references: IReferences, top_references: IReferences)\n  next_references: IReferences - next references or decorator in the chain. top_references: IReferences - decorator at the top of the chain.","tags":null,"title":"LinkReferencesDecorator","type":"docs","url":"/hugo-docs/python/container/refer/link_references_decorator/","weight":0,"wordcount":250},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/lock/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Lock","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b0696ebb1a3ec313870fbbb04dd89ba3","permalink":"/dart/components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/lock/","section":"dart","summary":"","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/dart/components/lock/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides a set of interfaces and classes used to create several types of locks.\n","dir":"golang/components/lock/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Lock","lvl1":"This package provides a set of interfaces and classes used to create several types of locks.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6ea914ae425cce2d1f411fde4a332daf","permalink":"/golang/components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/lock/","section":"golang","summary":"Interfaces ILock Interface for locks to synchronize work or parallel processes and to prevent collisions. The lock allows to manage multiple locks identified by unique keys.\nClasses DefaultLockFactory Creates ILock components by their descriptors.\nLock Abstract lock that implements default lock acquisition routine.\nMemoryLock Lock that is used to synchronize execution within one process using shared memory. This implementation is not suitable for synchronization of distributed processes.\nNullLock Dummy lock implementation that doesn\u0026rsquo;t do anything.","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/golang/components/lock/","weight":0,"wordcount":92},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract lock that implements the default lock acquisition routine.\n","dir":"golang/components/lock/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"Lock","lvl1":"Abstract lock that implements the default lock acquisition routine.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5d200e84c32c86048c23c8efda13837a","permalink":"/golang/components/lock/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/lock/lock/","section":"golang","summary":"Implements: ILock\nDescription The Lock class represents an abstract lock that implements the defaul lock acquisition routine.\nConfiguration parameters options:\n retry_timeout: timeout in milliseconds to retry lock acquisition. (Default: 100)  Constructors InheritLock Inherit lock from ILock\n InheritLock(overrides ILockOverrides) *Lock\n  overrides: ILockOverrides - inherited lock  Methods AcquireLock Makes multiple attempts to acquire a lock by its key within a given time interval.\n (c *Lock) AcquireLock(correlationId string, key string, ttl int64, timeout int64) error","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/golang/components/lock/lock/","weight":0,"wordcount":141},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides a set of interfaces and classes used to create several types of locks.\n","dir":"net/components/lock/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621575585,"lvl0":"Lock","lvl1":"This package provides a set of interfaces and classes used to create several types of locks.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c574dbb9ee04d301511f20586a10bacc","permalink":"/net/components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/lock/","section":"net","summary":"Interfaces ILock Interface for locks to synchronize work or parallel processes and to prevent collisions. The lock allows to manage multiple locks identified by unique keys.\nClasses DefaultLockFactory Creates ILock components by their descriptors.\nLock Abstract lock that implements default lock acquisition routine.\nMemoryLock Lock that is used to synchronize execution within one process using shared memory. This implementation is not suitable for synchronization of distributed processes.\nNullLock Dummy lock implementation that doesn\u0026rsquo;t do anything.","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/net/components/lock/","weight":0,"wordcount":92},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract lock that implements the default lock acquisition routine.\n","dir":"net/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"Lock","lvl1":"Abstract lock that implements the default lock acquisition routine.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"101985fd4223bd2e4ed837056a95dd7b","permalink":"/net/components/lock/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/lock/lock/","section":"net","summary":"Inherits: ILock, IReconfigurable\nDescription The Lock class represents an abstract lock that implements the defaul lock acquisition routine.\nConfiguration parameters options:\n retry_timeout: timeout in milliseconds to retry lock acquisition. (Default: 100)  Instance methods AcquireLock Makes multiple attempts to acquire a lock by its key within a given time interval.\n public void AcquireLock(string correlationId, string key, long ttl, long timeout)\n  correlationId: string -(optional) transaction id to trace execution through a call chain.","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/net/components/lock/lock/","weight":0,"wordcount":227},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides a set of interfaces and classes used to create several types of locks.\n","dir":"node/components/lock/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Lock","lvl1":"This package provides a set of interfaces and classes used to create several types of locks.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b0b5b727d9c9c1bc923ab126cd4cb495","permalink":"/node/components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/lock/","section":"node","summary":"Interfaces ILock Interface for locks to synchronize work or parallel processes and to prevent collisions. The lock allows to manage multiple locks identified by unique keys.\nClasses DefaultLockFactory Creates ILock components by their descriptors.\nLock Abstract lock that implements default lock acquisition routine.\nMemoryLock Lock that is used to synchronize execution within one process using shared memory. This implementation is not suitable for synchronization of distributed processes.\nNullLock Dummy lock implementation that doesn\u0026rsquo;t do anything.","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/node/components/lock/","weight":0,"wordcount":92},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract lock that implements the default lock acquisition routine.\n","dir":"node/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"Lock","lvl1":"Abstract lock that implements the default lock acquisition routine.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"29a0f92fa888aba3752776ca529b73d0","permalink":"/node/components/lock/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/lock/lock/","section":"node","summary":"Implements: ILock, IReconfigurable\nDescription The Lock class represents an abstract lock that implements the defaul lock acquisition routine.\nConfiguration parameters options:\n retry_timeout: timeout in milliseconds to retry lock acquisition. (Default: 100)  Instance methods acquireLock Makes multiple attempts to acquire a lock by its key within a given time interval.\n public acquireLock(correlationId: string, key: string, ttl: number, timeout: number): Promise\u0026lt;void\u0026gt;\n  correlationId: string -(optional) transaction id to trace execution through a call chain.","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/node/components/lock/lock/","weight":0,"wordcount":226},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides a set of interfaces and classes used to create several types of locks.\n","dir":"python/components/lock/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Lock","lvl1":"This package provides a set of interfaces and classes used to create several types of locks.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cfa72085e1dce3e9dcadf8bd653e5d64","permalink":"/python/components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/lock/","section":"python","summary":"Interfaces ILock Interface for locks to synchronize work or parallel processes and to prevent collisions. The lock allows to manage multiple locks identified by unique keys.\nClasses DefaultLockFactory Creates ILock components by their descriptors.\nLock Abstract lock that implements default lock acquisition routine.\nMemoryLock Lock that is used to synchronize execution within one process using shared memory. This implementation is not suitable for synchronization of distributed processes.\nNullLock Dummy lock implementation that doesn\u0026rsquo;t do anything.","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/python/components/lock/","weight":0,"wordcount":92},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract lock that implements the default lock acquisition routine.\n","dir":"python/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"Lock","lvl1":"Abstract lock that implements the default lock acquisition routine.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d5d32c77a0f8748e6be3898dde6375ef","permalink":"/python/components/lock/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/lock/lock/","section":"python","summary":"Implements: ILock, IReconfigurable\nDescription The Lock class represents an abstract lock that implements the defaul lock acquisition routine.\nConfiguration parameters options:\n retry_timeout: timeout in milliseconds to retry lock acquisition. (Default: 100)  Instance methods acquire_lock Makes multiple attempts to acquire a lock by its key within a given time interval.\n acquire_lock(correlation_id: Optional[str], key: str, ttl: float, timeout: float)\n  correlation_id: Optional[str] -(optional) transaction id to trace execution through a call chain.","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/python/components/lock/lock/","weight":0,"wordcount":219},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store and lock incoming messages in [MemoryMessageQueue](../memory_message_queue).  \n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"LockedMessage","lvl1":"Data object used to store and lock incoming messages in [MemoryMessageQueue](../memory_message_queue).  \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"79a5dc81f71cfc43b98550d665751619","permalink":"/golang/messaging/queues/locked_message/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/queues/locked_message/","section":"golang","summary":"Description The LockedMessage class allows you to create data objects used to store and lock incoming messages in MemoryMessageQueue.\nFields expirationTime The expiration time for the message lock. If it is null, then the message is not locked.\n public expirationTime: Date\n message The incoming message.\n public message: MessageEnvelope\n timeout The lock timeout in milliseconds.\n public timeout: number\n  See also   MemoryMessageQueue   ","tags":null,"title":"LockedMessage","type":"docs","url":"/hugo-docs/golang/messaging/queues/locked_message/","weight":0,"wordcount":60},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store and lock incoming messages in [MemoryMessageQueue](../memory_message_queue).  \n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"LockedMessage","lvl1":"Data object used to store and lock incoming messages in [MemoryMessageQueue](../memory_message_queue).  \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f79fa3e0b4f9fd599992ceba90b1bd1d","permalink":"/node/messaging/queues/locked_message/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/queues/locked_message/","section":"node","summary":"Description The LockedMessage class allows you to create data objects used to store and lock incoming messages in MemoryMessageQueue.\nFields expirationTime The expiration time for the message lock. If it is null, then the message is not locked.\n public expirationTime: Date\n message The incoming message.\n public message: MessageEnvelope\n timeout The lock timeout in milliseconds.\n public timeout: number\n  See also   MemoryMessageQueue   ","tags":null,"title":"LockedMessage","type":"docs","url":"/hugo-docs/node/messaging/queues/locked_message/","weight":0,"wordcount":60},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store and lock incoming messages in [MemoryMessageQueue](../memory_message_queue).  \n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622336321,"lvl0":"LockedMessage","lvl1":"Data object used to store and lock incoming messages in [MemoryMessageQueue](../memory_message_queue).  \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"42b358d1e00e5bda2b0f381f369515b1","permalink":"/python/messaging/queues/locked_message/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/queues/locked_message/","section":"python","summary":"Description The LockedMessage class allows you to create data objects used to store and lock incoming messages in MemoryMessageQueue.\nFields expiration_time The expiration time for the message lock. If it is None, then the message is not locked.\n expiration_time: datetime.datetime\n message The incoming message.\n message: MessageEnvelope\n timeout The lock timeout in milliseconds.\n timeout: int\n  See also   MemoryMessageQueue   ","tags":null,"title":"LockedMessage","type":"docs","url":"/hugo-docs/python/messaging/queues/locked_message/","weight":0,"wordcount":57},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Log","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6fcda69464faae85060b357112aa13ba","permalink":"/dart/components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/log/","section":"dart","summary":"","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/dart/components/log/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides interfaces and classes used to create different types of loggers.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Log","lvl1":"This package provides interfaces and classes used to create different types of loggers.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b748c4189f0000947b8d33501819d4b5","permalink":"/golang/components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/log/","section":"golang","summary":"Constants LogLevel Standard log levels.\nLogs at debug and trace levels are usually captured only locally for troubleshooting and never sent to consolidated log services.\nInterfaces ILogger Interface for logger components that capture execution log messages.\nClasses CachedLogger Abstract logger that caches captured log messages in memory and periodically dumps them. Child classes implement saving cached messages to their specified destinations.\nCompositeLogger Aggregates all loggers from component references under a single component.","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/golang/components/log/","weight":0,"wordcount":184},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to create loggers for the ElasticSearch component.\n","dir":"golang/elasticsearch/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624316020,"lvl0":"Log","lvl1":"This package contains a class used to create loggers for the ElasticSearch component.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2b5c4f24ca2bf72f68569ae0742fc305","permalink":"/golang/elasticsearch/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/elasticsearch/log/","section":"golang","summary":" Classes ElasticSearchLogger Logger that dumps execution logs to ElasticSearch service. Elasticsearch is a popular search index. It is often used to store and index execution logs by itself or as a part of ELK (ElasticSearch - Logstash - Kibana) stack.\n ","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/golang/elasticsearch/log/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides interfaces and classes used to create different types of loggers.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621575585,"lvl0":"Log","lvl1":"This package provides interfaces and classes used to create different types of loggers.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"08d25b895593ae732d0d226b98af8c2b","permalink":"/net/components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/","section":"net","summary":"Constants LogLevel Standard log levels.\nLogs at debug and trace levels are usually captured only locally for troubleshooting and never sent to consolidated log services.\nInterfaces ILogger Interface for logger components that capture execution log messages.\nClasses CachedLogger Abstract logger that caches captured log messages in memory and periodically dumps them. Child classes implement saving cached messages to their specified destinations.\nCompositeLogger Aggregates all loggers from component references under a single component.","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/net/components/log/","weight":0,"wordcount":184},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides interfaces and classes used to create different types of loggers.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Log","lvl1":"This package provides interfaces and classes used to create different types of loggers.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cb7f6eaf59cf68b6395a639508ff0ac1","permalink":"/node/components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/log/","section":"node","summary":"Constants LogLevel Standard log levels.\nLogs at debug and trace levels are usually captured only locally for troubleshooting and never sent to consolidated log services.\nInterfaces ILogger Interface for logger components that capture execution log messages.\nClasses CachedLogger Abstract logger that caches captured log messages in memory and periodically dumps them. Child classes implement saving cached messages to their specified destinations.\nCompositeLogger Aggregates all loggers from component references under a single component.","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/node/components/log/","weight":0,"wordcount":184},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to create loggers for the ElasticSearch component.\n","dir":"node/elasticsearch/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622670875,"lvl0":"Log","lvl1":"This package contains a class used to create loggers for the ElasticSearch component.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0613ee1a07da31784a4080096c67da23","permalink":"/node/elasticsearch/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/elasticsearch/log/","section":"node","summary":" Classes ElasticSearchLogger Logger that dumps execution logs to ElasticSearch service. Elasticsearch is a popular search index. It is often used to store and index execution logs by itself or as a part of ELK (ElasticSearch - Logstash - Kibana) stack.\n ","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/node/elasticsearch/log/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides interfaces and classes used to create different types of loggers.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Log","lvl1":"This package provides interfaces and classes used to create different types of loggers.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3aca859d862a1e812c2ada13721d0120","permalink":"/python/components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/log/","section":"python","summary":"Constants LogLevel Standard log levels.\nLogs at debug and trace levels are usually captured only locally for troubleshooting and never sent to consolidated log services.\nInterfaces ILogger Interface for logger components that capture execution log messages.\nClasses CachedLogger Abstract logger that caches captured log messages in memory and periodically dumps them. Child classes implement saving cached messages to their specified destinations.\nCompositeLogger Aggregates all loggers from component references under a single component.","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/python/components/log/","weight":0,"wordcount":184},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to create loggers for the ElasticSearch component.\n","dir":"python/elasticsearch/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622503155,"lvl0":"Log","lvl1":"This package contains a class used to create loggers for the ElasticSearch component.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"58fcf1900f7a5f7f49198bbd8c0c3f0b","permalink":"/python/elasticsearch/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/elasticsearch/log/","section":"python","summary":" Classes ElasticSearchLogger Logger that dumps execution logs to ElasticSearch service. Elasticsearch is a popular search index. It is often used to store and index execution logs by itself or as a part of ELK (ElasticSearch - Logstash - Kibana) stack.\n ","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/python/elasticsearch/log/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"Performance counters that periodically dump counters' measurements to logger.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"LogCounters","lvl1":"Performance counters that periodically dump counters' measurements to logger.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5835745325b035003e1cdf061e2c1d89","permalink":"/golang/components/count/log_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/count/log_counters/","section":"golang","summary":"Implements: CachedCounters\nDescription The LogCounters allows you to create performance counters that periodically dump counters' measurements to logger.\nConfiguration parameters options:\n interval: interval in milliseconds to save current counters measurements (default: 5 mins) reset_timeout: timeout in milliseconds to reset the counters. 0 disables the reset (default: 0)  References  *:logger:*:*:1.0 - ILogger components to dump the captured counters *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Constructors NewLogCounters Creates a new instance of the counters.","tags":null,"title":"LogCounters","type":"docs","url":"/hugo-docs/golang/components/count/log_counters/","weight":0,"wordcount":156},{"authors":null,"categories":null,"date":-62135596800,"description":"Performance counters that periodically dump counters' measurements to logger.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"LogCounters","lvl1":"Performance counters that periodically dump counters' measurements to logger.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"44ce34419f745f3495f1bde488ae0978","permalink":"/net/components/count/log_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/count/log_counters/","section":"net","summary":"Inherits: CachedCounters, IReferenceable\nDescription The LogCounters allows you to create performance counters that periodically dump counters' measurements to logger.\nConfiguration parameters options:\n interval: interval in milliseconds to save current counters measurements (default: 5 mins) reset_timeout: timeout in milliseconds to reset the counters. 0 disables the reset (default: 0)  References  *:logger:*:*:1.0 - ILogger components to dump the captured counters *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Instance methods Save Saves the current counters measurements.","tags":null,"title":"LogCounters","type":"docs","url":"/hugo-docs/net/components/count/log_counters/","weight":0,"wordcount":148},{"authors":null,"categories":null,"date":-62135596800,"description":"Performance counters that periodically dump counters' measurements to logger.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"LogCounters","lvl1":"Performance counters that periodically dump counters' measurements to logger.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e63e860b3ad8228adbae63d813208b50","permalink":"/node/components/count/log_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/count/log_counters/","section":"node","summary":"Implements: CachedCounters, IReferenceable\nDescription The LogCounters allows you to create performance counters that periodically dump counters' measurements to logger.\nConfiguration parameters options:\n interval: interval in milliseconds to save current counters measurements (default: 5 mins) reset_timeout: timeout in milliseconds to reset the counters. 0 disables the reset (default: 0)  References  *:logger:*:*:1.0 - ILogger components to dump the captured counters *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Instance methods save Saves the current counters measurements.","tags":null,"title":"LogCounters","type":"docs","url":"/hugo-docs/node/components/count/log_counters/","weight":0,"wordcount":146},{"authors":null,"categories":null,"date":-62135596800,"description":"Performance counters that periodically dump counters' measurements to logger.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621102401,"lvl0":"LogCounters","lvl1":"Performance counters that periodically dump counters' measurements to logger.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a863aad043be219dab085ebb8dcef152","permalink":"/python/components/count/log_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/count/log_counters/","section":"python","summary":"Implements: CachedCounters, IReferenceable\nDescription The LogCounters allows you to create performance counters that periodically dump counters' measurements to logger.\nConfiguration parameters options:\n interval: interval in milliseconds to save current counters measurements (default: 5 mins) reset_timeout: timeout in milliseconds to reset the counters. 0 disables the reset (default: 0)  References  *:logger:*:*:1.0 - ILogger components to dump the captured counters *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Instance methods _save Saves the current counters measurements.","tags":null,"title":"LogCounters","type":"docs","url":"/hugo-docs/python/components/count/log_counters/","weight":0,"wordcount":131},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO: add description\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"LogEventSource  ","lvl1":"TODO: add description\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"77c33924ba859681c0c2ea9a13cb82d9","permalink":"/net/components/log/log_event_source/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/log_event_source/","section":"net","summary":"Inherits: Logger\nDescription TODO: add description\nFields Current TODO: add description\n public static Current: LogEventSource = new LogEventSource();\n  Instance methods Debug TODO: add description\n void Debug(string correlationId, string message)\n  correlationId: string - (optional) transaction id to trace execution through a call chain. message: string - a human-readable message to log.  Error TODO: add description\n void Error(string correlationId, string message)\n  correlationId: string - (optional) transaction id to trace execution through a call chain.","tags":null,"title":"LogEventSource  ","type":"docs","url":"/hugo-docs/net/components/log/log_event_source/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that captures and formats log messages.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"Logger","lvl1":"Logger that captures and formats log messages.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"29f94a3a9438ed5e2e3ca023a8ac714a","permalink":"/golang/components/log/logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/components/log/logger/","section":"golang","summary":"Implements: ILogger, IReconfigurable, IReferenceable\nDescription The Logger class allows you to create a logger that captures and formats logs messages.\nImportant points\n Child classes take the captured messages and write them to their specific destinations.  Configuration parameters Parameters to pass to the configure method for component configuration:\n level: maximum log level to capture source: source (context) name  References  *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Constructors InheritLogger Creates a new instance of the logger and inherite from ILogerWriter.","tags":null,"title":"Logger","type":"docs","url":"/hugo-docs/golang/components/log/logger/","weight":0,"wordcount":637},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that captures and formats log messages.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":1000,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"Logger","lvl1":"Logger that captures and formats log messages.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dff858b62f1fe65a68193a2207802344","permalink":"/net/components/log/logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/net/components/log/logger/","section":"net","summary":"Inherits: ILogger, IReconfigurable, IReferenceable\nDescription The Logger class allows you to create a logger that captures and formats logs messages.\nImportant points\n Child classes take the captured messages and write them to their specific destinations.  Configuration parameters Parameters to pass to the configure method for component configuration:\n level: maximum log level to capture source: source (context) name  References  *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Fields _level Maximum log level to capture","tags":null,"title":"Logger","type":"docs","url":"/hugo-docs/net/components/log/logger/","weight":0,"wordcount":931},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that captures and formats log messages.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"Logger","lvl1":"Logger that captures and formats log messages.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"adcbb4109893969a0dd1d8e11ab2206c","permalink":"/node/components/log/logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/components/log/logger/","section":"node","summary":"Implements: ILogger, IReconfigurable, IReferenceable\nDescription The Logger class allows you to create a logger that captures and formats logs messages.\nImportant points\n Child classes take the captured messages and write them to their specific destinations.  Configuration parameters Parameters to pass to the configure method for component configuration:\n level: maximum log level to capture source: source (context) name  References  *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Fields _level Maximum log level to capture","tags":null,"title":"Logger","type":"docs","url":"/hugo-docs/node/components/log/logger/","weight":0,"wordcount":615},{"authors":null,"categories":null,"date":-62135596800,"description":"Logger that captures and formats log messages.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"Logger","lvl1":"Logger that captures and formats log messages.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f668f47763fb1f730fb3f14c72133b76","permalink":"/python/components/log/logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/components/log/logger/","section":"python","summary":"Implements: ILogger, IReconfigurable, IReferenceable\nDescription The Logger class allows you to create a logger that captures and formats logs messages.\nImportant points\n Child classes take the captured messages and write them to their specific destinations.  Configuration parameters Parameters to pass to the configure method for component configuration:\n level: maximum log level to capture source: source (context) name  References  *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Fields _level Maximum log level to capture","tags":null,"title":"Logger","type":"docs","url":"/hugo-docs/python/components/log/logger/","weight":0,"wordcount":678},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Logging Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"36a134c6cfd90b4c99ac9d195b48e963","permalink":"/microservices/infrastructure/logging/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/logging/","section":"microservices","summary":"Collects execution logs from distributed microservices, stores and provides a single entry point to read all of them.\n Server implementations: NodeJS, .NET, Dart, Python Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .NET, Dart, Python  ","tags":null,"title":"Logging Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/logging/","weight":0,"wordcount":51},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO: add description\n","dir":"net/components/logic/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621879821,"lvl0":"Logic","lvl1":"TODO: add description\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"67f3a864cd56297f817716feea262581","permalink":"/net/components/logic/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/logic/","section":"net","summary":" Classes AbstractController Abstract logger that caches captured log messages in memory and periodically dumps them. Child classes implement saving cached messages to their specified destinations.\n ","tags":null,"title":"Logic","type":"docs","url":"/hugo-docs/net/components/logic/","weight":0,"wordcount":25},{"authors":null,"categories":null,"date":-62135596800,"description":"Standard log level enumeration.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"LogLevel","lvl1":"Standard log level enumeration.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f10fe8cc8f3ce5f723d1d314f38b20b7","permalink":"/golang/components/log/log_level/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/log/log_level/","section":"golang","summary":"Description The LogLevel class provides an enumeration of standard log levels.\nImportant points\n Logs at debug and trace levels are usually captured only locally for troubleshooting and never sent to consolidated log services.  Enumeration members  Null = 0 - Nothing to be logged Fatal = 1 - Logs only fatal errors that cause microservice to fail Error = 2 - Logs all errors - fatal or recoverable Warn = 3 - Logs errors and warnings Info = 4 - Logs errors and important information messages Debug = 5 - Logs everything up to high-level debugging information Trace = 6 - Logs everything down to fine-granular debugging messages   ","tags":null,"title":"LogLevel","type":"docs","url":"/hugo-docs/golang/components/log/log_level/","weight":0,"wordcount":107},{"authors":null,"categories":null,"date":-62135596800,"description":"Standard log level enumeration.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"LogLevel","lvl1":"Standard log level enumeration.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"597f0b92e96a8e0b844d87d46f822ab0","permalink":"/net/components/log/log_level/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/log_level/","section":"net","summary":"Description The LogLevel class provides an enumeration of standard log levels.\nImportant points\n Logs at debug and trace levels are usually captured only locally for troubleshooting and never sent to consolidated log services.  Enumeration members  Null = 0 - Nothing to be logged Fatal = 1 - Logs only fatal errors that cause microservice to fail Error = 2 - Logs all errors - fatal or recoverable Warn = 3 - Logs errors and warnings Info = 4 - Logs errors and important information messages Debug = 5 - Logs everything up to high-level debugging information Trace = 6 - Logs everything down to fine-granular debugging messages   ","tags":null,"title":"LogLevel","type":"docs","url":"/hugo-docs/net/components/log/log_level/","weight":0,"wordcount":107},{"authors":null,"categories":null,"date":-62135596800,"description":"Standard log level enumeration.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"LogLevel","lvl1":"Standard log level enumeration.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c39ca6fb0bf5a786aacae7e06000e23f","permalink":"/node/components/log/log_level/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/log/log_level/","section":"node","summary":"Description The LogLevel class provides an enumeration of standard log levels.\nImportant points\n Logs at debug and trace levels are usually captured only locally for troubleshooting and never sent to consolidated log services.  Enumeration members  Null = 0 - Nothing to be logged Fatal = 1 - Logs only fatal errors that cause microservice to fail Error = 2 - Logs all errors - fatal or recoverable Warn = 3 - Logs errors and warnings Info = 4 - Logs errors and important information messages Debug = 5 - Logs everything up to high-level debugging information Trace = 6 - Logs everything down to fine-granular debugging messages   ","tags":null,"title":"LogLevel","type":"docs","url":"/hugo-docs/node/components/log/log_level/","weight":0,"wordcount":107},{"authors":null,"categories":null,"date":-62135596800,"description":"Standard log level enumeration.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620824349,"lvl0":"LogLevel","lvl1":"Standard log level enumeration.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"61144bd7f527ddc5192506e5778be798","permalink":"/python/components/log/log_level/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/log/log_level/","section":"python","summary":"Description The LogLevel class provides an enumeration of standard log levels.\nImportant points\n Logs at debug and trace levels are usually captured only locally for troubleshooting and never sent to consolidated log services.  Enumeration members  Nothing = 0 - Nothing to be logged Fatal = 1 - Logs only fatal errors that cause microservice to fail Error = 2 - Logs all errors - fatal or recoverable Warn = 3 - Logs errors and warnings Info = 4 - Logs errors and important information messages Debug = 5 - Logs everything up to high-level debugging information Trace = 6 - Logs everything down to fine-granular debugging messages   ","tags":null,"title":"LogLevel","type":"docs","url":"/hugo-docs/python/components/log/log_level/","weight":0,"wordcount":107},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to convert log level values.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"LogLevelConverter","lvl1":"Helper class used to convert log level values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ce26c5b887f4163b7b8e26797538ab7a","permalink":"/golang/components/log/log_level_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/log/log_level_converter/","section":"golang","summary":"Description The LogLevelConverter class is used to convert log level values.\nMethods LogLevelFromString Converts log level to a LogLevel.\n LogLevelFromString(value interface{}) int\n  value: interface{} - a log level string to convert. returns: int - log level value.  LogLevelToString Converts log level to a string.\n LogLevelToString(level int) string\n  level: int - a log level to convert. returns: string - log level name string.  ToLogLevel Converts numbers and strings to standard log level values.","tags":null,"title":"LogLevelConverter","type":"docs","url":"/hugo-docs/golang/components/log/log_level_converter/","weight":0,"wordcount":121},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to convert log level values.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"LogLevelConverter","lvl1":"Helper class used to convert log level values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eccb08a3ad6f1bf7b7ab0ee50330a0ec","permalink":"/net/components/log/log_level_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/log_level_converter/","section":"net","summary":"Description The LogLevelConverter class is used to convert log level values.\nStatic methods ToInteger Converts log level to a number.\n public static int ToInteger([LogLevel](../log_level level))\n  level: LogLevel - a log level to convert. returns: int - log level number value.  ToLogLevel Converts numbers and strings to standard log level values.\n public static LogLevel ToLogLevel(object value, LogLevel defaultValue = LogLevel.Info)\n  value: object - a value to be converted defaultValue: LogLevel - a default value if conversion is not possible returns: LogLevel - converted log level  ToString Converts log level to a string.","tags":null,"title":"LogLevelConverter","type":"docs","url":"/hugo-docs/net/components/log/log_level_converter/","weight":0,"wordcount":114},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to convert log level values.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"LogLevelConverter","lvl1":"Helper class used to convert log level values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b50af9eb3f6982f7a83a3b9b8d346eac","permalink":"/node/components/log/log_level_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/log/log_level_converter/","section":"node","summary":"Description The LogLevelConverter class is used to convert log level values.\nStatic methods toInteger Converts log level to a number.\n public static toInteger(level: LogLevel): number\n  level: LogLevel - a log level to convert. returns: number - log level number value.  toLogLevel Converts numbers and strings to standard log level values.\n public static toLogLevel(value: any, defaultValue: LogLevel = LogLevel.Info): LogLevel\n  value: any - a value to be converted defaultValue: LogLevel - a default value if conversion is not possible returns: LogLevel - converted log level  toString Converts log level to a string.","tags":null,"title":"LogLevelConverter","type":"docs","url":"/hugo-docs/node/components/log/log_level_converter/","weight":0,"wordcount":114},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to convert log level values.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620826163,"lvl0":"LogLevelConverter","lvl1":"Helper class used to convert log level values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3fca3c89298831eb64d67b2d04417d7d","permalink":"/python/components/log/log_level_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/log/log_level_converter/","section":"python","summary":"Description The LogLevelConverter class is used to convert log level values.\nStatic methods to_integer Converts log level to a number.\n static to_integer(level: LogLevel): int\n  level: LogLevel - a log level to convert. returns: int - log level number value.  to_log_level Converts numbers and strings to standard log level values.\n static to_log_level(value: Any, default_value: LogLevel = LogLevel.Info): LogLevel\n  value: Any - a value to be converted default_value: LogLevel - a default value if conversion is not possible returns: LogLevel - converted log level  to_string Converts log level to a string.","tags":null,"title":"LogLevelConverter","type":"docs","url":"/hugo-docs/python/components/log/log_level_converter/","weight":0,"wordcount":111},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store captured log messages.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"LogMessage","lvl1":"Data object used to store captured log messages.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7aac552b0802ceb99471e3e692d75ce4","permalink":"/golang/components/log/log_message/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/log/log_message/","section":"golang","summary":"Description The LogMessage class allows you to create data objects used to store captured log messages.\nImportant points\n This object is used by CachedLogger.  Constructors   NewLogMessage(level int, source string, correlationId string, errors.ErrorDescription , message string) LogMessage\n  level: int - an log level. source: string - an source. correlationId: string - transaction id to trace execution through call chain. err: errors.ErrorDescription - an error object associated with this message.","tags":null,"title":"LogMessage","type":"docs","url":"/hugo-docs/golang/components/log/log_message/","weight":0,"wordcount":135},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store captured log messages.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"LogMessage","lvl1":"Data object used to store captured log messages.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6bac2639af06b58cda8dee24068af5d4","permalink":"/net/components/log/log_message/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/log/log_message/","section":"net","summary":"Description The LogMessage class allows you to create data objects used to store captured log messages.\nImportant points\n This object is used by CachedLogger.  Properties Time The time the message was generated\n public DateTime Time [ get, set ]\n level This log level\n public string Level [ get, set ]\n Source The source (context name)\n public string Source [ get, set ]\n CorrelationId The transaction id to trace execution through a call chain.","tags":null,"title":"LogMessage","type":"docs","url":"/hugo-docs/net/components/log/log_message/","weight":0,"wordcount":113},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store captured log messages.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"LogMessage","lvl1":"Data object used to store captured log messages.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ce9705976d4dd6624cd6f7c9c3ced458","permalink":"/node/components/log/log_message/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/log/log_message/","section":"node","summary":"Description The LogMessage class allows you to create data objects used to store captured log messages.\nImportant points\n This object is used by CachedLogger.  Fields time The time the message was generated\n public time: Date\n level This log level\n public level: LogLevel\n source The source (context name)\n public source: string\n correlation_id The transaction id to trace execution through a call chain.\n public correlation_id: string","tags":null,"title":"LogMessage","type":"docs","url":"/hugo-docs/node/components/log/log_message/","weight":0,"wordcount":89},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object used to store captured log messages.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621107146,"lvl0":"LogMessage","lvl1":"Data object used to store captured log messages.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7f8724891d04dfabfa1950f1dbccb742","permalink":"/python/components/log/log_message/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/log/log_message/","section":"python","summary":"Description The LogMessage class allows you to create data objects used to store captured log messages.\nImportant points\n This object is used by CachedLogger.  Fields time The time the message was generated\n time: datetime\n level This log level\n level: LogLevel\n source The source (context name)\n source: str\n correlation_id The transaction id to trace execution through a call chain.\n correlation_id: Optional[str]\n error The transaction id to trace execution through a call chain.","tags":null,"title":"LogMessage","type":"docs","url":"/hugo-docs/python/components/log/log_message/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"Tracer that dumps recorded traces to a logger.\n","dir":"golang/components/trace/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"LogTracer","lvl1":"Tracer that dumps recorded traces to a logger.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f3ced3dc80527eae09e435a50f22697b","permalink":"/golang/components/trace/log_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/trace/log_tracer/","section":"golang","summary":"Description The LogTracer class allows you to create a tracer that dumps recorded traces to a logger.\nConfiguration parameters options:\n log_level: log level to record traces (default: debug)  References  *:logger:*:*:1.0 - ILogger components to dump the captured counters *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Constructors NewLogTracer Creates a new instance of the tracer.\n NewLogTracer() *LogTracer\n Methods BeginTrace Begings recording an operation trace.","tags":null,"title":"LogTracer","type":"docs","url":"/hugo-docs/golang/components/trace/log_tracer/","weight":0,"wordcount":307},{"authors":null,"categories":null,"date":-62135596800,"description":"Tracer that dumps recorded traces to a logger.\n","dir":"net/components/trace/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"LogTracer","lvl1":"Tracer that dumps recorded traces to a logger.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"254119969e93bfca3ae491a16a7821c2","permalink":"/net/components/trace/log_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/trace/log_tracer/","section":"net","summary":"Inherits: IReconfigurable, IReferenceable\nDescription The LogTracer class allows you to create a tracer that dumps recorded traces to a logger.\nConfiguration parameters options:\n log_level: log level to record traces (default: debug)  References  *:logger:*:*:1.0 - ILogger components to dump the captured counters *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Instance methods BeginTrace Begings recording an operation trace.\n public TraceTiming BeginTrace(string correlationId, string component, string operation)","tags":null,"title":"LogTracer","type":"docs","url":"/hugo-docs/net/components/trace/log_tracer/","weight":0,"wordcount":304},{"authors":null,"categories":null,"date":-62135596800,"description":"Tracer that dumps recorded traces to a logger.\n","dir":"node/components/trace/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"LogTracer","lvl1":"Tracer that dumps recorded traces to a logger.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5d0ff342b17cfdf1f8e628373fc212e0","permalink":"/node/components/trace/log_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/trace/log_tracer/","section":"node","summary":"Implements: IReconfigurable, IReferenceable\nDescription The LogTracer class allows you to create a tracer that dumps recorded traces to a logger.\nConfiguration parameters options:\n log_level: log level to record traces (default: debug)  References  *:logger:*:*:1.0 - ILogger components to dump the captured counters *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Instance methods beginTrace Begings recording an operation trace.\n public beginTrace(correlationId: string, component: string, operation: string): TraceTiming","tags":null,"title":"LogTracer","type":"docs","url":"/hugo-docs/node/components/trace/log_tracer/","weight":0,"wordcount":304},{"authors":null,"categories":null,"date":-62135596800,"description":"Tracer that dumps recorded traces to a logger.\n","dir":"python/components/trace/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"LogTracer","lvl1":"Tracer that dumps recorded traces to a logger.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6bc4308cd5d2a4efe76a79feddce619e","permalink":"/python/components/trace/log_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/trace/log_tracer/","section":"python","summary":"Implements: IReconfigurable, IReferenceable\nDescription The LogTracer class allows you to create a tracer that dumps recorded traces to a logger.\nConfiguration parameters options:\n log_level: log level to record traces (default: debug)  References  *:logger:*:*:1.0 - ILogger components to dump the captured counters *:context-info:*:*:1.0 - (optional) ContextInfo to detect the context id and specify counters source  Instance methods begin_trace Begings recording an operation trace.\n begin_trace(correlation_id: Optional[str], component: str, operation: str): TraceTiming","tags":null,"title":"LogTracer","type":"docs","url":"/hugo-docs/python/components/trace/log_tracer/","weight":0,"wordcount":289},{"authors":null,"categories":null,"date":-62135596800,"description":"The LongConverter class allows you to convert arbitrary values into longs using extended conversion rules.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623969117,"lvl0":"LongConverter","lvl1":"The LongConverter class allows you to convert arbitrary values into longs using extended conversion rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"29a35c7256ef306afc519c42e44248b2","permalink":"/golang/commons/convert/long_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/convert/long_converter/","section":"golang","summary":"Description The LongConverter class allows you to convert arbitrary values into longs using the following extended conversion rules:\n Strings are converted to floats, then to longs DateTime: total number of milliseconds since unix epoсh Boolean: 1 for true and 0 for false  Methods ToLong Converts a value into long or returns 0 when conversion is not possible.\n ToLong(value interface{}) int64\n  value: interface{} - value to convert.","tags":null,"title":"LongConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/long_converter/","weight":0,"wordcount":297},{"authors":null,"categories":null,"date":-62135596800,"description":"The LongConverter class allows you to convert arbitrary values into longs using extended conversion rules.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"LongConverter","lvl1":"The LongConverter class allows you to convert arbitrary values into longs using extended conversion rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"437ffb6ac38e315fea9fc4df68e6e3ad","permalink":"/net/commons/convert/long_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/long_converter/","section":"net","summary":"Description The LongConverter class allows you to convert arbitrary values into longs using the following extended conversion rules:\n Strings are converted to floats, then to longs DateTime: total number of milliseconds since unix epoсh Boolean: 1 for true and 0 for false  Static methods ToLong Converts value into long or returns 0 when conversion is not possible.\n public static long ToLong(object value)\n  value: object - the value to convert.","tags":null,"title":"LongConverter","type":"docs","url":"/hugo-docs/net/commons/convert/long_converter/","weight":0,"wordcount":194},{"authors":null,"categories":null,"date":-62135596800,"description":"The LongConverter class allows you to convert arbitrary values into longs using extended conversion rules.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"LongConverter","lvl1":"The LongConverter class allows you to convert arbitrary values into longs using extended conversion rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8deffc37b1f4b477dc9f2553452bbcca","permalink":"/node/commons/convert/long_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/convert/long_converter/","section":"node","summary":"Description The LongConverter class allows you to convert arbitrary values into longs using the following extended conversion rules:\n Strings are converted to floats, then to longs DateTime: total number of milliseconds since unix epoсh Boolean: 1 for true and 0 for false  Static methods toLong Converts value into long or returns 0 when conversion is not possible.\n public static toLong(value: any): number\n  value: any - the value to convert.","tags":null,"title":"LongConverter","type":"docs","url":"/hugo-docs/node/commons/convert/long_converter/","weight":0,"wordcount":196},{"authors":null,"categories":null,"date":-62135596800,"description":"The LongConverter class allows you to convert arbitrary values into longs using extended conversion rules.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"LongConverter","lvl1":"The LongConverter class allows you to convert arbitrary values into longs using extended conversion rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"23ddf6c42574d18b28e1069932ccadc9","permalink":"/python/commons/convert/long_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/long_converter/","section":"python","summary":"Description The LongConverter class allows you to convert arbitrary values into longs using the following extended conversion rules:\n Strings are converted to floats, then to longs DateTime: total number of milliseconds since unix epoсh Boolean: 1 for true and 0 for false  Static methods to_long Converts value into long or returns 0 when conversion is not possible.\n static to_long(value: Any): float\n  value: Any - the value to convert.","tags":null,"title":"LongConverter","type":"docs","url":"/hugo-docs/python/commons/convert/long_converter/","weight":0,"wordcount":190},{"authors":null,"categories":null,"date":-62135596800,"description":"Managed references that in addition to keeping and locating references can also  manage their lifecycle.\n","dir":"golang/container/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ManagedReferences","lvl1":"Managed references that in addition to keeping and locating references can also  manage their lifecycle.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cec52675e168ebc5ec5f6ec733aa5392","permalink":"/golang/container/refer/managed_references/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/container/refer/managed_references/","section":"golang","summary":"Implements: ReferencesDecorator\nDescription The ManagedReferences class allows you to create managed references that in additon to keeping and locating references can also manage their lifecycle, such as:\n Auto-creation of missing components using available factories Auto-linking newly added components Auto-opening newly added components Auto-closing removed components  Constructors NewManagedReferences Creates a new instance of the decorator.\n NewManagedReferences(tuples []interface{}) *ManagedReferences\n  tuples: []interface{} - tuples where odd values are component locators (descriptors) and even values are component references  NewEmptyManagedReferences Creates a new instance of the references","tags":null,"title":"ManagedReferences","type":"docs","url":"/hugo-docs/golang/container/refer/managed_references/","weight":0,"wordcount":219},{"authors":null,"categories":null,"date":-62135596800,"description":"Managed references that in addition to keeping and locating references can also  manage their lifecycle.\n","dir":"node/container/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ManagedReferences","lvl1":"Managed references that in addition to keeping and locating references can also  manage their lifecycle.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8e1f6320780a1b9fe44f9981242d4b1c","permalink":"/node/container/refer/managed_references/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/refer/managed_references/","section":"node","summary":"Extends: ReferencesDecorator\nImplements: IOpenable\nDescription The ManagedReferences class allows you to create managed references that in additon to keeping and locating references can also manage their lifecycle, such as:\n Auto-creation of missing components using available factories Auto-linking newly added components Auto-opening newly added components Auto-closing removed components  Constructors Creates a new instance of the decorator.\n public constructor(tuples: any[] = null)\n  tuples: any[] - tuples where odd values are component locators (descriptors) and even values are component references  Instance methods close Closes the component and frees used resources.","tags":null,"title":"ManagedReferences","type":"docs","url":"/hugo-docs/node/container/refer/managed_references/","weight":0,"wordcount":187},{"authors":null,"categories":null,"date":-62135596800,"description":"Managed references that in addition to keeping and locating references can also  manage their lifecycle.\n","dir":"python/container/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"ManagedReferences","lvl1":"Managed references that in addition to keeping and locating references can also  manage their lifecycle.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7e376fbedee6e8310b9eba56e0d57c04","permalink":"/python/container/refer/managed_references/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/refer/managed_references/","section":"python","summary":"Implements: ReferencesDecorator, IOpenable\nDescription The ManagedReferences class allows you to create managed references that in additon to keeping and locating references can also manage their lifecycle, such as:\n Auto-creation of missing components using available factories Auto-linking newly added components Auto-opening newly added components Auto-closing removed components  Constructors Creates a new instance of the decorator.\n ManagedReferences(tuples: Sequence[Any] = None)\n  tuples: Sequence[Any] - tuples where odd values are component locators (descriptors) and even values are component references  Instance methods close Closes the component and frees used resources.","tags":null,"title":"ManagedReferences","type":"docs","url":"/hugo-docs/python/container/refer/managed_references/","weight":0,"wordcount":180},{"authors":null,"categories":null,"date":-62135596800,"description":"The MapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623969267,"lvl0":"MapConverter","lvl1":"The MapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5525190f241c0717f65ca1b4ba902a34","permalink":"/golang/commons/convert/map_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/convert/map_converter/","section":"golang","summary":"Description The MapConverter class allows you to convert arbitrary values into map objects using the following extended conversion rules:\n Objects: property names as keys, property values as values Arrays: element indexes as keys, elements as values  Methods ToMap Converts a value into a map object or returns an empty map when conversion is not possible\n ToMap(value interface{}) map[string]interface{}\n  value: interface{} - value to convert. returns: map[string]interface{} - map object or empty map when conversion is not supported.","tags":null,"title":"MapConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/map_converter/","weight":0,"wordcount":185},{"authors":null,"categories":null,"date":-62135596800,"description":"The MapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"MapConverter","lvl1":"The MapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b7ab6640701178aa703e34f526655452","permalink":"/net/commons/convert/map_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/map_converter/","section":"net","summary":"Description The MapConverter class allows you to convert arbitrary values into map objects using the following extended conversion rules:\n Objects: property names as keys, property values as values Arrays: element indexes as keys, elements as values  Static methods ToMap Converts value into map object or returns empty map when conversion is not possible\n public static IDictionary\u0026lt;string, object\u0026gt; ToMap(object value)\n  value: object - the value to convert.","tags":null,"title":"MapConverter","type":"docs","url":"/hugo-docs/net/commons/convert/map_converter/","weight":0,"wordcount":212},{"authors":null,"categories":null,"date":-62135596800,"description":"The MapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"MapConverter","lvl1":"The MapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"68967ba28b1a10cd875d3e32af44c35f","permalink":"/node/commons/convert/map_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/convert/map_converter/","section":"node","summary":"Description The MapConverter class allows you to convert arbitrary values into map objects using the following extended conversion rules:\n Objects: property names as keys, property values as values Arrays: element indexes as keys, elements as values  Static methods toMap Converts value into map object or returns empty map when conversion is not possible\n public static toMap(value: any): any\n  value: any - the value to convert. returns: any - map object or empty map when conversion is not supported.","tags":null,"title":"MapConverter","type":"docs","url":"/hugo-docs/node/commons/convert/map_converter/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"The MapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"MapConverter","lvl1":"The MapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ea38650046b4faf20465af606cb9c647","permalink":"/python/commons/convert/map_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/map_converter/","section":"python","summary":"Description The MapConverter class allows you to convert arbitrary values into map objects using the following extended conversion rules:\n Objects: property names as keys, property values as values Arrays: element indexes as keys, elements as values  Static methods to_map Converts value into map object or returns empty map when conversion is not possible\n static to_map(value: Any): Any\n  value: Any - the value to convert. returns: Any - map object or empty map when conversion is not supported.","tags":null,"title":"MapConverter","type":"docs","url":"/hugo-docs/python/commons/convert/map_converter/","weight":0,"wordcount":192},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate maps.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"MapSchema","lvl1":"Schema to validate maps.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"771a90e3340a4f5e299e945580ed9af6","permalink":"/golang/commons/validate/map_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/validate/map_schema/","section":"golang","summary":"Implements: Schema\nDescription The MapSchema class provides you with a schema to validate maps\nConstructors NewMapSchemaWithRules Creates a new instance of validation schema and sets its values. See IValidationRule, TypeCode\n NewMapSchemaWithRules(keyType interface{}, valueType interface{}, required bool, rules []IValidationRule) *MapSchema\n  keyType: interface{} - a type of map keys. Null means that keys may have any type. valueType: interface{} - a type of map values. Null means that values may have any type.","tags":null,"title":"MapSchema","type":"docs","url":"/hugo-docs/golang/commons/validate/map_schema/","weight":0,"wordcount":333},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate maps.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"MapSchema","lvl1":"Schema to validate maps.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c879fb5bf74cd27b8f01867f3cbcbdb0","permalink":"/net/commons/validate/map_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/validate/map_schema/","section":"net","summary":"Inherits: Schema\nDescription The MapSchema class provides you with a schema to validate maps\nConstructors Creates a new instance of validation schema and sets its values. See IValidationRule, TypeCode\n public MapSchema(object keyType, object valueType)\n  keyType: object - a type of map keys. Null means that keys may have any type. valueType: object - a type of map values. Null means that values may have any type.  Creates a new instance of validation schema.","tags":null,"title":"MapSchema","type":"docs","url":"/hugo-docs/net/commons/validate/map_schema/","weight":0,"wordcount":216},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate maps.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"MapSchema","lvl1":"Schema to validate maps.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"68d17c9d558ffd15d39f93dd86556c56","permalink":"/node/commons/validate/map_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/validate/map_schema/","section":"node","summary":"Extends: Schema\nDescription The MapSchema class provides you with a schema to validate maps\nConstructors Creates a new instance of validation schema and sets its values. See IValidationRule, TypeCode\n public constructor(keyType?: any, valueType?: any, required?: boolean, rules?: IValidationRule[])\n  keyType: any - a type of map keys. Null means that keys may have any type. valueType: any - a type of map values. Null means that values may have any type.","tags":null,"title":"MapSchema","type":"docs","url":"/hugo-docs/node/commons/validate/map_schema/","weight":0,"wordcount":284},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate maps.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"MapSchema","lvl1":"Schema to validate maps.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"828386f4fa5364e308b163ef5b8f84cc","permalink":"/python/commons/validate/map_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/validate/map_schema/","section":"python","summary":"Implements: Schema\nDescription The MapSchema class provides you with a schema to validate maps\nConstructors Creates a new instance of validation schema and sets its values. See IValidationRule, TypeCode\n MapSchema(key_type: Any = None, value_type: Any = None, required: bool = None, rules: List[IValidationRule] = None)\n  key_type: Any - a type of map keys. Null means that keys may have any type. value_type: Any - a type of map values.","tags":null,"title":"MapSchema","type":"docs","url":"/hugo-docs/python/commons/validate/map_schema/","weight":0,"wordcount":281},{"authors":null,"categories":null,"date":-62135596800,"description":"Cache that stores values in the process memory.\n","dir":"golang/components/cache/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"MemoryCache","lvl1":"Cache that stores values in the process memory.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3738ed039dba87c0d792b811e9dc1c51","permalink":"/golang/components/cache/memory_cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/cache/memory_cache/","section":"golang","summary":"Description The MemoryCache class allows you to create a cache that stores values in the process memory.\nImportant points\n This implementation is not suitable for synchronization of distributed processes.  Configuration parameters options:\n timeout: default caching timeout in milliseconds (default: 1 minute) max_size: maximum number of values stored in this cache (default: 1000)  Constructors NewMemoryCache Creates a new instance of the cache.\n NewMemoryCache() *MemoryCache\n NewMemoryCacheFromConfig Creates a new instance of the cache.","tags":null,"title":"MemoryCache","type":"docs","url":"/hugo-docs/golang/components/cache/memory_cache/","weight":0,"wordcount":386},{"authors":null,"categories":null,"date":-62135596800,"description":"Cache that stores values in the process memory.\n","dir":"net/components/cache/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"MemoryCache","lvl1":"Cache that stores values in the process memory.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ad562170517d36c6b529b8d67650cf4a","permalink":"/net/components/cache/memory_cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/cache/memory_cache/","section":"net","summary":"Inherits: ICache, IReconfigurable\nDescription The MemoryCache class allows you to create a cache that stores values in the process memory.\nImportant points\n This implementation is not suitable for synchronization of distributed processes.  Configuration parameters options:\n timeout: default caching timeout in milliseconds (default: 1 minute) max_size: maximum number of values stored in this cache (default: 1000)  Constructors Creates instance of local in-memory cache component\n public MemoryCache(ConfigParams config)","tags":null,"title":"MemoryCache","type":"docs","url":"/hugo-docs/net/components/cache/memory_cache/","weight":0,"wordcount":296},{"authors":null,"categories":null,"date":-62135596800,"description":"Cache that stores values in the process memory.\n","dir":"node/components/cache/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"MemoryCache","lvl1":"Cache that stores values in the process memory.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0d31755a7479da7057a6b942343e1154","permalink":"/node/components/cache/memory_cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/cache/memory_cache/","section":"node","summary":"Implements: ICache, IReconfigurable\nDescription The MemoryCache class allows you to create a cache that stores values in the process memory.\nImportant points\n This implementation is not suitable for synchronization of distributed processes.  Configuration parameters options:\n timeout: default caching timeout in milliseconds (default: 1 minute) max_size: maximum number of values stored in this cache (default: 1000)  Instance methods configure Configures component by passing configuration parameters.\n public configure(config: ConfigParams): void","tags":null,"title":"MemoryCache","type":"docs","url":"/hugo-docs/node/components/cache/memory_cache/","weight":0,"wordcount":258},{"authors":null,"categories":null,"date":-62135596800,"description":"Cache that stores values in the process memory.\n","dir":"python/components/cache/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620488193,"lvl0":"MemoryCache","lvl1":"Cache that stores values in the process memory.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"44eb4ee37bf90999830b997c02aa2e12","permalink":"/python/components/cache/memory_cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/cache/memory_cache/","section":"python","summary":"Implements: ICache, IReconfigurable\nDescription The MemoryCache class allows you to create a cache that stores values in the process memory.\nImportant points\n This implementation is not suitable for synchronization of distributed processes.  Configuration parameters options:\n timeout: default caching timeout in milliseconds (default: 1 minute) max_size: maximum number of values stored in this cache (default: 1000)  Instance methods configure Configures component by passing configuration parameters.\n configure(config: ConfigParams)","tags":null,"title":"MemoryCache","type":"docs","url":"/hugo-docs/python/components/cache/memory_cache/","weight":0,"wordcount":240},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that stores a configuration in memory.\n","dir":"golang/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"MemoryConfigReader","lvl1":"Config reader that stores a configuration in memory.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"326f9f6bfc9bc078da1dd52c3b84849c","permalink":"/golang/components/config/memory_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/config/memory_config_reader/","section":"golang","summary":"Description The MemoryConfigReader class allows you to create a config reader that stores a configuration in memory.\nConfiguration parameters The configuration parameters are the configuration template\n path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors NewMemoryConfigReader Creates a new instance of a config reader.\n NewMemoryConfigReader(config *cconfig.ConfigParams) *MemoryConfigReader\n  cconfig: *cconfig.ConfigParams - (optional) component configuration parameters  NewEmptyMemoryConfigReader Creates a new instance of config reader.","tags":null,"title":"MemoryConfigReader","type":"docs","url":"/hugo-docs/golang/components/config/memory_config_reader/","weight":0,"wordcount":168},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that stores a configuration in memory.\n","dir":"net/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"MemoryConfigReader","lvl1":"Config reader that stores a configuration in memory.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f32a83cb58230f8ce3674f606947d6f9","permalink":"/net/components/config/memory_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/config/memory_config_reader/","section":"net","summary":"Inherits: IConfigReader, IReconfigurable\nDescription The MemoryConfigReader class allows you to create a config reader that stores a configuration in memory.\nConfiguration parameters The configuration parameters are the configuration template\n path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of a config reader.\n public MemoryConfigReader(ConfigParams config = null)\n  config: ConfigParams - (optional) component configuration parameters  Fields _config  protected _config: ConfigParams = new ConfigParams()","tags":null,"title":"MemoryConfigReader","type":"docs","url":"/hugo-docs/net/components/config/memory_config_reader/","weight":0,"wordcount":167},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that stores a configuration in memory.\n","dir":"node/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"MemoryConfigReader","lvl1":"Config reader that stores a configuration in memory.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c054c1479a8a1832b88eeea6f0d3b6ed","permalink":"/node/components/config/memory_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/config/memory_config_reader/","section":"node","summary":"Implements: IConfigReader, IReconfigurable\nDescription The MemoryConfigReader class allows you to create a config reader that stores a configuration in memory.\nConfiguration parameters The configuration parameters are the configuration template\n path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of a config reader.\n public constructor(config: ConfigParams = null)\n  config: ConfigParams - (optional) component configuration parameters  Instance methods configure Configures a component by passing its configuration parameters.","tags":null,"title":"MemoryConfigReader","type":"docs","url":"/hugo-docs/node/components/config/memory_config_reader/","weight":0,"wordcount":166},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that stores a configuration in memory.\n","dir":"python/components/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621968406,"lvl0":"MemoryConfigReader","lvl1":"Config reader that stores a configuration in memory.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bc48fdeef95e1e99b62738318d866e8a","permalink":"/python/components/config/memory_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/config/memory_config_reader/","section":"python","summary":"Implements: IConfigReader, IReconfigurable\nDescription The MemoryConfigReader class allows you to create a config reader that stores a configuration in memory.\nConfiguration parameters The configuration parameters are the configuration template\n path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of a config reader.\n MemoryConfigReader(config: ConfigParams = None)\n  config: ConfigParams - (optional) component configuration parameters  Instance methods configure Configures a component by passing its configuration parameters.","tags":null,"title":"MemoryConfigReader","type":"docs","url":"/hugo-docs/python/components/config/memory_config_reader/","weight":0,"wordcount":153},{"authors":null,"categories":null,"date":-62135596800,"description":"Credential store that keeps credentials in memory.\n","dir":"golang/components/auth/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"MemoryCredentialStore","lvl1":"Credential store that keeps credentials in memory.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"72d912ced238622fd90c1cdaf3128b64","permalink":"/golang/components/auth/memory_credential_store/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/auth/memory_credential_store/","section":"golang","summary":"Description The MemoryCredentialStore class is used to create credential stores that keep their contained credentials in memory.\nConfiguration parameters  [credential key 1]: \u0026hellip; : credential parameters for key 1 [credential key 2]: \u0026hellip; : credential parameters for key N \u0026hellip; :  References  *:credential-store:*:*:1.0 - (optional) Credential stores to resolve credentials  Constructors NewMemoryCredentialStore Creates a new instance of the credential store.\n NewMemoryCredentialStore(config *config.ConfigParams) *MemoryCredentialStore\n  config: *config.","tags":null,"title":"MemoryCredentialStore","type":"docs","url":"/hugo-docs/golang/components/auth/memory_credential_store/","weight":0,"wordcount":262},{"authors":null,"categories":null,"date":-62135596800,"description":"Credential store that keeps credentials in memory.\n","dir":"net/components/auth/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"MemoryCredentialStore","lvl1":"Credential store that keeps credentials in memory.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e6a73becd21e38ae066e8aaaa43a5970","permalink":"/net/components/auth/memory_credential_store/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/auth/memory_credential_store/","section":"net","summary":"Inherits: ICredentialStore, IReconfigurable\nDescription The MemoryCredentialStore class is used to create credential stores that keep their contained credentials in memory.\nConfiguration parameters  [credential key 1]: \u0026hellip; : credential parameters for key 1 [credential key 2]: \u0026hellip; : credential parameters for key N \u0026hellip; :  References  *:credential-store:*:*:1.0 - (optional) Credential stores to resolve credentials  Constructors Creates a new instance of the credential store.\n public MemoryCredentialStore(ConfigParams config)","tags":null,"title":"MemoryCredentialStore","type":"docs","url":"/hugo-docs/net/components/auth/memory_credential_store/","weight":0,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"Credential store that keeps credentials in memory.\n","dir":"node/components/auth/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"MemoryCredentialStore","lvl1":"Credential store that keeps credentials in memory.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"52401515c7bee728cab32d237a49bf01","permalink":"/node/components/auth/memory_credential_store/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/auth/memory_credential_store/","section":"node","summary":"Implements: ICredentialStore, IReconfigurable\nDescription The MemoryCredentialStore class is used to create credential stores that keep their contained credentials in memory.\nConfiguration parameters  [credential key 1]: \u0026hellip; : credential parameters for key 1 [credential key 2]: \u0026hellip; : credential parameters for key N \u0026hellip; :  References  *:credential-store:*:*:1.0 - (optional) Credential stores to resolve credentials  Constructors Creates a new instance of the credential store.\n public constructor(config: ConfigParams = null)","tags":null,"title":"MemoryCredentialStore","type":"docs","url":"/hugo-docs/node/components/auth/memory_credential_store/","weight":0,"wordcount":247},{"authors":null,"categories":null,"date":-62135596800,"description":"Credential store that keeps credentials in memory.\n","dir":"python/components/auth/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"MemoryCredentialStore","lvl1":"Credential store that keeps credentials in memory.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b7f4823d582b1642936066b6a6ab9ab4","permalink":"/python/components/auth/memory_credential_store/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/auth/memory_credential_store/","section":"python","summary":"Implements: ICredentialStore, IReconfigurable\nDescription The MemoryCredentialStore class is used to create credential stores that keep their contained credentials in memory.\nConfiguration parameters  [credential key 1]: \u0026hellip; : credential parameters for key 1 [credential key 2]: \u0026hellip; : credential parameters for key N \u0026hellip; :  References  *:credential-store:*:*:1.0 - (optional) Credential stores to resolve credentials  Constructors Creates a new instance of the credential store.\n MemoryCredentialStore(config: ConfigParams = None)","tags":null,"title":"MemoryCredentialStore","type":"docs","url":"/hugo-docs/python/components/auth/memory_credential_store/","weight":0,"wordcount":228},{"authors":null,"categories":null,"date":-62135596800,"description":"Discovery service that keeps connections in memory.\n","dir":"golang/components/connect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"MemoryDiscovery","lvl1":"Discovery service that keeps connections in memory.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0db1141714cd32ed1174aa62424425c7","permalink":"/golang/components/connect/memory_discovery/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/connect/memory_discovery/","section":"golang","summary":"Implements: IDiscovery, IReconfigurable\nDescription The MemoryDiscovery class allows you to create discovery services that keep connections in memory.\nConfiguration parameters  [connection key 1]: \u0026hellip; : connection parameters for key 1 [connection key 2]: \u0026hellip; : connection parameters for key N  Constructors NewMemoryDiscovery Creates a new instance of discovery service.\n NewMemoryDiscovery(config *config.ConfigParam) *MemoryDiscovery\n  config: *config.ConfigParam - (optional) configuration with connection parameters.  Methods Configure Configures component by passing configuration parameters.","tags":null,"title":"MemoryDiscovery","type":"docs","url":"/hugo-docs/golang/components/connect/memory_discovery/","weight":0,"wordcount":300},{"authors":null,"categories":null,"date":-62135596800,"description":"Discovery service that keeps connections in memory.\n","dir":"net/components/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"MemoryDiscovery","lvl1":"Discovery service that keeps connections in memory.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"df678cf3d463dbce2937402558507b19","permalink":"/net/components/connect/memory_discovery/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/connect/memory_discovery/","section":"net","summary":"Inherits: IDiscovery, IReconfigurable\nDescription The MemoryDiscovery class allows you to create discovery services that keep connections in memory.\nConfiguration parameters  [connection key 1]: \u0026hellip; : connection parameters for key 1 [connection key 2]: \u0026hellip; : connection parameters for key N  Constructors Creates a new instance of discovery service.\n public MemoryDiscovery(ConfigParams config = null)\n  config: ConfigParams - (optional) configuration with connection parameters.  Creates a new instance of discovery service.","tags":null,"title":"MemoryDiscovery","type":"docs","url":"/hugo-docs/net/components/connect/memory_discovery/","weight":0,"wordcount":289},{"authors":null,"categories":null,"date":-62135596800,"description":"Discovery service that keeps connections in memory.\n","dir":"node/components/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"MemoryDiscovery","lvl1":"Discovery service that keeps connections in memory.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"06663fde2c3b42fb19593b2d3e4d9f72","permalink":"/node/components/connect/memory_discovery/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/connect/memory_discovery/","section":"node","summary":"Implements: IDiscovery, IReconfigurable\nDescription The MemoryDiscovery class allows you to create discovery services that keep connections in memory.\nConfiguration parameters  [connection key 1]: \u0026hellip; : connection parameters for key 1 [connection key 2]: \u0026hellip; : connection parameters for key N  Constructors Creates a new instance of discovery service.\n public constructor(config: ConfigParams = null)\n  config: ConfigParams - (optional) configuration with connection parameters.  Instance methods configure Configures component by passing configuration parameters.","tags":null,"title":"MemoryDiscovery","type":"docs","url":"/hugo-docs/node/components/connect/memory_discovery/","weight":0,"wordcount":283},{"authors":null,"categories":null,"date":-62135596800,"description":"Discovery service that keeps connections in memory.\n","dir":"python/components/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"MemoryDiscovery","lvl1":"Discovery service that keeps connections in memory.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8b667bb382258ca6464a161321702b50","permalink":"/python/components/connect/memory_discovery/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/connect/memory_discovery/","section":"python","summary":"Implements: IDiscovery, IReconfigurable\nDescription The MemoryDiscovery class allows you to create discovery services that keep connections in memory.\nConfiguration parameters  [connection key 1]: \u0026hellip; : connection parameters for key 1 [connection key 2]: \u0026hellip; : connection parameters for key N  Constructors Creates a new instance of discovery service.\n MemoryDiscovery(config: ConfigParams = None)\n  config: ConfigParams - (optional) configuration with connection parameters.  Instance methods configure Configures component by passing configuration parameters.","tags":null,"title":"MemoryDiscovery","type":"docs","url":"/hugo-docs/python/components/connect/memory_discovery/","weight":0,"wordcount":264},{"authors":null,"categories":null,"date":-62135596800,"description":"Lock used to synchronize the execution of a process using shared memory.\n","dir":"golang/components/lock/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"MemoryLock","lvl1":"Lock used to synchronize the execution of a process using shared memory.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6ae55da3a47e8998735d9a7a777bb1a6","permalink":"/golang/components/lock/memory_lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/lock/memory_lock/","section":"golang","summary":"Implements: Lock\nDescription The MemoryLock class is used to synchronize the execution of a process using shared memory.\nImportant points\n This implementation is not suitable for synchronization of distributed processes.  Configuration parameters options:\n retry_timeout: timeout in milliseconds to retry lock acquisition. (Default: 100)  Constructors NewMemoryLock Create new memory lock\n NewMemoryLock() *MemoryLock\n Methods ReleaseLock Releases prevously acquired lock by its key.\n (c *MemoryLock) ReleaseLock(correlationId string, key string) error","tags":null,"title":"MemoryLock","type":"docs","url":"/hugo-docs/golang/components/lock/memory_lock/","weight":0,"wordcount":189},{"authors":null,"categories":null,"date":-62135596800,"description":"Lock used to synchronize the execution of a process using shared memory.\n","dir":"net/components/lock/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"MemoryLock","lvl1":"Lock used to synchronize the execution of a process using shared memory.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2bfc55210bc5087b6ac7139412fe8a66","permalink":"/net/components/lock/memory_lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/lock/memory_lock/","section":"net","summary":"Inherits: Lock\nDescription The MemoryLock class is used to synchronize the execution of a process using shared memory.\nImportant points\n This implementation is not suitable for synchronization of distributed processes.  Configuration parameters options:\n retry_timeout: timeout in milliseconds to retry lock acquisition. (Default: 100)  Instance methods ReleaseLock Releases prevously acquired lock by its key.\n public override void ReleaseLock(string correlationId, string key)\n  correlationId: string - (optional) transaction id to trace execution through call chain.","tags":null,"title":"MemoryLock","type":"docs","url":"/hugo-docs/net/components/lock/memory_lock/","weight":0,"wordcount":171},{"authors":null,"categories":null,"date":-62135596800,"description":"Lock used to synchronize the execution of a process using shared memory.\n","dir":"node/components/lock/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"MemoryLock","lvl1":"Lock used to synchronize the execution of a process using shared memory.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9e592438cc1fee3ebbb0c02f220116ba","permalink":"/node/components/lock/memory_lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/lock/memory_lock/","section":"node","summary":"Extends: Lock\nDescription The MemoryLock class is used to synchronize the execution of a process using shared memory.\nImportant points\n This implementation is not suitable for synchronization of distributed processes.  Configuration parameters options:\n retry_timeout: timeout in milliseconds to retry lock acquisition. (Default: 100)  Instance methods releaseLock Releases prevously acquired lock by its key.\n public releaseLock(correlationId: string, key: string)\n  correlationId: string - (optional) transaction id to trace execution through call chain.","tags":null,"title":"MemoryLock","type":"docs","url":"/hugo-docs/node/components/lock/memory_lock/","weight":0,"wordcount":170},{"authors":null,"categories":null,"date":-62135596800,"description":"Lock used to synchronize the execution of a process using shared memory.\n","dir":"python/components/lock/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"MemoryLock","lvl1":"Lock used to synchronize the execution of a process using shared memory.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"722f432ce2c320cfa2ae1579a233a619","permalink":"/python/components/lock/memory_lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/lock/memory_lock/","section":"python","summary":"Implements: Lock\nDescription The MemoryLock class is used to synchronize the execution of a process using shared memory.\nImportant points\n This implementation is not suitable for synchronization of distributed processes.  Configuration parameters options:\n retry_timeout: timeout in milliseconds to retry lock acquisition. (Default: 100)  Instance methods release_lock Releases prevously acquired lock by its key.\n release_lock(correlation_id: Optional[str], key: str)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain.","tags":null,"title":"MemoryLock","type":"docs","url":"/hugo-docs/python/components/lock/memory_lock/","weight":0,"wordcount":158},{"authors":null,"categories":null,"date":-62135596800,"description":"Message queue that sends and receives messages within the same process by using shared memory.  \n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"MemoryMessageQueue","lvl1":"Message queue that sends and receives messages within the same process by using shared memory.  \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4174d93d1944ee1bcb607e6d91f17b27","permalink":"/golang/messaging/queues/memory_message_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/messaging/queues/memory_message_queue/","section":"golang","summary":"Extends: MessageQueue\nDescription The MemoryMessageQueue class is used to create message queues that send and receive messages within the same process by using shared memory.\nImportant points\n This queue is typically used for testing to mock real queues.  Configuration parameters  name: name of the message queue  References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements  Constructors Creates a new instance of the message queue.","tags":null,"title":"MemoryMessageQueue","type":"docs","url":"/hugo-docs/golang/messaging/queues/memory_message_queue/","weight":0,"wordcount":698},{"authors":null,"categories":null,"date":-62135596800,"description":"Message queue that sends and receives messages within the same process by using shared memory.  \n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"MemoryMessageQueue","lvl1":"Message queue that sends and receives messages within the same process by using shared memory.  \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e7d6e21ea9cd06182cfcb809f991f808","permalink":"/node/messaging/queues/memory_message_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/messaging/queues/memory_message_queue/","section":"node","summary":"Extends: MessageQueue\nDescription The MemoryMessageQueue class is used to create message queues that send and receive messages within the same process by using shared memory.\nImportant points\n This queue is typically used for testing to mock real queues.  Configuration parameters  name: name of the message queue  References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements  Constructors Creates a new instance of the message queue.","tags":null,"title":"MemoryMessageQueue","type":"docs","url":"/hugo-docs/node/messaging/queues/memory_message_queue/","weight":0,"wordcount":699},{"authors":null,"categories":null,"date":-62135596800,"description":"Message queue that sends and receives messages within the same process by using shared memory.  \n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"MemoryMessageQueue","lvl1":"Message queue that sends and receives messages within the same process by using shared memory.  \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a8ac6159c62c275593bd8d17aeb0005a","permalink":"/python/messaging/queues/memory_message_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/messaging/queues/memory_message_queue/","section":"python","summary":"Implements: MessageQueue\nDescription The MemoryMessageQueue class is used to create message queues that send and receive messages within the same process by using shared memory.\nImportant points\n This queue is typically used for testing to mock real queues.  Configuration parameters  name: name of the message queue  References  *:logger:*:*:1.0 - (optional) ILogger components to pass log messages *:counters:*:*:1.0 - (optional) ICounters components to pass collected measurements  Constructors Creates a new instance of the message queue.","tags":null,"title":"MemoryMessageQueue","type":"docs","url":"/hugo-docs/python/messaging/queues/memory_message_queue/","weight":0,"wordcount":680},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [MemoryMessageQueue](../../queues/memory_message_queue) components based on their descriptors.\n","dir":"golang/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"MemoryMessageQueueFactory","lvl1":"Creates [MemoryMessageQueue](../../queues/memory_message_queue) components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4b5f87eb8af898bf9e17ebf9dd824a5d","permalink":"/golang/messaging/build/memory_message_queue_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/build/memory_message_queue_factory/","section":"golang","summary":"Extends: MessageQueueFactory\nDescription The MemoryMessageQueueFactory class allows you to create MemoryMessageQueue components based on their descriptors.\nImportant points\n The name of the created message queue is taken from its descriptor.  Constructors Creates a new instance of the factory.\n public constructor()\n Methods createQueue Creates a message queue component and assigns its name.\n public createQueue(name: string): IMessageQueue\n  name: string - name of the created message queue.","tags":null,"title":"MemoryMessageQueueFactory","type":"docs","url":"/hugo-docs/golang/messaging/build/memory_message_queue_factory/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [MemoryMessageQueue](../../queues/memory_message_queue) components based on their descriptors.\n","dir":"node/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622571702,"lvl0":"MemoryMessageQueueFactory","lvl1":"Creates [MemoryMessageQueue](../../queues/memory_message_queue) components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"08a45a8eeb8a3eeb24c177b4e76c7860","permalink":"/node/messaging/build/memory_message_queue_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/build/memory_message_queue_factory/","section":"node","summary":"Extends: MessageQueueFactory\nDescription The MemoryMessageQueueFactory class allows you to create MemoryMessageQueue components based on their descriptors.\nImportant points\n The name of the created message queue is taken from its descriptor.  Constructors Creates a new instance of the factory.\n public constructor()\n Instance methods createQueue Creates a message queue component and assigns its name.\n public createQueue(name: string): IMessageQueue\n  name: string - name of the created message queue.","tags":null,"title":"MemoryMessageQueueFactory","type":"docs","url":"/hugo-docs/node/messaging/build/memory_message_queue_factory/","weight":0,"wordcount":74},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [MemoryMessageQueue](../../queues/memory_message_queue) components based on their descriptors.\n","dir":"python/messaging/build/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622328205,"lvl0":"MemoryMessageQueueFactory","lvl1":"Creates [MemoryMessageQueue](../../queues/memory_message_queue) components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1d0472fb964427ce8e826b67aeafa8a2","permalink":"/python/messaging/build/memory_message_queue_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/build/memory_message_queue_factory/","section":"python","summary":"Implements: MessageQueueFactory\nDescription The MemoryMessageQueueFactory class allows you to create MemoryMessageQueue components based on their descriptors.\nImportant points\n The name of the created message queue is taken from its descriptor.  Constructors Creates a new instance of the factory.\n MemoryMessageQueueFactory()\n Instance methods create_queue Creates a message queue component and assigns its name.\n create_queue(name: str): IMessageQueue\n  name: str - name of the created message queue. returns: IMessageQueue - message queue.","tags":null,"title":"MemoryMessageQueueFactory","type":"docs","url":"/hugo-docs/python/messaging/build/memory_message_queue_factory/","weight":0,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"Persistence component that stores data in memory.\n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":1000,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"MemoryPersistence","lvl1":"Persistence component that stores data in memory.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9b27d58ecde4a2345266b5928ed7adb4","permalink":"/golang/data/persistence/memory_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/golang/data/persistence/memory_persistence/","section":"golang","summary":"Description The MemoryPersistence class allows you to create persistence components that store data in memory.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing the Items property and calling the Save method. The component supports loading and saving items from another data source. This allows to use it as a base class for file and other types of persistence components that cache all data in memory.","tags":null,"title":"MemoryPersistence","type":"docs","url":"/hugo-docs/golang/data/persistence/memory_persistence/","weight":0,"wordcount":977},{"authors":null,"categories":null,"date":-62135596800,"description":"Persistence component that stores data in memory.\n","dir":"node/data/persistence/","expirydate":-62135596800,"fuzzywordcount":1000,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"MemoryPersistence\u003cT\u003e","lvl1":"Persistence component that stores data in memory.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a18d148f05fe226b42d0276810edafeb","permalink":"/node/data/persistence/memory_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/node/data/persistence/memory_persistence/","section":"node","summary":"Implements: IConfigurable, IReferenceable, IOpenable, ICleanable\nDescription The MemoryPersistence class allows you to create persistence components that store data in memory.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing the this._items property and calling the save method. The component supports loading and saving items from another data source.","tags":null,"title":"MemoryPersistence\u003cT\u003e","type":"docs","url":"/hugo-docs/node/data/persistence/memory_persistence/","weight":0,"wordcount":904},{"authors":null,"categories":null,"date":-62135596800,"description":"Persistence component that stores data in memory.\n","dir":"python/data/persistence/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"MemoryPersistence","lvl1":"Persistence component that stores data in memory.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d5bd19e8a23d6d4a3e7d9b1a04c8a8e7","permalink":"/python/data/persistence/memory_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/data/persistence/memory_persistence/","section":"python","summary":"Implements: IConfigurable, IReferenceable, IOpenable, ICleanable\nDescription The MemoryPersistence class allows you to create persistence components that store data in memory.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing the this._items property and calling the save method. The component supports loading and saving items from another data source.","tags":null,"title":"MemoryPersistence","type":"docs","url":"/hugo-docs/python/data/persistence/memory_persistence/","weight":0,"wordcount":843},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Message Distribution Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dcee49410455839a3ace01b3c0db18ab","permalink":"/microservices/users/message_distribution/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/message_distribution/","section":"microservices","summary":"Distributes messages to one or many recipients using their configured delivery methods: email or sms.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Golang, Dart  This microservice has optional dependencies on the following microservices:\n Email Settings - recipient email settings SMS Settings - recipient sms settings Email - email sending SMS Delivery - sms sending Message Templates - message templates  ","tags":null,"title":"Message Distribution Microservice","type":"docs","url":"/hugo-docs/microservices/users/message_distribution/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"Allows adding additional information to messages. \n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"MessageEnvelope","lvl1":"Allows adding additional information to messages. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"af2dea16e586bd5142c64a9856463e34","permalink":"/golang/messaging/queues/message_envelope/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/messaging/queues/message_envelope/","section":"golang","summary":"Description The MessageEnvelope class allows you to add additional information to messages.\nImportant points\n A correlation id, message id, and a message type are added to the data being sent/received. Additionally, a MessageEnvelope can reference a lock token. A MessageEnvelope\u0026rsquo;s message is stored as a buffer, so strings are converted using utf8 conversions.  Constructors Creates a new MessageEnvelope, which adds a correlation id, message id, and a type to the data being sent/received.","tags":null,"title":"MessageEnvelope","type":"docs","url":"/hugo-docs/golang/messaging/queues/message_envelope/","weight":0,"wordcount":426},{"authors":null,"categories":null,"date":-62135596800,"description":"Allows adding additional information to messages. \n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"MessageEnvelope","lvl1":"Allows adding additional information to messages. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a981f4078da0b96cd5a3b9292b23f0f3","permalink":"/node/messaging/queues/message_envelope/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/messaging/queues/message_envelope/","section":"node","summary":"Description The MessageEnvelope class allows you to add additional information to messages.\nImportant points\n A correlation id, message id, and a message type are added to the data being sent/received. Additionally, a MessageEnvelope can reference a lock token. A MessageEnvelope\u0026rsquo;s message is stored as a buffer, so strings are converted using utf8 conversions.  Constructors Creates a new MessageEnvelope, which adds a correlation id, message id, and a type to the data being sent/received.","tags":null,"title":"MessageEnvelope","type":"docs","url":"/hugo-docs/node/messaging/queues/message_envelope/","weight":0,"wordcount":427},{"authors":null,"categories":null,"date":-62135596800,"description":"Allows adding additional information to messages. \n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622342951,"lvl0":"MessageEnvelope","lvl1":"Allows adding additional information to messages. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"22fe9678838584ea57f4e58288ba24c9","permalink":"/python/messaging/queues/message_envelope/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/messaging/queues/message_envelope/","section":"python","summary":"Description The MessageEnvelope class allows you to add additional information to messages.\nImportant points\n A correlation id, message id, and a message type are added to the data being sent/received. Additionally, a MessageEnvelope can reference a lock token. A MessageEnvelope\u0026rsquo;s message is stored as a buffer, so strings are converted using utf8 conversions.  Constructors Creates a new MessageEnvelope, which adds a correlation id, message id, and a type to the data being sent/received.","tags":null,"title":"MessageEnvelope","type":"docs","url":"/hugo-docs/python/messaging/queues/message_envelope/","weight":0,"wordcount":409},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract message queue that is used as a basis for specific message queue implementations.\n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"MessageQueue","lvl1":"Abstract message queue that is used as a basis for specific message queue implementations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"612dd6b1acfb00b50a231f7ecebd7d48","permalink":"/golang/messaging/queues/message_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/golang/messaging/queues/message_queue/","section":"golang","summary":"Implements: IMessageQueue, IConfigurable, IReferenceable\nDescription The MessageQueue class allows you to create a message queue that is used as a basis for specific message queue implementions.\nConfiguration parameters  name: name of the message queue  connection(s):\n discovery_key: key to retrieve parameters from discovery service protocol: connection protocol like http, https, tcp, udp host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"MessageQueue","type":"docs","url":"/hugo-docs/golang/messaging/queues/message_queue/","weight":0,"wordcount":1030},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract message queue that is used as a basis for specific message queue implementations.\n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"MessageQueue","lvl1":"Abstract message queue that is used as a basis for specific message queue implementations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2f2cc0b9b0a7823bf24254d416eec1e4","permalink":"/node/messaging/queues/message_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/node/messaging/queues/message_queue/","section":"node","summary":"Implements: IMessageQueue, IConfigurable, IReferenceable\nDescription The MessageQueue class allows you to create a message queue that is used as a basis for specific message queue implementions.\nConfiguration parameters  name: name of the message queue  connection(s):\n discovery_key: key to retrieve parameters from discovery service protocol: connection protocol like http, https, tcp, udp host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"MessageQueue","type":"docs","url":"/hugo-docs/node/messaging/queues/message_queue/","weight":0,"wordcount":1031},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract message queue that is used as a basis for specific message queue implementations.\n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"MessageQueue","lvl1":"Abstract message queue that is used as a basis for specific message queue implementations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7cb0d61431da403c203b2bd9f8af882f","permalink":"/python/messaging/queues/message_queue/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/python/messaging/queues/message_queue/","section":"python","summary":"Implements: IMessageQueue, IConfigurable, IReferenceable\nDescription The MessageQueue class allows you to create a message queue that is used as a basis for specific message queue implementions.\nConfiguration parameters  name: name of the message queue  connection(s):\n discovery_key: key to retrieve parameters from discovery service protocol: connection protocol like http, https, tcp, udp host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"MessageQueue","type":"docs","url":"/hugo-docs/python/messaging/queues/message_queue/","weight":0,"wordcount":1095},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [IMessageQueue](../../queues/imessage_queue) components based on their descriptors.\n","dir":"golang/messaging/build/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"MessageQueueFactory","lvl1":"Creates [IMessageQueue](../../queues/imessage_queue) components based on their descriptors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"94285c2f4ef193e42be6ee9402b2a5a0","permalink":"/golang/messaging/build/message_queue_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/build/message_queue_factory/","section":"golang","summary":"Extends: Factory\nDescription The MessageQueueFactory class allows you to create IMessageQueue components based on their descriptors.\nFields _config Configuration paramters\n protected _config: ConfigParams\n _references References used to locate the component dependencies\n protected _references: IReferences\n  Abstract methods createQueue Creates a message queue component and assigns its name.\n abstract createQueue(name: string): IMessageQueue\n  name: string - name of the created message queue. returns: IMessageQueue - message queue  Methods configure Configures the component by passing its configuration parameters.","tags":null,"title":"MessageQueueFactory","type":"docs","url":"/hugo-docs/golang/messaging/build/message_queue_factory/","weight":0,"wordcount":107},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [IMessageQueue](../../queues/imessage_queue) components based on their descriptors.\n","dir":"node/messaging/build/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622675980,"lvl0":"MessageQueueFactory","lvl1":"Creates [IMessageQueue](../../queues/imessage_queue) components based on their descriptors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ff91ae6080e9a535fc10fa9e7a926f17","permalink":"/node/messaging/build/message_queue_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/build/message_queue_factory/","section":"node","summary":"Extends: Factory\nDescription The MessageQueueFactory class allows you to create IMessageQueue components based on their descriptors.\nFields _config Configuration paramters\n protected _config: ConfigParams\n _references References used to locate the component dependencies\n protected _references: IReferences\n  Abstract methods createQueue Creates a message queue component and assigns its name.\n abstract createQueue(name: string): IMessageQueue\n  name: string - name of the created message queue. returns: IMessageQueue - message queue  Instance methods configure Configures the component by passing its configuration parameters.","tags":null,"title":"MessageQueueFactory","type":"docs","url":"/hugo-docs/node/messaging/build/message_queue_factory/","weight":0,"wordcount":108},{"authors":null,"categories":null,"date":-62135596800,"description":"Creates [IMessageQueue](../../queues/imessage_queue) components based on their descriptors.\n","dir":"python/messaging/build/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622328335,"lvl0":"MessageQueueFactory","lvl1":"Creates [IMessageQueue](../../queues/imessage_queue) components based on their descriptors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f512fd9fb4e5811bf1b7e9c01e856b4a","permalink":"/python/messaging/build/message_queue_factory/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/build/message_queue_factory/","section":"python","summary":"Implements: Factory, IMessageQueueFactory, IConfigurable, IReferenceable\nDescription The MessageQueueFactory class allows you to create IMessageQueue components based on their descriptors.\nFields _config Configuration paramters\n _config: ConfigParams\n _references References used to locate the component dependencies\n _references: IReferences\n  Abstract methods create_queue Creates a message queue component and assigns its name.\n abstractmethod create_queue(name: str): IMessageQueue\n  name: str - name of the created message queue. returns: IMessageQueue - message queue  Instance methods configure Configures the component by passing its configuration parameters.","tags":null,"title":"MessageQueueFactory","type":"docs","url":"/hugo-docs/python/messaging/build/message_queue_factory/","weight":0,"wordcount":107},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"MessageTemplates Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9c9369e4c68e846b48227a1e99aa811d","permalink":"/microservices/content/messagetemplates/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/messagetemplates/","section":"microservices","summary":"Shows to users inspirational msgtemplates on various topics.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Golang, Dart  ","tags":null,"title":"MessageTemplates Microservice","type":"docs","url":"/hugo-docs/microservices/content/messagetemplates/","weight":0,"wordcount":38},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object that contains supported capabilities of a message queue. \n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"MessagingCapabilities","lvl1":"Data object that contains supported capabilities of a message queue. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"65354a2d0e85c285828aaa60b86e131d","permalink":"/golang/messaging/queues/messaging_capabilities/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/messaging/queues/messaging_capabilities/","section":"golang","summary":"Description The MessagingCapabilities class allows you to create data objects that contain supported capabilities of message queues.\nImportant points\n If certain capability is not supported a queue will throw a NotImplemented exception.  Constructors Creates a new instance of the capabilities object.\n public constructor(canMessageCount: boolean, canSend: boolean, canReceive: boolean, canPeek: boolean, canPeekBatch: boolean, canRenewLock: boolean, canAbandon: boolean, canDeadLetter: boolean, canClear: boolean)\n  canMessageCount: boolean - True if the queue supports reading message count.","tags":null,"title":"MessagingCapabilities","type":"docs","url":"/hugo-docs/golang/messaging/queues/messaging_capabilities/","weight":0,"wordcount":423},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object that contains supported capabilities of a message queue. \n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"MessagingCapabilities","lvl1":"Data object that contains supported capabilities of a message queue. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8bf16e2060d1a8698cad433a1ec1bd55","permalink":"/node/messaging/queues/messaging_capabilities/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/messaging/queues/messaging_capabilities/","section":"node","summary":"Description The MessagingCapabilities class allows you to create data objects that contain supported capabilities of message queues.\nImportant points\n If certain capability is not supported a queue will throw a NotImplemented exception.  Constructors Creates a new instance of the capabilities object.\n public constructor(canMessageCount: boolean, canSend: boolean, canReceive: boolean, canPeek: boolean, canPeekBatch: boolean, canRenewLock: boolean, canAbandon: boolean, canDeadLetter: boolean, canClear: boolean)\n  canMessageCount: boolean - True if the queue supports reading message count.","tags":null,"title":"MessagingCapabilities","type":"docs","url":"/hugo-docs/node/messaging/queues/messaging_capabilities/","weight":0,"wordcount":423},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object that contains supported capabilities of a message queue. \n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622393662,"lvl0":"MessagingCapabilities","lvl1":"Data object that contains supported capabilities of a message queue. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a6f553a009c4669ae6babc90eedc8fa3","permalink":"/python/messaging/queues/messaging_capabilities/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/messaging/queues/messaging_capabilities/","section":"python","summary":"Description The MessagingCapabilities class allows you to create data objects that contain supported capabilities of message queues.\nImportant points\n If certain capability is not supported a queue will throw a NotImplemented exception.  Constructors Creates a new instance of the capabilities object.\n MessagingCapabilities(can_message_count: bool, can_send: bool, can_receive: bool, can_peek: bool, can_peek_batch: bool, can_renew_lock: bool, can_abandon: bool, can_dead_letter: bool, can_clear: bool)\n  can_message_count: bool - True if the queue supports reading message count.","tags":null,"title":"MessagingCapabilities","type":"docs","url":"/hugo-docs/python/messaging/queues/messaging_capabilities/","weight":0,"wordcount":406},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class allows you to examine an object's methods (method instrospection) and to invoke them dynamically.\n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624238861,"lvl0":"MethodReflector","lvl1":"Helper class allows you to examine an object's methods (method instrospection) and to invoke them dynamically.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"078d755c703617305ca6c9fd6a577b4b","permalink":"/golang/commons/reflect/method_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/reflect/method_reflector/","section":"golang","summary":"Description The MethodReflector class allows you to examine an object\u0026rsquo;s methods (method instrospection) and to invoke them dynamically.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing. Moreover, because all languages have different casing and case sensitivity rules, this class treats all method names as case insensitive.  Methods GetMethodNames Gets the names of all methods implemented in specified object.","tags":null,"title":"MethodReflector","type":"docs","url":"/hugo-docs/golang/commons/reflect/method_reflector/","weight":0,"wordcount":210},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class allows you to examine an object's methods (method instrospection) and to invoke them dynamically.\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"MethodReflector","lvl1":"Helper class allows you to examine an object's methods (method instrospection) and to invoke them dynamically.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"db9765bd58ec12f74b0315213cfd5974","permalink":"/net/commons/reflect/method_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/reflect/method_reflector/","section":"net","summary":"Description The MethodReflector class allows you to examine an object\u0026rsquo;s methods (method instrospection) and to invoke them dynamically.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing. Moreover, because all languages have different casing and case sensitivity rules, this class treats all method names as case insensitive.  Static methods GetMethodNames Gets names of all methods implemented in specified object.","tags":null,"title":"MethodReflector","type":"docs","url":"/hugo-docs/net/commons/reflect/method_reflector/","weight":0,"wordcount":218},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class allows you to examine an object's methods (method instrospection) and to invoke them dynamically.\n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"MethodReflector","lvl1":"Helper class allows you to examine an object's methods (method instrospection) and to invoke them dynamically.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aa07475f833379c6233b91e16ca24184","permalink":"/node/commons/reflect/method_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/reflect/method_reflector/","section":"node","summary":"Description The MethodReflector class allows you to examine an object\u0026rsquo;s methods (method instrospection) and to invoke them dynamically.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing. Moreover, because all languages have different casing and case sensitivity rules, this class treats all method names as case insensitive.  Static methods getMethodNames Gets names of all methods implemented in specified object.","tags":null,"title":"MethodReflector","type":"docs","url":"/hugo-docs/node/commons/reflect/method_reflector/","weight":0,"wordcount":217},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class allows you to examine an object's methods (method instrospection) and to invoke them dynamically.\n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"MethodReflector","lvl1":"Helper class allows you to examine an object's methods (method instrospection) and to invoke them dynamically.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"552271c1d78bc9eda45c0407bdc79c91","permalink":"/python/commons/reflect/method_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/reflect/method_reflector/","section":"python","summary":"Description The MethodReflector class allows you to examine an object\u0026rsquo;s methods (method instrospection) and to invoke them dynamically.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing. Moreover, because all languages have different casing and case sensitivity rules, this class treats all method names as case insensitive.  Static methods get_method_names Gets names of all methods implemented in specified object.","tags":null,"title":"MethodReflector","type":"docs","url":"/hugo-docs/python/commons/reflect/method_reflector/","weight":0,"wordcount":212},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Metrics Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a7f3af06f7b74d3ea14648a64f844363","permalink":"/microservices/infrastructure/metrics/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/metrics/","section":"microservices","summary":"Keeps list of metrics. This microservice is designed to manage various metrics characterizing the operation of a process. Each metric has the following characteristics:\n metric name up to 3 types of measurements (in string format) date and time is a numerical value characterizing the metric  When adding or updating a metric, statistics on the metric are automatically calculated for different time horizons (you can specify the depth of the horizon) with the calculation of the average, maximum, minimum and accumulated values ​​within each of them.","tags":null,"title":"Metrics Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/metrics/","weight":0,"wordcount":124},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_dockerization/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1623543586,"lvl0":"Microservice Dockerization","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"420694cf541980f0e0e6979ab3ac135d","permalink":"/python/tutorials/microservice_dockerization/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/tutorials/microservice_dockerization/","section":"python","summary":"Introduction Running microservices in Docker containers has become one of the most popular ways of deploying a system. However, Docker can be used for much more. Containers can be used for automating builds and testing, resulting in a 100% standardized process between developers and the CI/CD pipelines on build servers.\nIn this tutorial, we will be demonstrating the entire process of building a microservice using Docker containers - from compiling the source code, to composing the built microservice in a container and publishing it to a repository.","tags":null,"title":"Microservice Dockerization","type":"docs","url":"/hugo-docs/python/tutorials/microservice_dockerization/","weight":0,"wordcount":247},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_facade/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":1623554748,"lvl0":"Microservice Facade","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f5a1ef78ece912d62ac702831812bd3e","permalink":"/python/tutorials/microservice_facade/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/tutorials/microservice_facade/","section":"python","summary":"Introduction A Facade is a microservice that serves as a point of entry to a system for external clients. The facade provides a stable external interface and hides the inner workings of a system. All requests made by external clients first arrive at the facade, which then forwards them to the appropriate microservices. The facade can also implement additional functionality, such as: authenticating and authorizing users, caching and aggregating requests, logging, etc.","tags":null,"title":"Microservice Facade","type":"docs","url":"/hugo-docs/python/tutorials/microservice_facade/","weight":0,"wordcount":668},{"authors":null,"categories":null,"date":-62135596800,"description":"MongoDB connection using the official driver.\n","dir":"python/mongodb/connect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1622221970,"lvl0":"MongoDbConnection","lvl1":"MongoDB connection using the official driver.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"12d226e32f692ed77de921ccdefb4869","permalink":"/python/mongodb/connect/mongodb_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/mongodb/connect/mongodb_connection/","section":"python","summary":"Implements: IReferenceable, IConfigurable, IOpenable\nDescription The MongoDbConnection class allows you to create a MongoDB connection using the official driver.\nImportant points\n By defining a connection and sharing it through multiple persistence components you can reduce the number of used database connections.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"MongoDbConnection","type":"docs","url":"/hugo-docs/python/mongodb/connect/mongodb_connection/","weight":0,"wordcount":375},{"authors":null,"categories":null,"date":-62135596800,"description":"MongoDbConnectionResolver implementation. Helper class that resolves MongoDB connection and credential parameters, validates them and generates a connection URI.\n","dir":"python/mongodb/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622222198,"lvl0":"MongoDbConnectionResolver","lvl1":"MongoDbConnectionResolver implementation. Helper class that resolves MongoDB connection and credential parameters, validates them and generates a connection URI.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9458d2a41a8e65f2c20873c60d23fee9","permalink":"/python/mongodb/connect/mongodb_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mongodb/connect/mongodb_connection_resolver/","section":"python","summary":"Implements: IReferenceable, IConfigurable\nDescription The MongoDbConnectionResolver class allows you to create a MongoDB connection resolver that resolves MongoDB connection and credential parameters, validates them, and generates a connection URI.\nImportant points\n It is able to process multiple connections to MongoDB cluster nodes.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) database: database name uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"MongoDbConnectionResolver","type":"docs","url":"/hugo-docs/python/mongodb/connect/mongodb_connection_resolver/","weight":0,"wordcount":192},{"authors":null,"categories":null,"date":-62135596800,"description":"Index definition for MongoDB.\n","dir":"python/mongodb/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622223351,"lvl0":"MongoDbIndex","lvl1":"Index definition for MongoDB.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e52e6a9ac92b3fdb09cdc06eeab21df4","permalink":"/python/mongodb/persistence/mongodb_index/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mongodb/persistence/mongodb_index/","section":"python","summary":"Description The MongoDbIndex class allows you to create an index for MongoDB.\nConstructors Creates a new instance of the index.\n MongoDbIndex(keys: Any, options: Any = None)\n Fields options Index keys (fields)\n keys: Any\n options Index options\n options: Any\n  ","tags":null,"title":"MongoDbIndex","type":"docs","url":"/hugo-docs/python/mongodb/persistence/mongodb_index/","weight":0,"wordcount":38},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in MongoDB using the official MongoDB driver.\n","dir":"python/mongodb/persistence/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"MongoDbPersistence","lvl1":"Abstract persistence component that stores data in MongoDB using the official MongoDB driver.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bf149af13037f94506afaccad0a039cc","permalink":"/python/mongodb/persistence/mongodb_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/python/mongodb/persistence/mongodb_persistence/","section":"python","summary":"Implements: IReferenceable, IUnreferenceable, IConfigurable, IOpenable, ICleanable\nDescription The MongoDbPersistence class allows you to create persistence components that store data in MongoDBs using the official MongoDB driver.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing self.__collection or self.__model properties.  Configuration parameters  collection: (optional) MongoDB collection name  connection(s):","tags":null,"title":"MongoDbPersistence","type":"docs","url":"/hugo-docs/python/mongodb/persistence/mongodb_persistence/","weight":0,"wordcount":892},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to create objects that contain string translations for multiple languages.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623415145,"lvl0":"MultiString","lvl1":"Class used to create objects that contain string translations for multiple languages.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"af2ab40a9d4349087081f640602bb646","permalink":"/golang/commons/data/multi_string/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/data/multi_string/","section":"golang","summary":"Description The MultiString class allows you to create objects that contain string translations for multiple languages.\nImportant points\n Language keys use two-letter codes like: \u0026lsquo;en\u0026rsquo;, \u0026lsquo;sp\u0026rsquo;, \u0026lsquo;de\u0026rsquo;, \u0026lsquo;ru\u0026rsquo;, \u0026lsquo;fr\u0026rsquo;, \u0026lsquo;pr\u0026rsquo;. When a translation for a specific language does not exists, it defaults to English (\u0026lsquo;en\u0026rsquo;). When English does not exists, it falls back to the first defined language  Examples values := MultiString.FromTuples( \u0026#34;en\u0026#34;, \u0026#34;Hello World!\u0026#34;, \u0026#34;ru\u0026#34;, \u0026#34;Привет мир!\u0026#34; ); value1 := values.","tags":null,"title":"MultiString","type":"docs","url":"/hugo-docs/golang/commons/data/multi_string/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to create objects that contain string translations for multiple languages.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"MultiString","lvl1":"Class used to create objects that contain string translations for multiple languages.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5e651b0fac3e1d7b7637f79cae3eafb5","permalink":"/node/commons/data/multi_string/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/data/multi_string/","section":"node","summary":"Description The MultiString class allows you to create objects that contain string translations for multiple languages.\nImportant points\n Language keys use two-letter codes like: \u0026lsquo;en\u0026rsquo;, \u0026lsquo;sp\u0026rsquo;, \u0026lsquo;de\u0026rsquo;, \u0026lsquo;ru\u0026rsquo;, \u0026lsquo;fr\u0026rsquo;, \u0026lsquo;pr\u0026rsquo;. When a translation for a specific language does not exists, it defaults to English (\u0026lsquo;en\u0026rsquo;). When English does not exists, it falls back to the first defined language  Constructors Creates a new MultiString object and initializes it with values.","tags":null,"title":"MultiString","type":"docs","url":"/hugo-docs/node/commons/data/multi_string/","weight":0,"wordcount":383},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to create objects that contain string translations for multiple languages.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1620935176,"lvl0":"MultiString","lvl1":"Class used to create objects that contain string translations for multiple languages.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e0baa61cc0d4a1f4dfbe76c608730ed6","permalink":"/python/commons/data/multi_string/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/data/multi_string/","section":"python","summary":"Implements: dict\nDescription The MultiString class allows you to create objects that contain string translations for multiple languages.\nImportant points\n Language keys use two-letter codes like: \u0026lsquo;en\u0026rsquo;, \u0026lsquo;sp\u0026rsquo;, \u0026lsquo;de\u0026rsquo;, \u0026lsquo;ru\u0026rsquo;, \u0026lsquo;fr\u0026rsquo;, \u0026lsquo;pr\u0026rsquo;. When a translation for a specific language does not exists, it defaults to English (\u0026lsquo;en\u0026rsquo;). When English does not exists, it falls back to the first defined language  Constructors Creates a new MultiString object and initializes it with values.","tags":null,"title":"MultiString","type":"docs","url":"/hugo-docs/python/commons/data/multi_string/","weight":0,"wordcount":368},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to create objects that contain string translations for multiple languages.\n\n**TODO: this class is not realized yet for this language**\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"MultiString!","lvl1":"Class used to create objects that contain string translations for multiple languages.\n\n**TODO: this class is not realized yet for this language**\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c09a7630f805a09fde177c2afe7c51b0","permalink":"/net/commons/data/multi_string/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/data/multi_string/","section":"net","summary":"Description The MultiString class allows you to create objects that contain string translations for multiple languages.\nImportant points\n Language keys use two-letter codes like: \u0026lsquo;en\u0026rsquo;, \u0026lsquo;sp\u0026rsquo;, \u0026lsquo;de\u0026rsquo;, \u0026lsquo;ru\u0026rsquo;, \u0026lsquo;fr\u0026rsquo;, \u0026lsquo;pr\u0026rsquo;. When a translation for a specific language does not exists, it defaults to English (\u0026lsquo;en\u0026rsquo;). When English does not exists, it falls back to the first defined language  Constructors Creates a new MultiString object and initializes it with values.","tags":null,"title":"MultiString!","type":"docs","url":"/hugo-docs/net/commons/data/multi_string/","weight":0,"wordcount":383},{"authors":null,"categories":null,"date":-62135596800,"description":"MySQL connection using the official driver.\n","dir":"node/mysql/connect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"MySqlConnection","lvl1":"MySQL connection using the official driver.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"947ac0869be65a19ab4ddc5f398c9672","permalink":"/node/mysql/connect/mysql_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/mysql/connect/mysql_connection/","section":"node","summary":"Implements: IReferenceable, IConfigurable, IOpenable\nDescription The MySqlConnection class allows you to create a connection to a MySQL database using a plain driver.\nConfiguration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):\n store_key: (optional) key to retrieve the credentials from ICredentialStore username: username password: user\u0026rsquo;s password  options:","tags":null,"title":"MySqlConnection","type":"docs","url":"/hugo-docs/node/mysql/connect/mysql_connection/","weight":0,"wordcount":320},{"authors":null,"categories":null,"date":-62135596800,"description":"MySQL connection using the official driver.\n","dir":"python/mysql/connect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"MySqlConnection","lvl1":"MySQL connection using the official driver.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d9cf01733907d121a848c1de8310340e","permalink":"/python/mysql/connect/mysql_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/mysql/connect/mysql_connection/","section":"python","summary":"Implements: IReferenceable, IConfigurable, IOpenable\nDescription The MySqlConnection class allows you to create a connection to a MySQL database using a plain driver.\nConfiguration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):\n store_key: (optional) key to retrieve the credentials from ICredentialStore username: username password: user\u0026rsquo;s password  options:","tags":null,"title":"MySqlConnection","type":"docs","url":"/hugo-docs/python/mysql/connect/mysql_connection/","weight":0,"wordcount":305},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves MySQL connection and credential parameters, validates them and generates a connection URI.\n","dir":"node/mysql/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"MySqlConnectionResolver","lvl1":"Helper class that resolves MySQL connection and credential parameters, validates them and generates a connection URI.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7323341ef705819abf1b3339d359ac92","permalink":"/node/mysql/connect/mysql_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/mysql/connect/mysql_connection_resolver/","section":"node","summary":"Implements: IReferenceable, IConfigurable\nDescription The MySqlConnectionResolver class allows you to create a MySQL connection and credential parameters resolver that validates the parameters and generates a connection URI.\nImportant points\n It is able to process multiple connections to MySQL cluster nodes.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) database: database name uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"MySqlConnectionResolver","type":"docs","url":"/hugo-docs/node/mysql/connect/mysql_connection_resolver/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves MySQL connection and credential parameters, validates them and generates a connection URI.\n","dir":"python/mysql/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"MySqlConnectionResolver","lvl1":"Helper class that resolves MySQL connection and credential parameters, validates them and generates a connection URI.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"76c74d9de677c773628307b39ffcf4b8","permalink":"/python/mysql/connect/mysql_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mysql/connect/mysql_connection_resolver/","section":"python","summary":"Implements: IReferenceable, IConfigurable\nDescription The MySqlConnectionResolver class allows you to create a MySQL connection and credential parameters resolver that validates the parameters and generates a connection URI.\nImportant points\n It is able to process multiple connections to MySQL cluster nodes.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) database: database name uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"MySqlConnectionResolver","type":"docs","url":"/hugo-docs/python/mysql/connect/mysql_connection_resolver/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in MySQL using the official driver.\n","dir":"node/mysql/persistence/","expirydate":-62135596800,"fuzzywordcount":1400,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"MySqlPersistence\u003cT\u003e","lvl1":"Abstract persistence component that stores data in MySQL using the official driver.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cb0129b077ddd0cb6b830cb2ca52c70c","permalink":"/node/mysql/persistence/mysql_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/node/mysql/persistence/mysql_persistence/","section":"node","summary":"Implements: IReferenceable, IUnreferenceable, IConfigurable, IOpenable, ICleanable\nDescription The MySqlPersistence class allows you to create persistence components that store data in MySQL databases using the official driver.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing this._db or this._collection properties.  Configuration parameters  collection: (optional) MySQL collection name connection(s): discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"MySqlPersistence\u003cT\u003e","type":"docs","url":"/hugo-docs/node/mysql/persistence/mysql_persistence/","weight":0,"wordcount":1328},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in MySQL using the official driver.\n","dir":"python/mysql/persistence/","expirydate":-62135596800,"fuzzywordcount":1300,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"MySqlPersistence","lvl1":"Abstract persistence component that stores data in MySQL using the official driver.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c5c6cac8235ed29fea557b154289a0c5","permalink":"/python/mysql/persistence/mysql_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/python/mysql/persistence/mysql_persistence/","section":"python","summary":"Implements: IReferenceable, IUnreferenceable, IConfigurable, IOpenable, ICleanable\nDescription The MySqlPersistence class allows you to create persistence components that store data in MySQL databases using the official driver.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing self._db or self._collection properties.  Configuration parameters  collection: (optional) MySQL collection name connection(s): discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"MySqlPersistence","type":"docs","url":"/hugo-docs/python/mysql/persistence/mysql_persistence/","weight":0,"wordcount":1242},{"authors":null,"categories":null,"date":-62135596800,"description":"A helper class that allows to extract component \"name\" from configuration parameters.\n","dir":"golang/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623176691,"lvl0":"NameResolver","lvl1":"A helper class that allows to extract component \"name\" from configuration parameters.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"630f2b4562b14ebb3ac2aa37875b4819","permalink":"/golang/commons/config/name_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/config/name_resolver/","section":"golang","summary":"Description A helper class that allows to extract component \u0026ldquo;name\u0026rdquo; from configuration parameters. The name can be defined in the \u0026ldquo;id\u0026rdquo; or \u0026ldquo;name\u0026rdquo; parameters or inside a component of type descriptor.\nMethods Resolve Resolves a component name from configuration parameters. The name can be stored in \u0026ldquo;id\u0026rdquo;, \u0026ldquo;name\u0026rdquo; fields or inside a component descriptor. If name cannot be determined it returns a empty string.\n (c *TNameResolver) Resolve(config *ConfigParams) string","tags":null,"title":"NameResolver","type":"docs","url":"/hugo-docs/golang/commons/config/name_resolver/","weight":0,"wordcount":181},{"authors":null,"categories":null,"date":-62135596800,"description":"A helper class that allows to extract component \"name\" from configuration parameters.\n","dir":"net/commons/config/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"NameResolver","lvl1":"A helper class that allows to extract component \"name\" from configuration parameters.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"00e793e4d790a49fd69756d3f3123af6","permalink":"/net/commons/config/name_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/config/name_resolver/","section":"net","summary":"Description A helper class that allows to extract component \u0026ldquo;name\u0026rdquo; from configuration parameters. The name can be defined in the \u0026ldquo;id\u0026rdquo; or \u0026ldquo;name\u0026rdquo; parameters or inside a component of type descriptor.\nStatic Methods Resolve Resolves a component name from configuration parameters. The name can be stored in \u0026ldquo;id\u0026rdquo;, \u0026ldquo;name\u0026rdquo; fields or inside a component descriptor. If name cannot be determined it returns a defaultName.\n public static string Resolve(ConfigParams config, string defaultName = null)","tags":null,"title":"NameResolver","type":"docs","url":"/hugo-docs/net/commons/config/name_resolver/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"A helper class that allows to extract component \"name\" from configuration parameters.\n","dir":"node/commons/config/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"NameResolver","lvl1":"A helper class that allows to extract component \"name\" from configuration parameters.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b3687bcf3d8c9cf8f42c2df0ef3b6580","permalink":"/node/commons/config/name_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/config/name_resolver/","section":"node","summary":"Description A helper class that allows to extract component \u0026ldquo;name\u0026rdquo; from configuration parameters. The name can be defined in the \u0026ldquo;id\u0026rdquo; or \u0026ldquo;name\u0026rdquo; parameters or inside a component of type descriptor.\nStatic Methods resolve Resolves a component name from configuration parameters. The name can be stored in \u0026ldquo;id\u0026rdquo;, \u0026ldquo;name\u0026rdquo; fields or inside a component descriptor. If name cannot be determined it returns a defaultName.\n public static resolve(config: ConfigParams, defaultName: string = null): string","tags":null,"title":"NameResolver","type":"docs","url":"/hugo-docs/node/commons/config/name_resolver/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"A helper class that allows to extract component \"name\" from configuration parameters.\n","dir":"python/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620915759,"lvl0":"NameResolver","lvl1":"A helper class that allows to extract component \"name\" from configuration parameters.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"16a1c4721454f1ddbe6d466859303eaa","permalink":"/python/commons/config/name_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/config/name_resolver/","section":"python","summary":"Description A helper class that allows to extract component \u0026ldquo;name\u0026rdquo; from configuration parameters. The name can be defined in the \u0026ldquo;id\u0026rdquo; or \u0026ldquo;name\u0026rdquo; parameters or inside a component of type descriptor.\nStatic Methods resolve Resolves a component name from configuration parameters. The name can be stored in \u0026ldquo;id\u0026rdquo;, \u0026ldquo;name\u0026rdquo; fields or inside a component descriptor. If name cannot be determined it returns a defaultName.\n static resolve(config: ConfigParams, default_name: str = None): str","tags":null,"title":"NameResolver","type":"docs","url":"/hugo-docs/python/commons/config/name_resolver/","weight":0,"wordcount":196},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by attempts to access missing objects.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624228436,"lvl0":"NotFoundError","lvl1":"Errors caused by attempts to access missing objects.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d6e559b87b813b205e890bf4b214b2c7","permalink":"/golang/commons/errors/not_found_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/not_found_error/","section":"golang","summary":"Description The NotFoundError class is used to manage errors caused by attempts to access missing objects.\nConstructors NewNotFoundError Creates an error instance and assigns its values.\n NewNotFoundError(correlationId, code, message string) *ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.  ","tags":null,"title":"NotFoundError","type":"docs","url":"/hugo-docs/golang/commons/errors/not_found_error/","weight":0,"wordcount":65},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by attempts to access missing objects.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"NotFoundException","lvl1":"Errors caused by attempts to access missing objects.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e4e4b49496089693ab101312a4bc717e","permalink":"/net/commons/errors/not_found_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/not_found_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The NotFoundException class is used to manage errors caused by attempts to access missing objects.\nConstructors Creates an error instance and assigns its values.\n public NotFoundException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"NotFoundException","type":"docs","url":"/hugo-docs/net/commons/errors/not_found_exception/","weight":0,"wordcount":130},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by attempts to access missing objects.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"NotFoundException","lvl1":"Errors caused by attempts to access missing objects.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"11c254c1a8ea9bc05d4fb588f958d3e0","permalink":"/node/commons/errors/not_found_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/not_found_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The NotFoundException class is used to manage errors caused by attempts to access missing objects.\nConstructors Creates an error instance and assigns its values.\n public NotFoundException(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"NotFoundException","type":"docs","url":"/hugo-docs/node/commons/errors/not_found_exception/","weight":0,"wordcount":74},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by attempts to access missing objects.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620412087,"lvl0":"NotFoundException","lvl1":"Errors caused by attempts to access missing objects.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"88fd61e0e3af32517bcfabf4517a0833","permalink":"/python/commons/errors/not_found_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/not_found_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The NotFoundException class is used to manage errors caused by attempts to access missing objects.\nConstructors Creates an error instance and assigns its values.\n NotFoundException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: str - (optional) a human-readable description of the error.","tags":null,"title":"NotFoundException","type":"docs","url":"/hugo-docs/python/commons/errors/not_found_exception/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that can be used to notify one or more components.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624245661,"lvl0":"Notifier","lvl1":"Helper class that can be used to notify one or more components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bd17b0a604db1b81491c56a82be984bb","permalink":"/golang/commons/run/notifier/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/run/notifier/","section":"golang","summary":"Description The Notifier class is a helper class that can be used to notify one or more components.\nMethods Notify Sets execution parameters.\n (c *TNotifier) Notify(correlationId string, components []interface{}, args *Parameters)\n  correlationId: string - (optional) transaction id used to trace execution through the call chain. components: []interface{} - list of components that are to be notified. args: *Parameters - notification arguments.  NotifyOne Notifies specific component.\nTo be notiied components must implement INotifiable interface.","tags":null,"title":"Notifier","type":"docs","url":"/hugo-docs/golang/commons/run/notifier/","weight":0,"wordcount":123},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that can be use to notify one or more components.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"Notifier","lvl1":"Helper class that can be use to notify one or more components.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"33a967b5ea0a8cc1f385da3c3bcbe404","permalink":"/net/commons/run/notifier/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/run/notifier/","section":"net","summary":"Description The Notifier class is a helper class that can be use to notify one or more components.\nStatic methods NotifyAsync Sets execution parameters.\n public static Task NotifyAsync(string correlationId, IEnumerable components, Parameters args)\n  correlationId: string - (optional) transaction id to trace execution through call chain. components: IEnumerable - a list of components that are to be notified. args: Parameters - notification arguments.  NotifyOneAsync Notifies specific component.","tags":null,"title":"Notifier","type":"docs","url":"/hugo-docs/net/commons/run/notifier/","weight":0,"wordcount":124},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that can be use to notify one or more components.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"Notifier","lvl1":"Helper class that can be use to notify one or more components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"255b09ff4aa4555a63c4b6e7639ccb86","permalink":"/node/commons/run/notifier/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/run/notifier/","section":"node","summary":"Description The Notifier class is a helper class that can be use to notify one or more components.\nStatic methods notify Sets execution parameters.\n public static notify(correlationId: string, components: any[], args: Parameters): void\n  correlationId: string - (optional) transaction id to trace execution through call chain. components: any[] - a list of components that are to be notified. args: Parameters - notification arguments.  notifyOne Notifies specific component.","tags":null,"title":"Notifier","type":"docs","url":"/hugo-docs/node/commons/run/notifier/","weight":0,"wordcount":124},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that can be use to notify one or more components.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621012468,"lvl0":"Notifier","lvl1":"Helper class that can be use to notify one or more components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e5a5825121c94b996a8780b751c81bca","permalink":"/python/commons/run/notifier/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/run/notifier/","section":"python","summary":"Description The Notifier class is a helper class that can be use to notify one or more components.\nStatic methods notify Sets execution parameters.\n static notify(correlation_id: Optional[str], components: List[Any], args: Parameters)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain. components: List[Any] - a list of components that are to be notified. args: Parameters - notification arguments.  notify_one Notifies specific component.\nTo be notiied components must implement INotifiable interface.","tags":null,"title":"Notifier","type":"docs","url":"/hugo-docs/python/commons/run/notifier/","weight":0,"wordcount":120},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule used to negate another rule.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"NotRule","lvl1":"Validation rule used to negate another rule.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"04266b0f9054e4bf38e0f4c410956f09","permalink":"/golang/commons/validate/not_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/not_rule/","section":"golang","summary":"Description The NotRule class allows you to negate a rule. Thus, when the embedded rule returns errors, then the negated rule returns no errors and vice versa.\nConstructors NewNotRule Creates a new validation rule and sets its values\n NewNotRule(rule IValidationRule) *NotRule\n  rule: IValidationRule - a rule to be negated.  Methods Validate Validates a given value against this rule.\n (c *NotRule) Validate(path string, schema ISchema, value interface{}) []*ValidationResult","tags":null,"title":"NotRule","type":"docs","url":"/hugo-docs/golang/commons/validate/not_rule/","weight":0,"wordcount":128},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule used to negate another rule.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"NotRule","lvl1":"Validation rule used to negate another rule.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e9ef9339540291f92a904a079f116382","permalink":"/net/commons/validate/not_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/not_rule/","section":"net","summary":"Inherits: IValidationRule\nDescription The NotRule class allows you to negate a rule. Thus, when the embedded rule returns errors, then the negated rule returns no errors and vice versa.\nConstructors Creates a new validation rule and sets its values\n public NotRule(IValidationRule rule)\n  rule: IValidationRule - a rule to be negated.  Instance methods Validate Validates a given value against this rule.\n public void Validate(string path, Schema schema, object value, List\u0026lt;ValidationResult\u0026gt; results)","tags":null,"title":"NotRule","type":"docs","url":"/hugo-docs/net/commons/validate/not_rule/","weight":0,"wordcount":132},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule used to negate another rule.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"NotRule","lvl1":"Validation rule used to negate another rule.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"877e52b09428e1cc33026b973179e9ca","permalink":"/node/commons/validate/not_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/not_rule/","section":"node","summary":"Implements: IValidationRule\nDescription The NotRule class allows you to negate a rule. Thus, when the embedded rule returns errors, then the negated rule returns no errors and vice versa.\nConstructors Creates a new validation rule and sets its values\n public constructor(rule: IValidationRule)\n  rule: IValidationRule - a rule to be negated.  Instance methods validate Validates a given value against this rule.\n public validate(path: string, schema: Schema, value: any, results: ValidationResult[]): void","tags":null,"title":"NotRule","type":"docs","url":"/hugo-docs/node/commons/validate/not_rule/","weight":0,"wordcount":134},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule used to negate another rule.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"NotRule","lvl1":"Validation rule used to negate another rule.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e9172701ffa0e340d7159f1e10d15c0c","permalink":"/python/commons/validate/not_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/not_rule/","section":"python","summary":"Implements: IValidationRule\nDescription The NotRule class allows you to negate a rule. Thus, when the embedded rule returns errors, then the negated rule returns no errors and vice versa.\nConstructors Creates a new validation rule and sets its values\n NotRule(rule: IValidationRule)\n  rule: IValidationRule - a rule to be negated.  Instance methods validate Validates a given value against this rule.\n validate(path: str, schema: Schema, value: Any, results: List[ValidationResult])","tags":null,"title":"NotRule","type":"docs","url":"/hugo-docs/python/commons/validate/not_rule/","weight":0,"wordcount":124},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy cache implementation that doesn't do anything.\n","dir":"golang/components/cache/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"NullCache","lvl1":"Dummy cache implementation that doesn't do anything.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3f2840c54ceb27eaa32b9321077b6fe4","permalink":"/golang/components/cache/null_cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/cache/null_cache/","section":"golang","summary":"Description The NullCache class allows you to implement a dummy cache that doesn\u0026rsquo;t do anything.\nImportant points\n It can be used in testing or in situations where a cache is required but must be disabled.  Constructors NewNullCache Creates a new instance of the cache.\n NewNullCache() *NullCache\n Methods Remove Removes a value from the cache by its key.\n (c *NullCache) Remove(correlationId string, key string) error\n  correlationId: string - (optional) transaction id to trace execution through a call chain.","tags":null,"title":"NullCache","type":"docs","url":"/hugo-docs/golang/components/cache/null_cache/","weight":0,"wordcount":290},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy cache implementation that doesn't do anything.\n","dir":"net/components/cache/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621575585,"lvl0":"NullCache","lvl1":"Dummy cache implementation that doesn't do anything.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8e1157264c41b0d9f373dec9b7e21b83","permalink":"/net/components/cache/null_cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/cache/null_cache/","section":"net","summary":"Inherits: ICache\nDescription The NullCache class allows you to implement a dummy cache that doesn\u0026rsquo;t do anything.\nImportant points\n It can be used in testing or in situations where a cache is required but must be disabled.  Static methods RemoveAsync Removes a value from the cache by its key.\n public override Task Remove(string correlationId, string key)\n  correlationId: string - (optional) transaction id to trace execution through a call chain.","tags":null,"title":"NullCache","type":"docs","url":"/hugo-docs/net/components/cache/null_cache/","weight":0,"wordcount":204},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy cache implementation that doesn't do anything.\n","dir":"node/components/cache/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621366687,"lvl0":"NullCache","lvl1":"Dummy cache implementation that doesn't do anything.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bbc0fe5dbe24f19ddd78e19f1c6d0306","permalink":"/node/components/cache/null_cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/cache/null_cache/","section":"node","summary":"Implements: ICache\nDescription The NullCache class allows you to implement a dummy cache that doesn\u0026rsquo;t do anything.\nImportant points\n It can be used in testing or in situations where a cache is required but must be disabled.  Static methods remove Removes a value from the cache by its key.\n public remove(correlationId: string, key: string): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through a call chain.","tags":null,"title":"NullCache","type":"docs","url":"/hugo-docs/node/components/cache/null_cache/","weight":0,"wordcount":203},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy cache implementation that doesn't do anything.\n","dir":"python/components/cache/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621092811,"lvl0":"NullCache","lvl1":"Dummy cache implementation that doesn't do anything.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7179dd374e691a687014d55c79441227","permalink":"/python/components/cache/null_cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/cache/null_cache/","section":"python","summary":"Implements: ICache\nDescription The NullCache class allows you to implement a dummy cache that doesn\u0026rsquo;t do anything.\nImportant points\n It can be used in testing or in situations where a cache is required but must be disabled.  Static methods remove Removes a value from the cache by its key.\n remove(correlation_id: Optional[str], key: str)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through a call chain.","tags":null,"title":"NullCache","type":"docs","url":"/hugo-docs/python/components/cache/null_cache/","weight":0,"wordcount":199},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of performance counters.\n","dir":"golang/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"NullCounters","lvl1":"Dummy implementation of performance counters.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e8f797138142fb743a76a83f9c38dc78","permalink":"/golang/components/count/null_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/count/null_counters/","section":"golang","summary":"Implements: ICounters\nDescription The NullCounters class allows you to create dummy performance counters.\nImportant points\n It can be used in testing or in situations when a counter is required but must be disabled.  Constructors NewNullCounters Creates a new instance of the counter.\n NewNullCounters() *NullCounters\n Methods BeginTiming Begins measurement of execution time interval. It returns *CounterTiming object which has to be called at CounterTiming.EndTiming to end the measurement and update the counter.","tags":null,"title":"NullCounters","type":"docs","url":"/hugo-docs/golang/components/count/null_counters/","weight":0,"wordcount":267},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of performance counters.\n","dir":"net/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"NullCounters","lvl1":"Dummy implementation of performance counters.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a87558f927b57270202bc1e917e5ce60","permalink":"/net/components/count/null_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/count/null_counters/","section":"net","summary":"Inherits: ICounters\nDescription The NullCounters class allows you to create dummy performance counters.\nImportant points\n It can be used in testing or in situations when a counter is required but must be disabled.  Instance methods BeginTiming Begins measurement of execution time interval. It returns CounterTiming object which has to be called at CounterTiming.EndTiming to end the measurement and update the counter.\n public CounterTiming BeginTiming(string name)\n  name: string - a counter name of Interval type.","tags":null,"title":"NullCounters","type":"docs","url":"/hugo-docs/net/components/count/null_counters/","weight":0,"wordcount":256},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of performance counters.\n","dir":"node/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"NullCounters","lvl1":"Dummy implementation of performance counters.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f9626522561e8f4da6e23412aa3bf33d","permalink":"/node/components/count/null_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/count/null_counters/","section":"node","summary":"Implements: ICounters\nDescription The NullCounters class allows you to create dummy performance counters.\nImportant points\n It can be used in testing or in situations when a counter is required but must be disabled.  Instance methods beginTiming Begins measurement of execution time interval. It returns CounterTiming object which has to be called at CounterTiming.endTiming to end the measurement and update the counter.\n public beginTiming(name: string): CounterTiming: void\n  name: string - a counter name of Interval type.","tags":null,"title":"NullCounters","type":"docs","url":"/hugo-docs/node/components/count/null_counters/","weight":0,"wordcount":257},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of performance counters.\n","dir":"python/components/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"NullCounters","lvl1":"Dummy implementation of performance counters.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"20979fce18f778289b04f8e5b30fc8ff","permalink":"/python/components/count/null_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/count/null_counters/","section":"python","summary":"Implements: ICounters\nDescription The NullCounters class allows you to create dummy performance counters.\nImportant points\n It can be used in testing or in situations when a counter is required but must be disabled.  Instance methods begin_timing Begins measurement of execution time interval. It returns CounterTiming object which has to be called at CounterTiming.end_timing to end the measurement and update the counter.\n begin_timing(name: str): CounterTiming\n  name: str - a counter name of Interval type.","tags":null,"title":"NullCounters","type":"docs","url":"/hugo-docs/python/components/count/null_counters/","weight":0,"wordcount":243},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy lock implementation with no real effect.\n","dir":"golang/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"NullLock","lvl1":"Dummy lock implementation with no real effect.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1501049af02bfcee4a6270061c67080d","permalink":"/golang/components/lock/null_lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/lock/null_lock/","section":"golang","summary":"Implements: ILock\nDescription The NullLock allows you to create a dummy lock with no real effect.\nImportant points\n It can be used in testing or in situations when a lock is required but must be disabled.  Constructors NewNullLock Create new null lock\n NewNullLock() *NullLock\n Methods AcquireLock Makes multiple attempts to acquire a lock by its key within a given time interval.\n (c *NullLock) AcquireLock(correlationId string, key string, ttl int, timeout int) error","tags":null,"title":"NullLock","type":"docs","url":"/hugo-docs/golang/components/lock/null_lock/","weight":0,"wordcount":234},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy lock implementation with no real effect.\n","dir":"net/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"NullLock","lvl1":"Dummy lock implementation with no real effect.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d66190da450e764be1bacd3278f9e0a5","permalink":"/net/components/lock/null_lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/lock/null_lock/","section":"net","summary":"Inherits: ILock\nDescription The NullLock allows you to create a dummy lock with no real effect.\nImportant points\n It can be used in testing or in situations when a lock is required but must be disabled.  Instance methods AcquireLock Makes multiple attempts to acquire a lock by its key within a given time interval.\n public AcquireLock(string correlationId, string key, long ttl, long timeout)\n  correlationId: string -(optional) transaction id to trace execution through call chain.","tags":null,"title":"NullLock","type":"docs","url":"/hugo-docs/net/components/lock/null_lock/","weight":0,"wordcount":204},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy lock implementation with no real effect.\n","dir":"node/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"NullLock","lvl1":"Dummy lock implementation with no real effect.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3b838f8813834412ce9d84e42deaee89","permalink":"/node/components/lock/null_lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/lock/null_lock/","section":"node","summary":"Implements: ILock\nDescription The NullLock allows you to create a dummy lock with no real effect.\nImportant points\n It can be used in testing or in situations when a lock is required but must be disabled.  Instance methods acquireLock Makes multiple attempts to acquire a lock by its key within a given time interval.\n public acquireLock(correlationId: string, key: string, ttl: number, timeout: number)\n  correlationId: string -(optional) transaction id to trace execution through call chain.","tags":null,"title":"NullLock","type":"docs","url":"/hugo-docs/node/components/lock/null_lock/","weight":0,"wordcount":204},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy lock implementation with no real effect.\n","dir":"python/components/lock/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"NullLock","lvl1":"Dummy lock implementation with no real effect.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c16e8d987507831936038954c711dad3","permalink":"/python/components/lock/null_lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/lock/null_lock/","section":"python","summary":"Implements: ILock\nDescription The NullLock allows you to create a dummy lock with no real effect.\nImportant points\n It can be used in testing or in situations when a lock is required but must be disabled.  Instance methods acquire_lock Makes multiple attempts to acquire a lock by its key within a given time interval.\n acquire_lock(correlation_id: Optional[str], key: str, ttl: float, timeout: float)\n  correlation_id: Optional[str] -(optional) transaction id to trace execution through call chain.","tags":null,"title":"NullLock","type":"docs","url":"/hugo-docs/python/components/lock/null_lock/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of logger with no real effect.\n","dir":"golang/components/log/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"NullLogger","lvl1":"Dummy implementation of logger with no real effect.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bbf58b4fe7796b0db1ba072efdf00fc0","permalink":"/golang/components/log/null_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/log/null_logger/","section":"golang","summary":"Implements: ILogger\nDescription The NullLogger class provides a dummy logger with no real effect.\nImportant points\n It can be used in testing or in situations when a logger is required but must be disabled.  Constructors NewNullLogger  NewNullLogger() *NullLogger\n Methods Level Gets the maximum log level. Messages with higher log level are filtered out.\n (c *Logger) Level() int\n  returns: int - the maximum log level.","tags":null,"title":"NullLogger","type":"docs","url":"/hugo-docs/golang/components/log/null_logger/","weight":0,"wordcount":286},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of logger with no real effect.\n","dir":"net/components/log/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"NullLogger","lvl1":"Dummy implementation of logger with no real effect.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"96292774b4ab7fe4aa2217dac75ab914","permalink":"/net/components/log/null_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/net/components/log/null_logger/","section":"net","summary":"Inherits: ILogger\nDescription The NullLogger class provides a dummy logger with no real effect.\nImportant points\n It can be used in testing or in situations when a logger is required but must be disabled.  Instance methods ComposeError Composes an human-readable error description\n protected string ComposeError(Exception error)\n  error: Exception - an error to format. returns: string - a human-redable error description.  Configure Configures component by passing configuration parameters.","tags":null,"title":"NullLogger","type":"docs","url":"/hugo-docs/net/components/log/null_logger/","weight":0,"wordcount":873},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of logger with no real effect.\n","dir":"node/components/log/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622670875,"lvl0":"NullLogger","lvl1":"Dummy implementation of logger with no real effect.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1ed6ceb2fc68d41c17cc404cff87aa37","permalink":"/node/components/log/null_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/log/null_logger/","section":"node","summary":"Implements: ILogger\nDescription The NullLogger class provides a dummy logger with no real effect.\nImportant points\n It can be used in testing or in situations when a logger is required but must be disabled.  Instance methods debug Logs high-level debug information for troubleshooting.\n public debug(correlation_id: string, message: string, \u0026hellip;args: any[])\n  correlation_id: string - (optional) transaction id to trace execution through a call chain. message: string - a human-readable message to log.","tags":null,"title":"NullLogger","type":"docs","url":"/hugo-docs/node/components/log/null_logger/","weight":0,"wordcount":416},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of logger with no real effect.\n","dir":"python/components/log/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"NullLogger","lvl1":"Dummy implementation of logger with no real effect.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bf6836a9ffb53830702f7e4e720d4b16","permalink":"/python/components/log/null_logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/components/log/null_logger/","section":"python","summary":"Implements: ILogger\nDescription The NullLogger class provides a dummy logger with no real effect.\nImportant points\n It can be used in testing or in situations when a logger is required but must be disabled.  Instance methods debug Logs high-level debug information for troubleshooting.\n debug(correlation_id: Optional[str], message: str, *args: Any, **kwargs: Any)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through a call chain. message: str - a human-readable message to log.","tags":null,"title":"NullLogger","type":"docs","url":"/hugo-docs/python/components/log/null_logger/","weight":0,"wordcount":478},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of tracer that doesn't do anything.\n","dir":"golang/components/trace/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"NullTracer","lvl1":"Dummy implementation of tracer that doesn't do anything.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e4c2082a6d092cb5c599ae4c99996fd8","permalink":"/golang/components/trace/null_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/trace/null_tracer/","section":"golang","summary":"Implements: ITracer\nDescription The NullTracer class allows you to create a dummy tracer with no real effect.\nImportant points\n It can be used in testing or in situations when tracing is required but must be disabled.  Constructors NewNullTracer Creates a new instance of the tracer.\n NewNullTracer() *NullTracer\n Methods BeginTrace Begings recording an operation trace\n (c *NullTracer) BeginTrace(correlationId string, component string, operation string) *TraceTiming\n  correlationId: string - (optional) transaction id to trace execution through call chain.","tags":null,"title":"NullTracer","type":"docs","url":"/hugo-docs/golang/components/trace/null_tracer/","weight":0,"wordcount":226},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of tracer that doesn't do anything.\n","dir":"net/components/trace/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"NullTracer","lvl1":"Dummy implementation of tracer that doesn't do anything.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"502e72b12569574ba28ebe2e34251be1","permalink":"/net/components/trace/null_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/trace/null_tracer/","section":"net","summary":"Inherits: ITracer\nDescription The NullTracer class allows you to create a dummy tracer with no real effect.\nImportant points\n It can be used in testing or in situations when tracing is required but must be disabled.  Instance methods BeginTrace Begings recording an operation trace.\n public TraceTiming BeginTrace(string correlationId, string component, string operation)\n  correlationId: string - (optional) transaction id to trace execution through a call chain. component: string - name of the called component operation: string - name of the executed operation.","tags":null,"title":"NullTracer","type":"docs","url":"/hugo-docs/net/components/trace/null_tracer/","weight":0,"wordcount":215},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of tracer that doesn't do anything.\n","dir":"node/components/trace/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"NullTracer","lvl1":"Dummy implementation of tracer that doesn't do anything.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"01d4cdab89ee446980f9421df80b9a5c","permalink":"/node/components/trace/null_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/trace/null_tracer/","section":"node","summary":"Implements: ITracer\nDescription The NullTracer class allows you to create a dummy tracer with no real effect.\nImportant points\n It can be used in testing or in situations when tracing is required but must be disabled.  Instance methods beginTrace Begings recording an operation trace\n public beginTrace(correlationId: string, component: string, operation: string): TraceTiming\n  correlationId: string - (optional) transaction id to trace execution through call chain. component: string - name of the called component operation: string - name of the executed operation.","tags":null,"title":"NullTracer","type":"docs","url":"/hugo-docs/node/components/trace/null_tracer/","weight":0,"wordcount":215},{"authors":null,"categories":null,"date":-62135596800,"description":"Dummy implementation of tracer that doesn't do anything.\n","dir":"python/components/trace/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"NullTracer","lvl1":"Dummy implementation of tracer that doesn't do anything.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"200bfd73bee73005d103da7f4e93a520","permalink":"/python/components/trace/null_tracer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/trace/null_tracer/","section":"python","summary":"Implements: ITracer\nDescription The NullTracer class allows you to create a dummy tracer with no real effect.\nImportant points\n It can be used in testing or in situations when tracing is required but must be disabled.  Instance methods begin_trace Begings recording an operation trace\n begin_trace(correlation_id: Optional[str], component: str, operation: str): TraceTiming\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through call chain. component: str - name of the called component operation: str - name of the executed operation.","tags":null,"title":"NullTracer","type":"docs","url":"/hugo-docs/python/components/trace/null_tracer/","weight":0,"wordcount":210},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/iot/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Object positions Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"30dc9c46d34098b522c1849dd0cf0942","permalink":"/microservices/iot/object_positions/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/iot/object_positions/","section":"microservices","summary":"Records historical positions of controlled objects.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Object positions Microservice","type":"docs","url":"/hugo-docs/microservices/iot/object_positions/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/iot/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Object routes Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3227f4d15dabc3c308b63cdd4d71d561","permalink":"/microservices/iot/object_routes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/iot/object_routes/","section":"microservices","summary":"Records historical routes of controlled objects.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Object routes Microservice","type":"docs","url":"/hugo-docs/microservices/iot/object_routes/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"Comparator over two values of any type.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623338824,"lvl0":"ObjectComparator","lvl1":"Comparator over two values of any type.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"28a46bb27a1196f3c3a110b8e3308cb6","permalink":"/golang/commons/validate/object_comparator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/validate/object_comparator/","section":"golang","summary":"Description The ObjectComparator class allows you to perform a comparison over two values of any type.\nMethods Equal Checks if two values are equal. The operation can be performed over values of any type.\n (c *TObjectComparator) AreEqual(value1 interface{}, value2 interface{}) bool\n  value1: interface{} - the first value to compare value2: interface{} - the second value to compare returns: bool - true if values are equal and false otherwise  AreNotEqual Checks if two values are NOT equal The operation can be performed over values of any type.","tags":null,"title":"ObjectComparator","type":"docs","url":"/hugo-docs/golang/commons/validate/object_comparator/","weight":0,"wordcount":360},{"authors":null,"categories":null,"date":-62135596800,"description":"Comparator over two values of any type.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ObjectComparator","lvl1":"Comparator over two values of any type.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0b7b6adb2326572f76a4b49476316453","permalink":"/net/commons/validate/object_comparator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/validate/object_comparator/","section":"net","summary":"Description The ObjectComparator class allows you to perform a comparison over two values of any type.\nStatic methods AreEqual Checks if two values are equal. The operation can be performed over values of any type.\n public static bool AreEqual(object value1, object value2)\n  value1: object - the first value to compare value2: object - the second value to compare returns: bool - true if values are equal and false otherwise  AreNotEqual Checks if two values are NOT equal The operation can be performed over values of any type.","tags":null,"title":"ObjectComparator","type":"docs","url":"/hugo-docs/net/commons/validate/object_comparator/","weight":0,"wordcount":361},{"authors":null,"categories":null,"date":-62135596800,"description":"Comparator over two values of any type.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ObjectComparator","lvl1":"Comparator over two values of any type.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7facfdca549bcbcc44a0724a9cefbc20","permalink":"/node/commons/validate/object_comparator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/validate/object_comparator/","section":"node","summary":"Description The ObjectComparator class allows you to perform a comparison over two values of any type.\nStatic methods areEqual Checks if two values are equal. The operation can be performed over values of any type.\n public static areEqual(value1: any, value2: any): boolean\n  value1: any - the first value to compare value2: any - the second value to compare returns: boolean - true if values are equal and false otherwise  areNotEqual Checks if two values are NOT equal The operation can be performed over values of any type.","tags":null,"title":"ObjectComparator","type":"docs","url":"/hugo-docs/node/commons/validate/object_comparator/","weight":0,"wordcount":361},{"authors":null,"categories":null,"date":-62135596800,"description":"Comparator over two values of any type.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621018163,"lvl0":"ObjectComparator","lvl1":"Comparator over two values of any type.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c3b4a84c076d478233a746fa4e842c5e","permalink":"/python/commons/validate/object_comparator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/validate/object_comparator/","section":"python","summary":"Description The ObjectComparator class allows you to perform a comparison over two values of any type.\nStatic methods are_equal Checks if two values are equal. The operation can be performed over values of any type.\n static are_equal(value1: Any, value2: Any): bool\n  value1: Any - the first value to compare value2: Any - the second value to compare returns: bool - true if values are equal and false otherwise  are_not_equal Checks if two values are NOT equal.","tags":null,"title":"ObjectComparator","type":"docs","url":"/hugo-docs/python/commons/validate/object_comparator/","weight":0,"wordcount":355},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them.\n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624239218,"lvl0":"ObjectReader","lvl1":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"87ca59a5352b67f7d0f3a5a0aa501d8c","permalink":"/golang/commons/reflect/object_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/reflect/object_reader/","section":"golang","summary":"Description The ObjectReader class allows you to examine the properties of an object (property instrospection) and to dynamically read them.\nImportant points\n In contrast to PropertyReflector which only introspects regular objects, this ObjectReader is also able to handle maps and arrays. For maps, properties are key-pairs identified by string keys. For arrays, properties are elements identified by an integer index. This class has a symmetric implementation across all languages supported by the Pip.","tags":null,"title":"ObjectReader","type":"docs","url":"/hugo-docs/golang/commons/reflect/object_reader/","weight":0,"wordcount":454},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them.\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ObjectReader","lvl1":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"17529c5e0f4f18c4f6a04da21c9a2801","permalink":"/net/commons/reflect/object_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/commons/reflect/object_reader/","section":"net","summary":"Description The ObjectReader class allows you to examine the properties of an object (property instrospection) and to dynamically read them.\nImportant points\n In contrast to PropertyReflector which only introspects regular objects, this ObjectReader is also able to handle maps and arrays. For maps, properties are key-pairs identified by string keys. For arrays, properties are elements identified by integer index. This class has a symmetric implementation across all languages supported by the Pip.","tags":null,"title":"ObjectReader","type":"docs","url":"/hugo-docs/net/commons/reflect/object_reader/","weight":0,"wordcount":474},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them.\n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ObjectReader","lvl1":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"54f11225a34f455de7afd4058d0f02cc","permalink":"/node/commons/reflect/object_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/reflect/object_reader/","section":"node","summary":"Description The ObjectReader class allows you to examine the properties of an object (property instrospection) and to dynamically read them.\nImportant points\n In contrast to PropertyReflector which only introspects regular objects, this ObjectReader is also able to handle maps and arrays. For maps, properties are key-pairs identified by string keys. For arrays, properties are elements identified by integer index. This class has a symmetric implementation across all languages supported by the Pip.","tags":null,"title":"ObjectReader","type":"docs","url":"/hugo-docs/node/commons/reflect/object_reader/","weight":0,"wordcount":466},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them.\n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"ObjectReader","lvl1":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f44b32517cb8776adc4a6094a9572ee3","permalink":"/python/commons/reflect/object_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/reflect/object_reader/","section":"python","summary":"Description The ObjectReader class allows you to examine the properties of an object (property instrospection) and to dynamically read them.\nImportant points\n In contrast to PropertyReflector which only introspects regular objects, this ObjectReader is also able to handle maps and arrays. For maps, properties are key-pairs identified by string keys. For arrays, properties are elements identified by integer index. This class has a symmetric implementation across all languages supported by the Pip.","tags":null,"title":"ObjectReader","type":"docs","url":"/hugo-docs/python/commons/reflect/object_reader/","weight":0,"wordcount":453},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate user defined objects.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"ObjectSchema","lvl1":"Schema to validate user defined objects.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5946eb67516c8106b4b954ec9f8b46e4","permalink":"/golang/commons/validate/object_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/validate/object_schema/","section":"golang","summary":"Implements: Schema\nDescription The ObjectSchema class allows you to create a validation schema that can be used to validate user defined objects.\nConstructors NewObjectSchemaWithRules Creates a new validation schema and sets its values. See IValidationRule\n NewObjectSchemaWithRules(allowUndefined bool, required bool, rules []IValidationRule) *ObjectSchema\n  allowUndefined: bool - true to allow properties undefines in the schema required: bool - (optional) true to always require non-nil values. rules: []IValidationRule - (optional) a list with validation rules.","tags":null,"title":"ObjectSchema","type":"docs","url":"/hugo-docs/golang/commons/validate/object_schema/","weight":0,"wordcount":466},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate user defined objects.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ObjectSchema","lvl1":"Schema to validate user defined objects.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d5db58d0a2b2c7de00ae994c8c3474b5","permalink":"/net/commons/validate/object_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/validate/object_schema/","section":"net","summary":"Inherits: Schema\nDescription The ObjectSchema class allows you to create a validation schema that can be used to validate user defined objects.\nConstructors Creates a new validation schema. See IValidationRule\n public ObjectSchema()\n Properties IsUndefinedAllowed Gets and sets flag to allow undefined properties. True to allow undefined properties and false to disallow.\n public IsUndefinedAllowed [ get, set ]\n Properties Gets and sets validation schemas for object properties. See PropertySchema","tags":null,"title":"ObjectSchema","type":"docs","url":"/hugo-docs/net/commons/validate/object_schema/","weight":0,"wordcount":367},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate user defined objects.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"ObjectSchema","lvl1":"Schema to validate user defined objects.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1370fb5b312deaff3a03b494938b098d","permalink":"/node/commons/validate/object_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/validate/object_schema/","section":"node","summary":"Extends: Schema\nDescription The ObjectSchema class allows you to create a validation schema that can be used to validate user defined objects.\nConstructors Creates a new validation schema and sets its values. See IValidationRule\n public constructor(allowUndefined?: boolean, required?: boolean, rules?: IValidationRule[])\n  allowUndefined: boolean - true to allow properties undefines in the schema required: boolean - (optional) true to always require non-null values. rules: IValidationRule[] - (optional) a list with validation rules.","tags":null,"title":"ObjectSchema","type":"docs","url":"/hugo-docs/node/commons/validate/object_schema/","weight":0,"wordcount":450},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate user defined objects.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622391869,"lvl0":"ObjectSchema","lvl1":"Schema to validate user defined objects.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7ec34ab06f6e9ffaca6193a4d894bb7b","permalink":"/python/commons/validate/object_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/validate/object_schema/","section":"python","summary":"Extends: Schema\nDescription The ObjectSchema class allows you to create a validation schema that can be used to validate user defined objects.\nConstructors Creates a new validation schema and sets its values. See IValidationRule\n ObjectSchema(allow_undefined: bool = False, required: bool = None, rules: List[IValidationRule] = None):\n  allow_undefined?: bool - true to allow properties undefined in the schema required: bool - (optional) true to always require non-None values. rules: List[IValidationRule] - (optional) a list with validation rules.","tags":null,"title":"ObjectSchema","type":"docs","url":"/hugo-docs/python/commons/validate/object_schema/","weight":0,"wordcount":435},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to dynamically set the properties of an object. \n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624239448,"lvl0":"ObjectWriter","lvl1":"Helper class that allows you to dynamically set the properties of an object. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6266309d809545c23d2e9b04b63f0259","permalink":"/golang/commons/reflect/object_writer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/reflect/object_writer/","section":"golang","summary":"Description The ObjectWriter class allows you to dynamically set the properties of an object.\nImportant points\n In contrast to PropertyReflector which only introspects regular objects, the ObjectWriter class is also able to handle maps and arrays. For maps, properties are key-pairs identified by string keys, For arrays, properties are elements identified by integer index. This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.","tags":null,"title":"ObjectWriter","type":"docs","url":"/hugo-docs/golang/commons/reflect/object_writer/","weight":0,"wordcount":291},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to dynamically set the properties of an object. \n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ObjectWriter","lvl1":"Helper class that allows you to dynamically set the properties of an object. \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"58559f4c7294b45480e1517ec2ba7db4","permalink":"/net/commons/reflect/object_writer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/reflect/object_writer/","section":"net","summary":"Description The ObjectWriter class allows you to dynamically set the properties of an object.\nImportant points\n In contrast to PropertyReflector which only introspects regular objects, the ObjectWriter class is also able to handle maps and arrays. For maps, properties are key-pairs identified by string keys, For arrays, properties are elements identified by integer index. This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.","tags":null,"title":"ObjectWriter","type":"docs","url":"/hugo-docs/net/commons/reflect/object_writer/","weight":0,"wordcount":310},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to dynamically set the properties of an object. \n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ObjectWriter","lvl1":"Helper class that allows you to dynamically set the properties of an object. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"491428d1a03ef6737e43fab611176b4f","permalink":"/node/commons/reflect/object_writer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/reflect/object_writer/","section":"node","summary":"Description The ObjectWriter class allows you to dynamically set the properties of an object.\nImportant points\n In contrast to PropertyReflector which only introspects regular objects, the ObjectWriter class is also able to handle maps and arrays. For maps, properties are key-pairs identified by string keys, For arrays, properties are elements identified by integer index. This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.","tags":null,"title":"ObjectWriter","type":"docs","url":"/hugo-docs/node/commons/reflect/object_writer/","weight":0,"wordcount":301},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to dynamically set the properties of an object. \n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621009148,"lvl0":"ObjectWriter","lvl1":"Helper class that allows you to dynamically set the properties of an object. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ba199da74d4d20b2d9e557f42cf11110","permalink":"/python/commons/reflect/object_writer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/reflect/object_writer/","section":"python","summary":"Description The ObjectWriter class allows you to dynamically set the properties of an object.\nImportant points\n In contrast to PropertyReflector which only introspects regular objects, the ObjectWriter class is also able to handle maps and arrays. For maps, properties are key-pairs identified by string keys, For arrays, properties are elements identified by integer index. This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.","tags":null,"title":"ObjectWriter","type":"docs","url":"/hugo-docs/python/commons/reflect/object_writer/","weight":0,"wordcount":293},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that checks that only one property of a list of properties exists in an object.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"OnlyOneExistsRule","lvl1":"Validation rule that checks that only one property of a list of properties exists in an object.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bc47b3eda54a4fea82c4818d206e7eda","permalink":"/golang/commons/validate/only_one_exists_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/only_one_exists_rule/","section":"golang","summary":"Description The OnlyOneExistsRule allows you to check that only one property of a list of properties exists in an object.\nConstructors NewOnlyOneExistsRule Creates a new validation rule and sets its values\n NewOnlyOneExistsRule(properties \u0026hellip;string) *OnlyOneExistsRule\n  properties: \u0026hellip;string - a list of property names where at only one property must exist  Methods Validate Validates a given value against this rule.\n (c *OnlyOneExistsRule) Validate(path string, schema ISchema, value interface{}) []*ValidationResult","tags":null,"title":"OnlyOneExistsRule","type":"docs","url":"/hugo-docs/golang/commons/validate/only_one_exists_rule/","weight":0,"wordcount":152},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that checks that only one property of a list of properties exists in an object.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"OnlyOneExistsRule","lvl1":"Validation rule that checks that only one property of a list of properties exists in an object.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"20b0135a29e229e70caa994cbce86e69","permalink":"/net/commons/validate/only_one_exists_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/only_one_exists_rule/","section":"net","summary":"Inherits: IValidationRule\nDescription The OnlyOneExistsRule allows you to check that only one property of a list of properties exists in an object.\nConstructors Creates a new validation rule and sets its values\n public OnlyOneExistsRule(params string[] properties)\n  properties: string[] - a list of property names where at only one property must exist  Instance methods Validate Validates a given value against this rule.\n public void Validate(string path, Schema schema, object value, List\u0026lt;ValidationResult\u0026gt; results)","tags":null,"title":"OnlyOneExistsRule","type":"docs","url":"/hugo-docs/net/commons/validate/only_one_exists_rule/","weight":0,"wordcount":158},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that checks that only one property of a list of properties exists in an object.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"OnlyOneExistsRule","lvl1":"Validation rule that checks that only one property of a list of properties exists in an object.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"823e7d588df03010255a5597d9febb23","permalink":"/node/commons/validate/only_one_exists_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/only_one_exists_rule/","section":"node","summary":"Implements: IValidationRule\nDescription The OnlyOneExistsRule allows you to check that only one property of a list of properties exists in an object.\nConstructors Creates a new validation rule and sets its values\n public constructor(\u0026hellip;properties: string[])\n  properties: string[] - a list of property names where at only one property must exist  Instance methods validate Validates a given value against this rule.\n public validate(path: string, schema: Schema, value: any, results: ValidationResult[]): void","tags":null,"title":"OnlyOneExistsRule","type":"docs","url":"/hugo-docs/node/commons/validate/only_one_exists_rule/","weight":0,"wordcount":158},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that checks that only one property of a list of properties exists in an object.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"OnlyOneExistsRule","lvl1":"Validation rule that checks that only one property of a list of properties exists in an object.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"586e6d5be93250935cc68676ddbdae19","permalink":"/python/commons/validate/only_one_exists_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/only_one_exists_rule/","section":"python","summary":"Implements: IValidationRule\nDescription The OnlyOneExistsRule allows you to check that only one property of a list of properties exists in an object.\nConstructors Creates a new validation rule and sets its values\n OnlyOneExistsRule(*properties: str)\n  properties: str - a list of property names where at only one property must exist  Instance methods validate Validates a given value against this rule.\n validate(path: str, schema: Schema, value: Any, results: List[ValidationResult])","tags":null,"title":"OnlyOneExistsRule","type":"docs","url":"/hugo-docs/python/commons/validate/only_one_exists_rule/","weight":0,"wordcount":151},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624245892,"lvl0":"Opener","lvl1":"Helper class that can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"023a58ed8df76944c385978de751fb58","permalink":"/golang/commons/run/opener/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/run/opener/","section":"golang","summary":"Description The Opener class can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\nMethods IsOpen Checks if all components are opened.\nTo be checked components must implement the IOpenable interface. If they don\u0026rsquo;t, the call to this method returns true.\n (c *TOpener) IsOpen(components []interface{}) bool\n  components: []interface{} - list of components that are to be checked.","tags":null,"title":"Opener","type":"docs","url":"/hugo-docs/golang/commons/run/opener/","weight":0,"wordcount":272},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"Opener","lvl1":"Helper class that can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"762cf543840eed0bbdadda9d94602531","permalink":"/net/commons/run/opener/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/run/opener/","section":"net","summary":"Description The Opener class can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\nStatic methods IsOpen Checks if all components are opened.\nTo be checked components must implement IOpenable interface. If they don\u0026rsquo;t the call to this method returns true.\n public static bool IsOpen(IEnumerable components)\n  components: IEnumerable - a list of components that are to be checked.","tags":null,"title":"Opener","type":"docs","url":"/hugo-docs/net/commons/run/opener/","weight":0,"wordcount":251},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"Opener","lvl1":"Helper class that can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c27acebb9712834ba5e4b7ad4444e3d0","permalink":"/node/commons/run/opener/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/run/opener/","section":"node","summary":"Description The Opener class can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\nStatic methods isOpen Checks if all components are opened.\nTo be checked components must implement IOpenable interface. If they don\u0026rsquo;t the call to this method returns true.\n public static isOpen(components: any[]): boolean\n  components: any[] - a list of components that are to be checked.","tags":null,"title":"Opener","type":"docs","url":"/hugo-docs/node/commons/run/opener/","weight":0,"wordcount":251},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621012595,"lvl0":"Opener","lvl1":"Helper class that can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1a8057f3db3cf158cb7df3432d10f7dc","permalink":"/python/commons/run/opener/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/run/opener/","section":"python","summary":"Description The Opener class can be used to check whether all components are opened or not, a component is opened or not, and to open one or more components.\nStatic methods is_open Checks if all components are opened.\nTo be checked, components must implement IOpenable interface. If they don\u0026rsquo;t, the call to this method returns true.\n static is_open(components: List[Any]): bool\n  components: List[Any] - a list of components that are to be checked.","tags":null,"title":"Opener","type":"docs","url":"/hugo-docs/python/commons/run/opener/","weight":0,"wordcount":245},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object to store captured operation traces.\n","dir":"golang/components/trace/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"OperationTrace","lvl1":"Data object to store captured operation traces.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"08df953ae6f83b32e57e90a7caabc386","permalink":"/golang/components/trace/operation_trace/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/trace/operation_trace/","section":"golang","summary":"Description The OperationTrace class allows you to create a data object used to store captured operation traces.\nImportant points\n This object is used by CachedTracer.  Fields Time The time when operation was executed\n Time: time.Time\n Source The source (context name)\n Source: string\n Component The name of the component\n Component: string\n Operation The name of the executed operation\n Operation: string\n CorrelationId The transaction id to trace execution through call chain.","tags":null,"title":"OperationTrace","type":"docs","url":"/hugo-docs/golang/components/trace/operation_trace/","weight":0,"wordcount":94},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object to store captured operation traces.\n","dir":"net/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"OperationTrace","lvl1":"Data object to store captured operation traces.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8b9fe514828bb7fddf9db3c945b09a35","permalink":"/net/components/trace/operation_trace/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/trace/operation_trace/","section":"net","summary":"Description The OperationTrace class allows you to create a data object used to store captured operation traces.\nImportant points\n This object is used by CachedTracer.  Fields Time The time when operation was executed\n public Time: DateTime\n Source The source (context name)\n public Source: string\n component The name of the component\n public Component: string\n Operation The name of the executed operation\n public Operation: string","tags":null,"title":"OperationTrace","type":"docs","url":"/hugo-docs/net/components/trace/operation_trace/","weight":0,"wordcount":101},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object to store captured operation traces.\n","dir":"node/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621287388,"lvl0":"OperationTrace","lvl1":"Data object to store captured operation traces.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6e1f060cf90cbbf44645a6320bbf302f","permalink":"/node/components/trace/operation_trace/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/trace/operation_trace/","section":"node","summary":"Description The OperationTrace class allows you to create a data object used to store captured operation traces.\nImportant points\n This object is used by CachedTracer.  Constructors Create new instance of OperationTrace\n public constructor(time: Date, source: string, component: string, operation: string, correlationId: string, duration: number, error: ErrorDescription)\n  time: Date - The time when operation was executed source: string - source (context name) component: string - name of the component operation: string - name of the executed operation correlationId: string - transaction id to trace execution through call chain.","tags":null,"title":"OperationTrace","type":"docs","url":"/hugo-docs/node/components/trace/operation_trace/","weight":0,"wordcount":181},{"authors":null,"categories":null,"date":-62135596800,"description":"Data object to store captured operation traces.\n","dir":"python/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621263991,"lvl0":"OperationTrace","lvl1":"Data object to store captured operation traces.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3007d10b8157e9cb2d392102d1ef6a71","permalink":"/python/components/trace/operation_trace/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/trace/operation_trace/","section":"python","summary":"Description The OperationTrace class allows you to create a data object used to store captured operation traces.\nImportant points\n This object is used by CachedTracer.  Constructors Create new instance of OperationTrace\n OperationTrace(time: datetime, source: str, component: str, operation: str, correlation_id: str, duration: float, error: ErrorDescription)\n  time: datetime - The time when operation was executed source: str - source (context name) component: str - name of the component operation: str - name of the executed operation correlation_id: str - transaction id to trace execution through call chain.","tags":null,"title":"OperationTrace","type":"docs","url":"/hugo-docs/python/components/trace/operation_trace/","weight":0,"wordcount":173},{"authors":null,"categories":null,"date":-62135596800,"description":"A helper class to parameters from \"options\" configuration section.\n","dir":"golang/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623176691,"lvl0":"OptionResolver","lvl1":"A helper class to parameters from \"options\" configuration section.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b423ae9e4b465307fcbc73a55042f953","permalink":"/golang/commons/config/option_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/config/option_resolver/","section":"golang","summary":"Description The OptionResolver class can be use to obtain all the parameters under the section \u0026ldquo;options\u0026rdquo; from a CongifParams object. It has a single method called \u0026ldquo;resolve\u0026rdquo;.\nMethods Resolve Resolves an \u0026ldquo;options\u0026rdquo; configuration section from component configuration parameters.\n (c *TOptionsResolver) Resolve(config *ConfigParams) *ConfigParams\n  config: *ConfigParams - configuration parameters returns: *ConfigParams - configuration parameters from \u0026ldquo;options\u0026rdquo; section  ResolveWithDefault Resolves an \u0026ldquo;options\u0026rdquo; configuration section from component configuration parameters.","tags":null,"title":"OptionResolver","type":"docs","url":"/hugo-docs/golang/commons/config/option_resolver/","weight":0,"wordcount":101},{"authors":null,"categories":null,"date":-62135596800,"description":"A helper class to parameters from \"options\" configuration section.\n","dir":"net/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"OptionResolver","lvl1":"A helper class to parameters from \"options\" configuration section.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a42a1e073021642fe473af6ad000c53a","permalink":"/net/commons/config/option_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/config/option_resolver/","section":"net","summary":"Description The OptionResolver class can be use to obtain all the parameters under the section \u0026ldquo;options\u0026rdquo; from a CongifParams object. It has a single method called \u0026ldquo;resolve\u0026rdquo;.\nStatic methods Resolve Resolves an \u0026ldquo;options\u0026rdquo; configuration section from component configuration parameters.\n public static ConfigParams resolve(ConfigParams config, boolean configAsDefault = true)\n  config: ConfigParams - configuration parameters configAsDefault: boolean - (optional) When set true the method returns the entire parameter set when \u0026ldquo;options\u0026rdquo; section is not found.","tags":null,"title":"OptionResolver","type":"docs","url":"/hugo-docs/net/commons/config/option_resolver/","weight":0,"wordcount":133},{"authors":null,"categories":null,"date":-62135596800,"description":"A helper class to parameters from \"options\" configuration section.\n","dir":"node/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"OptionResolver","lvl1":"A helper class to parameters from \"options\" configuration section.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"70890b4ef3267cb17cbbac571a537a56","permalink":"/node/commons/config/option_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/config/option_resolver/","section":"node","summary":"Description The OptionResolver class can be use to obtain all the parameters under the section \u0026ldquo;options\u0026rdquo; from a CongifParams object. It has a single method called \u0026ldquo;resolve\u0026rdquo;.\nStatic methods resolve Resolves an \u0026ldquo;options\u0026rdquo; configuration section from component configuration parameters.\n public static resolve(config: ConfigParams, configAsDefault: boolean = false): ConfigParams\n  config: ConfigParams - configuration parameters configAsDefault: boolean - (optional) When set true the method returns the entire parameter set when \u0026ldquo;options\u0026rdquo; section is not found.","tags":null,"title":"OptionResolver","type":"docs","url":"/hugo-docs/node/commons/config/option_resolver/","weight":0,"wordcount":133},{"authors":null,"categories":null,"date":-62135596800,"description":"A helper class to parameters from \"options\" configuration section.\n","dir":"python/commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1619804154,"lvl0":"OptionResolver","lvl1":"A helper class to parameters from \"options\" configuration section.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"40eddf5ca5b8e395d4027a42d39a7f10","permalink":"/python/commons/config/option_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/config/option_resolver/","section":"python","summary":"Description The OptionResolver class can be use to obtain all the parameters under the section \u0026ldquo;options\u0026rdquo; from a CongifParams object. It has a single method called \u0026ldquo;resolve\u0026rdquo;.\nStatic methods resolve Returns a ConfigParams object containing all the parameters under the section \u0026ldquo;option\u0026rdquo;.\n static resolve(config: ConfigParams, config_as_default: bool = False): ConfigParams\n  config: ConfigParams - configuration parameters config_as_default: bool - (optional) When set true the method returns the entire parameter set when \u0026ldquo;options\u0026rdquo; section is not found.","tags":null,"title":"OptionResolver","type":"docs","url":"/hugo-docs/python/commons/config/option_resolver/","weight":0,"wordcount":133},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Organizations Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9116fe22021703604cabe9001b097780","permalink":"/microservices/users/organizations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/organizations/","section":"microservices","summary":"Keeps list of working organizations.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Golang  ","tags":null,"title":"Organizations Microservice","type":"docs","url":"/hugo-docs/microservices/users/organizations/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that allows you to check combinations of rules created with OR logical operations.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"OrRule","lvl1":"Validation rule that allows you to check combinations of rules created with OR logical operations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"00105604e841e8f772ebb8ffb025ef15","permalink":"/golang/commons/validate/or_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/or_rule/","section":"golang","summary":"Description The OrRule class allows you to validate combinations of rules created with OR logical operations.\nImportant points\n When one of the combined rules returns no errors, then this rule also returns no errors. When all combined rules return errors, then this rule returns all the errors.  Constructors NewOrRule Creates a new validation rule and sets its values.\n NewOrRule(rules \u0026hellip;IValidationRule) *OrRule\n  rules: \u0026hellip;IValidationRule - a list of rules to join with OR operator  Methods validate Validates a given value against this rule.","tags":null,"title":"OrRule","type":"docs","url":"/hugo-docs/golang/commons/validate/or_rule/","weight":0,"wordcount":171},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that allows you to check combinations of rules created with OR logical operations.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"OrRule","lvl1":"Validation rule that allows you to check combinations of rules created with OR logical operations.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fd922c6b956a1339ec10425a6d3fdf0b","permalink":"/net/commons/validate/or_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/or_rule/","section":"net","summary":"Inherits: IValidationRule\nDescription The OrRule class allows you to validate combinations of rules created with OR logical operations.\nImportant points\n When one of the combined rules returns no errors, then this rule also returns no errors. When all combined rules return errors, then this rule returns all the errors.  Constructors Creates a new validation rule and sets its values.\n public OrRule(params IValidationRule[] rules)\n  rules: IValidationRule[] - a list of rules to join with OR operator  Instance methods Validate Validates a given value against this rule.","tags":null,"title":"OrRule","type":"docs","url":"/hugo-docs/net/commons/validate/or_rule/","weight":0,"wordcount":176},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that allows you to check combinations of rules created with OR logical operations.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"OrRule","lvl1":"Validation rule that allows you to check combinations of rules created with OR logical operations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9747e595aa559e46041375f0cac6e7f4","permalink":"/node/commons/validate/or_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/or_rule/","section":"node","summary":"Implements: IValidationRule\nDescription The OrRule class allows you to validate combinations of rules created with OR logical operations.\nImportant points\n When one of the combined rules returns no errors, then this rule also returns no errors. When all combined rules return errors, then this rule returns all the errors.  Constructors Creates a new validation rule and sets its values.\n public constructor(\u0026hellip;rules: IValidationRule[])\n  rules: IValidationRule[] - a list of rules to join with OR operator  Instance methods validate Validates a given value against this rule.","tags":null,"title":"OrRule","type":"docs","url":"/hugo-docs/node/commons/validate/or_rule/","weight":0,"wordcount":178},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that allows you to check combinations of rules created with OR logical operations.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620225983,"lvl0":"OrRule","lvl1":"Validation rule that allows you to check combinations of rules created with OR logical operations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5fe1f0e48540ea922753cc255471138f","permalink":"/python/commons/validate/or_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/or_rule/","section":"python","summary":"Implements: IValidationRule\nDescription The OrRule class allows you to validate combinations of rules created with OR logical operations.\nImportant points\n When one of the combined rules returns no errors, then this rule also returns no errors. When all combined rules return errors, then this rule returns all the errors.  Constructors Creates a new validation rule and sets its values.\n OrRule(*rules: IValidationRule)\n  rules: IValidationRule - a list of rules to join with OR operator  Instance methods validate Validates a given value against this rule.","tags":null,"title":"OrRule","type":"docs","url":"/hugo-docs/python/commons/validate/or_rule/","weight":0,"wordcount":167},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a data transfer object used to pass paging parameters for queries.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624074538,"lvl0":"PagingParams","lvl1":"Defines a data transfer object used to pass paging parameters for queries.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3ae0f248d0e793eee30fd32a3780ddfe","permalink":"/golang/commons/data/paging_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/data/paging_params/","section":"golang","summary":"Description The PagingParams class allows you to create data transfer objects used to pass paging parameters for queries.\nImportant points\n A page is defined by two parameters:  skip: number of items to skip. take: number of items to return in a page.   Additionally, the optional total parameter defines whether to return the total number of items or not. However, not all implementations support the total parameter, because its generation may lead to severe performance implications.","tags":null,"title":"PagingParams","type":"docs","url":"/hugo-docs/golang/commons/data/paging_params/","weight":0,"wordcount":326},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a data transfer object used to pass paging parameters for queries.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"PagingParams","lvl1":"Defines a data transfer object used to pass paging parameters for queries.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cb0ee2e90ca57e0a9c5ee09d3d3f8feb","permalink":"/net/commons/data/paging_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/data/paging_params/","section":"net","summary":"Description The PagingParams class allows you to create data transfer objects used to pass paging parameters for queries.\nImportant points\n A page is defined by two parameters:  skip: number of items to skip. take: number of items to return in a page.   Additionally, the optional total parameter defines whether to return the total number of items or not. However, not all implementations support the total parameter, because its generation may lead to severe performance implications.","tags":null,"title":"PagingParams","type":"docs","url":"/hugo-docs/net/commons/data/paging_params/","weight":0,"wordcount":359},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a data transfer object used to pass paging parameters for queries.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"PagingParams","lvl1":"Defines a data transfer object used to pass paging parameters for queries.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"73ecfc2f37808e53cb1f6e0b7f72d6a0","permalink":"/node/commons/data/paging_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/data/paging_params/","section":"node","summary":"Description The PagingParams class allows you to create data transfer objects used to pass paging parameters for queries.\nImportant points\n A page is defined by two parameters:  skip: number of items to skip. take: number of items to return in a page.   Additionally, the optional total parameter defines whether to return the total number of items or not. However, not all implementations support the total parameter, because its generation may lead to severe performance implications.","tags":null,"title":"PagingParams","type":"docs","url":"/hugo-docs/node/commons/data/paging_params/","weight":0,"wordcount":352},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a data transfer object used to pass paging parameters for queries.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1620934688,"lvl0":"PagingParams","lvl1":"Defines a data transfer object used to pass paging parameters for queries.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e9fc87ddd2dff396c69973e4e83ba315","permalink":"/python/commons/data/paging_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/data/paging_params/","section":"python","summary":"Description The PagingParams class allows you to create data transfer objects used to pass paging parameters for queries.\nImportant points\n A page is defined by two parameters:  skip: number of items to skip. take: number of items to return in a page.   Additionally, the optional total parameter defines whether to return the total number of items or not. However, not all implementations support the total parameter, because its generation may lead to severe performance implications.","tags":null,"title":"PagingParams","type":"docs","url":"/hugo-docs/python/commons/data/paging_params/","weight":0,"wordcount":336},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [PagingParams](../../data/paging_params).\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"PagingParamsSchema","lvl1":"Schema to validate [PagingParams](../../data/paging_params).\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8a589f67f4bf7650de0b80e4cf9f617d","permalink":"/golang/commons/validate/paging_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/paging_params_schema/","section":"golang","summary":"Description The PagingParamsSchema class allows you to create a schema to validate PagingParams.\nConstructors NewPagingParamsSchema  NewPagingParamsSchema() *ObjectSchema\n See also   PagingParams   ","tags":null,"title":"PagingParamsSchema","type":"docs","url":"/hugo-docs/golang/commons/validate/paging_params_schema/","weight":0,"wordcount":20},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [PagingParams](../../data/paging_params).\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"PagingParamsSchema","lvl1":"Schema to validate [PagingParams](../../data/paging_params).\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"95dccd60ccc7645d05414c0386a9e03b","permalink":"/net/commons/validate/paging_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/paging_params_schema/","section":"net","summary":"Inherits: ObjectSchema\nDescription The PagingParamsSchema class allows you to create a schema to validate PagingParams.\nConstructors  public PagingParamsSchema()\n See also   PagingParams   ","tags":null,"title":"PagingParamsSchema","type":"docs","url":"/hugo-docs/net/commons/validate/paging_params_schema/","weight":0,"wordcount":21},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [PagingParams](../../data/paging_params).\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"PagingParamsSchema","lvl1":"Schema to validate [PagingParams](../../data/paging_params).\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"43bcc8087dcec07152df9b5a9f49c32e","permalink":"/node/commons/validate/paging_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/paging_params_schema/","section":"node","summary":"Extends: ObjectSchema\nDescription The PagingParamsSchema class allows you to create a schema to validate PagingParams.\nConstructors  public constructor()\n See also   PagingParams   ","tags":null,"title":"PagingParamsSchema","type":"docs","url":"/hugo-docs/node/commons/validate/paging_params_schema/","weight":0,"wordcount":21},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [PagingParams](../../data/paging_params).\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620226430,"lvl0":"PagingParamsSchema","lvl1":"Schema to validate [PagingParams](../../data/paging_params).\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3187ce0765856c221810b009a1f2de65","permalink":"/python/commons/validate/paging_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/paging_params_schema/","section":"python","summary":"Implements: ObjectSchema\nDescription The PagingParamsSchema class allows you to create a schema to validate PagingParams.\nConstructors  PagingParamsSchema()\n See also   PagingParams   ","tags":null,"title":"PagingParamsSchema","type":"docs","url":"/hugo-docs/python/commons/validate/paging_params_schema/","weight":0,"wordcount":20},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a map with execution parameters.\n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1624246796,"lvl0":"Parameters","lvl1":"Contains a map with execution parameters.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"83bc6d2ec93bf9099c57e8df74a74ca8","permalink":"/golang/commons/run/parameters/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/run/parameters/","section":"golang","summary":"Implements: AnyValueMap\nDescription The Parameters class contains a map with execution paramters.\nImportant points\n In general, this map may contain non-serializable values. In contrast with other maps, its getters and setters support dot notation and are able to access properties in the entire object graph. This class is often used to pass execution and notification arguments, and parameterize classes before execution.  Constructors NewParameters Creates a new instance of the map and assigns its value.","tags":null,"title":"Parameters","type":"docs","url":"/hugo-docs/golang/commons/run/parameters/","weight":0,"wordcount":775},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains map with execution parameters.\n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"Parameters","lvl1":"Contains map with execution parameters.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"99fd9fe2e3e944319bcdcfb3723466ef","permalink":"/net/commons/run/parameters/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/net/commons/run/parameters/","section":"net","summary":"Inherits: AnyValueMap\nDescription The Parameters class contains a map with execution paramters.\nImportant points\n In general, this map may contain non-serializable values. In contrast with other maps, its getters and setters support dot notation and are able to access properties in the entire object graph. This class is often used to pass execution and notification arguments, and parameterize classes before execution.  Constructors Creates a new instance of the map and assigns its value.","tags":null,"title":"Parameters","type":"docs","url":"/hugo-docs/net/commons/run/parameters/","weight":0,"wordcount":894},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains map with execution parameters.\n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1621526520,"lvl0":"Parameters","lvl1":"Contains map with execution parameters.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8abf6fa6b040380cb7c6d3cf085986c5","permalink":"/node/commons/run/parameters/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/commons/run/parameters/","section":"node","summary":"Extends: AnyValueMap\nDescription The Parameters class contains a map with execution paramters.\nImportant points\n In general, this map may contain non-serializable values. In contrast with other maps, its getters and setters support dot notation and are able to access properties in the entire object graph. This class is often used to pass execution and notification arguments, and parameterize classes before execution.  Constructors Creates a new instance of the map and assigns its value.","tags":null,"title":"Parameters","type":"docs","url":"/hugo-docs/node/commons/run/parameters/","weight":0,"wordcount":805},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains map with execution parameters.\n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1621526520,"lvl0":"Parameters","lvl1":"Contains map with execution parameters.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c1fe64ccc961d317316e14eaaa4cebef","permalink":"/python/commons/run/parameters/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/commons/run/parameters/","section":"python","summary":"Implements: AnyValueMap\nDescription The Parameters class contains a map with execution paramters.\nImportant points\n In general, this map may contain non-serializable values. In contrast with other maps, its getters and setters support dot notation and are able to access properties in the entire object graph. This class is often used to pass execution and notification arguments, and parameterize classes before execution.  Constructors Creates a new instance of the map and assigns its value.","tags":null,"title":"Parameters","type":"docs","url":"/hugo-docs/python/commons/run/parameters/","weight":0,"wordcount":790},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Party Activities Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f01de8fc9eaa34e5c94cd74086d5b030","permalink":"/microservices/users/party_activities/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/party_activities/","section":"microservices","summary":"Logs important party activities like signups, signins, creation, changes or deletion of data items and so on.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Golang, Dart  ","tags":null,"title":"Party Activities Microservice","type":"docs","url":"/hugo-docs/microservices/users/party_activities/","weight":0,"wordcount":47},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Passwords Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c612b050557f370659c02cc4ca990cea","permalink":"/microservices/users/passwords/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/passwords/","section":"microservices","summary":"Password authentication microservice.\n  Sets user passwords and authenticate\n  Safely change passwords\n  Reset and recover passwords via emails\n  Server implementations: NodeJS, Dart\n  Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC\n  Persistence: Memory, Flat Files, MongoDB, Couchbase\n  Deployment options: Monolith, Process, Docker, AWS Lambda\n  Client implementations: NodeJS, Golang, Dart\n  This microservice has optional dependencies on the following microservices:","tags":null,"title":"Passwords Microservice","type":"docs","url":"/hugo-docs/microservices/users/passwords/","weight":0,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/ecommrce/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Payment","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c483c1740800df8c1fe100a5e2e5c4c5","permalink":"/microservices/ecommrce/payments/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/ecommrce/payments/","section":"microservices","summary":"Payment\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Payment","type":"docs","url":"/hugo-docs/microservices/ecommrce/payments/","weight":0,"wordcount":28},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/ecommrce/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Payment methods","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cdb99386293ed83bd2423ceef42376a6","permalink":"/microservices/ecommrce/payment_methods/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/ecommrce/payment_methods/","section":"microservices","summary":"Payment methods\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Payment methods","type":"docs","url":"/hugo-docs/microservices/ecommrce/payment_methods/","weight":0,"wordcount":29},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/ecommrce/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Payroll checks","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"29cdd43a71800d5acab5a8a16daf93fd","permalink":"/microservices/ecommrce/payroll_checks/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/ecommrce/payroll_checks/","section":"microservices","summary":"Payroll checks.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Payroll checks","type":"docs","url":"/hugo-docs/microservices/ecommrce/payroll_checks/","weight":0,"wordcount":29},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Perfmon Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c534458395f042df54189a2bad2ca6ad","permalink":"/microservices/infrastructure/perfmon/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/perfmon/","section":"microservices","summary":"Collects performance metrics from distributed microservices, stores and provides a single entry point to read all of them.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .NET  ","tags":null,"title":"Perfmon Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/perfmon/","weight":0,"wordcount":46},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create in memory and file persistence components. \n","dir":"golang/data/persistence/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"section","lang":"en","lastmod":1624315318,"lvl0":"Persistence","lvl1":"This package contains classes used to create in memory and file persistence components. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"727648e4f05f69a4e5a6285a8a61aefe","permalink":"/golang/data/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/data/persistence/","section":"golang","summary":"Important points\n These components only connect to data sources and do not implement the operations and methods to handle the data. Therefore, the classes that extend these persistences must implement this logic on their own. Identifiable Persistences work with Identifiable objects, which have primary keys. A few standard operations are defined by default for these objects: reading arrays and data pages; searching for an object by its id; and creating, updating and deleting records of objects.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/golang/data/persistence/","weight":0,"wordcount":404},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create in memory and file persistence components. \n","dir":"node/data/persistence/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622656041,"lvl0":"Persistence","lvl1":"This package contains classes used to create in memory and file persistence components. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a09b145015d66e4ea96d5d6a36bbb48a","permalink":"/node/data/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/data/persistence/","section":"node","summary":"Important points\n These components only connect to data sources and do not implement the operations and methods to handle the data. Therefore, the classes that extend these persistences must implement this logic on their own. Identifiable Persistences work with Identifiable objects, which have primary keys. A few standard operations are defined by default for these objects: reading arrays and data pages; searching for an object by its id; and creating, updating and deleting records of objects.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/node/data/persistence/","weight":0,"wordcount":268},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create MySQL persistence components.\n","dir":"node/mysql/persistence/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622669208,"lvl0":"Persistence","lvl1":"This package contains classes used to create MySQL persistence components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"50ac94affde57c0a95a6b633b9be1bfe","permalink":"/node/mysql/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/mysql/persistence/","section":"node","summary":"Classes IdentifiableJsonMySqlPersistence Abstract persistence component that stores data in MySQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids. The data items must implement the IIdentifiable interface.\nIdentifiableMySqlPersistence Abstract persistence component that stores data in MySQL and implements a number of CRUD operations over data items with unique ids. The data items must implement the IIdentifiable interface.\nMySqlPersistence Abstract persistence component that stores data in MySQL using the official driver.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/node/mysql/persistence/","weight":0,"wordcount":117},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create PostgreSQL persistence components.\n","dir":"node/postgres/persistence/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622674545,"lvl0":"Persistence","lvl1":"This package contains classes used to create PostgreSQL persistence components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"70c4fe083eda4f58196031ba9224b7d7","permalink":"/node/postgres/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/postgres/persistence/","section":"node","summary":"Classes IdentifiableJsonPostgresPersistence Abstract persistence component that stores data in PostgreSQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids. The data items must implement the IIdentifiable interface.\nIdentifiablePostgresPersistence Abstract persistence component that stores data in PostgreSQL and implements a number of CRUD operations over data items with unique ids. The data items must implement the IIdentifiable interface.\nPostgresPersistence Abstract persistence component that stores data in PostgreSQL using the official driver.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/node/postgres/persistence/","weight":0,"wordcount":116},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create SQLServer persistence components.\n","dir":"node/sqlserver/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622732567,"lvl0":"Persistence","lvl1":"This package contains classes used to create SQLServer persistence components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"01a8b18c2411d3de7d57e6c6f5cd2de2","permalink":"/node/sqlserver/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/sqlserver/persistence/","section":"node","summary":"Classes IdentifiableJsonSqlServerPersistence Abstract persistence component that stores data in an SQLServer database in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\nIdentifiableSqlServerPersistence Abstract persistence component that stores data in an SQLServer and implements a number of CRUD operations over data items with unique ids.\nSqlServerPersistence Abstract persistence component that stores data in SQLServer using the official driver.\nThis is the most basic persistence component that is able to store data items of any type.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/node/sqlserver/persistence/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create in memory and file persistence components. \n","dir":"python/data/persistence/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622585720,"lvl0":"Persistence","lvl1":"This package contains classes used to create in memory and file persistence components. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"73d78f4f3174a783a593fa3bba3f62f6","permalink":"/python/data/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/data/persistence/","section":"python","summary":"Important points\n These components only connect to data sources and do not implement the operations and methods to handle the data. Therefore, the classes that extend these persistences must implement this logic on their own. Identifiable Persistences work with Identifiable objects, which have primary keys. A few standard operations are defined by default for these objects: reading arrays and data pages; searching for an object by its id; and creating, updating and deleting records of objects.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/python/data/persistence/","weight":0,"wordcount":268},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create MongoDB persistence components.\n","dir":"python/mongodb/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622222822,"lvl0":"Persistence","lvl1":"This package contains classes used to create MongoDB persistence components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b15323b16d1a50ed9376182b4bec36ba","permalink":"/python/mongodb/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mongodb/persistence/","section":"python","summary":"Classes IdentifiableMongoDbPersistence Abstract persistence component that stores data in MongoDB and implements a number of CRUD operations over data items with unique ids. The data items must implement the IIdentifiable interface.\nMongoDbIndex Index definition for mondodb\nMongoDbPersistence Abstract persistence component that stores data in MongoDB using plain driverthe official driver. This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing self.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/python/mongodb/persistence/","weight":0,"wordcount":87},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create MySQL persistence components.\n","dir":"python/mysql/persistence/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622226727,"lvl0":"Persistence","lvl1":"This package contains classes used to create MySQL persistence components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0006988365444521f41676b3f1bf4c48","permalink":"/python/mysql/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/mysql/persistence/","section":"python","summary":"Classes IdentifiableJsonMySqlPersistence Abstract persistence component that stores data in MySQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids. The data items must implement the IIdentifiable interface.\nIdentifiableMySqlPersistence Abstract persistence component that stores data in MySQL and implements a number of CRUD operations over data items with unique ids. The data items must implement the IIdentifiable interface.\nMySqlPersistence Abstract persistence component that stores data in MySQL using the official driver.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/python/mysql/persistence/","weight":0,"wordcount":117},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create PostgreSQL persistence components.\n","dir":"python/postgres/persistence/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"section","lang":"en","lastmod":1622298122,"lvl0":"Persistence","lvl1":"This package contains classes used to create PostgreSQL persistence components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cbc2aec58312a0f5b7a7ea7205042ea3","permalink":"/python/postgres/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/postgres/persistence/","section":"python","summary":"Classes IdentifiableJsonPostgresPersistence Abstract persistence component that stores data in PostgreSQL in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids. The data items must implement the IIdentifiable interface.\nIdentifiablePostgresPersistence Abstract persistence component that stores data in PostgreSQL and implements a number of CRUD operations over data items with unique ids. The data items must implement the IIdentifiable interface.\nPostgresPersistence Abstract persistence component that stores data in PostgreSQL using the official driver.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/python/postgres/persistence/","weight":0,"wordcount":116},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create SQLServer persistence components.\n","dir":"python/sqlserver/persistence/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621793898,"lvl0":"Persistence","lvl1":"This package contains classes used to create SQLServer persistence components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bd1bed8258a642b1fc8a6240d6c506e0","permalink":"/python/sqlserver/persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/sqlserver/persistence/","section":"python","summary":"Classes IdentifiableJsonSqlServerPersistence Abstract persistence component that stores data in an SQLServer database in JSON or JSONB fields and implements a number of CRUD operations over data items with unique ids.\nIdentifiableSqlServerPersistence Abstract persistence component that stores data in an SQLServer and implements a number of CRUD operations over data items with unique ids.\nSqlServerPersistence Abstract persistence component that stores data in SQLServer using the official driver.\nThis is the most basic persistence component that is able to store data items of any type.","tags":null,"title":"Persistence","type":"docs","url":"/hugo-docs/python/sqlserver/persistence/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"PostgreSQL connection using the official driver.\n","dir":"node/postgres/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622674545,"lvl0":"PostgresConnection","lvl1":"PostgreSQL connection using the official driver.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6dfcd4d1a86d6d0de6dbce3203137bb9","permalink":"/node/postgres/connect/postgres_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/postgres/connect/postgres_connection/","section":"node","summary":"Implements: IReferenceable, IConfigurable, IOpenable\nDescription The PostgresConnection class allows you to create connections to PostgreSQL databases using the official driver.\nImportant points\n By defining a connection and sharing it through multiple persistence components you can reduce the number of used database connections.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"PostgresConnection","type":"docs","url":"/hugo-docs/node/postgres/connect/postgres_connection/","weight":0,"wordcount":283},{"authors":null,"categories":null,"date":-62135596800,"description":"PostgreSQL connection using the official driver.\n","dir":"python/postgres/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622229171,"lvl0":"PostgresConnection","lvl1":"PostgreSQL connection using the official driver.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"994523a21b391e8740ffd5005ff4dad3","permalink":"/python/postgres/connect/postgres_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/postgres/connect/postgres_connection/","section":"python","summary":"Implements: IReferenceable, IConfigurable, IOpenable\nDescription The PostgresConnection class allows you to create connections to PostgreSQL databases using the official driver.\nImportant points\n By defining a connection and sharing it through multiple persistence components you can reduce the number of used database connections.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"PostgresConnection","type":"docs","url":"/hugo-docs/python/postgres/connect/postgres_connection/","weight":0,"wordcount":272},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves PostgreSQL connection and credential parameters, validates them and generates a connection URI.\n","dir":"node/postgres/connect/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622674545,"lvl0":"PostgresConnectionResolver","lvl1":"Helper class that resolves PostgreSQL connection and credential parameters, validates them and generates a connection URI.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"824a959073688922bcbcf7066cd8d4aa","permalink":"/node/postgres/connect/postgres_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/postgres/connect/postgres_connection_resolver/","section":"node","summary":"Implements: IReferenceable, IConfigurable\nDescription The PostgresConnectionResolver class allows you to create a PostgresSQL connection and credential parameters resolver that validates these parameters and generates a connection URI.\nImportant points\n It is able to process multiple connections to PostgreSQL cluster nodes.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) database: database name uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"PostgresConnectionResolver","type":"docs","url":"/hugo-docs/node/postgres/connect/postgres_connection_resolver/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves PostgreSQL connection and credential parameters, validates them and generates a connection URI.\n","dir":"python/postgres/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622674545,"lvl0":"PostgresConnectionResolver","lvl1":"Helper class that resolves PostgreSQL connection and credential parameters, validates them and generates a connection URI.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9313f08cc22ae5a4f213c72dc179636a","permalink":"/python/postgres/connect/postgres_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/postgres/connect/postgres_connection_resolver/","section":"python","summary":"Implements: IReferenceable, IConfigurable\nDescription The PostgresConnectionResolver class allows you to create a PostgresSQL connection and credential parameters resolver that validates these parameters and generates a connection URI.\nImportant points\n It is able to process multiple connections to PostgreSQL cluster nodes.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) database: database name uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"PostgresConnectionResolver","type":"docs","url":"/hugo-docs/python/postgres/connect/postgres_connection_resolver/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in PostgreSQL using the official driver.\n","dir":"node/postgres/persistence/","expirydate":-62135596800,"fuzzywordcount":1400,"keywords":null,"kind":"page","lang":"en","lastmod":1622674545,"lvl0":"PostgresPersistence","lvl1":"Abstract persistence component that stores data in PostgreSQL using the official driver.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"64fb7fd2b5c9a1a9bb21e89f543b4ac9","permalink":"/node/postgres/persistence/postgres_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/node/postgres/persistence/postgres_persistence/","section":"node","summary":"Implements: IReferenceable, IUnreferenceable, IConfigurable, IOpenable, ICleanable\nDescription The PostgresPersistence class allows you to create persistence components that store data in PostgreSQL using the official driver.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing this._db or this._collection properties.  Configuration parameters  collection: (optional) PostgreSQL collection name connection(s): discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"PostgresPersistence","type":"docs","url":"/hugo-docs/node/postgres/persistence/postgres_persistence/","weight":0,"wordcount":1325},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in PostgreSQL using the official driver.\n","dir":"python/postgres/persistence/","expirydate":-62135596800,"fuzzywordcount":1300,"keywords":null,"kind":"page","lang":"en","lastmod":1624315318,"lvl0":"PostgresPersistence","lvl1":"Abstract persistence component that stores data in PostgreSQL using the official driver.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8457587f80a8b9be3619bf8a63544897","permalink":"/python/postgres/persistence/postgres_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/python/postgres/persistence/postgres_persistence/","section":"python","summary":"Implements: IReferenceable, IUnreferenceable, IConfigurable, IOpenable, ICleanable\nDescription The PostgresPersistence class allows you to create persistence components that store data in PostgreSQL using the official driver.\nImportant points\n This is the most basic persistence component that is only able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing self._db or self._collection properties.  Configuration parameters  collection: (optional) PostgreSQL collection name connection(s): discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"PostgresPersistence","type":"docs","url":"/hugo-docs/python/postgres/persistence/postgres_persistence/","weight":0,"wordcount":1218},{"authors":null,"categories":null,"date":-62135596800,"description":"Inversion of control (IoC) container that runs as a system process.\n","dir":"golang/container/containers/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ProcessContainer","lvl1":"Inversion of control (IoC) container that runs as a system process.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b3a62e661c4737424102622f21f47649","permalink":"/golang/container/containers/process_container/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/containers/process_container/","section":"golang","summary":"Implements: Container\nDescription The ProcessContainer class allows you to create an inversion of control (IoC) container that runs as a system process.\nImportant points\n It processes command line arguments and handles unhandled exceptions and Ctrl-C signal to shutdown the container properly.  Command line arguments  \u0026ndash;config / -c path to a JSON or YAML file with the container\u0026rsquo;s configuration (default: \u0026ldquo;./config/config.yml\u0026rdquo;) \u0026ndash;param / \u0026ndash;params / -p configuration parameters \u0026ndash;help / -h prints the container usage help  Constructors NewProcessContainer Creates a new instance of the container.","tags":null,"title":"ProcessContainer","type":"docs","url":"/hugo-docs/golang/container/containers/process_container/","weight":0,"wordcount":204},{"authors":null,"categories":null,"date":-62135596800,"description":"Inversion of control (IoC) container that runs as a system process.\n","dir":"node/container/containers/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"ProcessContainer","lvl1":"Inversion of control (IoC) container that runs as a system process.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f81e83361d46ab634dfb2b9ce663826e","permalink":"/node/container/containers/process_container/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/containers/process_container/","section":"node","summary":"Extends: Container\nDescription The ProcessContainer class allows you to create an inversion of control (IoC) container that runs as a system process.\nImportant points\n It processes command line arguments and handles unhandled exceptions and Ctrl-C signal to shutdown the container properly.  Command line arguments  \u0026ndash;config / -c path to a JSON or YAML file with the container\u0026rsquo;s configuration (default: \u0026ldquo;./config/config.yml\u0026rdquo;) \u0026ndash;param / \u0026ndash;params / -p configuration parameters \u0026ndash;help / -h prints the container usage help  Constructors Creates a new instance of the container.","tags":null,"title":"ProcessContainer","type":"docs","url":"/hugo-docs/node/container/containers/process_container/","weight":0,"wordcount":180},{"authors":null,"categories":null,"date":-62135596800,"description":"Inversion of control (IoC) container that runs as a system process.\n","dir":"python/container/containers/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622801566,"lvl0":"ProcessContainer","lvl1":"Inversion of control (IoC) container that runs as a system process.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5558134b4133eb7a1c72a31eb5143361","permalink":"/python/container/containers/process_container/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/containers/process_container/","section":"python","summary":"Implements: Container\nDescription The ProcessContainer class allows you to create an inversion of control (IoC) container that runs as a system process.\nImportant points\n It processes command line arguments and handles unhandled exceptions and Ctrl-C signal to shutdown the container properly.  Command line arguments  \u0026ndash;config / -c path to a JSON or YAML file with the container\u0026rsquo;s configuration (default: \u0026ldquo;./config/config.yml\u0026rdquo;) \u0026ndash;param / \u0026ndash;params / -p configuration parameters \u0026ndash;help / -h prints the container usage help  Constructors Creates a new instance of the container.","tags":null,"title":"ProcessContainer","type":"docs","url":"/hugo-docs/python/container/containers/process_container/","weight":0,"wordcount":174},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines projection parameters with a list of fields to be included in the query results.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624074689,"lvl0":"ProjectionParams","lvl1":"Defines projection parameters with a list of fields to be included in the query results.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f8af8d13d66f194b940d7d527ec743ab","permalink":"/golang/commons/data/projection_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/data/projection_params/","section":"golang","summary":"Description The ProjectionParams class allows you to define projection parameters with a list of fields to be included in your query results.\nImportant points\n The parameters support two formats: dot and nested. The dot format is the standard way to define the included fields and subfields by using dot object notation. E.g. \u0026ldquo;field1,field2.field21,field2.field22.field221\u0026rdquo;. As an alternative, the nested format offers a more compact representation. E.g. \u0026ldquo;field1,field2(field21,field22(field221))\u0026quot;.  Constructors NewEmptyProjectionParams Creates a new instance of the projection parameters and assigns its value.","tags":null,"title":"ProjectionParams","type":"docs","url":"/hugo-docs/golang/commons/data/projection_params/","weight":0,"wordcount":233},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines projection parameters with a list of fields to be included in the query results.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ProjectionParams","lvl1":"Defines projection parameters with a list of fields to be included in the query results.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f4221661451e20a205832894095992fe","permalink":"/net/commons/data/projection_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/data/projection_params/","section":"net","summary":"Inherits: List\u0026lt;string\u0026gt;\nDescription The ProjectionParams class allows you to define projection parameters with a list of fields to be included in your query results.\nImportant points\n The parameters support two formats: dot and nested. The dot format is the standard way to define the included fields and subfields by using dot object notation. E.g. \u0026ldquo;field1,field2.field21,field2.field22.field221\u0026rdquo;. As an alternative, the nested format offers a more compact representation. E.g. \u0026ldquo;field1,field2(field21,field22(field221))\u0026quot;.  Constructors Creates a new instance of the projection parameters and assigns its value.","tags":null,"title":"ProjectionParams","type":"docs","url":"/hugo-docs/net/commons/data/projection_params/","weight":0,"wordcount":280},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines projection parameters with a list of fields to be included in the query results.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ProjectionParams","lvl1":"Defines projection parameters with a list of fields to be included in the query results.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"974377dd93473dc7a0af699d4d1ab4fd","permalink":"/node/commons/data/projection_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/projection_params/","section":"node","summary":"Extends: Array\u0026lt;string\u0026gt;\nDescription The ProjectionParams class allows you to define projection parameters with a list of fields to be included in your query results.\nImportant points\n The parameters support two formats: dot and nested. The dot format is the standard way to define the included fields and subfields by using dot object notation. E.g. \u0026ldquo;field1,field2.field21,field2.field22.field221\u0026rdquo;. As an alternative, the nested format offers a more compact representation. E.g. \u0026ldquo;field1,field2(field21,field22(field221))\u0026quot;.  Constructors Creates a new instance of the projection parameters and assigns its value.","tags":null,"title":"ProjectionParams","type":"docs","url":"/hugo-docs/node/commons/data/projection_params/","weight":0,"wordcount":208},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines projection parameters with a list of fields to be included in the query results.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ProjectionParams","lvl1":"Defines projection parameters with a list of fields to be included in the query results.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c18db045d53eb65d7d7d6f49b283acc4","permalink":"/python/commons/data/projection_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/projection_params/","section":"python","summary":"Implements: list\nDescription The ProjectionParams class allows you to define projection parameters with a list of fields to be included in your query results.\nImportant points\n The parameters support two formats: dot and nested. The dot format is the standard way to define the included fields and subfields by using dot object notation. E.g. \u0026ldquo;field1,field2.field21,field2.field22.field221\u0026rdquo;. As an alternative, the nested format offers a more compact representation. E.g. \u0026ldquo;field1,field2(field21,field22(field221))\u0026quot;.  Constructors Creates a new instance of the projection parameters and assigns its value.","tags":null,"title":"ProjectionParams","type":"docs","url":"/hugo-docs/python/commons/data/projection_params/","weight":0,"wordcount":202},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [ProjectionParams](../../data/projection_params).\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"ProjectionParamsSchema","lvl1":"Schema to validate [ProjectionParams](../../data/projection_params).\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"86e00a0b53cd06a26f11fdba0b4a7fb8","permalink":"/golang/commons/validate/projection_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/projection_params_schema/","section":"golang","summary":"Description The ProjectionParamsSchema class allows you to create a schema to validate ProjectionParams.\nConstructors NewProjectionParamsSchema  NewProjectionParamsSchema() *ArraySchema\n See also   ProjectionParams.   ","tags":null,"title":"ProjectionParamsSchema","type":"docs","url":"/hugo-docs/golang/commons/validate/projection_params_schema/","weight":0,"wordcount":20},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [ProjectionParams](../../data/projection_params).\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ProjectionParamsSchema","lvl1":"Schema to validate [ProjectionParams](../../data/projection_params).\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d2c9b8472243c8e366881e8948b87b31","permalink":"/net/commons/validate/projection_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/projection_params_schema/","section":"net","summary":"Inherits: ArraySchema\nDescription The ProjectionParamsSchema class allows you to create a schema to validate ProjectionParams.\nConstructors  public ProjectionParamsSchema()\n See also   ProjectionParams.   ","tags":null,"title":"ProjectionParamsSchema","type":"docs","url":"/hugo-docs/net/commons/validate/projection_params_schema/","weight":0,"wordcount":21},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [ProjectionParams](../../data/projection_params).\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ProjectionParamsSchema","lvl1":"Schema to validate [ProjectionParams](../../data/projection_params).\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fd7ea8827f00910d7f0704e75d313690","permalink":"/node/commons/validate/projection_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/projection_params_schema/","section":"node","summary":"Implements: ArraySchema\nDescription The ProjectionParamsSchema class allows you to create a schema to validate ProjectionParams.\nConstructors  public constructor()\n See also   ProjectionParams.   ","tags":null,"title":"ProjectionParamsSchema","type":"docs","url":"/hugo-docs/node/commons/validate/projection_params_schema/","weight":0,"wordcount":21},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate [ProjectionParams](../../data/projection_params).\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620226585,"lvl0":"ProjectionParamsSchema","lvl1":"Schema to validate [ProjectionParams](../../data/projection_params).\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9c544031633e350a63ae3385cc2280f1","permalink":"/python/commons/validate/projection_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/projection_params_schema/","section":"python","summary":"Implements: ArraySchema\nDescription The ProjectionParamsSchema class allows you to create a schema to validate ProjectionParams.\nConstructors  ProjectionParamsSchema()\n See also   ProjectionParams.   ","tags":null,"title":"ProjectionParamsSchema","type":"docs","url":"/hugo-docs/python/commons/validate/projection_params_schema/","weight":0,"wordcount":20},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that converts performance counter values into a response from Prometheus metrics service.\n","dir":"node/prometheus/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622665544,"lvl0":"PrometheusCounterConverter","lvl1":"Helper class that converts performance counter values into a response from Prometheus metrics service.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"711a3635717c1dd0ada732b54d960b96","permalink":"/node/prometheus/count/prometheus_counter_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/prometheus/count/prometheus_counter_converter/","section":"node","summary":"Description The PrometheusCounterConverter class allows you to convert performance counter values into a response from Prometheus metrics service.\nStatic methods toString Converts the given counters to a string that is returned by Prometheus metrics service.\n public static toString(counters: Counter[], source: string, instance: string): string\n  counters: Counter[] - list of counters to convert. source: string - source (context) name. instance: string - unique instance name (usually a host name).","tags":null,"title":"PrometheusCounterConverter","type":"docs","url":"/hugo-docs/node/prometheus/count/prometheus_counter_converter/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that converts performance counter values into a response from Prometheus metrics service.\n","dir":"python/prometheus/count/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622300913,"lvl0":"PrometheusCounterConverter","lvl1":"Helper class that converts performance counter values into a response from Prometheus metrics service.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4cc27c8286e96a6c584c2b184223e65b","permalink":"/python/prometheus/count/prometheus_counter_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/prometheus/count/prometheus_counter_converter/","section":"python","summary":"Description The PrometheusCounterConverter class allows you to convert performance counter values into a response from Prometheus metrics service.\nStatic methods to_string Converts the given counters to a string that is returned by Prometheus metrics service.\n static to_string(counters: List[Counter], source: Optional[str], instance: Optional[str]): str\n  counters: List[Counter] - list of counters to convert. source: Optional[str] - source (context) name. instance: Optional[str] - unique instance name (usually a host name). returns: str - converted counter  ","tags":null,"title":"PrometheusCounterConverter","type":"docs","url":"/hugo-docs/python/prometheus/count/prometheus_counter_converter/","weight":0,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"Performance counters that send their metrics to Prometheus service.\n","dir":"node/prometheus/count/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1622675980,"lvl0":"PrometheusCounters","lvl1":"Performance counters that send their metrics to Prometheus service.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1e67ae52bd2e36b4940177f8d0f1b3df","permalink":"/node/prometheus/count/prometheus_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/prometheus/count/prometheus_counters/","section":"node","summary":"Extends: CachedCounters\nImplements: IReferenceable, IOpenable\nDescription The PrometheusCounters class allows you to create performance counters that send their metrics to Pormetheus service.\nImportant points\n The component is normally used in passive mode conjunction with PrometheusMetricsService. Alternatively, when connection parameters are set, it can push metrics to Prometheus PushGateway.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  options:","tags":null,"title":"PrometheusCounters","type":"docs","url":"/hugo-docs/node/prometheus/count/prometheus_counters/","weight":0,"wordcount":307},{"authors":null,"categories":null,"date":-62135596800,"description":"Performance counters that send their metrics to Prometheus service.\n","dir":"python/prometheus/count/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622301234,"lvl0":"PrometheusCounters","lvl1":"Performance counters that send their metrics to Prometheus service.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"67c8d3ee5795a4f943dbc66e1f2f7f59","permalink":"/python/prometheus/count/prometheus_counters/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/prometheus/count/prometheus_counters/","section":"python","summary":"Implements: CachedCounters, IReferenceable, IOpenable\nDescription The PrometheusCounters class allows you to create performance counters that send their metrics to Pormetheus service.\nImportant points\n The component is normally used in passive mode conjunction with PrometheusMetricsService. Alternatively, when connection parameters are set, it can push metrics to Prometheus PushGateway.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  options:","tags":null,"title":"PrometheusCounters","type":"docs","url":"/hugo-docs/python/prometheus/count/prometheus_counters/","weight":0,"wordcount":288},{"authors":null,"categories":null,"date":-62135596800,"description":"Service that exposes the **\"/metrics\"** and **\"/metricsandreset\"** routes  for Prometheus to obtain performance metrics.\n","dir":"node/prometheus/services/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622670875,"lvl0":"PrometheusMetricsService","lvl1":"Service that exposes the **\"/metrics\"** and **\"/metricsandreset\"** routes  for Prometheus to obtain performance metrics.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e4a01808e4eff6bf601a9900a85026d0","permalink":"/node/prometheus/services/prometheus_metrics_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/prometheus/services/prometheus_metrics_service/","section":"node","summary":"Extends: RestService\nDescription The PrometheusMetricsService class allows you to create services that expose the \u0026quot;/metrics\u0026quot; and \u0026quot;/metricsandreset\u0026quot; routes for Prometheus to obtain performance metrics.\nConfiguration parameters dependencies:\n endpoint: override for HTTP Endpoint dependency prometheus_counters: override for PrometheusCounters dependency  connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  References    *:logger:*:*:1.","tags":null,"title":"PrometheusMetricsService","type":"docs","url":"/hugo-docs/node/prometheus/services/prometheus_metrics_service/","weight":0,"wordcount":189},{"authors":null,"categories":null,"date":-62135596800,"description":"Service that exposes the **\"/metrics\"** and **\"/metricsandreset\"** routes  for Prometheus to obtain performance metrics.\n","dir":"python/prometheus/services/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622665544,"lvl0":"PrometheusMetricsService","lvl1":"Service that exposes the **\"/metrics\"** and **\"/metricsandreset\"** routes  for Prometheus to obtain performance metrics.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8eb0f4c1af4733be26c8785d9bb1cd0e","permalink":"/python/prometheus/services/prometheus_metrics_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/prometheus/services/prometheus_metrics_service/","section":"python","summary":"Implements: RestService\nDescription The PrometheusMetricsService class allows you to create services that expose the \u0026quot;/metrics\u0026quot; and \u0026quot;/metricsandreset\u0026quot; routes for Prometheus to obtain performance metrics.\nConfiguration parameters dependencies:\n endpoint: override for HTTP Endpoint dependency prometheus_counters: override for PrometheusCounters dependency  connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol: http or https host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it  References    *:logger:*:*:1.","tags":null,"title":"PrometheusMetricsService","type":"docs","url":"/hugo-docs/python/prometheus/services/prometheus_metrics_service/","weight":0,"wordcount":189},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that compares two object properties.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"PropertiesComparisonRule","lvl1":"Validation rule that compares two object properties.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"df55ca27718d68238bf401816c64658e","permalink":"/golang/commons/validate/properties_comparison_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/properties_comparison_rule/","section":"golang","summary":"Implements: IValidationRule\nDescription The PropertiesComparisonRule class allows you to create a validation rule to compare two object properties.\nConstructors NewPropertiesComparisonRule Creates a new validation rule and sets its arguments. See ObjectComparator.compare\n NewPropertiesComparisonRule(property1 string, operation string, property2 string) *PropertiesComparisonRule\n  property1: string - a name of the first property to compare. operation: string - a comparison operation: \u0026quot;==\u0026quot; (\u0026quot;=\u0026quot;, \u0026ldquo;EQ\u0026rdquo;), \u0026ldquo;!= \u0026quot; (\u0026quot;\u0026lt;\u0026gt;\u0026rdquo;, \u0026ldquo;NE\u0026rdquo;); \u0026ldquo;\u0026lt;\u0026quot;/\u0026quot;\u0026gt;\u0026rdquo; (\u0026ldquo;LT\u0026rdquo;/\u0026ldquo;GT\u0026rdquo;), \u0026ldquo;\u0026lt;=\u0026quot;/\u0026quot;\u0026gt;=\u0026rdquo; (\u0026ldquo;LE\u0026rdquo;/\u0026ldquo;GE\u0026rdquo;); \u0026ldquo;LIKE\u0026rdquo;. property2: string - a name of the second property to compare.","tags":null,"title":"PropertiesComparisonRule","type":"docs","url":"/hugo-docs/golang/commons/validate/properties_comparison_rule/","weight":0,"wordcount":177},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that compares two object properties.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"PropertiesComparisonRule","lvl1":"Validation rule that compares two object properties.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"413645aed5129ae202819fad69a8f81e","permalink":"/net/commons/validate/properties_comparison_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/properties_comparison_rule/","section":"net","summary":"Inherits: IValidationRule\nDescription The PropertiesComparisonRule class allows you to create a validation rule to compare two object properties.\nConstructors Creates a new validation rule and sets its arguments. See ObjectComparator.compare\n public PropertiesComparisonRule(string property1, string operation, string property2)\n  property1: string - a name of the first property to compare. operation: string - a comparison operation: \u0026quot;==\u0026quot; (\u0026quot;=\u0026quot;, \u0026ldquo;EQ\u0026rdquo;), \u0026ldquo;!= \u0026quot; (\u0026quot;\u0026lt;\u0026gt;\u0026rdquo;, \u0026ldquo;NE\u0026rdquo;); \u0026ldquo;\u0026lt;\u0026quot;/\u0026quot;\u0026gt;\u0026rdquo; (\u0026ldquo;LT\u0026rdquo;/\u0026ldquo;GT\u0026rdquo;), \u0026ldquo;\u0026lt;=\u0026quot;/\u0026quot;\u0026gt;=\u0026rdquo; (\u0026ldquo;LE\u0026rdquo;/\u0026ldquo;GE\u0026rdquo;); \u0026ldquo;LIKE\u0026rdquo;. property2: string - a name of the second property to compare.","tags":null,"title":"PropertiesComparisonRule","type":"docs","url":"/hugo-docs/net/commons/validate/properties_comparison_rule/","weight":0,"wordcount":180},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that compares two object properties.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"PropertiesComparisonRule","lvl1":"Validation rule that compares two object properties.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0d3e472f4a6b237a6266985bfb596c43","permalink":"/node/commons/validate/properties_comparison_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/properties_comparison_rule/","section":"node","summary":"Implements: IValidationRule\nDescription The PropertiesComparisonRule class allows you to create a validation rule to compare two object properties.\nConstructors Creates a new validation rule and sets its arguments. See ObjectComparator.compare\n public constructor(property1: string, operation: string, property2: string)\n  property1: string - a name of the first property to compare. operation: string - a comparison operation: \u0026quot;==\u0026quot; (\u0026quot;=\u0026quot;, \u0026ldquo;EQ\u0026rdquo;), \u0026ldquo;!= \u0026quot; (\u0026quot;\u0026lt;\u0026gt;\u0026rdquo;, \u0026ldquo;NE\u0026rdquo;); \u0026ldquo;\u0026lt;\u0026quot;/\u0026quot;\u0026gt;\u0026rdquo; (\u0026ldquo;LT\u0026rdquo;/\u0026ldquo;GT\u0026rdquo;), \u0026ldquo;\u0026lt;=\u0026quot;/\u0026quot;\u0026gt;=\u0026rdquo; (\u0026ldquo;LE\u0026rdquo;/\u0026ldquo;GE\u0026rdquo;); \u0026ldquo;LIKE\u0026rdquo;. property2: string - a name of the second property to compare.","tags":null,"title":"PropertiesComparisonRule","type":"docs","url":"/hugo-docs/node/commons/validate/properties_comparison_rule/","weight":0,"wordcount":180},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that compares two object properties.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620227223,"lvl0":"PropertiesComparisonRule","lvl1":"Validation rule that compares two object properties.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8db8ce4d53e02ef4f9a49eda8a51a749","permalink":"/python/commons/validate/properties_comparison_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/properties_comparison_rule/","section":"python","summary":"Implements: IValidationRule\nDescription The PropertiesComparisonRule class allows you to create a validation rule to compare two object properties.\nConstructors Creates a new validation rule and sets its arguments. See ObjectComparator.compare\n PropertiesComparisonRule(property1: str, operation: str, property2: str)\n  property1: str - a name of the first property to compare. operation: str - a comparison operation: \u0026quot;==\u0026quot; (\u0026quot;=\u0026quot;, \u0026ldquo;EQ\u0026rdquo;), \u0026ldquo;!= \u0026quot; (\u0026quot;\u0026lt;\u0026gt;\u0026rdquo;, \u0026ldquo;NE\u0026rdquo;); \u0026ldquo;\u0026lt;\u0026quot;/\u0026quot;\u0026gt;\u0026rdquo; (\u0026ldquo;LT\u0026rdquo;/\u0026ldquo;GT\u0026rdquo;), \u0026ldquo;\u0026lt;=\u0026quot;/\u0026quot;\u0026gt;=\u0026rdquo; (\u0026ldquo;LE\u0026rdquo;/\u0026ldquo;GE\u0026rdquo;); \u0026ldquo;LIKE\u0026rdquo;. property2: str - a name of the second property to compare.","tags":null,"title":"PropertiesComparisonRule","type":"docs","url":"/hugo-docs/python/commons/validate/properties_comparison_rule/","weight":0,"wordcount":173},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine an object's properties and to dynamically get and set their values.\n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624239744,"lvl0":"PropertyReflector","lvl1":"Helper class that allows you to examine an object's properties and to dynamically get and set their values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1baaf77e5d9284a1361be658f8c4ba21","permalink":"/golang/commons/reflect/property_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/reflect/property_reflector/","section":"golang","summary":"Description The PropertyReflector class allows you to examine an object\u0026rsquo;s properties and to dynamically get and set their values.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, the PropertyReflector class treats all property names as case insensitive.  Methods GetProperties Get values of all properties in a specified object and returns them as a map.","tags":null,"title":"PropertyReflector","type":"docs","url":"/hugo-docs/golang/commons/reflect/property_reflector/","weight":0,"wordcount":367},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine an object's properties and to dynamically get and set their values.\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"PropertyReflector","lvl1":"Helper class that allows you to examine an object's properties and to dynamically get and set their values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9cb0bf957af27e6f6151430447faf34c","permalink":"/net/commons/reflect/property_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/reflect/property_reflector/","section":"net","summary":"Description The PropertyReflector class allows you to examine an object\u0026rsquo;s properties and to dynamically get and set their values.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, the PropertyReflector class treats all property names as case insensitive.  Static methods GetProperties Get values of all properties in specified object and returns them as a map.","tags":null,"title":"PropertyReflector","type":"docs","url":"/hugo-docs/net/commons/reflect/property_reflector/","weight":0,"wordcount":384},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine an object's properties and to dynamically get and set their values.\n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"PropertyReflector","lvl1":"Helper class that allows you to examine an object's properties and to dynamically get and set their values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"54c57b69e524a5bb1e882e34fe587b99","permalink":"/node/commons/reflect/property_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/reflect/property_reflector/","section":"node","summary":"Description The PropertyReflector class allows you to examine an object\u0026rsquo;s properties and to dynamically get and set their values.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, the PropertyReflector class treats all property names as case insensitive.  Static methods getProperties Get values of all properties in specified object and returns them as a map.","tags":null,"title":"PropertyReflector","type":"docs","url":"/hugo-docs/node/commons/reflect/property_reflector/","weight":0,"wordcount":380},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine an object's properties and to dynamically get and set their values.\n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621009341,"lvl0":"PropertyReflector","lvl1":"Helper class that allows you to examine an object's properties and to dynamically get and set their values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"14ebfb99f443ef573a3e75d5259e3771","permalink":"/python/commons/reflect/property_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/reflect/property_reflector/","section":"python","summary":"Description The PropertyReflector class allows you to examine an object\u0026rsquo;s properties and to dynamically get and set their values.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, the PropertyReflector class treats all property names as case insensitive.  Static methods get_properties Get values of all properties in specified object and returns them as a map.","tags":null,"title":"PropertyReflector","type":"docs","url":"/hugo-docs/python/commons/reflect/property_reflector/","weight":0,"wordcount":371},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate object properties\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"PropertySchema","lvl1":"Schema to validate object properties\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"00529670eac455d886786bf16700a5f1","permalink":"/golang/commons/validate/property_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/validate/property_schema/","section":"golang","summary":"Implements: Schema\nDescription The PropertySchema class allows you to create schemas to validate object properties.\nConstructors NewPropertySchemaWithRules Creates a new validation rule and sets its arguments. See IValidationRule, TypeCode\n NewPropertySchemaWithRules(name string, typ interface{}, required bool, rules []IValidationRule) *PropertySchema\n  name: string - (optional) a property name typ: interface{} - (optional) a property type required: bool - (optional) true to always require non-nil values. rules: []IValidationRule - (optional) a list with validation rules.","tags":null,"title":"PropertySchema","type":"docs","url":"/hugo-docs/golang/commons/validate/property_schema/","weight":0,"wordcount":245},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate object properties\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"PropertySchema","lvl1":"Schema to validate object properties\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a92306227da25d9d29e38b576586e2f6","permalink":"/net/commons/validate/property_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/property_schema/","section":"net","summary":"Inherits: Schema\nDescription The PropertySchema class allows you to create schemas to validate object properties.\nConstructors Creates a new validation rule and sets its arguments. See IValidationRule, TypeCode\n public PropertySchema(string name, object type)\n  name: string - (optional) a property name type: object - (optional) a property type  Creates a new validation schema.\n public PropertySchema()\n Properties Name Gets and sets the property name.\n public string Name [ get, set ]","tags":null,"title":"PropertySchema","type":"docs","url":"/hugo-docs/net/commons/validate/property_schema/","weight":0,"wordcount":188},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate object properties\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"PropertySchema","lvl1":"Schema to validate object properties\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0045d766f371c67fc1b509347e1e001a","permalink":"/node/commons/validate/property_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/validate/property_schema/","section":"node","summary":"Extends: Schema\nDescription The PropertySchema class allows you to create schemas to validate object properties.\nConstructors Creates a new validation rule and sets its arguments. See IValidationRule, TypeCode\n public constructor(name?: string, type?: any, required?: boolean, rules?: IValidationRule[])\n  name: string - (optional) a property name type: any - (optional) a property type required: boolean - (optional) true to always require non-null values. rules: IValidationRule[] - (optional) a list with validation rules.","tags":null,"title":"PropertySchema","type":"docs","url":"/hugo-docs/node/commons/validate/property_schema/","weight":0,"wordcount":235},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate object properties\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"PropertySchema","lvl1":"Schema to validate object properties\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"90c4ebbe4ccbafca7a1f7ea18a86457c","permalink":"/python/commons/validate/property_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/validate/property_schema/","section":"python","summary":"Implements: Schema\nDescription The PropertySchema class allows you to create schemas to validate object properties.\nConstructors Creates a new validation rule and sets its arguments. See IValidationRule, TypeCode\n PropertySchema(name: str, typ: Any, required: bool, rules: List[IValidationRule])\n  name: str - (optional) a property name typ: Any - (optional) a property type required: bool - (optional) true to always require non-None values. rules: List[IValidationRule] - (optional) a list with validation rules.","tags":null,"title":"PropertySchema","type":"docs","url":"/hugo-docs/python/commons/validate/property_schema/","weight":0,"wordcount":222},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/ecommrce/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Purchase orders","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0065f87f1df4448b6e000c8eaa6f1528","permalink":"/microservices/ecommrce/purchase_orders/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/ecommrce/purchase_orders/","section":"microservices","summary":"Purchase orders.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Purchase orders","type":"docs","url":"/hugo-docs/microservices/ecommrce/purchase_orders/","weight":0,"wordcount":29},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"PushNotifications Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ffeb4e6bbb0f6a2a657d9668ed97bfb9","permalink":"/microservices/infrastructure/pushnotifications/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/pushnotifications/","section":"microservices","summary":"Manages system notification separated by individual sections. Each section contains multiple key-value parameter pairs.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"PushNotifications Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/pushnotifications/","weight":0,"wordcount":41},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes used to create message queues. Additionally, it contains classes used to create some specific types of message queues, such as cached and memory message queues.\n","dir":"golang/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Queues","lvl1":"This package contains interfaces and classes used to create message queues. Additionally, it contains classes used to create some specific types of message queues, such as cached and memory message queues.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"622c4215b44160967fc57d15d2ba22db","permalink":"/golang/messaging/queues/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/queues/","section":"golang","summary":"Interfaces IMessageQueue Interface for asynchronous message queues. Not all queues may implement all the methods. Attempt to call non-supported method will result in NotImplemented exception. To verify if a specific method is supported check MessagingCapabilities.\nIMessageReceive Callback interface used to receive incoming messages.\nClasses CachedMessageQueue Message queue that caches received messages in memory to allow peek operations that may not be supported by the undelying queue.\nThis queue is used as a base implementation for other queues","tags":null,"title":"Queues","type":"docs","url":"/hugo-docs/golang/messaging/queues/","weight":0,"wordcount":211},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes used to create message queues. Additionally, it contains classes used to create some specific types of message queues, such as cached and memory message queues.\n","dir":"node/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622571702,"lvl0":"Queues","lvl1":"This package contains interfaces and classes used to create message queues. Additionally, it contains classes used to create some specific types of message queues, such as cached and memory message queues.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ffa73b3a7e7e368b1e06880545ff9b7d","permalink":"/node/messaging/queues/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/queues/","section":"node","summary":"Interfaces IMessageQueue Interface for asynchronous message queues. Not all queues may implement all the methods. Attempt to call non-supported method will result in NotImplemented exception. To verify if a specific method is supported check MessagingCapabilities.\nIMessageReceive Callback interface used to receive incoming messages.\nClasses CachedMessageQueue Message queue that caches received messages in memory to allow peek operations that may not be supported by the undelying queue.\nThis queue is used as a base implementation for other queues","tags":null,"title":"Queues","type":"docs","url":"/hugo-docs/node/messaging/queues/","weight":0,"wordcount":211},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes used to create message queues. Additionally, it contains classes used to create some specific types of message queues, such as cached and memory message queues.\n","dir":"python/messaging/queues/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622331025,"lvl0":"Queues","lvl1":"This package contains interfaces and classes used to create message queues. Additionally, it contains classes used to create some specific types of message queues, such as cached and memory message queues.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f935dfcfc6091ef4f4663a688a5892ec","permalink":"/python/messaging/queues/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/queues/","section":"python","summary":"Interfaces IMessageQueue Interface for asynchronous message queues. Not all queues may implement all the methods. Attempt to call non-supported method will result in NotImplemented exception. To verify if a specific method is supported check MessagingCapabilities.\nIMessageReceive Callback interface used to receive incoming messages.\nClasses CachedMessageQueue Message queue that caches received messages in memory to allow peek operations that may not be supported by the undelying queue.\nThis queue is used as a base implementation for other queues","tags":null,"title":"Queues","type":"docs","url":"/hugo-docs/python/messaging/queues/","weight":0,"wordcount":211},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Quotes Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9bc0acb0260085a341164f11d4b8bda2","permalink":"/microservices/content/quotes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/quotes/","section":"microservices","summary":"Shows to users inspirational quotes on various topics. ‍\n Server implementations: NodeJS, .NET Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS. .NET, Golang, Java  ","tags":null,"title":"Quotes Microservice","type":"docs","url":"/hugo-docs/microservices/content/quotes/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Random","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bd604d86118814c05bc87d76ebee10e5","permalink":"/dart/commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/random/","section":"dart","summary":"","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/dart/commons/random/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Random package contains a set of classes that can be used to generate different types of random values, such as integer, double, long, float, and text. The random generated values can be used for multiple purposes, such as software testing.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624230818,"lvl0":"Random","lvl1":"\nThe Random package contains a set of classes that can be used to generate different types of random values, such as integer, double, long, float, and text. The random generated values can be used for multiple purposes, such as software testing.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5de8b30c83093f3b061de55ac14ce295","permalink":"/golang/commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/random/","section":"golang","summary":" Classes RandomArray Random generator for array objects.\nRandomBoolean Random generator for boolean values.\nRandomDateTime Random generator for Date time values.\nRandomDouble Random generator for double values.\nRandomFloat Random generator for float values.\nRandomInteger Random generator for integer values.\nRandomString Random generator for string values.\nRandomText Random generator for various text values such as names, addresses or phone numbers.\n ","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/golang/commons/random/","weight":0,"wordcount":58},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Random package contains a set of classes that can be used to generate different type of random values, such as integer, double, long, float, and text. The random generated values can be used for multiple purposes, such as software testing.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621530648,"lvl0":"Random","lvl1":"\nThe Random package contains a set of classes that can be used to generate different type of random values, such as integer, double, long, float, and text. The random generated values can be used for multiple purposes, such as software testing.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0adf16d004a9d06b78dd98396ad83f03","permalink":"/net/commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/random/","section":"net","summary":" Classes RandomArray Random generator for array objects.\nRandomBoolean Random generator for boolean values.\nRandomDateTime Random generator for Date time values.\nRandomDouble Random generator for double values.\nRandomFloat Random generator for float values.\nRandomInteger Random generator for integer values.\nRandomString Random generator for string values.\nRandomText Random generator for various text values such as names, addresses or phone numbers.\n ","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/net/commons/random/","weight":0,"wordcount":58},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Random package contains a set of classes that can be used to generate different type of random values, such as integer, double, long, float, and text. The random generated values can be used for multiple purposes, such as software testing.\n","dir":"node/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621269225,"lvl0":"Random","lvl1":"\nThe Random package contains a set of classes that can be used to generate different type of random values, such as integer, double, long, float, and text. The random generated values can be used for multiple purposes, such as software testing.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4f775d640b51b98b304591d98f5f06af","permalink":"/node/commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/random/","section":"node","summary":" Classes RandomArray Random generator for array objects.\nRandomBoolean Random generator for boolean values.\nRandomDateTime Random generator for Date time values.\nRandomDouble Random generator for double values.\nRandomFloat Random generator for float values.\nRandomInteger Random generator for integer values.\nRandomString Random generator for string values.\nRandomText Random generator for various text values such as names, addresses or phone numbers.\n ","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/node/commons/random/","weight":0,"wordcount":58},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Random package contains a set of classes that can be used to generate different type of random values, such as integer, double, long, float, and text. The random generated values can be used for multiple purposes, such as software testing.\n","dir":"python/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1620199382,"lvl0":"Random","lvl1":"\nThe Random package contains a set of classes that can be used to generate different type of random values, such as integer, double, long, float, and text. The random generated values can be used for multiple purposes, such as software testing.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"720474c9dcaae2a75fc49d94136f110d","permalink":"/python/commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/random/","section":"python","summary":" Classes RandomArray Random generator for array objects.\nRandomBoolean Random generator for boolean values.\nRandomDateTime Random generator for Date time values.\nRandomDouble Random generator for double values.\nRandomFloat Random generator for float values.\nRandomInteger Random generator for integer values.\nRandomString Random generator for string values.\nRandomText Random generator for various text values such as names, addresses or phone numbers.\n ","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/python/commons/random/","weight":0,"wordcount":58},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for array objects.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624229431,"lvl0":"RandomArray","lvl1":"Random generator for array objects.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5ea80af0be38cff5033121b705e6d540","permalink":"/golang/commons/random/random_array/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/random/random_array/","section":"golang","summary":"Description The RandomArray class can be used as a random generator for array objects.\nMethods Pick Picks a random element from a specified array.\n (c *TRandomArray) Pick(value interface{}) interface{}\n  values: interface{} - array of any type returns: interface{} - randomly picked item.  Examples value1 := RandomArray.Pick([1, 2, 3, 4]); // Possible result: 3  ","tags":null,"title":"RandomArray","type":"docs","url":"/hugo-docs/golang/commons/random/random_array/","weight":0,"wordcount":53},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for array objects.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RandomArray","lvl1":"Random generator for array objects.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b5f09f8e7913bd0cdc243b7126081863","permalink":"/net/commons/random/random_array/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/random/random_array/","section":"net","summary":"Description The RandomArray class can be used as a random generator for array objects.\nStatic methods Pick Picks a random element from specified array. T - the class type\n public static T Pick\u0026lt;T\u0026gt;(T[] values)\n  values: T[] - an array of any type returns: T - a randomly picked item.  Pick Picks a random element from specified list. T - the class type\n public static T Pick\u0026lt;T\u0026gt;(List\u0026lt;T\u0026gt; values)","tags":null,"title":"RandomArray","type":"docs","url":"/hugo-docs/net/commons/random/random_array/","weight":0,"wordcount":96},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for array objects.\n","dir":"node/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"RandomArray","lvl1":"Random generator for array objects.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4f23eb4324280c71c10df303aae94dc7","permalink":"/node/commons/random/random_array/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/random/random_array/","section":"node","summary":"Description The RandomArray class can be used as a random generator for array objects.\nStatic methods pick Picks a random element from specified array.\n public static pick\u0026lt;T\u0026gt;(values: T[]): T\n  values: T[] - an array of any type returns: T - a randomly picked item.  Examples let value1 = RandomArray.pick([1, 2, 3, 4]); // Possible result: 3  ","tags":null,"title":"RandomArray","type":"docs","url":"/hugo-docs/node/commons/random/random_array/","weight":0,"wordcount":56},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for array objects.\n","dir":"python/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620356279,"lvl0":"RandomArray","lvl1":"Random generator for array objects.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0b451f72ac99e73665eb1c863758df3f","permalink":"/python/commons/random/random_array/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/random/random_array/","section":"python","summary":"Description The RandomArray class can be used as a random generator for array objects.\nStatic methods pick Picks a random element from specified array.\n static pick(values: List[Any]): Any\n  values: List[Any] - an array of any type returns: Any - a randomly picked item.  Examples value1 = RandomArray.pick([1, 2, 3, 4]) # Possible result: 3 ","tags":null,"title":"RandomArray","type":"docs","url":"/hugo-docs/python/commons/random/random_array/","weight":0,"wordcount":54},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for boolean values.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624229895,"lvl0":"RandomBoolean","lvl1":"Random generator for boolean values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"df8242d5ebf42d85524d098f273dad1a","permalink":"/golang/commons/random/random_boolean/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/random/random_boolean/","section":"golang","summary":"Description The RandomBoolean class allows you to generate random boolean values.\nMethods Chance Calculates \u0026ldquo;chance\u0026rdquo; out of \u0026ldquo;max chances\u0026rdquo;. Example: 1 chance out of 3 chances (or 33.3%)\n (c *TRandomBoolean) Chance(chances int, maxChances int) bool\n  chances: int - chance proportional to maxChances. maxChances: int - maximum number of chances returns: bool - true or false for a settled chance  NextBoolean Generates a random boolean value.\n (c *TRandomBoolean) NextBoolean() bool","tags":null,"title":"RandomBoolean","type":"docs","url":"/hugo-docs/golang/commons/random/random_boolean/","weight":0,"wordcount":89},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for boolean values.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RandomBoolean","lvl1":"Random generator for boolean values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"98c077f5d643359cb42d93d6bfb45d68","permalink":"/net/commons/random/random_boolean/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/random/random_boolean/","section":"net","summary":"Description The RandomBoolean class allows you to generate random boolean values.\nStatic methods Chance Calculates \u0026ldquo;chance\u0026rdquo; out of \u0026ldquo;max chances\u0026rdquo;. Example: 1 chance out of 3 chances (or 33.3%)\n public static bool Chance(float chance, float maxChances)\n  chance: float - a chance proportional to maxChances. maxChances: float - a maximum number of chances returns: bool - true or false for settled chance  NextBoolean Generates a random boolean value.","tags":null,"title":"RandomBoolean","type":"docs","url":"/hugo-docs/net/commons/random/random_boolean/","weight":0,"wordcount":94},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for boolean values.\n","dir":"node/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"RandomBoolean","lvl1":"Random generator for boolean values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"12a179b8505d370f9ce2f191ed3b85b5","permalink":"/node/commons/random/random_boolean/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/random/random_boolean/","section":"node","summary":"Description The RandomBoolean class allows you to generate random boolean values.\nStatic methods chance Calculates \u0026ldquo;chance\u0026rdquo; out of \u0026ldquo;max chances\u0026rdquo;. Example: 1 chance out of 3 chances (or 33.3%)\n public static chance(chance: number, maxChances: number): boolean\n  chance: number - a chance proportional to maxChances. maxChances: number - a maximum number of chances returns: boolean - true or false for settled chance  nextBoolean Generates a random boolean value.","tags":null,"title":"RandomBoolean","type":"docs","url":"/hugo-docs/node/commons/random/random_boolean/","weight":0,"wordcount":94},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for boolean values.\n","dir":"python/commons/random/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"RandomBoolean","lvl1":"Random generator for boolean values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a2d18f8003b999ec5730cb36681194b5","permalink":"/python/commons/random/random_boolean/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/random/random_boolean/","section":"python","summary":"Description The RandomBoolean class allows you to generate random boolean values.\nStatic methods chance Calculates \u0026ldquo;chance\u0026rdquo; out of \u0026ldquo;max chances\u0026rdquo;. Example: 1 chance out of 3 chances (or 33.3%)\n static chance(chance: float, maxChances: float): bool\n  chance: float - a chance proportional to maxChances. maxChances: float - a maximum number of chances returns: bool - true or false for settled chance  next_boolean Generates a random boolean value.","tags":null,"title":"RandomBoolean","type":"docs","url":"/hugo-docs/python/commons/random/random_boolean/","weight":0,"wordcount":90},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for Date time values.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624229651,"lvl0":"RandomDateTime","lvl1":"Random generator for Date time values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7e260633e71a70296314bb7cd39ba2c1","permalink":"/golang/commons/random/random_date_time/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/random/random_date_time/","section":"golang","summary":"Description The RandomDateTime class allows you to generate random dates.\nImportant points:\n Month must be in 1..12 format.  Methods NextDate Generates a random Date in the range [\u0026lsquo;minYear\u0026rsquo;, \u0026lsquo;maxYear\u0026rsquo;]. This method generate dates without time (or time set to 00:00:00)\n (c *TRandomDateTime) NextDate(min time.Time, max time.Time) time.Time\n  min: time.Time - (optional) minimum range value max: time.Time - max range value returns: time.Time - random Date value.","tags":null,"title":"RandomDateTime","type":"docs","url":"/hugo-docs/golang/commons/random/random_date_time/","weight":0,"wordcount":188},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for DateTime time values.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RandomDateTime","lvl1":"Random generator for DateTime time values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9893b77feaec4cc55244121c910c6bbf","permalink":"/net/commons/random/random_date_time/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/random/random_date_time/","section":"net","summary":"Description The RandomDateTime class allows you to generate random dates.\nImportant points:\n Month must be in 1..12 format.  Static methods NextDate Generates a random DateTime in the range [\u0026lsquo;2000, 1, 1\u0026rsquo;, \u0026lsquo;maxYear\u0026rsquo;]. This method generate dates without time(or time set to 00:00:00)\n public static DateTime NextDate(DateTime max)\n  max: DateTime - max range value returns: DateTime - a random DateTime value.  NextDate Generates a random DateTime in the range [\u0026lsquo;minYear\u0026rsquo;, \u0026lsquo;maxYear\u0026rsquo;].","tags":null,"title":"RandomDateTime","type":"docs","url":"/hugo-docs/net/commons/random/random_date_time/","weight":0,"wordcount":358},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for Date time values.\n","dir":"node/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"RandomDateTime","lvl1":"Random generator for Date time values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6caf92fa67ddd3e19c30ee2f56dc6b92","permalink":"/node/commons/random/random_date_time/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/random/random_date_time/","section":"node","summary":"Description The RandomDateTime class allows you to generate random dates.\nImportant points:\n Month must be in 1..12 format.  Static methods nextDate Generates a random Date in the range [\u0026lsquo;minYear\u0026rsquo;, \u0026lsquo;maxYear\u0026rsquo;]. This method generate dates without time (or time set to 00:00:00)\n public static nextDate(min: Date, max: Date = null): Date\n  min: Date - (optional) minimum range value max: Date - max range value returns: Date - a random Date value.","tags":null,"title":"RandomDateTime","type":"docs","url":"/hugo-docs/node/commons/random/random_date_time/","weight":0,"wordcount":196},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for Date time values.\n","dir":"python/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"RandomDateTime","lvl1":"Random generator for Date time values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f7936f08d3ba1ef2a3b2efbd75dd6127","permalink":"/python/commons/random/random_date_time/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/random/random_date_time/","section":"python","summary":"Description The RandomDateTime class allows you to generate random dates.\nImportant points:\n Month must be in 1..12 format.  Static methods next_date Generates a random Date in the range [\u0026lsquo;minYear\u0026rsquo;, \u0026lsquo;maxYear\u0026rsquo;]. This method generate dates without time (or time set to 00:00:00)\n static next_date(min_year: datetime, max_year: datetime = None): datetime\n  min_year: datetime - (optional) minimum range value max_year: datetime - max range value returns: datetime - a random Date value.","tags":null,"title":"RandomDateTime","type":"docs","url":"/hugo-docs/python/commons/random/random_date_time/","weight":0,"wordcount":197},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for double values.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624229724,"lvl0":"RandomDouble","lvl1":"Random generator for double values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2b15a05239968d82b0ac05be0276f189","permalink":"/golang/commons/random/random_double/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/random/random_double/","section":"golang","summary":"Description The RandomDouble class allows you to generate random double values.\nMethods NextDouble Generates a random double value in the range [\u0026lsquo;minYear\u0026rsquo;, \u0026lsquo;maxYear\u0026rsquo;].\n (c *TRandomDouble) NextDouble(min float64, max float64) float64\n  min: float64 - (optional) minimum range value max: float64 - max range value returns: float64 - random double value.  UpdateDouble Updates (drifts) a double value within specified range defined\n (c *TRandomDouble) UpdateDouble(value float64, interval float64) float64","tags":null,"title":"RandomDouble","type":"docs","url":"/hugo-docs/golang/commons/random/random_double/","weight":0,"wordcount":113},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for double values.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RandomDouble","lvl1":"Random generator for double values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"be39652093f05668102b5fa555655694","permalink":"/net/commons/random/random_double/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/random/random_double/","section":"net","summary":"Description The RandomDouble class allows you to generate random double values.\nStatic methods NextDouble Generates a random double value in the range to \u0026ldquo;max\u0026rdquo;.\n public static double NextDouble(double maxValue)\n  maxValue: double - max range value returns: double - a random double value.  NextDouble Generates a random double value in the range [\u0026lsquo;minYear\u0026rsquo;, \u0026lsquo;maxYear\u0026rsquo;].\n public static double NextDouble(double minValue, double maxValue)\n  minValue: double - (optional) minimum range value maxValue: double - max range value returns: double - a random double value.","tags":null,"title":"RandomDouble","type":"docs","url":"/hugo-docs/net/commons/random/random_double/","weight":0,"wordcount":178},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for double values.\n","dir":"node/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"RandomDouble","lvl1":"Random generator for double values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b8aecab8f974b19befc1ec1d5464d323","permalink":"/node/commons/random/random_double/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/random/random_double/","section":"node","summary":"Description The RandomDouble class allows you to generate random double values.\nStatic methods nextDouble Generates a random double value in the range [\u0026lsquo;minYear\u0026rsquo;, \u0026lsquo;maxYear\u0026rsquo;].\n public static nextDouble(min: number, max: number = null): number\n  min: number - (optional) minimum range value max: number - max range value returns: number - a random double value.  updateDouble Updates (drifts) a double value within specified range defined\n public static updateDouble(value: number, range: number = null): number","tags":null,"title":"RandomDouble","type":"docs","url":"/hugo-docs/node/commons/random/random_double/","weight":0,"wordcount":124},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for double values.\n","dir":"python/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621000266,"lvl0":"RandomDouble","lvl1":"Random generator for double values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3020969baeea1176e6679b495ee39165","permalink":"/python/commons/random/random_double/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/random/random_double/","section":"python","summary":"Description The RandomDouble class allows you to generate random double values.\nStatic methods next_double Generates a random double value in the range [\u0026lsquo;min_year\u0026rsquo;, \u0026lsquo;max_year\u0026rsquo;].\n static next_double(mmin: float, mmax: float = None): float\n  mmin: float - (optional) minimum range value mmax: float = None - max range value returns: float - a random double value.  update_double Updates (drifts) a double value within specified range defined\n static update_double(value: float, rrange: float = None): float","tags":null,"title":"RandomDouble","type":"docs","url":"/hugo-docs/python/commons/random/random_double/","weight":0,"wordcount":115},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for float values.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624229793,"lvl0":"RandomFloat","lvl1":"Random generator for float values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"213fce6e783b10b41dc5132264793bae","permalink":"/golang/commons/random/random_float/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/random/random_float/","section":"golang","summary":"Description The RandomFloat class allows you to generate random float values.\nMethods NextFloat Generates a float in the range [\u0026lsquo;min\u0026rsquo;, \u0026lsquo;max\u0026rsquo;]. If \u0026lsquo;max\u0026rsquo; is omitted, then the range will be set to [0, \u0026lsquo;min\u0026rsquo;].\n (c *TRandomFloat) NextFloat(min float32, max float32) float32\n  min: float32 - (minimum value of the float that will be generated. If \u0026lsquo;max\u0026rsquo; is omitted, then \u0026lsquo;max\u0026rsquo; is set to \u0026lsquo;min\u0026rsquo; and \u0026lsquo;min\u0026rsquo; is set to 0.","tags":null,"title":"RandomFloat","type":"docs","url":"/hugo-docs/golang/commons/random/random_float/","weight":0,"wordcount":158},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for float values.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RandomFloat","lvl1":"Random generator for float values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5d04075d2b75311337cf4380d3815aec","permalink":"/net/commons/random/random_float/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/random/random_float/","section":"net","summary":"Description The RandomFloat class allows you to generate random float values.\nStatic methods NextFloat Generates a random float value in the range to \u0026ldquo;max\u0026rdquo;.\n public static float NextFloat(float maxValue)\n  max: float - max range value returns: float - generated random float value.  NextFloat Generates a float in the range [\u0026lsquo;min\u0026rsquo;, \u0026lsquo;max\u0026rsquo;]. If \u0026lsquo;max\u0026rsquo; is omitted, then the range will be set to [0, \u0026lsquo;min\u0026rsquo;].\n public static float NextFloat(float minValue, float maxValue)","tags":null,"title":"RandomFloat","type":"docs","url":"/hugo-docs/net/commons/random/random_float/","weight":0,"wordcount":223},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for float values.\n","dir":"node/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621285883,"lvl0":"RandomFloat","lvl1":"Random generator for float values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b89e33bf36175a6346865ebc2d279330","permalink":"/node/commons/random/random_float/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/random/random_float/","section":"node","summary":"Description The RandomFloat class allows you to generate random float values.\nStatic methods nextFloat Generates a float in the range [\u0026lsquo;min\u0026rsquo;, \u0026lsquo;max\u0026rsquo;]. If \u0026lsquo;max\u0026rsquo; is omitted, then the range will be set to [0, \u0026lsquo;min\u0026rsquo;].\n public static nextFloat(min: number, max: number = null): number\n  min: number - (minimum value of the float that will be generated. If \u0026lsquo;max\u0026rsquo; is omitted, then \u0026lsquo;max\u0026rsquo; is set to \u0026lsquo;min\u0026rsquo; and \u0026lsquo;min\u0026rsquo; is set to 0.","tags":null,"title":"RandomFloat","type":"docs","url":"/hugo-docs/node/commons/random/random_float/","weight":0,"wordcount":168},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for float values.\n","dir":"python/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621000552,"lvl0":"RandomFloat","lvl1":"Random generator for float values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d9eb2fabd5965296de53a8a2f9c6e5fc","permalink":"/python/commons/random/random_float/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/random/random_float/","section":"python","summary":"Description The RandomFloat class allows you to generate random float values.\nStatic methods next_float Generates a float in the range [\u0026lsquo;min\u0026rsquo;, \u0026lsquo;max\u0026rsquo;]. If \u0026lsquo;max\u0026rsquo; is omitted, then the range will be set to [0, \u0026lsquo;min\u0026rsquo;].\n static next_float(min: float, max: float = None): float\n  min: float - (minimum value of the float that will be generated. If \u0026lsquo;max\u0026rsquo; is omitted, then \u0026lsquo;max\u0026rsquo; is set to \u0026lsquo;min\u0026rsquo; and \u0026lsquo;min\u0026rsquo; is set to 0.","tags":null,"title":"RandomFloat","type":"docs","url":"/hugo-docs/python/commons/random/random_float/","weight":0,"wordcount":167},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for integer values.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624229854,"lvl0":"RandomInteger","lvl1":"Random generator for integer values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1ad8d07b7989a182891e59222201a699","permalink":"/golang/commons/random/random_integer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/random/random_integer/","section":"golang","summary":"Description The RandomInteger class allows you to generate random integer values.\nMethods NextInteger Generates a integer in the range [\u0026lsquo;min\u0026rsquo;, \u0026lsquo;max\u0026rsquo;]. If \u0026lsquo;max\u0026rsquo; is omitted, then the range will be set to [0, \u0026lsquo;min\u0026rsquo;].\n (c *TRandomInteger) NextInteger(min int, max int) int\n  min: int - minimum value of the integer that will be generated. If \u0026lsquo;max\u0026rsquo; is omitted, then \u0026lsquo;max\u0026rsquo; is set to \u0026lsquo;min\u0026rsquo; and \u0026lsquo;min\u0026rsquo; is set to 0.","tags":null,"title":"RandomInteger","type":"docs","url":"/hugo-docs/golang/commons/random/random_integer/","weight":0,"wordcount":158},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for integer values.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623184025,"lvl0":"RandomInteger","lvl1":"Random generator for integer values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"58e6dd72f0597057d03842d79f2a090a","permalink":"/golang/commons/random/random_long/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/random/random_long/","section":"golang","summary":"Description The RandomInteger class allows you to generate random integer values.\nMethods NextLong Generates a integer in the range [\u0026lsquo;min\u0026rsquo;, \u0026lsquo;max\u0026rsquo;]. If \u0026lsquo;max\u0026rsquo; is omitted, then the range will be set to [0, \u0026lsquo;min\u0026rsquo;].\n (c *TRandomLong) NextLong(min int64, max int64) int64\n  min: int64 - minimum value of the integer that will be generated. If \u0026lsquo;max\u0026rsquo; is omitted, then \u0026lsquo;max\u0026rsquo; is set to \u0026lsquo;min\u0026rsquo; and \u0026lsquo;min\u0026rsquo; is set to 0.","tags":null,"title":"RandomInteger","type":"docs","url":"/hugo-docs/golang/commons/random/random_long/","weight":0,"wordcount":159},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for integer values.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RandomInteger","lvl1":"Random generator for integer values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"35fd43075d4f9d5ced4848a6cd3e6da6","permalink":"/net/commons/random/random_integer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/random/random_integer/","section":"net","summary":"Description The RandomInteger class allows you to generate random integer values.\nStatic methods NextInteger Generates a random integer value in the range to \u0026ldquo;max\u0026rdquo;.\n public static int NextInteger(int maxValue)\n  maxValue: int -max range value returns: int - generated random integer value.  NextInteger Generates a integer in the range [\u0026lsquo;min\u0026rsquo;, \u0026lsquo;max\u0026rsquo;]. If \u0026lsquo;max\u0026rsquo; is omitted, then the range will be set to [0, \u0026lsquo;min\u0026rsquo;].\n public static int NextInteger(int minValue, int maxValue)","tags":null,"title":"RandomInteger","type":"docs","url":"/hugo-docs/net/commons/random/random_integer/","weight":0,"wordcount":322},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for long values.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RandomInteger","lvl1":"Random generator for long values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4410f27ae7ff34d77c784b7488788a35","permalink":"/net/commons/random/random_long/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/random/random_long/","section":"net","summary":"Description The RandomInteger class allows you to generate random long values.\nStatic methods NextLong Generates a random long value in the range to \u0026ldquo;max\u0026rdquo;.\n public static long NextLong(long maxValue)\n  maxValue: long -max range value returns: long - generated random long value.  NextLong Generates a random long value in the range [\u0026ldquo;min\u0026rdquo;, \u0026ldquo;max\u0026rdquo;].\n public static long NextInteger(long minValue, long maxValue)\n  min: long - minimum value of the long that will be generated.","tags":null,"title":"RandomInteger","type":"docs","url":"/hugo-docs/net/commons/random/random_long/","weight":0,"wordcount":312},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for integer values.\n","dir":"node/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621285883,"lvl0":"RandomInteger","lvl1":"Random generator for integer values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"104968ae47d4f80575606b3bb2b00d1d","permalink":"/node/commons/random/random_integer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/random/random_integer/","section":"node","summary":"Description The RandomInteger class allows you to generate random integer values.\nStatic methods nextInteger Generates a integer in the range [\u0026lsquo;min\u0026rsquo;, \u0026lsquo;max\u0026rsquo;]. If \u0026lsquo;max\u0026rsquo; is omitted, then the range will be set to [0, \u0026lsquo;min\u0026rsquo;].\n public static nextInteger(min: number, max: number = null): number\n  min: number - minimum value of the integer that will be generated. If \u0026lsquo;max\u0026rsquo; is omitted, then \u0026lsquo;max\u0026rsquo; is set to \u0026lsquo;min\u0026rsquo; and \u0026lsquo;min\u0026rsquo; is set to 0.","tags":null,"title":"RandomInteger","type":"docs","url":"/hugo-docs/node/commons/random/random_integer/","weight":0,"wordcount":168},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for integer values.\n","dir":"python/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621000600,"lvl0":"RandomInteger","lvl1":"Random generator for integer values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b0610f13f229a056cf3bc7347060e386","permalink":"/python/commons/random/random_integer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/random/random_integer/","section":"python","summary":"Description The RandomInteger class allows you to generate random integer values.\nStatic methods next_integer Generates a integer in the range [\u0026lsquo;min\u0026rsquo;, \u0026lsquo;max\u0026rsquo;]. If \u0026lsquo;max\u0026rsquo; is omitted, then the range will be set to [0, \u0026lsquo;min\u0026rsquo;].\n static next_integer(min: int, max: int = None): int\n  min: int - minimum value of the integer that will be generated. If \u0026lsquo;max\u0026rsquo; is omitted, then \u0026lsquo;max\u0026rsquo; is set to \u0026lsquo;min\u0026rsquo; and \u0026lsquo;min\u0026rsquo; is set to 0.","tags":null,"title":"RandomInteger","type":"docs","url":"/hugo-docs/python/commons/random/random_integer/","weight":0,"wordcount":167},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for string values.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624230524,"lvl0":"RandomString","lvl1":"Random generator for string values.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5ef2620c5fd6503092356dd1e3228998","permalink":"/golang/commons/random/random_string/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/random/random_string/","section":"golang","summary":"Description The class RandomString allows you to generate random strings.\nMethods Distort Distorts a string by randomly replacing characters in it.\n (c *TRandomString) Distort(value string) string\n  value: string - string to distort. returns: string - distored string.  NextAlphaChar Generates random alpha characted [A-Za-z]\n (c *TRandomString) NextAlphaChar() byte\n  returns: byte - random characted.  NextString Generates a random string, consisting of upper and lower case letters (of the English alphabet), digits (0-9), and symbols (\u0026quot;_,.","tags":null,"title":"RandomString","type":"docs","url":"/hugo-docs/golang/commons/random/random_string/","weight":0,"wordcount":175},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for string values.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RandomString","lvl1":"Random generator for string values.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"afd6b9445d4ac88aa5ea13481889bee6","permalink":"/net/commons/random/random_string/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/random/random_string/","section":"net","summary":"Description The class RandomString allows you to generate random strings.\nStatic methods Distort Distorts a string by randomly replacing characters in it.\n public static string Distort(string value)\n  value: string - a string to distort. returns: string - a distored string.  NextAlphaChar Generates random alpha characted [A-Za-z]\n public static string NextAlphaChar()\n  returns: string - a random characted.  NextString Generates a random string, consisting of upper and lower case letters (of the English alphabet), digits (0-9), and symbols (\u0026quot;_,.","tags":null,"title":"RandomString","type":"docs","url":"/hugo-docs/net/commons/random/random_string/","weight":0,"wordcount":186},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for string values.\n","dir":"node/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"RandomString","lvl1":"Random generator for string values.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cc2019d9eba23060dcd00f69f52d01ec","permalink":"/node/commons/random/random_string/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/random/random_string/","section":"node","summary":"Description The class RandomString allows you to generate random strings.\nStatic methods distort Distorts a string by randomly replacing characters in it.\n public static distort(value: string): string\n  value: string - a string to distort. returns: string - a distored string.  nextAlphaChar Generates random alpha characted [A-Za-z]\n public static nextAlphaChar(): string\n  returns: string - a random characted.  nextString Generates a random string, consisting of upper and lower case letters (of the English alphabet), digits (0-9), and symbols (\u0026quot;_,.","tags":null,"title":"RandomString","type":"docs","url":"/hugo-docs/node/commons/random/random_string/","weight":0,"wordcount":185},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for string values.\n","dir":"python/commons/random/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"RandomString","lvl1":"Random generator for string values.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"908fa34a1cedde7f10ded5c28492fd5c","permalink":"/python/commons/random/random_string/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/random/random_string/","section":"python","summary":"Description The class RandomString allows you to generate random strings.\nStatic methods distort Distorts a string by randomly replacing characters in it.\n static distort(value: str): str\n  value: str - a string to distort. returns: str - a distored string.  next_alpha_char Generates random alpha characted [A-Za-z]\n static next_alpha_char(): str\n  returns: str - a random characted.  next_string Generates a random string, consisting of upper and lower case letters (of the English alphabet), digits (0-9), and symbols (\u0026quot;_,.","tags":null,"title":"RandomString","type":"docs","url":"/hugo-docs/python/commons/random/random_string/","weight":0,"wordcount":171},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for various text types such as names, addresses or phone numbers.\n","dir":"golang/commons/random/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624230683,"lvl0":"RandomText","lvl1":"Random generator for various text types such as names, addresses or phone numbers.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"82559245916f212c1cd1464f2190f269","permalink":"/golang/commons/random/random_text/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/random/random_text/","section":"golang","summary":"Description The RandomText class allows you to generate different types of randomt texts. The options included are colors, names, nouns, adjectives, verbs, phrases, full names, words, phone numbers, email addresses, and texts.\nMethods Adjective Generates a random adjective. The result value is capitalized.\n (c *TRandomText) Adjective() string\n  returns: string - random adjective.  Color Generates a random color name. The result value is capitalized.\n (c *TRandomText) Color() string","tags":null,"title":"RandomText","type":"docs","url":"/hugo-docs/golang/commons/random/random_text/","weight":0,"wordcount":360},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for various text types such as names, addresses or phone numbers.\n","dir":"net/commons/random/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RandomText","lvl1":"Random generator for various text types such as names, addresses or phone numbers.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bf57129d88431fa23b17bd615b700489","permalink":"/net/commons/random/random_text/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/commons/random/random_text/","section":"net","summary":"Description The RandomText class allows you to generate different types of randomt texts. The options included are colors, names, nouns, adjectives, verbs, phrases, full names, words, phone numbers, email addresses, and texts.\nStatic methods Adjective Generates a random adjective. The result value is capitalized.\n public static string Adjective()\n  returns: string - a random adjective.  Color Generates a random color name. The result value is capitalized.\n public static string Color()","tags":null,"title":"RandomText","type":"docs","url":"/hugo-docs/net/commons/random/random_text/","weight":0,"wordcount":469},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for various text types such as names, addresses or phone numbers.\n","dir":"node/commons/random/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"RandomText","lvl1":"Random generator for various text types such as names, addresses or phone numbers.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0b6083901447950bfd874e1e70a9f0c8","permalink":"/node/commons/random/random_text/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/random/random_text/","section":"node","summary":"Description The RandomText class allows you to generate different types of randomt texts. The options included are colors, names, nouns, adjectives, verbs, phrases, full names, words, phone numbers, email addresses, and texts.\nStatic methods adjective Generates a random adjective. The result value is capitalized.\n public static adjective(): string\n  returns: string - a random adjective.  color Generates a random color name. The result value is capitalized.\n public static color(): string","tags":null,"title":"RandomText","type":"docs","url":"/hugo-docs/node/commons/random/random_text/","weight":0,"wordcount":400},{"authors":null,"categories":null,"date":-62135596800,"description":"Random generator for various text types such as names, addresses or phone numbers.\n","dir":"python/commons/random/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"RandomText","lvl1":"Random generator for various text types such as names, addresses or phone numbers.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"226b31cbc51c96ea020323bb2db2a239","permalink":"/python/commons/random/random_text/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/random/random_text/","section":"python","summary":"Description The RandomText class allows you to generate different types of randomt texts. The options included are colors, names, nouns, adjectives, verbs, phrases, full names, words, phone numbers, email addresses, and texts.\nStatic methods adjective Generates a random adjective. The result value is capitalized.\n static adjective(): str\n  returns: str - a random adjective.  color Generates a random color name. The result value is capitalized.\n static color(): str","tags":null,"title":"RandomText","type":"docs","url":"/hugo-docs/python/commons/random/random_text/","weight":0,"wordcount":383},{"authors":null,"categories":null,"date":-62135596800,"description":"The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"RecursiveMapConverter","lvl1":"The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"400aa5ba912436b88bf9cc7e3274f2c2","permalink":"/net/commons/convert/recursive_map_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/convert/recursive_map_converter/","section":"net","summary":"Description The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\nImportant points:\n This class is similar to MapConverter. The difference is that it recursively converts all values stored in objects and arrays.  Instance methods ToMap Converts value into map object or returns empty map when conversion is not possible\n public static IDictionary\u0026lt;string, object\u0026gt; ToMap(object value)\n  value: object - the value to convert.","tags":null,"title":"RecursiveMapConverter","type":"docs","url":"/hugo-docs/net/commons/convert/recursive_map_converter/","weight":0,"wordcount":220},{"authors":null,"categories":null,"date":-62135596800,"description":"The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"RecursiveMapConverter","lvl1":"The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6689b97c6c805794c45731df178cc1f6","permalink":"/node/commons/convert/recursive_map_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/convert/recursive_map_converter/","section":"node","summary":"Description The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\nImportant points:\n This class is similar to MapConverter. The difference is that it recursively converts all values stored in objects and arrays.  Instance methods toMap Converts value into map object or returns empty map when conversion is not possible\n public static toMap(value: any): any\n  value: any - the value to convert.","tags":null,"title":"RecursiveMapConverter","type":"docs","url":"/hugo-docs/node/commons/convert/recursive_map_converter/","weight":0,"wordcount":203},{"authors":null,"categories":null,"date":-62135596800,"description":"The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"RecursiveMapConverter","lvl1":"The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"01211f06f0296cf9eaf9c96904a11610","permalink":"/python/commons/convert/recursive_map_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/recursive_map_converter/","section":"python","summary":"Description The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\nImportant points:\n This class is similar to MapConverter. The difference is that it recursively converts all values stored in objects and arrays.  Instance methods to_map Converts value into map object or returns empty map when conversion is not possible\n static to_map(value: Any): Any\n  value: Any - the value to convert.","tags":null,"title":"RecursiveMapConverter","type":"docs","url":"/hugo-docs/python/commons/convert/recursive_map_converter/","weight":0,"wordcount":186},{"authors":null,"categories":null,"date":-62135596800,"description":"The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623970065,"lvl0":"RecursiveMapConverter!","lvl1":"The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bdb133c7439e1ce88a5684d6994cc9f8","permalink":"/golang/commons/convert/recursive_map_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/convert/recursive_map_converter/","section":"golang","summary":"Note: please note that this is not implemented for this language yet\nDescription The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.\nImportant points:\n This class is similar to MapConverter. The difference is that it recursively converts all values stored in objects and arrays.  Methods toMap Converts a value into a map object or returns an empty map when conversion is not possible","tags":null,"title":"RecursiveMapConverter!","type":"docs","url":"/hugo-docs/golang/commons/convert/recursive_map_converter/","weight":0,"wordcount":215},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \"dot\" notation.\n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624240064,"lvl0":"RecursiveObjectReader","lvl1":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \"dot\" notation.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0377c07063a50429436eb639d3db5b4d","permalink":"/golang/commons/reflect/recursive_object_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/reflect/recursive_object_reader/","section":"golang","summary":"Description The RecursiveObjectReader class allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \u0026ldquo;dot\u0026rdquo; notation (e.g property.property.method).\nImportant points\n It is similar to ObjectReader but reads properties recursively through the entire object graph. Nested property names are defined using dot notation as \u0026ldquo;object.subobject.property\u0026rdquo;.  Methods GetProperties Get values of all properties in specified object and its subobjects and returns them as a map.","tags":null,"title":"RecursiveObjectReader","type":"docs","url":"/hugo-docs/golang/commons/reflect/recursive_object_reader/","weight":0,"wordcount":300},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \"dot\" notation.\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RecursiveObjectReader","lvl1":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \"dot\" notation.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5dffd9c9b6d999ed6c1adadbb414e65b","permalink":"/net/commons/reflect/recursive_object_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/reflect/recursive_object_reader/","section":"net","summary":"Description The RecursiveObjectReader class allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \u0026ldquo;dot\u0026rdquo; notation (e.g property.property.method).\nImportant points\n It is similar to ObjectReader but reads properties recursively through the entire object graph. Nested property names are defined using dot notation as \u0026ldquo;object.subobject.property\u0026rdquo;.  Static methods GetProperties Get values of all properties in specified object and its subobjects and returns them as a map.","tags":null,"title":"RecursiveObjectReader","type":"docs","url":"/hugo-docs/net/commons/reflect/recursive_object_reader/","weight":0,"wordcount":308},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \"dot\" notation.\n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"RecursiveObjectReader","lvl1":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \"dot\" notation.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3c11133df36771eba08e46e5415144f9","permalink":"/node/commons/reflect/recursive_object_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/reflect/recursive_object_reader/","section":"node","summary":"Description The RecursiveObjectReader class allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \u0026ldquo;dot\u0026rdquo; notation (e.g property.property.method).\nImportant points\n It is similar to ObjectReader but reads properties recursively through the entire object graph. Nested property names are defined using dot notation as \u0026ldquo;object.subobject.property\u0026rdquo;.  Static methods getProperties Get values of all properties in specified object and its subobjects and returns them as a map.","tags":null,"title":"RecursiveObjectReader","type":"docs","url":"/hugo-docs/node/commons/reflect/recursive_object_reader/","weight":0,"wordcount":306},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \"dot\" notation.\n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621009478,"lvl0":"RecursiveObjectReader","lvl1":"Helper class that allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \"dot\" notation.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d59689db0e299e452fe1a04e2b96d2b5","permalink":"/python/commons/reflect/recursive_object_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/reflect/recursive_object_reader/","section":"python","summary":"Description The RecursiveObjectReader class allows you to examine the properties of an object (property instrospection) and to dynamically read them recursively using \u0026ldquo;dot\u0026rdquo; notation (e.g property.property.method).\nImportant points\n It is similar to ObjectReader but reads properties recursively through the entire object graph. Nested property names are defined using dot notation as \u0026ldquo;object.subobject.property\u0026rdquo;.  Static methods get_properties Gets values of all properties in specified object and its subobjects and returns them as a map.","tags":null,"title":"RecursiveObjectReader","type":"docs","url":"/hugo-docs/python/commons/reflect/recursive_object_reader/","weight":0,"wordcount":302},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to dynamically set the properties of an object recursively using \"dot\" notation.\n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624240318,"lvl0":"RecursiveObjectWriter","lvl1":"Helper class that allows you to dynamically set the properties of an object recursively using \"dot\" notation.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bd201281be173ef284b3c99150fce319","permalink":"/golang/commons/reflect/recursive_object_writer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/reflect/recursive_object_writer/","section":"golang","summary":"Description The RecursiveObjectWriter class allows you to dynamically set the properties of an object and to copy them to another object recursively using dot notation.\nImportant points\n It is similar to ObjectWriter but writes properties recursively through the entire object graph. Nested property names are defined using dot notation as \u0026ldquo;object.subobject.property\u0026rdquo;  Methods CopyProperties Copies content of one object to another object by recursively reading all properties from a source object and then recursively writing them to a destination object.","tags":null,"title":"RecursiveObjectWriter","type":"docs","url":"/hugo-docs/golang/commons/reflect/recursive_object_writer/","weight":0,"wordcount":281},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to dynamically set the properties of an object recursively using \"dot\" notation.\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"RecursiveObjectWriter","lvl1":"Helper class that allows you to dynamically set the properties of an object recursively using \"dot\" notation.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"439da57eb0d153eb39ce4f2e828da62f","permalink":"/net/commons/reflect/recursive_object_writer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/reflect/recursive_object_writer/","section":"net","summary":"Description The RecursiveObjectWriter class allows you to dynamically set the properties of an object and to copy them to another object recursively using dot notation.\nImportant points\n It is similar to ObjectWriter but writes properties recursively through the entire object graph. Nested property names are defined using dot notation as \u0026ldquo;object.subobject.property\u0026rdquo;  Static methods CopyProperties Copies content of one object to another object by recursively reading all properties from source object and then recursively writing them to destination object.","tags":null,"title":"RecursiveObjectWriter","type":"docs","url":"/hugo-docs/net/commons/reflect/recursive_object_writer/","weight":0,"wordcount":289},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to dynamically set the properties of an object recursively using \"dot\" notation.\n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"RecursiveObjectWriter","lvl1":"Helper class that allows you to dynamically set the properties of an object recursively using \"dot\" notation.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"92bfafb02509750f4ab720e404ec7ce5","permalink":"/node/commons/reflect/recursive_object_writer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/reflect/recursive_object_writer/","section":"node","summary":"Description The RecursiveObjectWriter class allows you to dynamically set the properties of an object and to copy them to another object recursively using dot notation.\nImportant points\n It is similar to ObjectWriter but writes properties recursively through the entire object graph. Nested property names are defined using dot notation as \u0026ldquo;object.subobject.property\u0026rdquo;  Static methods copyProperties Copies content of one object to another object by recursively reading all properties from source object and then recursively writing them to destination object.","tags":null,"title":"RecursiveObjectWriter","type":"docs","url":"/hugo-docs/node/commons/reflect/recursive_object_writer/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to dynamically set the properties of an object recursively using \"dot\" notation.\n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621009636,"lvl0":"RecursiveObjectWriter","lvl1":"Helper class that allows you to dynamically set the properties of an object recursively using \"dot\" notation.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"65d4044b3744dc8252dfb714a44e045e","permalink":"/python/commons/reflect/recursive_object_writer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/reflect/recursive_object_writer/","section":"python","summary":"Description The RecursiveObjectWriter class allows you to dynamically set the properties of an object and to copy them to another object recursively using dot notation.\nImportant points\n It is similar to ObjectWriter but writes properties recursively through the entire object graph. Nested property names are defined using dot notation as \u0026ldquo;object.subobject.property\u0026rdquo;  Static methods copy_properties Copies content of one object to another object by recursively reading all properties from source object and then recursively writing them to destination object.","tags":null,"title":"RecursiveObjectWriter","type":"docs","url":"/hugo-docs/python/commons/reflect/recursive_object_writer/","weight":0,"wordcount":279},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Refer","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"df63c966de8715c14ec762defdadb1f7","permalink":"/dart/commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/refer/","section":"dart","summary":"","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/dart/commons/refer/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Refer package provides a set of classes and interfaces that allows you to create, manage and resolve component dependencies that can be passed to other components to establish dependencies between them. \n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1624237813,"lvl0":"Refer","lvl1":"\nThe Refer package provides a set of classes and interfaces that allows you to create, manage and resolve component dependencies that can be passed to other components to establish dependencies between them. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e1cc7d5816724a916404a1ea696cc2df","permalink":"/golang/commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/refer/","section":"golang","summary":"Interfaces IReferenceable Sets references to dependent components.\nIReferences Interface for a map that holds component references and passes them to components to establish dependencies with each other. Together with IReferenceable and IUnreferenceable interfaces it implements a Locator pattern that is used by the PipServices toolkit for Inversion of Control to assign external dependencies to components.\nIUnreferenceable Interface for components that require explicit clearing of references to dependent components.\nClasses DependencyResolver Helper class for resolving component dependencies.","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/golang/commons/refer/","weight":0,"wordcount":208},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains classes used to create reference decorators and managed references.      \n    \nImportant points\n- It provides the inversion of control design pattern but does not contain the fully functional container (you can just only create a class that will set various references).    \n- Lifecycle:    \n \n   - Once the objects of a container are configured, if they implement the [IReferencable](../../commons/refer/ireferencable) interface, they are passed a set of references for recreating links between objects in the container. If the objects implement the [IOpenable interface](../../commons/run/iopenable), the *Open()* method is called and they \nstart to work. \n\n   - Then, connections to various services are made, the objects start, the container starts running, and the objects carry out their tasks. \n\n   - When the container starts to close, the objects that implement the [IClosable](../../commons/run/iclosable) interface are closed via their *Close()* method (which should make them stop working and disconnect from other services). Following this, the objects that implement the [IUnreferenceable](../../commons/refer/iunreferenceable) interface delete the various links between objects, and the container destroys all objects and turns off. \n\n- [Build](build_references_decorator), [Link](link_references_decorator), and [Run](run_references_decorator) - ReferenceDecorators are used during the corresponding  building, linking, and running stages and are united in [ManagedReferences](managed_references), which are extended by [ContainerReferences](container_references).\n","dir":"golang/container/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624022469,"lvl0":"Refer","lvl1":"\nThis package contains classes used to create reference decorators and managed references.      \n    \nImportant points\n- It provides the inversion of control design pattern but does not contain the fully functional container (you can just only create a class that will set various references).    \n- Lifecycle:    \n \n   - Once the objects of a container are configured, if they implement the [IReferencable](../../commons/refer/ireferencable) interface, they are passed a set of references for recreating links between objects in the container. If the objects implement the [IOpenable interface](../../commons/run/iopenable), the *Open()* method is called and they \nstart to work. \n\n   - Then, connections to various services are made, the objects start, the container starts running, and the objects carry out their tasks. \n\n   - When the container starts to close, the objects that implement the [IClosable](../../commons/run/iclosable) interface are closed via their *Close()* method (which should make them stop working and disconnect from other services). Following this, the objects that implement the [IUnreferenceable](../../commons/refer/iunreferenceable) interface delete the various links between objects, and the container destroys all objects and turns off. \n\n- [Build](build_references_decorator), [Link](link_references_decorator), and [Run](run_references_decorator) - ReferenceDecorators are used during the corresponding  building, linking, and running stages and are united in [ManagedReferences](managed_references), which are extended by [ContainerReferences](container_references).\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"689ec5f21afaec6c4caa748fd192ab8b","permalink":"/golang/container/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/container/refer/","section":"golang","summary":"Classes BuildReferencesDecorator References decorator that automatically creates missing components using available component factories upon component retrival.\nLinkReferencesDecorator References decorator that automatically sets references to newly added components\nManagedReferences Managed references that in addition to keeping and locating references can also manage their lifecycle:\n Auto-creation of missing component using available factories Auto-linking newly added components Auto-opening newly added components Auto-closing removed components  ReferencesDecorator Chainable decorator for IReferences that allows to inject additional capabilities such as automatic component creation, automatic registration and opening.","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/golang/container/refer/","weight":0,"wordcount":91},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Refer package provides a set of classes and interfaces that allows you to create, manage and resolve component dependencies that can be passed to other components to establish dependencies between them. \n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621530648,"lvl0":"Refer","lvl1":"\nThe Refer package provides a set of classes and interfaces that allows you to create, manage and resolve component dependencies that can be passed to other components to establish dependencies between them. \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a5fe0b2bd1847dfb6e0115e18c4298ef","permalink":"/net/commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/refer/","section":"net","summary":"Interfaces IReferenceable Sets references to dependent components.\nIReferences Interface for a map that holds component references and passes them to components to establish dependencies with each other. Together with IReferenceable and IUnreferenceable interfaces it implements a Locator pattern that is used by PipServices toolkit for Inversion of Control to assign external dependencies to components.\nIUnreferenceable Interface for components that require explicit clearing of references to dependent components.\nClasses DependencyResolver Helper class for resolving component dependencies.","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/net/commons/refer/","weight":0,"wordcount":205},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Refer package provides a set of classes and interfaces that allows you to create, manage and resolve component dependencies that can be passed to other components to establish dependencies between them. \n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621269225,"lvl0":"Refer","lvl1":"\nThe Refer package provides a set of classes and interfaces that allows you to create, manage and resolve component dependencies that can be passed to other components to establish dependencies between them. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7ccf6c9dcd3223eb8e592a0b61f921ea","permalink":"/node/commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/refer/","section":"node","summary":"Interfaces IReferenceable Sets references to dependent components.\nIReferences Interface for a map that holds component references and passes them to components to establish dependencies with each other. Together with IReferenceable and IUnreferenceable interfaces it implements a Locator pattern that is used by PipServices toolkit for Inversion of Control to assign external dependencies to components.\nIUnreferenceable Interface for components that require explicit clearing of references to dependent components.\nClasses DependencyResolver Helper class for resolving component dependencies.","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/node/commons/refer/","weight":0,"wordcount":205},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains classes used to create reference decorators and managed references.      \n    \nImportant points\n- It provides the inversion of control design pattern but does not contain the fully functional container (you can just only create a class that will set various references).    \n- Lifecycle:    \n \n   - Once the objects of a container are configured, if they implement the [IReferencable](../../commons/refer/ireferencable) interface, they are passed a set of references for recreating links between objects in the container. If the objects implement the [IOpenable interface](../../commons/run/iopenable), the *open()* method is called and they \nstart to work. \n\n   - Then, connections to various services are made, the objects start, the container starts running, and the objects carry out their tasks. \n\n   - When the container starts to close, the objects that implement the [IClosable](../../commons/run/iclosable) interface are closed via their *close()* method (which should make them stop working and disconnect from other services). Following this, the objects that implement the [IUnreferenceable](../../commons/refer/iunreferenceable) interface delete the various links between objects, and the container destroys all objects and turns off. \n\n- [Build](build_references_decorator), [Link](link_references_decorator), and [Run](run_references_decorator) - ReferenceDecorators are used during the corresponding  building, linking, and running stages and are united in [ManagedReferences](managed_references), which are extended by [ContainerReferences](container_references).\n","dir":"node/container/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622849575,"lvl0":"Refer","lvl1":"\nThis package contains classes used to create reference decorators and managed references.      \n    \nImportant points\n- It provides the inversion of control design pattern but does not contain the fully functional container (you can just only create a class that will set various references).    \n- Lifecycle:    \n \n   - Once the objects of a container are configured, if they implement the [IReferencable](../../commons/refer/ireferencable) interface, they are passed a set of references for recreating links between objects in the container. If the objects implement the [IOpenable interface](../../commons/run/iopenable), the *open()* method is called and they \nstart to work. \n\n   - Then, connections to various services are made, the objects start, the container starts running, and the objects carry out their tasks. \n\n   - When the container starts to close, the objects that implement the [IClosable](../../commons/run/iclosable) interface are closed via their *close()* method (which should make them stop working and disconnect from other services). Following this, the objects that implement the [IUnreferenceable](../../commons/refer/iunreferenceable) interface delete the various links between objects, and the container destroys all objects and turns off. \n\n- [Build](build_references_decorator), [Link](link_references_decorator), and [Run](run_references_decorator) - ReferenceDecorators are used during the corresponding  building, linking, and running stages and are united in [ManagedReferences](managed_references), which are extended by [ContainerReferences](container_references).\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e95b4245a1bcb6c662a2f57fce5739f3","permalink":"/node/container/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/refer/","section":"node","summary":"Classes BuildReferencesDecorator References decorator that automatically creates missing components using available component factories upon component retrival.\nLinkReferencesDecorator References decorator that automatically sets references to newly added components\nManagedReferences Managed references that in addition to keeping and locating references can also manage their lifecycle:\n Auto-creation of missing component using available factories Auto-linking newly added components Auto-opening newly added components Auto-closing removed components  ReferencesDecorator Chainable decorator for IReferences that allows to inject additional capabilities such as automatic component creation, automatic registration and opening.","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/node/container/refer/","weight":0,"wordcount":91},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Refer package provides a set of classes and interfaces that allows you to create, manage and resolve component dependencies that can be passed to other components to establish dependencies between them. \n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1620139538,"lvl0":"Refer","lvl1":"\nThe Refer package provides a set of classes and interfaces that allows you to create, manage and resolve component dependencies that can be passed to other components to establish dependencies between them. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7dad4a7b03e6803f525e167bb5509612","permalink":"/python/commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/refer/","section":"python","summary":"Interfaces IReferenceable Sets references to dependent components.\nIReferences Interface for a map that holds component references and passes them to components to establish dependencies with each other. Together with IReferenceable and IUnreferenceable interfaces it implements a Locator pattern that is used by PipServices toolkit for Inversion of Control to assign external dependencies to components.\nIUnreferenceable Interface for components that require explicit clearing of references to dependent components.\nClasses DependencyResolver Helper class for resolving component dependencies.","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/python/commons/refer/","weight":0,"wordcount":205},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThis package contains classes used to create reference decorators and managed references.      \n    \nImportant points\n- It provides the inversion of control design pattern but does not contain the fully functional container (you can just only create a class that will set various references).    \n- Lifecycle:    \n \n   - Once the objects of a container are configured, if they implement the [IReferencable](../../commons/refer/ireferencable) interface, they are passed a set of references for recreating links between objects in the container. If the objects implement the [IOpenable interface](../../commons/run/iopenable), the *open()* method is called and they \nstart to work. \n\n   - Then, connections to various services are made, the objects start, the container starts running, and the objects carry out their tasks. \n\n   - When the container starts to close, the objects that implement the [IClosable](../../commons/run/iclosable) interface are closed via their *close()* method (which should make them stop working and disconnect from other services). Following this, the objects that implement the [IUnreferenceable](../../commons/refer/iunreferenceable) interface delete the various links between objects, and the container destroys all objects and turns off. \n\n- [Build](build_references_decorator), [Link](link_references_decorator), and [Run](run_references_decorator) - ReferenceDecorators are used during the corresponding  building, linking, and running stages and are united in [ManagedReferences](managed_references), which are extended by [ContainerReferences](container_references).\n","dir":"python/container/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622801843,"lvl0":"Refer","lvl1":"\nThis package contains classes used to create reference decorators and managed references.      \n    \nImportant points\n- It provides the inversion of control design pattern but does not contain the fully functional container (you can just only create a class that will set various references).    \n- Lifecycle:    \n \n   - Once the objects of a container are configured, if they implement the [IReferencable](../../commons/refer/ireferencable) interface, they are passed a set of references for recreating links between objects in the container. If the objects implement the [IOpenable interface](../../commons/run/iopenable), the *open()* method is called and they \nstart to work. \n\n   - Then, connections to various services are made, the objects start, the container starts running, and the objects carry out their tasks. \n\n   - When the container starts to close, the objects that implement the [IClosable](../../commons/run/iclosable) interface are closed via their *close()* method (which should make them stop working and disconnect from other services). Following this, the objects that implement the [IUnreferenceable](../../commons/refer/iunreferenceable) interface delete the various links between objects, and the container destroys all objects and turns off. \n\n- [Build](build_references_decorator), [Link](link_references_decorator), and [Run](run_references_decorator) - ReferenceDecorators are used during the corresponding  building, linking, and running stages and are united in [ManagedReferences](managed_references), which are extended by [ContainerReferences](container_references).\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e55fab01fed9b8cd876c53a358b6aca1","permalink":"/python/container/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/refer/","section":"python","summary":"Classes BuildReferencesDecorator References decorator that automatically creates missing components using available component factories upon component retrival.\nLinkReferencesDecorator References decorator that automatically sets references to newly added components\nManagedReferences Managed references that in addition to keeping and locating references can also manage their lifecycle:\n Auto-creation of missing component using available factories Auto-linking newly added components Auto-opening newly added components Auto-closing removed components  ReferencesDecorator Chainable decorator for IReferences that allows to inject additional capabilities such as automatic component creation, automatic registration and opening.","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/python/container/refer/","weight":0,"wordcount":91},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a reference to a component and a locator to find it.\n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624236818,"lvl0":"Reference","lvl1":"Contains a reference to a component and a locator to find it.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cd8ebd38e701e6474c0e3eb3db6e1b3e","permalink":"/golang/commons/refer/reference/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/refer/reference/","section":"golang","summary":"Description The Reference class allows you to store a reference to a component and a locator to find it.\nImportant points\n It is used by References to store registered component references.  Constructors NewReference Create a new instance of the reference object and assigns its values.\n NewReference(locator interface{}, component interface{}) *Reference\n  locator: interface{} - locator to find the reference. component: interface{} - reference to a component.  Methods Component Gets the stored component reference.","tags":null,"title":"Reference","type":"docs","url":"/hugo-docs/golang/commons/refer/reference/","weight":0,"wordcount":143},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a reference to a component and a locator to find it.\n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"Reference","lvl1":"Contains a reference to a component and a locator to find it.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"130604bfb0de093b69e7de06fde482b8","permalink":"/net/commons/refer/reference/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/refer/reference/","section":"net","summary":"Description The Reference class allows you to store a reference to a component and a locator to find it.\nImportant points\n It is used by References to store registered component references.  Constructors Create a new instance of the reference object and assigns its values.\n public Reference(object locator, object component)\n  locator: object - a locator to find the reference. component: object - a reference to component.  Instance methods GetComponent Gets the stored component reference.","tags":null,"title":"Reference","type":"docs","url":"/hugo-docs/net/commons/refer/reference/","weight":0,"wordcount":143},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a reference to a component and a locator to find it.\n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"Reference","lvl1":"Contains a reference to a component and a locator to find it.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"387d8d4abf711398a27f610716902c67","permalink":"/node/commons/refer/reference/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/refer/reference/","section":"node","summary":"Description The Reference class allows you to store a reference to a component and a locator to find it.\nImportant points\n It is used by References to store registered component references.  Constructors Create a new instance of the reference object and assigns its values.\n public constructor(locator: any, component: any)\n  locator: any - a locator to find the reference. component: any - a reference to component.  Instance methods getComponent Gets the stored component reference.","tags":null,"title":"Reference","type":"docs","url":"/hugo-docs/node/commons/refer/reference/","weight":0,"wordcount":143},{"authors":null,"categories":null,"date":-62135596800,"description":"Contains a reference to a component and a locator to find it.\n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"Reference","lvl1":"Contains a reference to a component and a locator to find it.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fe0b1edd528b83537d4b7f711fcb48a7","permalink":"/python/commons/refer/reference/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/refer/reference/","section":"python","summary":"Description The Reference class allows you to store a reference to a component and a locator to find it.\nImportant points\n It is used by References to store registered component references.  Constructors Create a new instance of the reference object and assigns its values.\n Reference(locator: Any, component: Any)\n  locator: Any - a locator to find the reference. component: Any - a reference to component.  Instance methods get_component Gets the stored component reference.","tags":null,"title":"Reference","type":"docs","url":"/hugo-docs/python/commons/refer/reference/","weight":0,"wordcount":139},{"authors":null,"categories":null,"date":-62135596800,"description":"Error created when a required component dependency cannot be found.\n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624237058,"lvl0":"ReferenceError","lvl1":"Error created when a required component dependency cannot be found.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"756965865bfa234967d2932d729a5782","permalink":"/golang/commons/refer/reference_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/refer/reference_error/","section":"golang","summary":"Description The ReferenceError` class provides a Reference error type, which can be used to create an error instance when a required component dependency cannot be found.\nConstructors NewReferenceError Creates an error instance and assigns its values.\n NewReferenceError(correlationId string, locator interface{}) *errors.ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. locator: interface{} - locator to find reference to dependent component.  ","tags":null,"title":"ReferenceError","type":"docs","url":"/hugo-docs/golang/commons/refer/reference_error/","weight":0,"wordcount":66},{"authors":null,"categories":null,"date":-62135596800,"description":"Error created when a required component dependency cannot be found.\n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ReferenceException","lvl1":"Error created when a required component dependency cannot be found.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"88d3932a9962d8c60b859761f748dc1f","permalink":"/net/commons/refer/reference_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/refer/reference_exception/","section":"net","summary":"Description The ReferenceException class provides a Reference error type, which can be used to create an error instance when a required component dependency cannot be found.\nConstructors Creates an error instance and assigns its values.\n public ReferenceException(string correlationId, object locator)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. locator: object - the locator to find reference to dependent component.  Creates an error instance and assigns its values.","tags":null,"title":"ReferenceException","type":"docs","url":"/hugo-docs/net/commons/refer/reference_exception/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"Error created when a required component dependency cannot be found.\n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"ReferenceException","lvl1":"Error created when a required component dependency cannot be found.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b9b9e9b9f6ababb72030a6fd3f0eb157","permalink":"/node/commons/refer/reference_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/refer/reference_exception/","section":"node","summary":"Description The ReferenceException class provides a Reference error type, which can be used to create an error instance when a required component dependency cannot be found.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlationId: string, locator: any)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. locator: any - the locator to find reference to dependent component.  ","tags":null,"title":"ReferenceException","type":"docs","url":"/hugo-docs/node/commons/refer/reference_exception/","weight":0,"wordcount":65},{"authors":null,"categories":null,"date":-62135596800,"description":"Error created when a required component dependency cannot be found.\n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620169406,"lvl0":"ReferenceException","lvl1":"Error created when a required component dependency cannot be found.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4fcce485ad471547a225f1d1be9ddf26","permalink":"/python/commons/refer/reference_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/refer/reference_exception/","section":"python","summary":"Description The ReferenceException class provides a Reference error type, which can be used to create an error instance when a required component dependency cannot be found.\nConstructors Creates an error instance and assigns its values.\n ReferenceException(correlation_id: Optional[str], locator: Any)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. locator: Any - the locator to find reference to dependent component.  ","tags":null,"title":"ReferenceException","type":"docs","url":"/hugo-docs/python/commons/refer/reference_exception/","weight":0,"wordcount":64},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to set and unset references to components.\n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624237398,"lvl0":"Referencer","lvl1":"Helper class that allows you to set and unset references to components.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fa3c721dc8abb0d5131130ae51b1b805","permalink":"/golang/commons/refer/referencer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/refer/referencer/","section":"golang","summary":"Description The Referencer class allows you to set and unset references to components.\nMethods SetReferences Sets references to multiple components.\nTo set references components must implement IReferenceable interface. If they don\u0026rsquo;t the call to this method has no effect.\n (c *TReferencer) SetReferences(references IReferences, components []interface{})\n  references: IReferences - references to be set. component: []interface{} - list of components to set the references to.  SetReferencesForOne Sets references to specific component.","tags":null,"title":"Referencer","type":"docs","url":"/hugo-docs/golang/commons/refer/referencer/","weight":0,"wordcount":189},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to set and unset references to components.\n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"Referencer","lvl1":"Helper class that allows you to set and unset references to components.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8f657a338d336007cf2ddd69bdbdf3c6","permalink":"/net/commons/refer/referencer/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/refer/referencer/","section":"net","summary":"Description The Referencer class allows you to set and unset references to components.\nStatic methods SetReferences Sets references to multiple components.\nTo set references components must implement IReferenceable interface. If they don\u0026rsquo;t the call to this method has no effect.\n public static void SetReferences(IReferenceable references, IEnumerable components = null)\n  references: IReferences - the references to be set. component: IEnumerable - a list of components to set the references to.","tags":null,"title":"Referencer","type":"docs","url":"/hugo-docs/net/commons/refer/referencer/","weight":0,"wordcount":244},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to set and unset references to components.\n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"Referencer","lvl1":"Helper class that allows you to set and unset references to components.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"556af130d78f74376f8ed1d7c47eb596","permalink":"/node/commons/refer/referencer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/refer/referencer/","section":"node","summary":"Description The Referencer class allows you to set and unset references to components.\nStatic methods setReferences Sets references to multiple components.\nTo set references components must implement IReferenceable interface. If they don\u0026rsquo;t the call to this method has no effect.\n public static setReferences(references: IReferenceable, components: any[]): void\n  references: IReferences - the references to be set. component: any[] - a list of components to set the references to.  setReferencesForOne Sets references to specific component.","tags":null,"title":"Referencer","type":"docs","url":"/hugo-docs/node/commons/refer/referencer/","weight":0,"wordcount":200},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to set and unset references to components.\n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"Referencer","lvl1":"Helper class that allows you to set and unset references to components.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1ab8643fe2038e706bdac2851ae15a10","permalink":"/python/commons/refer/referencer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/refer/referencer/","section":"python","summary":"Description The Referencer class allows you to set and unset references to components.\nStatic methods set_references Sets references to multiple components.\nTo set references components must implement IReferenceable interface. If they don\u0026rsquo;t, the call to this method has no effect.\n static set_references(references: IReferenceable, components: List[Any])\n  references: IReferences - the references to be set. component: List[Any] - a list of components to set the references to.  set_references_for_one Sets references to specific component.","tags":null,"title":"Referencer","type":"docs","url":"/hugo-docs/python/commons/refer/referencer/","weight":0,"wordcount":194},{"authors":null,"categories":null,"date":-62135596800,"description":"An implementation of [IReferences](../ireferences) that allows you to store and locate component references.\n","dir":"golang/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624237667,"lvl0":"References","lvl1":"An implementation of [IReferences](../ireferences) that allows you to store and locate component references.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"25559a8672f5c586d263fa6dfb3840c4","permalink":"/golang/commons/refer/references/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/refer/references/","section":"golang","summary":"Description The References class allows you to store and locate component references.\nConstructors NewReferences Creates a new instance of references and initializes it with references.\n NewReferences(tuples []interface{}) *References\n NewReferencesFromTuples Creates a new References from a list of key-value pairs called tuples.\n NewReferencesFromTuples(tuples \u0026hellip;interface{}) *References\n  tuples: \u0026hellip;interface{} - list of values where odd elements are locators and the following even elements are component references  NewEmptyReferences Creates a new instance of references and initializes it with references.","tags":null,"title":"References","type":"docs","url":"/hugo-docs/golang/commons/refer/references/","weight":0,"wordcount":556},{"authors":null,"categories":null,"date":-62135596800,"description":"An implementation of [IReferences](../ireferences) that allows you to store and locate component references.\n","dir":"net/commons/refer/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"References","lvl1":"An implementation of [IReferences](../ireferences) that allows you to store and locate component references.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1f07108520f1f4f26012551641c219c3","permalink":"/net/commons/refer/references/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/net/commons/refer/references/","section":"net","summary":"Inherits: IReferences\nDescription The References class allows you to store and locate component references.\nConstructors Creates a new instance of references and initializes it with references.\n public References(object[] tuples)\n  tuples: object[] - (optional) a list of values where odd elements are locators and the following even elements are component references  Fields _references A list of values where odd elements are locators and the following even elements are component references.","tags":null,"title":"References","type":"docs","url":"/hugo-docs/net/commons/refer/references/","weight":0,"wordcount":872},{"authors":null,"categories":null,"date":-62135596800,"description":"An implementation of [IReferences](../ireferences) that allows you to store and locate component references.\n","dir":"node/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1623261354,"lvl0":"References","lvl1":"An implementation of [IReferences](../ireferences) that allows you to store and locate component references.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"46162abf192f5f0b61fd8db3d0f8aacf","permalink":"/node/commons/refer/references/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/refer/references/","section":"node","summary":"Implements: IReferences\nDescription The References class allows you to store and locate component references.\nConstructors Creates a new instance of references and initializes it with references.\n public constructor(tuples: any[] = null)\n  tuples: any[] - (optional) a list of values where odd elements are locators and the following even elements are component references  Fields _references A list of values where odd elements are locators and the following even elements are component references.","tags":null,"title":"References","type":"docs","url":"/hugo-docs/node/commons/refer/references/","weight":0,"wordcount":572},{"authors":null,"categories":null,"date":-62135596800,"description":"An implementation of [IReferences](../ireferences) that allows you to store and locate component references.\n","dir":"python/commons/refer/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"References","lvl1":"An implementation of [IReferences](../ireferences) that allows you to store and locate component references.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ae8146be5ebb33b9f6c13db928133146","permalink":"/python/commons/refer/references/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/refer/references/","section":"python","summary":"Implements: IReferences\nDescription The References class allows you to store and locate component references.\nConstructors Creates a new instance of references and initializes it with references.\n References(tuples: Sequence[Any] = None)\n  tuples: Sequence[Any] - (optional) a list of values where odd elements are locators and the following even elements are component references  Fields _references A list of values where odd elements are locators and the following even elements are component references.","tags":null,"title":"References","type":"docs","url":"/hugo-docs/python/commons/refer/references/","weight":0,"wordcount":539},{"authors":null,"categories":null,"date":-62135596800,"description":"Chainable decorator for IReferences that allows to inject additional capabilities such as automatic component creation, automatic registration and opening.\n","dir":"golang/container/refer/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ReferencesDecorator","lvl1":"Chainable decorator for IReferences that allows to inject additional capabilities such as automatic component creation, automatic registration and opening.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c9037be8976e6b611b96dfe9b0e04169","permalink":"/golang/container/refer/references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/container/refer/references_decorator/","section":"golang","summary":"Implements: IReferences\nDescription The ReferencesDecorator class allows you to create chainable decorators for IReferences that allow to inject addtional capabilities, such as automatic component creation, automatic registration and opening.\nConstructors NewReferencesDecorator Creates a new instance of the decorator.\n NewReferencesDecorator(nextReferences IReferences, topReferences IReferences) *ReferencesDecorator\n  nextReferences: IReferences - next references or decorator in the chain. topReferences: IReferences - decorator at the top of the chain.  Fields NextReferences Next references or decorator in the chain.","tags":null,"title":"ReferencesDecorator","type":"docs","url":"/hugo-docs/golang/container/refer/references_decorator/","weight":0,"wordcount":475},{"authors":null,"categories":null,"date":-62135596800,"description":"Chainable decorator for IReferences that allows to inject additional capabilities such as automatic component creation, automatic registration and opening.\n","dir":"node/container/refer/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"ReferencesDecorator","lvl1":"Chainable decorator for IReferences that allows to inject additional capabilities such as automatic component creation, automatic registration and opening.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"38a6e1affb6c220524fbc3ae5465d118","permalink":"/node/container/refer/references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/container/refer/references_decorator/","section":"node","summary":"Implements: IReferences\nDescription The ReferencesDecorator class allows you to create chainable decorators for IReferences that allow to inject addtional capabilities, such as automatic component creation, automatic registration and opening.\nConstructors Creates a new instance of the decorator.\n public constructor(nextReferences: IReferences, topReferences: IReferences)\n  nextReferences: IReferences - next references or decorator in the chain. topReferences: IReferences - decorator at the top of the chain.  Fields nextReferences Next references or decorator in the chain.","tags":null,"title":"ReferencesDecorator","type":"docs","url":"/hugo-docs/node/container/refer/references_decorator/","weight":0,"wordcount":462},{"authors":null,"categories":null,"date":-62135596800,"description":"Chainable decorator for IReferences that allows to inject additional capabilities such as automatic component creation, automatic registration and opening.\n","dir":"python/container/refer/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"ReferencesDecorator","lvl1":"Chainable decorator for IReferences that allows to inject additional capabilities such as automatic component creation, automatic registration and opening.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bbd2d7ed41a604c245e839184978a16c","permalink":"/python/container/refer/references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/container/refer/references_decorator/","section":"python","summary":"Implements: IReferences\nDescription The ReferencesDecorator class allows you to create chainable decorators for IReferences that allow to inject addtional capabilities, such as automatic component creation, automatic registration and opening.\nConstructors Creates a new instance of the decorator.\n ReferencesDecorator(next_references: Optional[IReferences], top_references: Optional[IReferences])\n  next_references: Optional[IReferences] - next references or decorator in the chain. top_references: Optional[IReferences] - decorator at the top of the chain.  Fields next_references Next references or decorator in the chain.","tags":null,"title":"ReferencesDecorator","type":"docs","url":"/hugo-docs/python/container/refer/references_decorator/","weight":0,"wordcount":452},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Reflect","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d18d5e5d05b292d2c4edc86374136275","permalink":"/dart/commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/reflect/","section":"dart","summary":"","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/dart/commons/reflect/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Reflect package contains classes that can be used to examine the properties, methods and type of a class. In addition, it can be used to dynamically set the values of a property and create objects of a specific type.\n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1624238566,"lvl0":"Reflect","lvl1":"\nThe Reflect package contains classes that can be used to examine the properties, methods and type of a class. In addition, it can be used to dynamically set the values of a property and create objects of a specific type.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"13be9f363e001c1e58ffa5a9a2242188","permalink":"/golang/commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/reflect/","section":"golang","summary":"Classes MethodReflector Helper class used to perform method introspection and dynamic invocation. This class has symmetric implementation across all languages supported by the Pip.Services toolkit and used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, this MethodReflector treats all method names as case insensitive.\nObjectReader Helper class used to perform property introspection and dynamic reading. In contrast to PropertyReflector which only introspects regular objects, this ObjectReader is also able to handle maps and arrays.","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/golang/commons/reflect/","weight":0,"wordcount":399},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Reflect package contains classes that can be used to examine the properties, methods and type of a class. In addition, it can be used to dynamically set the values of a property and create objects of a specific type.\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1621530648,"lvl0":"Reflect","lvl1":"\nThe Reflect package contains classes that can be used to examine the properties, methods and type of a class. In addition, it can be used to dynamically set the values of a property and create objects of a specific type.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ea62b45064a687b99c9be3d87ea0ae9d","permalink":"/net/commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/reflect/","section":"net","summary":"Classes MethodReflector Helper class to perform method introspection and dynamic invocation. This class has symmetric implementation across all languages supported by Pip.Services toolkit and used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, this MethodReflector treats all method names as case insensitive.\nObjectReader Helper class to perform property introspection and dynamic reading. In contrast to PropertyReflector which only introspects regular objects, this ObjectReader is also able to handle maps and arrays.","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/net/commons/reflect/","weight":0,"wordcount":390},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Reflect package contains classes that can be used to examine the properties, methods and type of a class. In addition, it can be used to dynamically set the values of a property and create objects of a specific type.\n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1621279318,"lvl0":"Reflect","lvl1":"\nThe Reflect package contains classes that can be used to examine the properties, methods and type of a class. In addition, it can be used to dynamically set the values of a property and create objects of a specific type.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8ab6f2d1f82fc9e8559321c9d4928b29","permalink":"/node/commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/reflect/","section":"node","summary":"Classes MethodReflector Helper class to perform method introspection and dynamic invocation. This class has symmetric implementation across all languages supported by Pip.Services toolkit and used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, this MethodReflector treats all method names as case insensitive.\nObjectReader Helper class to perform property introspection and dynamic reading. In contrast to PropertyReflector which only introspects regular objects, this ObjectReader is also able to handle maps and arrays.","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/node/commons/reflect/","weight":0,"wordcount":390},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Reflect package contains classes that can be used to examine the properties, methods and type of a class. In addition, it can be used to dynamically set the values of a property and create objects of a specific type.\n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":1620199565,"lvl0":"Reflect","lvl1":"\nThe Reflect package contains classes that can be used to examine the properties, methods and type of a class. In addition, it can be used to dynamically set the values of a property and create objects of a specific type.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4be3a87bdbe531566b3cf6fbc463c9e2","permalink":"/python/commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/reflect/","section":"python","summary":"Classes MethodReflector Helper class to perform method introspection and dynamic invocation. This class has symmetric implementation across all languages supported by Pip.Services toolkit and used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, this MethodReflector treats all method names as case insensitive.\nObjectReader Helper class to perform property introspection and dynamic reading. In contrast to PropertyReflector which only introspects regular objects, this ObjectReader is also able to handle maps and arrays.","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/python/commons/reflect/","weight":0,"wordcount":390},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract client that calls remote endpoints using the HTTP/REST protocol.\n","dir":"golang/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"RestClient","lvl1":"Abstract client that calls remote endpoints using the HTTP/REST protocol.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d5d493caeffc99031fa3aa7ef7eb243e","permalink":"/golang/rpc/clients/rest_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/rpc/clients/rest_client/","section":"golang","summary":"Description The RestClient class allows you to create clients that call remote endpoints using the HTTP/REST protocol.\nConfiguration parameters  base_route: base route for a remote URI connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it   options:  retries: number of retries (default: 3) connect_timeout: connection timeout in milliseconds (default: 10 sec) timeout: invocation timeout in milliseconds (default: 10 sec) correlationId: place for adding correalationId, query - in query string, headers - in headers, both - in query and headers (default: query)    References  *:logger:*:*:1.","tags":null,"title":"RestClient","type":"docs","url":"/hugo-docs/golang/rpc/clients/rest_client/","weight":0,"wordcount":745},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract client that calls remote endpoints using the HTTP/REST protocol.\n","dir":"node/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"RestClient","lvl1":"Abstract client that calls remote endpoints using the HTTP/REST protocol.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c082e06c20be28bda10c644a2d2120ff","permalink":"/node/rpc/clients/rest_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/rpc/clients/rest_client/","section":"node","summary":"Implements: IConfigurable, IReferenceable, IOpenable\nDescription The RestClient class allows you to create clients that call remote endpoints using the HTTP/REST protocol.\nConfiguration parameters  base_route: base route for a remote URI connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it   options:  retries: number of retries (default: 3) connect_timeout: connection timeout in milliseconds (default: 10 sec) timeout: invocation timeout in milliseconds (default: 10 sec) correlationId: place for adding correalationId, query - in query string, headers - in headers, both - in query and headers (default: query)    References  *:logger:*:*:1.","tags":null,"title":"RestClient","type":"docs","url":"/hugo-docs/node/rpc/clients/rest_client/","weight":0,"wordcount":728},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract client that calls remote endpoints using the HTTP/REST protocol.\n","dir":"python/rpc/clients/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"RestClient","lvl1":"Abstract client that calls remote endpoints using the HTTP/REST protocol.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7626a8bc13d4c30a439a9cde9ee257fd","permalink":"/python/rpc/clients/rest_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/rpc/clients/rest_client/","section":"python","summary":"Implements: IConfigurable, IReferenceable, IOpenable\nDescription The RestClient class allows you to create clients that call remote endpoints using the HTTP/REST protocol.\nConfiguration parameters  base_route: base route for a remote URI connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it   options:  retries: number of retries (default: 3) connect_timeout: connection timeout in milliseconds (default: 10 sec) timeout: invocation timeout in milliseconds (default: 10 sec) correlation_id: place for adding correalationId, query - in query string, headers - in headers, both - in query and headers (default: query)    References  *:logger:*:*:1.","tags":null,"title":"RestClient","type":"docs","url":"/hugo-docs/python/rpc/clients/rest_client/","weight":0,"wordcount":685},{"authors":null,"categories":null,"date":-62135596800,"description":"Handles REST services' operations.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"RestOperations","lvl1":"Handles REST services' operations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"101c71489f457b7d65658c605444fed8","permalink":"/golang/rpc/services/rest_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/rpc/services/rest_operations/","section":"golang","summary":"Description The RestOperations class allows you to handle REST services' operations.\nConstructors NewRestOperations NewRestOperations creates new instance of RestOperations\n NewRestOperations() *RestOperations\n Fields Logger Composite logger component\n Logger: CompositeLogger\n Counters Counter component\n Counters: CompositeCounters\n DependencyResolver Dependency resolver component\n DependencyResolver: DependencyResolver\n  Methods Configure Configures a component by passing its configuration parameters.\n (c *RestOperations) Configure(config *cconf.ConfigParams)\n  config: *cconf.ConfigParams - configuration parameters to be set.","tags":null,"title":"RestOperations","type":"docs","url":"/hugo-docs/golang/rpc/services/rest_operations/","weight":0,"wordcount":565},{"authors":null,"categories":null,"date":-62135596800,"description":"Handles REST services' operations.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"RestOperations","lvl1":"Handles REST services' operations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2a1ac43a691d2f7a15151f8f3f643d24","permalink":"/node/rpc/services/rest_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/rpc/services/rest_operations/","section":"node","summary":"Implements: IConfigurable, IReferenceable\nDescription The RestOperations class allows you to handle REST services' operations.\nFields _logger Composite logger component\n protected _logger: CompositeLogger = CompositeLogger()\n _counters Counter component\n protected _counters: CompositeCounters = CompositeCounters()\n _dependencyResolver Dependency resolver component\n protected _dependencyResolver: DependencyResolver = DependencyResolver()\n  Instance methods configure Configures a component by passing its configuration parameters.\n public configure(config: ConfigParams): void\n  config: ConfigParams - configuration parameters to be set.","tags":null,"title":"RestOperations","type":"docs","url":"/hugo-docs/node/rpc/services/rest_operations/","weight":0,"wordcount":562},{"authors":null,"categories":null,"date":-62135596800,"description":"Handles REST services' operations.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622846977,"lvl0":"RestOperations","lvl1":"Handles REST services' operations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0848ade21a3454fad25e27591cec70d7","permalink":"/python/rpc/services/rest_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/rpc/services/rest_operations/","section":"python","summary":"Implements: IConfigurable, IReferenceable\nDescription The RestOperations class allows you to handle REST services' operations.\nFields _logger Composite logger component\n _logger: CompositeLogger = CompositeLogger()\n _counters Counter component\n _counters: CompositeCounters = CompositeCounters()\n _dependency_resolver Dependency resolver component\n _dependency_resolver: DependencyResolver = DependencyResolver()\n  Instance methods configure Configures a component by passing its configuration parameters.\n configure(config: ConfigParams)\n  config: ConfigParams - configuration parameters to be set.  _get_correlation_id Returns a correlationId from a request","tags":null,"title":"RestOperations","type":"docs","url":"/hugo-docs/python/rpc/services/rest_operations/","weight":0,"wordcount":427},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract service that receives remove calls via HTTP/REST protocol.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":1300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"RestService","lvl1":"Abstract service that receives remove calls via HTTP/REST protocol.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5ce93d96969e5c34a215bc9a77a6da5c","permalink":"/golang/rpc/services/rest_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/golang/rpc/services/rest_service/","section":"golang","summary":"Implements: IRegisterable\nDescription The RestService class allows you to create REST services that receive remote calls via the HTTP/REST protocol.\nConfiguration parameters  base_route: base route for remote URI dependencies:  endpoint: override for HTTP Endpoint dependency controller: override for Controller dependency   connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it   credential: the HTTPS credentials:  ssl_key_file: SSL private key in PEM ssl_crt_file: SSL certificate in PEM ssl_ca_file: certificate authorities (root cerfiticates) in PEM    References  *:logger:*:*:1.","tags":null,"title":"RestService","type":"docs","url":"/hugo-docs/golang/rpc/services/rest_service/","weight":0,"wordcount":1204},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract service that receives remove calls via HTTP/REST protocol.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":1200,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"RestService","lvl1":"Abstract service that receives remove calls via HTTP/REST protocol.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"110e68034b5be7ad6197e8f712db6067","permalink":"/node/rpc/services/rest_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/node/rpc/services/rest_service/","section":"node","summary":"Implements: IConfigurable, IReferenceable, IOpenable, IUnreferenceable, IRegisterable\nDescription The RestService class allows you to create REST services that receive remote calls via the HTTP/REST protocol.\nConfiguration parameters  base_route: base route for remote URI dependencies:  endpoint: override for HTTP Endpoint dependency controller: override for Controller dependency   connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it   credential: the HTTPS credentials:  ssl_key_file: SSL private key in PEM ssl_crt_file: SSL certificate in PEM ssl_ca_file: certificate authorities (root cerfiticates) in PEM    References  *:logger:*:*:1.","tags":null,"title":"RestService","type":"docs","url":"/hugo-docs/node/rpc/services/rest_service/","weight":0,"wordcount":1152},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract service that receives remove calls via HTTP/REST protocol.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":1000,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"RestService","lvl1":"Abstract service that receives remove calls via HTTP/REST protocol.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2cac57cf82ccb3ad9ccb4475769e1d55","permalink":"/python/rpc/services/rest_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/python/rpc/services/rest_service/","section":"python","summary":"Implements: IConfigurable, IReferenceable, IOpenable, IUnreferenceable, IRegisterable\nDescription The RestService class allows you to create REST services that receive remote calls via the HTTP/REST protocol.\nConfiguration parameters  base_route: base route for remote URI dependencies:  endpoint: override for HTTP Endpoint dependency controller: override for Controller dependency   connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it   credential: the HTTPS credentials:  ssl_key_file: SSL private key in PEM ssl_crt_file: SSL certificate in PEM ssl_ca_file: certificate authorities (root cerfiticates) in PEM    References  *:logger:*:*:1.","tags":null,"title":"RestService","type":"docs","url":"/hugo-docs/python/rpc/services/rest_service/","weight":0,"wordcount":961},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/ecommrce/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Reviews Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"94b293fa9ff00cc68f4c36cd5a8fba4a","permalink":"/microservices/ecommrce/reviews/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/ecommrce/reviews/","section":"microservices","summary":"Keeps a list of supported reviews that are referenced from other content microservices.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Reviews Microservice","type":"docs","url":"/hugo-docs/microservices/ecommrce/reviews/","weight":0,"wordcount":40},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Roles Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"77826a4c9c729575d6c372ac5d6fbee4","permalink":"/microservices/users/roles/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/roles/","section":"microservices","summary":"Provides basic role-based authorization mechanism for users.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Golang, Dart  ","tags":null,"title":"Roles Microservice","type":"docs","url":"/hugo-docs/microservices/users/roles/","weight":0,"wordcount":37},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/run/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Run","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3c641e2904472de07705af939fd23127","permalink":"/dart/commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/run/","section":"dart","summary":"","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/dart/commons/run/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Run package contains a set of interfaces and classes for the standard lifecycle of objects (opened,  closed, openable, closable, runnable). In addition, it has several helper classes for lifecycle management.  \n","dir":"golang/commons/run/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1624241753,"lvl0":"Run","lvl1":"\nThe Run package contains a set of interfaces and classes for the standard lifecycle of objects (opened,  closed, openable, closable, runnable). In addition, it has several helper classes for lifecycle management.  \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6d227b648bd42e36695c2a996774c87a","permalink":"/golang/commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/run/","section":"golang","summary":"Interfaces ICleanable Interface for components that should clean their state. Cleaning state most often is used during testing. But there may be situations when it can be done in production.\nIClosable Interface for components that require explicit closure. For components that require opening as well as closing use the IOpenable interface instead.\nIExecutable Interface for components that can be called to execute work.\nINotifiable Interface for components that can be asynchronously notified.","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/golang/commons/run/","weight":0,"wordcount":235},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Run package contains a set of interfaces and classes for the standard lifecycle of objects (opened,  closed, openable, closable, runnable). In addition, it has several helper classes for lifecycle management.  \n","dir":"net/commons/run/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621530648,"lvl0":"Run","lvl1":"\nThe Run package contains a set of interfaces and classes for the standard lifecycle of objects (opened,  closed, openable, closable, runnable). In addition, it has several helper classes for lifecycle management.  \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"39a5f77b5b0c630a4e43dbb57fec603c","permalink":"/net/commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/run/","section":"net","summary":"Interfaces ICleanable Interface for components that should clean their state. Cleaning state most often is used during testing. But there may be situations when it can be done in production.\nIClosable Interface for components that require explicit closure. For components that require opening as well as closing use IOpenable interface instead.\nIExecutable Interface for components that can be called to execute work.\nINotifiable Interface for components that can be asynchronously notified.","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/net/commons/run/","weight":0,"wordcount":233},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Run package contains a set of interfaces and classes for the standard lifecycle of objects (opened,  closed, openable, closable, runnable). In addition, it has several helper classes for lifecycle management.  \n","dir":"node/commons/run/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621279318,"lvl0":"Run","lvl1":"\nThe Run package contains a set of interfaces and classes for the standard lifecycle of objects (opened,  closed, openable, closable, runnable). In addition, it has several helper classes for lifecycle management.  \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"42a86328b7dba3fcd4fae189b0c20f56","permalink":"/node/commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/run/","section":"node","summary":"Interfaces ICleanable Interface for components that should clean their state. Cleaning state most often is used during testing. But there may be situations when it can be done in production.\nIClosable Interface for components that require explicit closure. For components that require opening as well as closing use IOpenable interface instead.\nIExecutable Interface for components that can be called to execute work.\nINotifiable Interface for components that can be asynchronously notified.","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/node/commons/run/","weight":0,"wordcount":233},{"authors":null,"categories":null,"date":-62135596800,"description":"\nThe Run package contains a set of interfaces and classes for the standard lifecycle of objects (opened,  closed, openable, closable, runnable). In addition, it has several helper classes for lifecycle management.  \n","dir":"python/commons/run/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621010165,"lvl0":"Run","lvl1":"\nThe Run package contains a set of interfaces and classes for the standard lifecycle of objects (opened,  closed, openable, closable, runnable). In addition, it has several helper classes for lifecycle management.  \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e3c45daca439ddd466d31f5394b62eae","permalink":"/python/commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/run/","section":"python","summary":"Interfaces ICleanable Interface for components that should clean their state. Cleaning state most often is used during testing. But there may be situations when it can be done in production.\nIClosable Interface for components that require explicit closure. For components that require opening as well as closing use IOpenable interface instead.\nIExecutable Interface for components that can be called to execute work.\nINotifiable Interface for components that can be asynchronously notified.","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/python/commons/run/","weight":0,"wordcount":233},{"authors":null,"categories":null,"date":-62135596800,"description":"References decorator that automatically opens to newly added components that implement the [IOpenable](../../../commons/run/iopenable) interface and closes removed components that implement the [IClosable](../../../commons/run/iclosable) interface.\n","dir":"golang/container/refer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624022469,"lvl0":"RunReferencesDecorator","lvl1":"References decorator that automatically opens to newly added components that implement the [IOpenable](../../../commons/run/iopenable) interface and closes removed components that implement the [IClosable](../../../commons/run/iclosable) interface.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ae2b8c9d8c6d9c896bc9d39d81025365","permalink":"/golang/container/refer/run_references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/container/refer/run_references_decorator/","section":"golang","summary":"Implements: ReferencesDecorator\nDescription The RunReferencesDecorator class allows you to create a references decorator that automatically opens to newly added components that implement the IOpenable interface and closes removed components that implement the IClosable interface.\nConstructors NewRunReferencesDecorator Creates a new instance of the decorator.\n NewRunReferencesDecorator(nextReferences IReferences, topReferences IReferences) *RunReferencesDecorator\n  nextReferences: IReferences - next references or decorator in the chain. topReferences: IReferences - decorator at the top of the chain.","tags":null,"title":"RunReferencesDecorator","type":"docs","url":"/hugo-docs/golang/container/refer/run_references_decorator/","weight":0,"wordcount":286},{"authors":null,"categories":null,"date":-62135596800,"description":"References decorator that automatically opens to newly added components that implement the [IOpenable](../../../commons/run/iopenable) interface and closes removed components that implement the [IClosable](../../../commons/run/iclosable) interface.\n","dir":"node/container/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"RunReferencesDecorator","lvl1":"References decorator that automatically opens to newly added components that implement the [IOpenable](../../../commons/run/iopenable) interface and closes removed components that implement the [IClosable](../../../commons/run/iclosable) interface.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ffad7763b9db3f825d5ff0a16c502d90","permalink":"/node/container/refer/run_references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/container/refer/run_references_decorator/","section":"node","summary":"Extends: ReferencesDecorator\nImplements: IOpenable\nDescription The RunReferencesDecorator class allows you to create a references decorator that automatically opens to newly added components that implement the IOpenable interface and closes removed components that implement the IClosable interface.\nConstructors Creates a new instance of the decorator.\n public constructor(nextReferences: IReferences, topReferences: IReferences)\n  nextReferences: IReferences - next references or decorator in the chain. topReferences: IReferences - decorator at the top of the chain.","tags":null,"title":"RunReferencesDecorator","type":"docs","url":"/hugo-docs/node/container/refer/run_references_decorator/","weight":0,"wordcount":198},{"authors":null,"categories":null,"date":-62135596800,"description":"References decorator that automatically opens to newly added components that implement the [IOpenable](../../../commons/run/iopenable) interface and closes removed components that implement the [IClosable](../../../commons/run/iclosable) interface.\n","dir":"python/container/refer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622849575,"lvl0":"RunReferencesDecorator","lvl1":"References decorator that automatically opens to newly added components that implement the [IOpenable](../../../commons/run/iopenable) interface and closes removed components that implement the [IClosable](../../../commons/run/iclosable) interface.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1c2406155981668ab77f62c52101a1ca","permalink":"/python/container/refer/run_references_decorator/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/container/refer/run_references_decorator/","section":"python","summary":"Implements: ReferencesDecorator, IOpenable\nDescription The RunReferencesDecorator class allows you to create a references decorator that automatically opens to newly added components that implement the IOpenable interface and closes removed components that implement the IClosable interface.\nConstructors Creates a new instance of the decorator.\n RunReferencesDecorator(next_references: Optional[IReferences], top_references: Optional[IReferences])\n  next_references: Optional[IReferences] - next references or decorator in the chain. top_references: Optional[IReferences] - decorator at the top of the chain.  Fields _opened Flag of the component state","tags":null,"title":"RunReferencesDecorator","type":"docs","url":"/hugo-docs/python/container/refer/run_references_decorator/","weight":0,"wordcount":195},{"authors":null,"categories":null,"date":-62135596800,"description":"Basic schema used to validate values against a set of validation rules.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"Schema","lvl1":"Basic schema used to validate values against a set of validation rules.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4a147e797fca2b0c9f5ce34895c64777","permalink":"/golang/commons/validate/schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/validate/schema/","section":"golang","summary":"Description The Schema class provides a basic schema to validate values against a set of validation rules.\nImportant points\n This schema is used as a basis for specific schemas to validate objects, project properties, arrays and maps.  Constructors NewSchemaWithRules Creates a new instance of validation schema and sets its values.\nSee IValidationRule\n NewSchemaWithRules(required bool, rules []IValidationRule) *Schema\n  required: bool - (optional) true to always require non-nil values.","tags":null,"title":"Schema","type":"docs","url":"/hugo-docs/golang/commons/validate/schema/","weight":0,"wordcount":636},{"authors":null,"categories":null,"date":-62135596800,"description":"Basic schema used to validate values against a set of validation rules.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"Schema","lvl1":"Basic schema used to validate values against a set of validation rules.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"451eee7e7629135fd295cea7dfe35a7d","permalink":"/net/commons/validate/schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/commons/validate/schema/","section":"net","summary":"Description The Schema class provides a basic schema to validate values against a set of validation rules.\nImportant points\n This schema is used as a basis for specific schemas to validate objects, project properties, arrays and maps.  Constructors Creates a new instance of validation schema and sets its values.\nSee IValidationRule\n public Schema(bool required, List\u0026lt;IValidationRule\u0026gt; rules)\n  required: bool - (optional) true to always require non-null values.","tags":null,"title":"Schema","type":"docs","url":"/hugo-docs/net/commons/validate/schema/","weight":0,"wordcount":532},{"authors":null,"categories":null,"date":-62135596800,"description":"Basic schema used to validate values against a set of validation rules.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621285883,"lvl0":"Schema","lvl1":"Basic schema used to validate values against a set of validation rules.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"54ba06d2dc5603f4b4062de1e8b4c9c0","permalink":"/node/commons/validate/schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/commons/validate/schema/","section":"node","summary":"Description The Schema class provides a basic schema to validate values against a set of validation rules.\nImportant points\n This schema is used as a basis for specific schemas to validate objects, project properties, arrays and maps.  Constructors Creates a new instance of validation schema and sets its values.\nSee IValidationRule\n public constructor(required?: boolean, rules?: IValidationRule[])\n  required: boolean - (optional) true to always require non-null values.","tags":null,"title":"Schema","type":"docs","url":"/hugo-docs/node/commons/validate/schema/","weight":0,"wordcount":578},{"authors":null,"categories":null,"date":-62135596800,"description":"Basic schema used to validate values against a set of validation rules.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1621018969,"lvl0":"Schema","lvl1":"Basic schema used to validate values against a set of validation rules.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b875198ea7c1982d3456f2e356bcf9e9","permalink":"/python/commons/validate/schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/commons/validate/schema/","section":"python","summary":"Description The Schema class provides a basic schema to validate values against a set of validation rules.\nImportant points\n This schema is used as a basis for specific schemas to validate objects, project properties, arrays and maps.  Constructors Creates a new instance of validation schema and sets its values.\nSee IValidationRule\n Schema(required: bool, rules: List[IValidationRule])\n  required: bool - (optional) true to always require non-None values. rules: List[IValidationRule] - (optional) a list with validation rules.","tags":null,"title":"Schema","type":"docs","url":"/hugo-docs/python/commons/validate/schema/","weight":0,"wordcount":571},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a set of interfaces and classes used to create services and handle their operations.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1624305939,"lvl0":"Services","lvl1":"This package contains a set of interfaces and classes used to create services and handle their operations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d9f7161cf8930f227e1ed07ab275dcbd","permalink":"/golang/rpc/services/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/services/","section":"golang","summary":"Interfaces IRegisterable Interface to perform on-demand registrations.\nISwaggerService Interface to perform Swagger registrations.\nClasses AboutOperations Obtains information about running services\nCommandableHttpService Abstract service that receives remote calls via HTTP protocol to operations automatically generated for commands defined in ICommandable. Each command is exposed as a POST operation that receives all parameters in body object.\nCommandable services require only three lines of code to implement a robust external HTTP-based remote interface.","tags":null,"title":"Services","type":"docs","url":"/hugo-docs/golang/rpc/services/","weight":0,"wordcount":201},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create Prometheus metric services.\n","dir":"node/prometheus/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622670875,"lvl0":"Services","lvl1":"This package contains classes used to create Prometheus metric services.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"82d05e804b71747a3183ad15c3c339d8","permalink":"/node/prometheus/services/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/prometheus/services/","section":"node","summary":" Classes PrometheusMetricsService Service that exposes the \u0026quot;/metrics\u0026quot; and \u0026quot;/metricsandreset\u0026quot; routes for Prometheus to obtain performance metrics.\n ","tags":null,"title":"Services","type":"docs","url":"/hugo-docs/node/prometheus/services/","weight":0,"wordcount":16},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a set of interfaces and classes used to create services and handle their operations.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1623078433,"lvl0":"Services","lvl1":"This package contains a set of interfaces and classes used to create services and handle their operations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c05861199da6bc01a58f3fb86461d904","permalink":"/node/rpc/services/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/services/","section":"node","summary":"Interfaces IRegisterable Interface to perform on-demand registrations.\nISwaggerService Interface to perform Swagger registrations.\nClasses AboutOperations Obtains information about running services\nCommandableHttpService Abstract service that receives remote calls via HTTP protocol to operations automatically generated for commands defined in ICommandable. Each command is exposed as a POST operation that receives all parameters in body object.\nCommandable services require only three lines of code to implement a robust external HTTP-based remote interface.","tags":null,"title":"Services","type":"docs","url":"/hugo-docs/node/rpc/services/","weight":0,"wordcount":212},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains interfaces and classes used to create GRPC services.\n","dir":"python/grpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622498815,"lvl0":"Services","lvl1":"This package contains interfaces and classes used to create GRPC services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7f31a5eec22b9bc05dbe093725a1fa77","permalink":"/python/grpc/services/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/grpc/services/","section":"python","summary":"Interfaces IRegisterable Interface to perform on-demand registrations.\nClasses CommandableGrpcService Abstract service that receives commands via GRPC protocol to operations automatically generated for commands defined in ICommandable. Each command is exposed as an invoke method that receives a command name and parameters.\nGrpcEndpoint Used for creating GRPC endpoints. An endpoint is a URL, at which a given service can be accessed by a client.\nGrpcService Abstract service that receives remote calls via GRPC protocol.","tags":null,"title":"Services","type":"docs","url":"/hugo-docs/python/grpc/services/","weight":0,"wordcount":73},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to create Prometheus metric services.\n","dir":"python/prometheus/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621705512,"lvl0":"Services","lvl1":"This package contains classes used to create Prometheus metric services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7c512c30efe366b3f66bdd8a6568ab93","permalink":"/python/prometheus/services/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/prometheus/services/","section":"python","summary":" Classes PrometheusMetricsService Service that exposes the \u0026quot;/metrics\u0026quot; and \u0026quot;/metricsandreset\u0026quot; routes for Prometheus to obtain performance metrics.\n ","tags":null,"title":"Services","type":"docs","url":"/hugo-docs/python/prometheus/services/","weight":0,"wordcount":16},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a set of interfaces and classes used to create services and handle their operations.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622837486,"lvl0":"Services","lvl1":"This package contains a set of interfaces and classes used to create services and handle their operations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"65fc1e377bf6f4c96b1c6616679ec1dc","permalink":"/python/rpc/services/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/services/","section":"python","summary":"Interfaces IRegisterable Interface to perform on-demand registrations.\nISwaggerService Interface to perform Swagger registrations.\nClasses AboutOperations Obtains information about running services\nCommandableHttpService Abstract service that receives remote calls via HTTP protocol to operations automatically generated for commands defined in ICommandable. Each command is exposed as a POST operation that receives all parameters in body object.\nCommandable services require only three lines of code to implement a robust external HTTP-based remote interface.","tags":null,"title":"Services","type":"docs","url":"/hugo-docs/python/rpc/services/","weight":0,"wordcount":212},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Sessions Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f4c5a9ae8116908a23ed4f24faf6d5c3","permalink":"/microservices/users/sessions/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/sessions/","section":"microservices","summary":"Opens and closes user sessions and stores sessiond data.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Golang, Dart  ","tags":null,"title":"Sessions Microservice","type":"docs","url":"/hugo-docs/microservices/users/sessions/","weight":0,"wordcount":39},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Settings Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a690c93d6c21c80ffc354fd01ab64a59","permalink":"/microservices/infrastructure/settings/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/settings/","section":"microservices","summary":"Manages system settings separated by individual sections. Each section contains multiple key-value parameter pairs.\n Server implementations: NodeJS, .NET, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .NET, Golang, Dart  ","tags":null,"title":"Settings Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/settings/","weight":0,"wordcount":46},{"authors":null,"categories":null,"date":-62135596800,"description":"Random shutdown component that crashes a process using various methods.\n","dir":"golang/components/test/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"Shutdown","lvl1":"Random shutdown component that crashes a process using various methods.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a5b9e4ebaefdb62814a4ca32ae8add19","permalink":"/golang/components/test/shutdown/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/test/shutdown/","section":"golang","summary":"Implements: IConfigurable, IOpenable\nDescription The Shutdown class allows you to create a random shutdown component that crashes a process using various methods.\nImportant points\n The component is usually used for testing, but it can also be used in production to randomly crash microservices. It follows the concept of \u0026ldquo;Chaos Monkey\u0026rdquo; popularized by Netflix.  Configuration parameters  mode: null - crash by NullPointer excepiton, zero - crash by dividing by zero, exception = crash by unhandled exception, exit - exit the process min_timeout: minimum crash timeout in milliseconds (default: 5 mins) max_timeout: maximum crash timeout in milliseconds (default: 15 minutes)  Methods close Closes component and frees used resources.","tags":null,"title":"Shutdown","type":"docs","url":"/hugo-docs/golang/components/test/shutdown/","weight":0,"wordcount":213},{"authors":null,"categories":null,"date":-62135596800,"description":"Random shutdown component that crashes a process using various methods.\n","dir":"net/components/test/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"Shutdown","lvl1":"Random shutdown component that crashes a process using various methods.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"11ed10226876109035918f78ea9eec20","permalink":"/net/components/test/shutdown/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/test/shutdown/","section":"net","summary":"Inherits: IConfigurable, IOpenable\nDescription The Shutdown class allows you to create a random shutdown component that crashes a process using various methods.\nImportant points\n The component is usually used for testing, but it can also be used in production to randomly crash microservices. It follows the concept of \u0026ldquo;Chaos Monkey\u0026rdquo; popularized by Netflix.  Configuration parameters  mode: null - crash by NullPointer excepiton, zero - crash by dividing by zero, exception = crash by unhandled exception, exit - exit the process min_timeout: minimum crash timeout in milliseconds (default: 5 mins) max_timeout: maximum crash timeout in milliseconds (default: 15 minutes)  Instance methods close Closes component and frees used resources.","tags":null,"title":"Shutdown","type":"docs","url":"/hugo-docs/net/components/test/shutdown/","weight":0,"wordcount":214},{"authors":null,"categories":null,"date":-62135596800,"description":"Random shutdown component that crashes a process using various methods.\n","dir":"node/components/test/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"Shutdown","lvl1":"Random shutdown component that crashes a process using various methods.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"588fb67ebf631d7efcfba58f6138061c","permalink":"/node/components/test/shutdown/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/test/shutdown/","section":"node","summary":"Implements: IConfigurable, IOpenable\nDescription The Shutdown class allows you to create a random shutdown component that crashes a process using various methods.\nImportant points\n The component is usually used for testing, but it can also be used in production to randomly crash microservices. It follows the concept of \u0026ldquo;Chaos Monkey\u0026rdquo; popularized by Netflix.  Configuration parameters  mode: null - crash by NullPointer excepiton, zero - crash by dividing by zero, exception = crash by unhandled exception, exit - exit the process min_timeout: minimum crash timeout in milliseconds (default: 5 mins) max_timeout: maximum crash timeout in milliseconds (default: 15 minutes)  Instance methods close Closes component and frees used resources.","tags":null,"title":"Shutdown","type":"docs","url":"/hugo-docs/node/components/test/shutdown/","weight":0,"wordcount":214},{"authors":null,"categories":null,"date":-62135596800,"description":"Random shutdown component that crashes a process using various methods.\n","dir":"python/components/test/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621873014,"lvl0":"Shutdown","lvl1":"Random shutdown component that crashes a process using various methods.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5362eb253f4a01f1d97b28d040b4f6b5","permalink":"/python/components/test/shutdown/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/test/shutdown/","section":"python","summary":"Implements: IConfigurable, IOpenable\nDescription The Shutdown class allows you to create a random shutdown component that crashes a process using various methods.\nImportant points\n The component is usually used for testing, but it can also be used in production to randomly crash microservices. It follows the concept of \u0026ldquo;Chaos Monkey\u0026rdquo; popularized by Netflix.  Configuration parameters  mode: None - crash by NullPointer excepiton, zero - crash by dividing by zero, exception = crash by unhandled exception, exit - exit the process min_timeout: minimum crash timeout in milliseconds (default: 5 mins) max_timeout: maximum crash timeout in milliseconds (default: 15 minutes)  Instance methods close Closes a component and frees used resources.","tags":null,"title":"Shutdown","type":"docs","url":"/hugo-docs/python/components/test/shutdown/","weight":0,"wordcount":206},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"SMS Delivery Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eb2b657bb859c88a74f7bcee3021b2bf","permalink":"/microservices/infrastructure/sms_delivery/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/sms_delivery/","section":"microservices","summary":"SMS sending microservice is intended mostly to send sms to specified recipients.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .NET, Dart  ","tags":null,"title":"SMS Delivery Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/sms_delivery/","weight":0,"wordcount":42},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Sms Settings Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"051074103434e974e1f211fd66a68b42","permalink":"/microservices/users/sms_settings/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/sms_settings/","section":"microservices","summary":"Keeps settings of sms recipients.\n Server implementations: NodeJS, Dart Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Dart  This microservice has optional dependencies on the following microservices:\n Party Activities - to log user activities Message Templates - to get message templates SMS Delivery - to send sms messages  ","tags":null,"title":"Sms Settings Microservice","type":"docs","url":"/hugo-docs/microservices/users/sms_settings/","weight":0,"wordcount":64},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a field name and the order type used to sort query results.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"SortField","lvl1":"Defines a field name and the order type used to sort query results.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ddba126007c965cdf0d4ec92f56913b3","permalink":"/golang/commons/data/sort_field/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/data/sort_field/","section":"golang","summary":"Description The SortField class allows you to define a field used to sort query results. In addition, it allows you to specify the order type as ascending or descending.\nConstructors NewSortField Creates a new instance and assigns its values.\n NewSortField(name string, ascending bool) SortField\n  name: string - the name of the field to sort by. ascending: bool - true to sort in ascending order, and false to sort in descending order.","tags":null,"title":"SortField","type":"docs","url":"/hugo-docs/golang/commons/data/sort_field/","weight":0,"wordcount":126},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a field name and the order type used to sort query results.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"SortField","lvl1":"Defines a field name and the order type used to sort query results.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2799add2333600d02f4ee3630b91e335","permalink":"/net/commons/data/sort_field/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/sort_field/","section":"net","summary":"Description The SortField class allows you to define a field used to sort query results. In addition, it allows you to specify the order typer as ascending or descending.\nConstructors Creates a new instance and assigns its values.\n public SortField(string name = null, bool ascending = true)\n  name: string - the name of the field to sort by. ascending: bool - true to sort in ascending order, and false to sort in descending order.","tags":null,"title":"SortField","type":"docs","url":"/hugo-docs/net/commons/data/sort_field/","weight":0,"wordcount":135},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a field name and the order type used to sort query results.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"SortField","lvl1":"Defines a field name and the order type used to sort query results.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2262c2bb1908598eb4247b3f2b133108","permalink":"/node/commons/data/sort_field/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/sort_field/","section":"node","summary":"Description The SortField class allows you to define a field used to sort query results. In addition, it allows you to specify the order typer as ascending or descending.\nConstructors Creates a new instance and assigns its values.\n public constructor(name: string = null, ascending: boolean = true)\n  name: string - the name of the field to sort by. ascending: boolean - true to sort in ascending order, and false to sort in descending order.","tags":null,"title":"SortField","type":"docs","url":"/hugo-docs/node/commons/data/sort_field/","weight":0,"wordcount":132},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a field name and the order type used to sort query results.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1620314116,"lvl0":"SortField","lvl1":"Defines a field name and the order type used to sort query results.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e9a8f2c5eeb26487d86e8ae10a91a804","permalink":"/python/commons/data/sort_field/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/sort_field/","section":"python","summary":"Description The SortField class allows you to define a field used to sort query results. In addition, it allows you to specify the order typer as ascending or descending.\nConstructors Creates a new instance and assigns its values.\n SortField(name: str = None, ascending: bool = True)\n  name: str - the name of the field to sort by. ascending: bool - true to sort in ascending order, and false to sort in descending order.","tags":null,"title":"SortField","type":"docs","url":"/hugo-docs/python/commons/data/sort_field/","weight":0,"wordcount":119},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a list of field names used to sort query results.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624221439,"lvl0":"SortParams","lvl1":"Defines a list of field names used to sort query results.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a0dbe33654bf9ff449db900e693a8555","permalink":"/golang/commons/data/sort_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/data/sort_params/","section":"golang","summary":"Implements: []\u0026lt;SortField\u0026gt;\nDescription The SortParams class allows you to define a list of field names used to sort query results. In addition, it allows you to specify the type of order as ascending or descending.\nConstructors NewSortParams Creates a new instance and initializes it with specified sort fields.\n NewSortParams(fields []SortField) *SortField\n  fields: []SortField - list of fields to sort by.  Examples filter := NewFilterParamsFromTuples(\u0026#34;type\u0026#34;, \u0026#34;Type1\u0026#34;); paging := NewPagingParams(0, 100); sorting := NewSortingParams(NewSortField(\u0026#34;create_time\u0026#34;, true)); myDataClient.","tags":null,"title":"SortParams","type":"docs","url":"/hugo-docs/golang/commons/data/sort_params/","weight":0,"wordcount":83},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a list of field names used to sort query results.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"SortParams","lvl1":"Defines a list of field names used to sort query results.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e12fbc83264503251fcc72837f32aa55","permalink":"/net/commons/data/sort_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/data/sort_params/","section":"net","summary":"Inherits: List\u0026lt;SortField\u0026gt;\nDescription The SortParams class allows you to define a list of field names used to sort query results. In addition, it allows you to specify the type of order as ascending or descending.\nConstructors Creates a new instance and initializes it with specified sort fields.\n public SortParams(IEnumerable\u0026lt;SortField\u0026gt; fields = null)\n  fields: IEnumerable\u0026lt;SortField\u0026gt; - a list of fields to sort by.  Creates a new instance and initializes it with specified sort fields.","tags":null,"title":"SortParams","type":"docs","url":"/hugo-docs/net/commons/data/sort_params/","weight":0,"wordcount":111},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a list of field names used to sort query results.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"SortParams","lvl1":"Defines a list of field names used to sort query results.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d55135864b99940dacef8fb1fe846887","permalink":"/node/commons/data/sort_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/data/sort_params/","section":"node","summary":"Extends: Array\u0026lt;SortField\u0026gt;\nDescription The SortParams class allows you to define a list of field names used to sort query results. In addition, it allows you to specify the type of order as ascending or descending.\nConstructors Creates a new instance and initializes it with specified sort fields.\n public constructor(\u0026hellip;fields: SortField[])\n  fields: SortField[] - a list of fields to sort by.  Examples let filter = FilterParams.fromTuples(\u0026#34;type\u0026#34;, \u0026#34;Type1\u0026#34;); let paging = new PagingParams(0, 100); let sorting = new SortingParams(new SortField(\u0026#34;create_time\u0026#34;, true)); myDataClient.","tags":null,"title":"SortParams","type":"docs","url":"/hugo-docs/node/commons/data/sort_params/","weight":0,"wordcount":89},{"authors":null,"categories":null,"date":-62135596800,"description":"Defines a list of field names used to sort query results.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620314056,"lvl0":"SortParams","lvl1":"Defines a list of field names used to sort query results.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1be5316fb71942062f32d39b49b344a4","permalink":"/python/commons/data/sort_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/data/sort_params/","section":"python","summary":"Implements: list\nDescription The SortParams class allows you to define a list of field names used to sort query results. In addition, it allows you to specify the type of order as ascending or descending.\nConstructors Creates a new instance and initializes it with specified sort fields.\n SortParams(*fields: SortField)\n  fields: SortField - a list of fields to sort by.  Examples filter = FilterParams.fromTuples(\u0026#34;type\u0026#34;, \u0026#34;Type1\u0026#34;) paging = PagingParams(0, 100) sorting = SortingParams(SortField(\u0026#34;create_time\u0026#34;, true)) myDataClient.","tags":null,"title":"SortParams","type":"docs","url":"/hugo-docs/python/commons/data/sort_params/","weight":0,"wordcount":78},{"authors":null,"categories":null,"date":-62135596800,"description":"SQLServer connection using the official driver.\n","dir":"node/sqlserver/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"SqlServerConnection","lvl1":"SQLServer connection using the official driver.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"742b96a1b4196ed2f20446b323caf00d","permalink":"/node/sqlserver/connect/sqlserver_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/sqlserver/connect/sqlserver_connection/","section":"node","summary":"Implements: IReferenceable, IConfigurable, IOpenable\nDescription The SqlServerConnection class allows you to create a connection to an SQLServer database using the official driver.\nImportant points\n By defining a connection and sharing it through multiple persistence components you can reduce number of used database connections.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"SqlServerConnection","type":"docs","url":"/hugo-docs/node/sqlserver/connect/sqlserver_connection/","weight":0,"wordcount":285},{"authors":null,"categories":null,"date":-62135596800,"description":"SQLServer connection using the official driver.\n","dir":"python/sqlserver/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622309640,"lvl0":"SqlServerConnection","lvl1":"SQLServer connection using the official driver.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4c1cbf72b3c0f938ee2a8eb2503e4638","permalink":"/python/sqlserver/connect/sqlserver_connection/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/sqlserver/connect/sqlserver_connection/","section":"python","summary":"Implements: IReferenceable, IConfigurable, IOpenable\nDescription The SqlServerConnection class allows you to create a connection to an SQLServer database using the official driver.\nImportant points\n By defining a connection and sharing it through multiple persistence components you can reduce number of used database connections.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"SqlServerConnection","type":"docs","url":"/hugo-docs/python/sqlserver/connect/sqlserver_connection/","weight":0,"wordcount":274},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves SQLServer connection and credential parameters, validates them and generates a connection URI.\n","dir":"node/sqlserver/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"SqlServerConnectionResolver","lvl1":"Helper class that resolves SQLServer connection and credential parameters, validates them and generates a connection URI.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9c5d22c43e388554620602ddc0e0161b","permalink":"/node/sqlserver/connect/sqlserver_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/sqlserver/connect/sqlserver_connection_resolver/","section":"node","summary":"Implements: IReferenceable, IConfigurable\nDescription The SqlServerConnectionResolver class allows you to resolve connection and credential parameters, validates these parameters, and generate a connection URI.\nImportant points\n It is able to process multiple connections to PostgreSQL cluster nodes.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) database: database name uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"SqlServerConnectionResolver","type":"docs","url":"/hugo-docs/node/sqlserver/connect/sqlserver_connection_resolver/","weight":0,"wordcount":206},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that resolves SQLServer connection and credential parameters, validates them and generates a connection URI.\n","dir":"python/sqlserver/connect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"SqlServerConnectionResolver","lvl1":"Helper class that resolves SQLServer connection and credential parameters, validates them and generates a connection URI.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"51ff46e8a5f3eebf090ca2520599114d","permalink":"/python/sqlserver/connect/sqlserver_connection_resolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/sqlserver/connect/sqlserver_connection_resolver/","section":"python","summary":"Implements: IReferenceable, IConfigurable\nDescription The SqlServerConnectionResolver class allows you to resolve connection and credential parameters, validates these parameters, and generate a connection URI.\nImportant points\n It is able to process multiple connections to PostgreSQL cluster nodes.  Configuration parameters connection(s):\n discovery_key: (optional) key to retrieve the connection from IDiscovery host: host name or IP address port: port number (default: 27017) database: database name uri: resource URI or connection string with all parameters in it  credential(s):","tags":null,"title":"SqlServerConnectionResolver","type":"docs","url":"/hugo-docs/python/sqlserver/connect/sqlserver_connection_resolver/","weight":0,"wordcount":217},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in a SQLServer database using the official driver.\n","dir":"node/sqlserver/persistence/","expirydate":-62135596800,"fuzzywordcount":1400,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"SqlServerPersistence","lvl1":"Abstract persistence component that stores data in a SQLServer database using the official driver.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b6cdc585a899578b38a87332f6fa25cf","permalink":"/node/sqlserver/persistence/sqlserver_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/node/sqlserver/persistence/sqlserver_persistence/","section":"node","summary":"Implements: IReferenceable, IUnreferenceable, IConfigurable, IOpenable, ICleanable\nDescription The SqlServerPersistence class allows you to create persistence components that store data in a SQLServer database using the official driver.\nImportant points\n This is the most basic persistence component that is able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing this._db or this._collection properties.  Configuration parameters  collection: (optional) SQLServer collection name","tags":null,"title":"SqlServerPersistence","type":"docs","url":"/hugo-docs/node/sqlserver/persistence/sqlserver_persistence/","weight":0,"wordcount":1355},{"authors":null,"categories":null,"date":-62135596800,"description":"Abstract persistence component that stores data in a SQLServer database using the official driver.\n","dir":"python/sqlserver/persistence/","expirydate":-62135596800,"fuzzywordcount":1300,"keywords":null,"kind":"page","lang":"en","lastmod":1622732567,"lvl0":"SqlServerPersistence","lvl1":"Abstract persistence component that stores data in a SQLServer database using the official driver.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7643448ed329c72d82a76d1e375488ac","permalink":"/python/sqlserver/persistence/sqlserver_persistence/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/python/sqlserver/persistence/sqlserver_persistence/","section":"python","summary":"Implements: IReferenceable, IUnreferenceable, IConfigurable, IOpenable, ICleanable\nDescription The SqlServerPersistence class allows you to create persistence components that store data in a SQLServer database using the official driver.\nImportant points\n This is the most basic persistence component that is able to store data items of any type. Specific CRUD operations over the data items must be implemented in child classes by accessing self._db or self._collection properties.  Configuration parameters  collection: (optional) SQLServer collection name","tags":null,"title":"SqlServerPersistence","type":"docs","url":"/hugo-docs/python/sqlserver/persistence/sqlserver_persistence/","weight":0,"wordcount":1276},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/infrastructure/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Statistics Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e89b61dc199cd1ffbb2996233017545d","permalink":"/microservices/infrastructure/statistics/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/infrastructure/statistics/","section":"microservices","summary":"Logs important system events like starts and stops of servers, upgrades to a new version, fatal system errors or key business transactions.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, .NET  ","tags":null,"title":"Statistics Microservice","type":"docs","url":"/hugo-docs/microservices/infrastructure/statistics/","weight":0,"wordcount":50},{"authors":null,"categories":null,"date":-62135596800,"description":"Handles status requests for REST operations.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"StatusOperations","lvl1":"Handles status requests for REST operations.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"663161cc35be5001a2f5270e6ecb12dc","permalink":"/golang/rpc/services/status_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/rpc/services/status_operations/","section":"golang","summary":"Implements: RestOperations\nDescription The StatusOperations class allows you to handle status requests for REST operations.\nMethods GetStatusOperation Gets the status of the operation.\n (c *StatusOperations) GetStatusOperation() func(res http.ResponseWriter, req *http.Request)\n  returns: func(res http.ResponseWriter, req *http.Request) - status operation method  SetReferences Sets references to dependent components.\n (c *StatusOperations) SetReferences(references crefer.IReferences)\n  references: IReferences - references to locate the component dependencies.  Status Handles status requests.","tags":null,"title":"StatusOperations","type":"docs","url":"/hugo-docs/golang/rpc/services/status_operations/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"Handles status requests for REST operations.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624305939,"lvl0":"StatusOperations","lvl1":"Handles status requests for REST operations.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dc7fed1d5dd087c184b0dcb9697202d0","permalink":"/node/rpc/services/status_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/services/status_operations/","section":"node","summary":"Extends: RestOperations\nDescription The StatusOperations class allows you to handle status requests for REST operations.\nInstance methods getStatusOperation Gets the status of the operation.\n public getStatusOperation(): function\n  returns: function - status operation method  setReferences Sets references to dependent components.\n public setReferences(references: IReferences): void\n  references: IReferences - references to locate the component dependencies.  status Handles status requests.\n public status(req, res): void\n  req: any - an HTTP request res: any - an HTTP response  ","tags":null,"title":"StatusOperations","type":"docs","url":"/hugo-docs/node/rpc/services/status_operations/","weight":0,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"Handles status requests for REST operations.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622068170,"lvl0":"StatusOperations","lvl1":"Handles status requests for REST operations.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2e8e083ca239a67277e024feb0a0d73f","permalink":"/python/rpc/services/status_operations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/services/status_operations/","section":"python","summary":"Implements: RestOperations\nDescription The StatusOperations class allows you to handle status requests for REST operations.\nInstance methods get_status_operation Gets the status of the operation.\n get_status_operation(): Callable\n  returns: Callable - status of the operation (JSON)  set_references Sets references to dependent components.\n set_references(references: IReferences)\n  references: IReferences - references to locate the component dependencies.  status Handles status requests.\n status(): str\n ","tags":null,"title":"StatusOperations","type":"docs","url":"/hugo-docs/python/rpc/services/status_operations/","weight":0,"wordcount":57},{"authors":null,"categories":null,"date":-62135596800,"description":"Service that returns microservice status information via HTTP/REST protocol.\n","dir":"golang/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624310290,"lvl0":"StatusRestService","lvl1":"Service that returns microservice status information via HTTP/REST protocol.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e0415139aa7415550116b45a75fa74f0","permalink":"/golang/rpc/services/status_rest_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/rpc/services/status_rest_service/","section":"golang","summary":"Implements: RestService\nDescription The StatusRestService class allows you to create a service that returns microservice status information via the HTTP/REST protocol.\nThe service responds on /status route (can be changed) with a JSON object: { - \u0026quot;id\u0026quot;: unique container id (usually hostname) - \u0026quot;name\u0026quot;: container name (from ContextInfo) - \u0026quot;description\u0026quot;: container description (from ContextInfo) - \u0026quot;start_time\u0026quot;: time when container was started - \u0026quot;current_time\u0026quot;: current time in UTC - \u0026quot;uptime\u0026quot;: duration since container start time in milliseconds - \u0026quot;properties\u0026quot;: additional container properties (from ContextInfo) - \u0026quot;components\u0026quot;: descriptors of components registered in the container } Configuration parameters  base_route: base route for remote URI route: status route (default: \u0026ldquo;status\u0026rdquo;) dependencies:  endpoint: override for HTTP Endpoint dependency controller: override for Controller dependency   connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it    References  *:logger:*:*:1.","tags":null,"title":"StatusRestService","type":"docs","url":"/hugo-docs/golang/rpc/services/status_rest_service/","weight":0,"wordcount":273},{"authors":null,"categories":null,"date":-62135596800,"description":"Service that returns microservice status information via HTTP/REST protocol.\n","dir":"node/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"StatusRestService","lvl1":"Service that returns microservice status information via HTTP/REST protocol.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d6e58075299ad4e4a55544cb1730c9ff","permalink":"/node/rpc/services/status_rest_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/rpc/services/status_rest_service/","section":"node","summary":"Extends: RestService\nDescription The StatusRestService class allows you to create a service that returns microservice status information via the HTTP/REST protocol.\nThe service responds on /status route (can be changed) with a JSON object: { - \u0026quot;id\u0026quot;: unique container id (usually hostname) - \u0026quot;name\u0026quot;: container name (from ContextInfo) - \u0026quot;description\u0026quot;: container description (from ContextInfo) - \u0026quot;start_time\u0026quot;: time when container was started - \u0026quot;current_time\u0026quot;: current time in UTC - \u0026quot;uptime\u0026quot;: duration since container start time in milliseconds - \u0026quot;properties\u0026quot;: additional container properties (from ContextInfo) - \u0026quot;components\u0026quot;: descriptors of components registered in the container } Configuration parameters  base_route: base route for remote URI route: status route (default: \u0026ldquo;status\u0026rdquo;) dependencies:  endpoint: override for HTTP Endpoint dependency controller: override for Controller dependency   connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it    References  *:logger:*:*:1.","tags":null,"title":"StatusRestService","type":"docs","url":"/hugo-docs/node/rpc/services/status_rest_service/","weight":0,"wordcount":266},{"authors":null,"categories":null,"date":-62135596800,"description":"Service that returns microservice status information via HTTP/REST protocol.\n","dir":"python/rpc/services/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"StatusRestService","lvl1":"Service that returns microservice status information via HTTP/REST protocol.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b9155538cbb8740178629af242eb5123","permalink":"/python/rpc/services/status_rest_service/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/rpc/services/status_rest_service/","section":"python","summary":"Implements: RestService\nDescription The StatusRestService class allows you to create a service that returns microservice status information via the HTTP/REST protocol.\nThe service responds on /status route (can be changed) with a JSON object: { - \u0026quot;id\u0026quot;: unique container id (usually hostname) - \u0026quot;name\u0026quot;: container name (from ContextInfo) - \u0026quot;description\u0026quot;: container description (from ContextInfo) - \u0026quot;start_time\u0026quot;: time when container was started - \u0026quot;current_time\u0026quot;: current time in UTC - \u0026quot;uptime\u0026quot;: duration since container start time in milliseconds - \u0026quot;properties\u0026quot;: additional container properties (from ContextInfo) - \u0026quot;components\u0026quot;: descriptors of components registered in the container } Configuration parameters  base_route: base route for remote URI route: status route (default: \u0026ldquo;status\u0026rdquo;) dependencies:  endpoint: override for HTTP Endpoint dependency controller: override for Controller dependency   connection(s):  discovery_key: (optional) key to retrieve the connection from IDiscovery protocol: connection protocol (http or https) host: host name or IP address port: port number uri: resource URI or connection string with all parameters in it    References  *:logger:*:*:1.","tags":null,"title":"StatusRestService","type":"docs","url":"/hugo-docs/python/rpc/services/status_rest_service/","weight":0,"wordcount":252},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"Step 1. Setting up the project structure","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dc5f169695bb5bd49f100984a0fd7b8c","permalink":"/node/tutorials/client_library/step1/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/tutorials/client_library/step1/","section":"node","summary":"Let’s do some small preparation of the project before we start writing the client library.\nFirst, create the following directory structure to keep the source organized:\n  Node.js .NET Python Java Go  /bin /config /docker /src └───/build └───/container └───/data │ └───/version1 └───/logic └───/persistence └───/service └───/version1 /test └───/logic └───/persistence └───/service └───/version1  net /bin /config /docker /src └───/build └───/container └───/data │ └───/version1 └───/logic └───/persistence └───/service └───/version1 /test └───/logic └───/persistence └───/service └───/version1  go /bin /config /docker /src └───/build └───/container └───/data │ └───/version1 └───/logic └───/persistence └───/service └───/version1 /test └───/logic └───/persistence └───/service └───/version1  dart /bin /config /docker /src └───/build └───/container └───/data │ └───/version1 └───/logic └───/persistence └───/service └───/version1 /test └───/logic └───/persistence └───/service └───/version1  Add a package.","tags":null,"title":"Step 1. Setting up the project structure","type":"docs","url":"/hugo-docs/node/tutorials/client_library/step1/","weight":0,"wordcount":219},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_dockerization/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623468714,"lvl0":"Step 1. Build","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"92063192ff816c20ae2d3972fbf2a270","permalink":"/python/tutorials/microservice_dockerization/step1/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/tutorials/microservice_dockerization/step1/","section":"python","summary":"TODO rewrite this step for Python (Python is an interpreted language and not a compiled one)\nSome of the programming languages used in the Pip.Services Toolkit require a project to be built, yielding executable files. A separate stage is used for this, which builds a special “build” Docker image. The project’s source code is copied to the image, after which the container is run and the project is compiled from inside the container.","tags":null,"title":"Step 1. Build","type":"docs","url":"/hugo-docs/python/tutorials/microservice_dockerization/step1/","weight":0,"wordcount":686},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_facade/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623973528,"lvl0":"Step 1. Creating the Project’s Structure","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"87e79ba4d1d674eee688bcfcfa733af6","permalink":"/python/tutorials/microservice_facade/step1/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/tutorials/microservice_facade/step1/","section":"python","summary":"In this tutorial, we will be using a demo project to develop a small facade for a system that consists of a few microservices:\n Beacons - business logic microservice that performs the main operations of the system. Accounts - microservice for managing user accounts Passwords - microservice for managing user passwords Roles - microservice for managing user roles Sessions - microservice for processing user sessions  The Beacons microservice was demonstrated in the Data Microservice tutorial.","tags":null,"title":"Step 1. Creating the Project’s Structure","type":"docs","url":"/hugo-docs/python/tutorials/microservice_facade/step1/","weight":0,"wordcount":264},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623963405,"lvl0":"Step 1. Project structure","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cc097b862423408485396edbd45f618a","permalink":"/node/tutorials/data_microservice/step1/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/tutorials/data_microservice/step1/","section":"node","summary":"Before we start actually writing our microservice, we need to first set up our environment and create a directory structure in the project’s folder.\nTo set up our environment, we’ll need to install all the necessary tools, as described on the Setup environment page.\nDon’t forget to select the programming language that you plan on using.\nCreate a folder for the project and, inside it, a directory structure to match the one below:","tags":null,"title":"Step 1. Project structure","type":"docs","url":"/hugo-docs/node/tutorials/data_microservice/step1/","weight":0,"wordcount":209},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623546298,"lvl0":"Step 1. Setting up the project structure","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eeb441c9172c938fbd486d4ca6af1521","permalink":"/python/tutorials/client_library/step1/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/tutorials/client_library/step1/","section":"python","summary":"Let’s do some small preparation of the project before we start writing the client library.\nFirst, create the following directory structure to keep the source code organized:\n/src └───/version1 /test └───/version1 Prepare the initial project files, as described in the tutorial on creating a data microservice, for the language of your choice and perform the initialization process.\nSince data is transferred between the client and the microservice using a specific protocol, this data must be defined for the client to work correctly.","tags":null,"title":"Step 1. Setting up the project structure","type":"docs","url":"/hugo-docs/python/tutorials/client_library/step1/","weight":0,"wordcount":241},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623963405,"lvl0":"Step 1. Project structure","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3d99c60b14908696ce7a6b3cce05d493","permalink":"/python/tutorials/data_microservice/step1/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/tutorials/data_microservice/step1/","section":"python","summary":"Before we start actually writing our microservice, we need to first set up our environment and create a directory structure in the project’s folder.\nTo set up our environment, we’ll need to install all the necessary tools, as described on the Setup environment page.\nDon’t forget to select the programming language that you plan on using.\nCreate a folder for the project and, inside it, a directory structure to match the one below:","tags":null,"title":"Step 1. Project structure","type":"docs","url":"/hugo-docs/python/tutorials/data_microservice/step1/","weight":0,"wordcount":171},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_facade/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624057862,"lvl0":"Step 2. Business operations","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3d48e50d975fb735179aa5392b2923cf","permalink":"/python/tutorials/microservice_facade/step2/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/microservice_facade/step2/","section":"python","summary":"Since facades are usually the point of entry into a system, they can contain dozens or even hundreds of REST operations. The classic microservices structure, when all the logic is contained in a single controller, becomes quite impractical in this case. Furthermore, it’s critical for a facade to support versioning. When the interface is changed, the facade must continue to provide stability for existing clients using interface versioning. Usually around 80% of the logic remains the same when an interface is changed, so duplicating the logic would just increase the amount of code and make it more difficult to support.","tags":null,"title":"Step 2. Business operations","type":"docs","url":"/hugo-docs/python/tutorials/microservice_facade/step2/","weight":0,"wordcount":567},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621951417,"lvl0":"Step 2. Data model development","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"999ed9bdda4e0a63ba84b274c88e10f4","permalink":"/node/tutorials/data_microservice/step2/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/tutorials/data_microservice/step2/","section":"node","summary":"We’ll start the development of our microservice with defining and implementing the data model that it is going to be working with. We’ll start by adding some folders to our project’s directory structure. In the src folder, create a data folder and, inside it, a version1 folder. This is done to allow us to create new versions of the data model later on, without breaking the old one.\nNow, in the version1 folder, create a BeaconV1 class that implements IStringIdentifiable.","tags":null,"title":"Step 2. Data model development","type":"docs","url":"/hugo-docs/node/tutorials/data_microservice/step2/","weight":0,"wordcount":469},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1622140846,"lvl0":"Step 2. Data model development","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"097af14935eb1cda3bf55d3d9cbe226a","permalink":"/python/tutorials/data_microservice/step2/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/data_microservice/step2/","section":"python","summary":"We’ll start the development of our microservice with defining and implementing the data model that it is going to be working with. We’ll start by adding some folders to our project’s directory structure. In the src folder, create a data folder and, inside it, a version1 folder. This is done to allow us to create new versions of the data model later on, without breaking the old one.\nNow, in the version1 folder, create a BeaconV1 class that implements IStringIdentifiable.","tags":null,"title":"Step 2. Data model development","type":"docs","url":"/hugo-docs/python/tutorials/data_microservice/step2/","weight":0,"wordcount":465},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1623714698,"lvl0":"Step 2. Designing a Direct Client","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bae3c62959b7887bcf91a834c3796182","permalink":"/python/tutorials/client_library/step2/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/tutorials/client_library/step2/","section":"python","summary":"Oftentimes systems that are created using a microservices architecture end up being assembled and installed as monoliths. Sometimes this is required as a transitional step, when the operations department isn’t quite yet ready to install and support such a fragmented system. It’s also common for startups, who usually have to deal with limited financial resources, to use this approach. Packing a large amount of microservices into a monolith allows teams to significantly reduce the amount of containers needed to get the system up and running.","tags":null,"title":"Step 2. Designing a Direct Client","type":"docs","url":"/hugo-docs/python/tutorials/client_library/step2/","weight":0,"wordcount":739},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_dockerization/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1623468642,"lvl0":"Step 2. Test","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b5ee6f1892040d7d989d877e36e063f7","permalink":"/python/tutorials/microservice_dockerization/step2/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/microservice_dockerization/step2/","section":"python","summary":"Automated tests play a key role in achieving a guaranteed quality of microservices. Testing can be performed on various levels - unit tests for separate classes, end-to-end or integrated tests for microservices with dependencies, and tests that show how microservices work together within the actual system. In this tutorial however, we will only be looking at testing individual microservices, and system tests will not be covered.\nTo correctly perform testing, especially iterative testing, we need to correctly configure our environment with all of the necessary services and correct configuration parameters.","tags":null,"title":"Step 2. Test","type":"docs","url":"/hugo-docs/python/tutorials/microservice_dockerization/step2/","weight":0,"wordcount":557},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_facade/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1623973528,"lvl0":"Step 3. Authentication and sessions","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e17b9201d040380700ef35f24f647a22","permalink":"/python/tutorials/microservice_facade/step3/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/python/tutorials/microservice_facade/step3/","section":"python","summary":"In most cases, access to an application’s (service’s) resources is granted only after users authenticate themselves in the system. Authentication is the process of checking the validity of the identifier provided by a user. A successful authentication (besides establishing a trusted relationship and generating a session key) is usually also followed up by user authorization. This second step grants the user access rights to an approved set of resources, deemed necessary for the user to perform his/her tasks.","tags":null,"title":"Step 3. Authentication and sessions","type":"docs","url":"/hugo-docs/python/tutorials/microservice_facade/step3/","weight":0,"wordcount":1050},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1623546253,"lvl0":"Step 3. Designing an HTTP Client","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5e78b8cd41b58867e501e6e3264a2692","permalink":"/python/tutorials/client_library/step3/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/client_library/step3/","section":"python","summary":"The standard way of communicating with a microservice is via the HTTP protocol. It allows calling microservices that work on a separate server, or in their own container. Our example microservice uses a simplified version of the HTTP protocol that is automatically generated using the Commandable pattern. Then, creates a new class for the Commandable REST client and an implementation for each of the microservice’s methods. This is done by calling the REST API’s methods using the methods of the parent Commandable REST client, passing the necessary set of parameters, and then processing the response’s result.","tags":null,"title":"Step 3. Designing an HTTP Client","type":"docs","url":"/hugo-docs/python/tutorials/client_library/step3/","weight":0,"wordcount":437},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_dockerization/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1623468880,"lvl0":"Step 3. Package","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c5cb3c49844b9511eef7393fc483d261","permalink":"/python/tutorials/microservice_dockerization/step3/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/microservice_dockerization/step3/","section":"python","summary":"Once a microservice has successfully passed the previous “build” and “test” stages, it is ready to be published and tested as a part of the system. But before we can do this, we need to correctly package it into a Docker container.\nWhen creating containers, we follow the “Build once - run everywhere” principle. What this means is that the container is created just once. After being created, this container goes through the stages of system testing in various environments and eventually gets deployed into production - all without any modifications.","tags":null,"title":"Step 3. Package","type":"docs","url":"/hugo-docs/python/tutorials/microservice_dockerization/step3/","weight":0,"wordcount":611},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":1900,"keywords":null,"kind":"page","lang":"en","lastmod":1621951417,"lvl0":"Step 3. Implementing persistence components","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"caf3561ec005fd1750f6c99f0b2ecb6b","permalink":"/node/tutorials/data_microservice/step3/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/node/tutorials/data_microservice/step3/","section":"node","summary":"In this step, we’ll be creating components for persisting the data model we defined in the previous step. In our projects, we always create at least two persistences: one for storing data in-memory (used for testing), and another for storing data in an external database (used in production). With the Beacons example, we’ll be doing the same.\nLet’s start by navigating to the src directory and creating a persistence directory inside it.","tags":null,"title":"Step 3. Implementing persistence components","type":"docs","url":"/hugo-docs/node/tutorials/data_microservice/step3/","weight":0,"wordcount":1875},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":1600,"keywords":null,"kind":"page","lang":"en","lastmod":1622140846,"lvl0":"Step 3. Implementing persistence components","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"25b7f56c8a7717ec5541d1b897f196a0","permalink":"/python/tutorials/data_microservice/step3/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/python/tutorials/data_microservice/step3/","section":"python","summary":"In this step, we’ll be creating components for persisting the data model we defined in the previous step. In our projects, we always create at least two persistences: one for storing data in-memory (used for testing), and another for storing data in an external database (used in production). With the Beacons example, we’ll be doing the same.\nLet’s start by navigating to the src directory and creating a persistence directory inside it.","tags":null,"title":"Step 3. Implementing persistence components","type":"docs","url":"/hugo-docs/python/tutorials/data_microservice/step3/","weight":0,"wordcount":1541},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_facade/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1624013130,"lvl0":"Step 4. Authorization","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"048dac182171e0fadec95599ca30ecce","permalink":"/python/tutorials/microservice_facade/step4/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/microservice_facade/step4/","section":"python","summary":"Once we’ve established who our user is, we need to implement some way of controlling what operations our user can perform, based on the rights he/she has been assigned. In this tutorial, we will be taking a look at how to install access limitations that are based on user roles. The roles themselves are stored in the Roles microservice and are loaded into a UserSession by the loadSession interceptor we discussed in the previous step.","tags":null,"title":"Step 4. Authorization","type":"docs","url":"/hugo-docs/python/tutorials/microservice_facade/step4/","weight":0,"wordcount":566},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":2000,"keywords":null,"kind":"page","lang":"en","lastmod":1621951417,"lvl0":"Step 4. Implementing a controller","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ff1ada97b618da4e101e4f990f13a846","permalink":"/node/tutorials/data_microservice/step4/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/node/tutorials/data_microservice/step4/","section":"node","summary":"Now that we know a bit about how we are going to be storing data and how microservice configuration works, it’s time to add some logic to our service. Our microservice needs to be able to calculate a device’s position based on the beacons it “sees”, as well as initiate CRUD operations for the data it handles. Let’s create a logic folder under the src directory and start by defining an interface:","tags":null,"title":"Step 4. Implementing a controller","type":"docs","url":"/hugo-docs/node/tutorials/data_microservice/step4/","weight":0,"wordcount":1901},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":1400,"keywords":null,"kind":"page","lang":"en","lastmod":1622140846,"lvl0":"Step 4. Implementing a controller","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"786ed64af6ab612ad0e9d6196b266f77","permalink":"/python/tutorials/data_microservice/step4/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/python/tutorials/data_microservice/step4/","section":"python","summary":"Now that we know a bit about how we are going to be storing data and how microservice configuration works, it’s time to add some logic to our service. Our microservice needs to be able to calculate a device’s position based on the beacons it “sees”, as well as initiate CRUD operations for the data it handles. Let’s create a logic folder under the src directory and start by defining an interface:","tags":null,"title":"Step 4. Implementing a controller","type":"docs","url":"/hugo-docs/python/tutorials/data_microservice/step4/","weight":0,"wordcount":1336},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":1200,"keywords":null,"kind":"page","lang":"en","lastmod":1623546644,"lvl0":"Step 4. Implementing Mock Client","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f0c98b8a05fdb5d8bd86ac53c4d72ab1","permalink":"/python/tutorials/client_library/step4/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/python/tutorials/client_library/step4/","section":"python","summary":"Complex systems usually experience difficulties when it comes to writing unit tests for a logic that calls external services. These tests are supposed to run quickly and without any additional infrastructure. The standard approach to solving this problem is to replace the calls to external services with a local approximation (a.k.a. a mock). However, writing mocks takes time and doesn’t always guarantee functionality that matches the real service.\nIn our projects, we’ve come to the conclusion that it pays off to develop mocks alongside the real clients and test them using common tests, to guarantee that their behavior is identical.","tags":null,"title":"Step 4. Implementing Mock Client","type":"docs","url":"/hugo-docs/python/tutorials/client_library/step4/","weight":0,"wordcount":1136},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_dockerization/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1623553791,"lvl0":"Step 4. Publish","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"be0a6234588c9079a86a85af9b105e23","permalink":"/python/tutorials/microservice_dockerization/step4/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/microservice_dockerization/step4/","section":"python","summary":"Now that all of the preparational work has been done, all that’s left is to publish the image of the container we’ve created with our microservice to a Docker Registry. In this tutorial, we’ll be demonstrating the process of publishing to a free registry on Docker Hub, so you’ll be needing a Docker Hub account to continue. If you don’t have a Docker ID yet, you can get one by registering on their site: https://hub.","tags":null,"title":"Step 4. Publish","type":"docs","url":"/hugo-docs/python/tutorials/microservice_dockerization/step4/","weight":0,"wordcount":463},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1618535830,"lvl0":"Step 5. Implementing an HTTP service","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fd46f249a39899a2ec5c9efcd95dbf6b","permalink":"/node/tutorials/data_microservice/step5/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/tutorials/data_microservice/step5/","section":"node","summary":"The Pip.Services Toolkit has a dedicated component in the RPC module for processing external requests. To make use of this service, create a new class BeaconsHttpServiceV1, extending the CommandableHttpService class:\n/src/service/version1/BeaconsHttpServicesV1.ts\nimport { CommandableHttpService } from \u0026#39;pip-services3-rpc-node\u0026#39;; import { Descriptor } from \u0026#39;pip-services3-commons-node\u0026#39;; ‍ export class BeaconsHttpServiceV1 extends CommandableHttpService { public constructor() { super(\u0026#39;v1/beacons\u0026#39;); this._dependencyResolver.put(\u0026#39;controller\u0026#39;, new Descriptor(\u0026#39;beacons\u0026#39;, \u0026#39;controller\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;1.0\u0026#39;)); } } The CommandableHttpService class from the pip-services3-rpc module implements all of the basic functionality needed by the service, right out of the box.","tags":null,"title":"Step 5. Implementing an HTTP service","type":"docs","url":"/hugo-docs/node/tutorials/data_microservice/step5/","weight":0,"wordcount":852},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1622140846,"lvl0":"Step 5. Implementing an HTTP service","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2b145e1e60c1e8856c54f16e734bab12","permalink":"/python/tutorials/data_microservice/step5/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/tutorials/data_microservice/step5/","section":"python","summary":"The Pip.Services Toolkit has a dedicated component in the RPC module for processing external requests. To make use of this service, create a new class BeaconsHttpServiceV1, extending the CommandableHttpService class:\n/src/service/version1/BeaconsHttpServicesV1.py\nfrom pip_services3_commons.refer import Descriptor from pip_services3_rpc.services import CommandableHttpService class BeaconsHttpServiceV1(CommandableHttpService): def __init__(self): super(BeaconsHttpServiceV1, self).__init__(\u0026#34;v1/beacons\u0026#34;) self._dependency_resolver.put(\u0026#34;controller\u0026#34;, Descriptor(\u0026#39;beacons\u0026#39;, \u0026#39;controller\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;1.0\u0026#39;)) The CommandableHttpService class from the pip-services3-rpc module implements all of the basic functionality needed by the service, right out of the box.","tags":null,"title":"Step 5. Implementing an HTTP service","type":"docs","url":"/hugo-docs/python/tutorials/data_microservice/step5/","weight":0,"wordcount":697},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_dockerization/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1622241502,"lvl0":"Step 5. Run","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c1de97a2fd8c9105e92096d1f188226b","permalink":"/python/tutorials/microservice_dockerization/step5/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/tutorials/microservice_dockerization/step5/","section":"python","summary":"While developing and debugging a project, you may find the need to run and connect to a microservice, for example, using a client. Readily available Docker images, like the ones we made in the previous steps, are quite handy in such situations.\nTo run our service, we’ll be using the scenario we wrote in the third step of this tutorial in the docker-compose.yml file:\nversion: \u0026#39;3.3\u0026#39; services: app: image: ${IMAGE} ports: - \u0026#34;8080:8080\u0026#34; depends_on: - mongo environment: - HTTP_PORT=8080 - MONGO_ENABLED=true - MONGO_SERVICE_HOST=mongo - MONGO_SERVICE_PORT=27017 mongo: image: mongo:latest To automated the running process, we can create a file named run.","tags":null,"title":"Step 5. Run","type":"docs","url":"/hugo-docs/python/tutorials/microservice_dockerization/step5/","weight":0,"wordcount":238},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_facade/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":1623973893,"lvl0":"Step 5. Services and versioning","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4e7ea58fd24d007553317e67b03e7155","permalink":"/python/tutorials/microservice_facade/step5/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/microservice_facade/step5/","section":"python","summary":"A facade’s RESTful operations are implemented by REST services, which receive external requests and delegate their execution to operations.\nTo process requests made to the API’s first version, let’s create a file named FacadeServiceV1.py in the services/version1 folder with the following code:\n/pip_facades_sample_python/services/version1/FacadeServiceV1.py\n# -*- coding: utf-8 -*- from typing import List import bottle from pip_services3_commons.convert import JsonConverter from pip_services3_commons.errors import UnauthorizedException from pip_services3_rpc.auth.BasicAuthorizer import BasicAuthorizer from pip_services3_rpc.auth.OwnerAuthorizer import OwnerAuthorizer from pip_services3_rpc.","tags":null,"title":"Step 5. Services and versioning","type":"docs","url":"/hugo-docs/python/tutorials/microservice_facade/step5/","weight":0,"wordcount":577},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/client_library/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1622241502,"lvl0":"Step 5. Testing the Client with a Remote Microservice","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"723bd5a12034d9d374d60e9112708a06","permalink":"/python/tutorials/client_library/step5/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/tutorials/client_library/step5/","section":"python","summary":"In the previous steps, we were looking at the development of clients and at the clients themselves. However, both the client and the microservice were implemented in the same language, which allowed us to run components of the microservice from right inside the tests. In a multi-language environment, there are times when you need to create clients in a language that is different from the one that was used to write the microservice.","tags":null,"title":"Step 5. Testing the Client with a Remote Microservice","type":"docs","url":"/hugo-docs/python/tutorials/client_library/step5/","weight":0,"wordcount":747},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1621951417,"lvl0":"Step 6. Wrapping microservice into container","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a14111ea4b2815d116c10a863aafbece","permalink":"/node/tutorials/data_microservice/step6/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/tutorials/data_microservice/step6/","section":"node","summary":"Our service is pretty much done - all that is left is to place the components we’ve developed into a process container and configure it.\nWhen a container is started, it starts composing the microservice out of the components indicated in the configuration file. For the container to be able to build these components, it will need a component factory. In the build directory, create a BeaconsServiceFactory class and populate it with the following code:","tags":null,"title":"Step 6. Wrapping microservice into container","type":"docs","url":"/hugo-docs/node/tutorials/data_microservice/step6/","weight":0,"wordcount":780},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1621951417,"lvl0":"Step 6. Wrapping microservice into container","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"910be208a43532d80432622ff2e39c86","permalink":"/python/tutorials/data_microservice/step6/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/tutorials/data_microservice/step6/","section":"python","summary":"Our service is pretty much done - all that is left is to place the components we’ve developed into a process container and configure it.\nWhen a container is started, it starts composing the microservice out of the components indicated in the configuration file. For the container to be able to build these components, it will need a component factory. In the build directory, create a BeaconsServiceFactory class and populate it with the following code:","tags":null,"title":"Step 6. Wrapping microservice into container","type":"docs","url":"/hugo-docs/python/tutorials/data_microservice/step6/","weight":0,"wordcount":764},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_facade/","expirydate":-62135596800,"fuzzywordcount":1500,"keywords":null,"kind":"page","lang":"en","lastmod":1623973528,"lvl0":"Step 6. Testing of operations","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6f1ad15a85d42f9b214e20c4464036a0","permalink":"/python/tutorials/microservice_facade/step6/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/python/tutorials/microservice_facade/step6/","section":"python","summary":"Before we integrate our new facade with the actual system, we should put it through its paces and thoroughly test it. So let’s develop a set of tests and helper elements for testing all of the operations registered in the facade. We’ll start off by creating a set of helper classes. One will test our dependencies, another will test how well the facade works with users, and the last one will contain a set of test users.","tags":null,"title":"Step 6. Testing of operations","type":"docs","url":"/hugo-docs/python/tutorials/microservice_facade/step6/","weight":0,"wordcount":1464},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1623963405,"lvl0":"Step 7. Running and testing the microservice","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0dd08cc81385100340c5f511b64a0d7f","permalink":"/node/tutorials/data_microservice/step7/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/node/tutorials/data_microservice/step7/","section":"node","summary":"To run our microservice, we need to add just one last bit of code. In the bin folder, create a run.js file with the following:\n/bin/run.js\nlet BeaconsProcess = require(\u0026#39;../obj/src/container/BeaconsProcess\u0026#39;).BeaconsProcess; ‍ try { let proc = new BeaconsProcess(); proc._configPath = \u0026#34;./config/config.yml\u0026#34;; proc.run(process.argv); } catch (ex) { console.error(ex); } In the code above, all we’re doing is creating an instance of the container we described earlier, telling it where to find the configuration file, and running it using the run() method.","tags":null,"title":"Step 7. Running and testing the microservice","type":"docs","url":"/hugo-docs/node/tutorials/data_microservice/step7/","weight":0,"wordcount":869},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/data_microservice/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1623963405,"lvl0":"Step 7. Running and testing the microservice","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ebe734050e645fe65f14024431f616cb","permalink":"/python/tutorials/data_microservice/step7/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/python/tutorials/data_microservice/step7/","section":"python","summary":"To run our microservice, we need to add just one last bit of code. In the bin folder, create a run.js file with the following code:\n/bin/main.py\nimport sys import traceback import os from pip_services3_components.log import ConsoleLogger # add parent directory to path sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__)))) from src.containers.BeaconsProcess import BeaconsProcess if __name__ == \u0026#39;__main__\u0026#39;: runner = BeaconsProcess() try: runner.run() except Exception as ex: ConsoleLogger().fatal(\u0026#34;Beacons\u0026#34;, ex, \u0026#34;Error: \u0026#34;) print(traceback.format_exc()) sys.stderr.write(str(ex) + \u0026#39;\\n\u0026#39;) In the code above, all we’re doing is creating an instance of the container we described earlier, telling it where to find the configuration file, and running it using the run() method.","tags":null,"title":"Step 7. Running and testing the microservice","type":"docs","url":"/hugo-docs/python/tutorials/data_microservice/step7/","weight":0,"wordcount":890},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_facade/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1623973528,"lvl0":"Step 7. Running facade","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"da1a44c23f0087707d454550f4a95277","permalink":"/python/tutorials/microservice_facade/step7/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/tutorials/microservice_facade/step7/","section":"python","summary":"Before we can run our facade, we need to add three more things: a factory for the component’s we’ve created, a container, and the code that will run it all. The process of implementing these pieces is the same as the one described in Data Microservice, so this time around we’ll just list the code:\nCreate three factories in the pip_facades_sample_python/build/ folder:\nOne factory for the facade in a file named FacadeFactory.","tags":null,"title":"Step 7. Running facade","type":"docs","url":"/hugo-docs/python/tutorials/microservice_facade/step7/","weight":0,"wordcount":760},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/tutorials/microservice_facade/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1623973528,"lvl0":"Step 8. Manual testing of facade","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cdc1cecba2c0cf7d86326e89e4659d28","permalink":"/python/tutorials/microservice_facade/step8/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/tutorials/microservice_facade/step8/","section":"python","summary":"Once all of the system’s microservices are up and running, we can perform some manual testing of the facade we’ve created, to ensure that everything’s working as intended.\nFirst, let’s create a few users without any additional privileges. This can be done with the following command:\ncurl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;{\\\u0026#34;name\\\u0026#34;: \\\u0026#34;User1\\\u0026#34;,\\\u0026#34;login\\\u0026#34;: \\\u0026#34;user1@gmail.com\\\u0026#34;,\\\u0026#34;email\\\u0026#34;: \\\u0026#34;user1@gmail.com\\\u0026#34;,\\\u0026#34;language\\\u0026#34;: \\\u0026#34;en\\\u0026#34;,\\\u0026#34;theme\\\u0026#34;: \\\u0026#34;light\\\u0026#34;,\\\u0026#34;time_zone\\\u0026#34;: \\\u0026#34;\\\u0026#34;,\\\u0026#34;password\\\u0026#34;: \\\u0026#34;12345678\\\u0026#34;}\u0026#34; http://localhost:8080/api/v1/signup { \u0026#34;id\u0026#34;: \u0026#34;2f60829282a040899077f93000740272\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;1dbb2a5f1b4d43309cbe1c14b1bdcebe\u0026#34;, \u0026#34;user_name\u0026#34;: \u0026#34;User1\u0026#34;, \u0026#34;active\u0026#34;: true, \u0026#34;open_time\u0026#34;: \u0026#34;2021-06-18T01:14:06.","tags":null,"title":"Step 8. Manual testing of facade","type":"docs","url":"/hugo-docs/python/tutorials/microservice_facade/step8/","weight":0,"wordcount":492},{"authors":null,"categories":null,"date":-62135596800,"description":"The StringConverter class allows you to convert arbitrary values into strings.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623970720,"lvl0":"StringConverter","lvl1":"The StringConverter class allows you to convert arbitrary values into strings.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3a06fe37bfb7dc19c41699bd576d9876","permalink":"/golang/commons/convert/string_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/convert/string_converter/","section":"golang","summary":"Description The StringConverter class allows you to convert arbitrary values into strings using the following extended conversion rules:\n Numbers: are converted with \u0026lsquo;.\u0026rsquo; as decimal point DateTime: using ISO format Boolean: \u0026ldquo;true\u0026rdquo; for true and \u0026ldquo;false\u0026rdquo; for false Arrays: as comma-separated list Other objects: using ToString() method  Methods ToNullableString Converts a value into a string or returns nil when the value is nil.\n ToNullableString(value interface{}) *string\n  value: interface{} - value to convert.","tags":null,"title":"StringConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/string_converter/","weight":0,"wordcount":194},{"authors":null,"categories":null,"date":-62135596800,"description":"The StringConverter class allows you to convert arbitrary values into strings.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"StringConverter","lvl1":"The StringConverter class allows you to convert arbitrary values into strings.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bb80ca28e9c52fca63e80f56f5596836","permalink":"/net/commons/convert/string_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/string_converter/","section":"net","summary":"Description The StringConverter class allows you to convert arbitrary values into strings using the following extended conversion rules:\n Numbers: are converted with \u0026lsquo;.\u0026rsquo; as decimal point DateTime: using ISO format Boolean: \u0026ldquo;true\u0026rdquo; for true and \u0026ldquo;false\u0026rdquo; for false Arrays: as comma-separated list Other objects: using ToString() method  Static methods ToNullableString Converts value into string or returns null when value is null.\n public static string ToNullableString(object value)\n  value: object - the value to convert.","tags":null,"title":"StringConverter","type":"docs","url":"/hugo-docs/net/commons/convert/string_converter/","weight":0,"wordcount":194},{"authors":null,"categories":null,"date":-62135596800,"description":"The StringConverter class allows you to convert arbitrary values into strings.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"StringConverter","lvl1":"The StringConverter class allows you to convert arbitrary values into strings.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"294d8e9b4f0522957fb43acad6ca3352","permalink":"/node/commons/convert/string_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/convert/string_converter/","section":"node","summary":"Description The StringConverter class allows you to convert arbitrary values into strings using the following extended conversion rules:\n Numbers: are converted with \u0026lsquo;.\u0026rsquo; as decimal point DateTime: using ISO format Boolean: \u0026ldquo;true\u0026rdquo; for true and \u0026ldquo;false\u0026rdquo; for false Arrays: as comma-separated list Other objects: using toString() method  Static methods toNullableString Converts value into string or returns null when value is null.\n public static toNullableString(value: any): string\n  value: any - the value to convert.","tags":null,"title":"StringConverter","type":"docs","url":"/hugo-docs/node/commons/convert/string_converter/","weight":0,"wordcount":192},{"authors":null,"categories":null,"date":-62135596800,"description":"The StringConverter class allows you to convert arbitrary values into strings.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"StringConverter","lvl1":"The StringConverter class allows you to convert arbitrary values into strings.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"83d8e7dd22cacbdcead79ace7d0b1815","permalink":"/python/commons/convert/string_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/string_converter/","section":"python","summary":"Description The StringConverter class allows you to convert arbitrary values into strings using the following extended conversion rules:\n Numbers: are converted with \u0026lsquo;.\u0026rsquo; as decimal point DateTime: using ISO format Boolean: \u0026ldquo;true\u0026rdquo; for true and \u0026ldquo;false\u0026rdquo; for false Arrays: as comma-separated list Other objects: using to_string() method  Static methods to_nullable_string Converts value into string or returns None when value is None.\n static to_nullable_string(value: Any): Optional[str]\n  value: Any - the value to convert.","tags":null,"title":"StringConverter","type":"docs","url":"/hugo-docs/python/commons/convert/string_converter/","weight":0,"wordcount":187},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a map (dictionary) where all keys and values are strings.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":2400,"keywords":null,"kind":"page","lang":"en","lastmod":1624223120,"lvl0":"StringValueMap","lvl1":"Cross-language implementation of a map (dictionary) where all keys and values are strings.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d29c63358e617f73215289e141c71eb3","permalink":"/golang/commons/data/string_value_map/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/golang/commons/data/string_value_map/","section":"golang","summary":"Description The StringValueMap class allows you to create a cross-language implementation of a map (dictionary) where all keys and values are strings.\nImportant points\n The class provides several methods to convert the stored values to different types, such as array, boolean or datetime. This class is widely used in Pip.Services as a basis for variety of classes, such as ConfigParams, ConnectionParams, CredentialParams (in the Pip.Services components package) and others.  Constructors NewStringValueMap Creates a new instance of the map and assigns its value.","tags":null,"title":"StringValueMap","type":"docs","url":"/hugo-docs/golang/commons/data/string_value_map/","weight":0,"wordcount":2309},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a map (dictionary) where all keys and values are strings.\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":2400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"StringValueMap","lvl1":"Cross-language implementation of a map (dictionary) where all keys and values are strings.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0806e1b3fa7007f7550b538812b01726","permalink":"/net/commons/data/string_value_map/","publishdate":"0001-01-01T00:00:00Z","readingtime":12,"relpermalink":"/net/commons/data/string_value_map/","section":"net","summary":"Description The StringValueMap class allows you to create a cross-language implementation of a map (dictionary) where all keys and values are strings.\nImportant points\n The class provides several methods to convert the stored values to different types, such as array, bool or datetime. This class is widely used in Pip.Services as a basis for variety of classes, such as ConfigParams, ConnectionParams, CredentialParams (in the Pip.Services components package) and others.  Constructors Creates a new instance of the map and assigns its value.","tags":null,"title":"StringValueMap","type":"docs","url":"/hugo-docs/net/commons/data/string_value_map/","weight":0,"wordcount":2388},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a map (dictionary) where all keys and values are strings.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":2300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"StringValueMap","lvl1":"Cross-language implementation of a map (dictionary) where all keys and values are strings.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5582cb8a1626cdfe64c50ce8a2c92915","permalink":"/node/commons/data/string_value_map/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/node/commons/data/string_value_map/","section":"node","summary":"Description The StringValueMap class allows you to create a cross-language implementation of a map (dictionary) where all keys and values are strings.\nImportant points\n The class provides several methods to convert the stored values to different types, such as array, boolean or datetime. This class is widely used in Pip.Services as a basis for variety of classes, such as ConfigParams, ConnectionParams, CredentialParams (in the Pip.Services components package) and others.  Constructors Creates a new instance of the map and assigns its value.","tags":null,"title":"StringValueMap","type":"docs","url":"/hugo-docs/node/commons/data/string_value_map/","weight":0,"wordcount":2235},{"authors":null,"categories":null,"date":-62135596800,"description":"Cross-language implementation of a map (dictionary) where all keys and values are strings.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":2200,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"StringValueMap","lvl1":"Cross-language implementation of a map (dictionary) where all keys and values are strings.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"68ddf0259a183f23e858d5eaa247cacf","permalink":"/python/commons/data/string_value_map/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/python/commons/data/string_value_map/","section":"python","summary":"Description The StringValueMap class allows you to create a cross-language implementation of a map (dictionary) where all keys and values are strings.\nImportant points\n The class provides several methods to convert the stored values to different types, such as array, boolean or datetime. This class is widely used in Pip.Services as a basis for variety of classes, such as ConfigParams, ConnectionParams, CredentialParams (in the Pip.Services components package) and others.  Constructors Creates a new instance of the map and assigns its value.","tags":null,"title":"StringValueMap","type":"docs","url":"/hugo-docs/python/commons/data/string_value_map/","weight":0,"wordcount":2171},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"lvl0":"Tags","lvl1":"","lvl2":"tags","lvl3":null,"lvl4":null,"lvl5":"","objectID":"","permalink":"/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/hugo-docs/tags/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Tags Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"27cdb8c887d9e1370abff670df4be553","permalink":"/microservices/content/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/tags/","section":"microservices","summary":"Keeps track of search tags entered by a party (user or other party he or she represents). Later the tags can be used to enhance user experience in autocomplete and search functions.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Tags Microservice","type":"docs","url":"/hugo-docs/microservices/content/tags/","weight":0,"wordcount":59},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to extract and process search tags from objects.\n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624223720,"lvl0":"TagsProcessor","lvl1":"Helper class used to extract and process search tags from objects.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aa1e5c6a6c91667e7a4d6339100da4ab","permalink":"/golang/commons/data/tags_processor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/data/tags_processor/","section":"golang","summary":"Description The TagsProcessor class allows you to extract and process search tags from objects.\nImportant points\n The search tags can be kept individually or embedded as hash tags inside text. E.g. \u0026ldquo;This text has #hash_tag that can be used for search.\u0026rdquo;  Methods CompressTag Compress a tag by removing special symbols like spaces, \u0026lsquo;_\u0026rsquo; and \u0026lsquo;#\u0026rsquo; and converting the tag to lower case. When tags are compressed they can be matched in search queries.","tags":null,"title":"TagsProcessor","type":"docs","url":"/hugo-docs/golang/commons/data/tags_processor/","weight":0,"wordcount":359},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to extract and process search tags from objects.\n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"TagsProcessor","lvl1":"Helper class used to extract and process search tags from objects.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8d0dc6e5a49080ced63683c8cfab2832","permalink":"/node/commons/data/tags_processor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/data/tags_processor/","section":"node","summary":"Description The TagsProcessor class allows you to extract and process search tags from objects.\nImportant points\n The search tags can be kept individually or embedded as hash tags inside text. E.g. \u0026ldquo;This text has #hash_tag that can be used for search.\u0026rdquo;  Static methods compressTag Compress a tag by removing special symbols like spaces, \u0026lsquo;_\u0026rsquo; and \u0026lsquo;#\u0026rsquo; and converting the tag to lower case. When tags are compressed they can be matched in search queries.","tags":null,"title":"TagsProcessor","type":"docs","url":"/hugo-docs/node/commons/data/tags_processor/","weight":0,"wordcount":370},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to extract and process search tags from objects.\n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1620998031,"lvl0":"TagsProcessor","lvl1":"Helper class used to extract and process search tags from objects.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4a27d557eb760ffc9d21b559783c3476","permalink":"/python/commons/data/tags_processor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/data/tags_processor/","section":"python","summary":"Description The TagsProcessor class allows you to extract and process search tags from objects.\nImportant points\n The search tags can be kept individually or embedded as hash tags inside text. E.g. \u0026ldquo;This text has #hash_tag that can be used for search.\u0026rdquo;  Static methods compress_tag Compress a tag by removing special symbols like spaces, \u0026lsquo;_\u0026rsquo; and \u0026lsquo;#\u0026rsquo; and converting the tag to lower case. When tags are compressed they can be matched in search queries.","tags":null,"title":"TagsProcessor","type":"docs","url":"/hugo-docs/python/commons/data/tags_processor/","weight":0,"wordcount":361},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class used to extract and process search tags from objects.\n\n**TODO: this class is not realized yet for this language**\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"TagsProcessor!","lvl1":"Helper class used to extract and process search tags from objects.\n\n**TODO: this class is not realized yet for this language**\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e1abbed8c60d57c68099d1c493fdc53b","permalink":"/net/commons/data/tags_processor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/data/tags_processor/","section":"net","summary":"Description The TagsProcessor class allows you to extract and process search tags from objects.\nImportant points\n The search tags can be kept individually or embedded as hash tags inside text. E.g. \u0026ldquo;This text has #hash_tag that can be used for search.\u0026rdquo;  Static methods compressTag Compress a tag by removing special symbols like spaces, \u0026lsquo;_\u0026rsquo; and \u0026lsquo;#\u0026rsquo; and converting the tag to lower case. When tags are compressed they can be matched in search queries.","tags":null,"title":"TagsProcessor!","type":"docs","url":"/hugo-docs/net/commons/data/tags_processor/","weight":0,"wordcount":370},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/components/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Test","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"054e41c9e8d90e44ef02a332c1783743","permalink":"/dart/components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/components/test/","section":"dart","summary":"","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/dart/components/test/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides methods to create process shutdowns.\n","dir":"golang/components/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Test","lvl1":"This package provides methods to create process shutdowns.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c0f828192a898a21e5611495216db683","permalink":"/golang/components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/test/","section":"golang","summary":" Classes DefaultTestFactory Creates test components by their descriptors.\nShutdown Random shutdown component that crashes the process using various methods.\nThe component is usually used for testing, but brave developers can try to use it in production to randomly crash microservices. It follows the concept of \u0026ldquo;Chaos Monkey\u0026rdquo; popularized by Netflix.\n ","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/golang/components/test/","weight":0,"wordcount":50},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO add description\n","dir":"golang/messaging/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Test","lvl1":"TODO add description\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e0f67ca4025b9dfb775d3c92544077be","permalink":"/golang/messaging/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/test/","section":"golang","summary":" Classes TestMessageReceiver TODO add description\n ","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/golang/messaging/test/","weight":0,"wordcount":5},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides methods to create process shutdowns.\n","dir":"node/components/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Test","lvl1":"This package provides methods to create process shutdowns.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8f943f66c2b09f38aaa470212189e76d","permalink":"/node/components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/test/","section":"node","summary":" Classes DefaultTestFactory Creates test components by their descriptors.\nShutdown Random shutdown component that crashes the process using various methods.\nThe component is usually used for testing, but brave developers can try to use it in production to randomly crash microservices. It follows the concept of \u0026ldquo;Chaos Monkey\u0026rdquo; popularized by Netflix.\n ","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/node/components/test/","weight":0,"wordcount":50},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO add description\n","dir":"node/messaging/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622576898,"lvl0":"Test","lvl1":"TODO add description\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"32b8eb7bb70b6f06f8a8605deb13daa9","permalink":"/node/messaging/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/test/","section":"node","summary":" Classes TestMessageReceiver TODO add description\n ","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/node/messaging/test/","weight":0,"wordcount":5},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to define a Commandable HTTP client and a REST client that can be used for automated testing.\n","dir":"node/rpc/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1623078433,"lvl0":"Test","lvl1":"This package contains classes used to define a Commandable HTTP client and a REST client that can be used for automated testing.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3c1021c5ced0da328ec440ae07eb8237","permalink":"/node/rpc/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/test/","section":"node","summary":" Classes TestCommandableHttpClient Commandable HTTP client used for automated testing.\nTestRestClient REST client used for automated testing.\n ","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/node/rpc/test/","weight":0,"wordcount":16},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides methods to create process shutdowns.\n","dir":"python/components/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621107984,"lvl0":"Test","lvl1":"This package provides methods to create process shutdowns.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"63cbb02f5fb1c229cea0df8f0c933f3d","permalink":"/python/components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/test/","section":"python","summary":" Classes DefaultTestFactory Creates test components by their descriptors.\nShutdown Random shutdown component that crashes the process using various methods.\nThe component is usually used for testing, but brave developers can try to use it in production to randomly crash microservices. It follows the concept of \u0026ldquo;Chaos Monkey\u0026rdquo; popularized by Netflix.\n ","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/python/components/test/","weight":0,"wordcount":50},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains a class used to test message reception.\n","dir":"python/messaging/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622579623,"lvl0":"Test","lvl1":"This package contains a class used to test message reception.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"76f2c9df0ed133211e5f57c293001675","permalink":"/python/messaging/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/test/","section":"python","summary":" Classes TestMessageReceiver Used to receive a message, obtain a list of received messages and the number of received messages, and to clear the message list.\n ","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/python/messaging/test/","weight":0,"wordcount":25},{"authors":null,"categories":null,"date":-62135596800,"description":"This package contains classes used to define a Commandable HTTP client and a REST client that can be used for automated testing.\n","dir":"python/rpc/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1622831379,"lvl0":"Test","lvl1":"This package contains classes used to define a Commandable HTTP client and a REST client that can be used for automated testing.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"78615b2c13a15e599053fb79c862de85","permalink":"/python/rpc/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/test/","section":"python","summary":" Classes TestCommandableHttpClient Commandable HTTP client used for automated testing.\nTestRestClient REST client used for automated testing.\n ","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/python/rpc/test/","weight":0,"wordcount":16},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides methods to create process shutdowns.\n\n**TODO: this package is not realized yet for this language**\n","dir":"net/components/test/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621879821,"lvl0":"Test!","lvl1":"This package provides methods to create process shutdowns.\n\n**TODO: this package is not realized yet for this language**\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c6ceeaf53d8507b40c2960c547a45f24","permalink":"/net/components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/test/","section":"net","summary":" Classes DefaultTestFactory Creates test components by their descriptors.\nShutdown Random shutdown component that crashes the process using various methods.\nThe component is usually used for testing, but brave developers can try to use it in production to randomly crash microservices. It follows the concept of \u0026ldquo;Chaos Monkey\u0026rdquo; popularized by Netflix.\n ","tags":null,"title":"Test!","type":"docs","url":"/hugo-docs/net/components/test/","weight":0,"wordcount":50},{"authors":null,"categories":null,"date":-62135596800,"description":"HTTP client for automated testing.\n","dir":"node/rpc/test/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623078433,"lvl0":"TestCommandableHttpClient","lvl1":"HTTP client for automated testing.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c0541e46e955b1a28ab2d8ed93f40e5f","permalink":"/node/rpc/test/test_commandable_http_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/test/test_commandable_http_client/","section":"node","summary":"Extends: CommandableHttpClient\nDescription The TestCommandableHttpClient class allows you to create a commandable HTTP client for automated testing.\nConstructors Creates a new instance of the TestCommandableHttpClient class.\n public constructor(baseRoute: string)\n  baseRoute: string - base route to the remote method.  Instance methods callCommand Calls a remote method via HTTP commadable protocol. The call is made via POST operation and all parameters are sent in the body object. The complete route to the remote method is defined as baseRoute + \u0026ldquo;/\u0026rdquo; + name.","tags":null,"title":"TestCommandableHttpClient","type":"docs","url":"/hugo-docs/node/rpc/test/test_commandable_http_client/","weight":0,"wordcount":120},{"authors":null,"categories":null,"date":-62135596800,"description":"HTTP client for automated testing.\n","dir":"python/rpc/test/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622847985,"lvl0":"TestCommandableHttpClient","lvl1":"HTTP client for automated testing.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a9a9af33e2c7a5ce94279c0ccb72312f","permalink":"/python/rpc/test/test_commandable_http_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/test/test_commandable_http_client/","section":"python","summary":"Implements: CommandableHttpClient\nDescription The TestCommandableHttpClient class allows you to create a commandable HTTP client for automated testing.\nConstructors Creates a new instance of the TestCommandableHttpClient class.\n CommandableHttpClient(base_route: str)\n  base_route: str - base route to the remote method.  Instance methods call_command Calls a remote method via HTTP commadable protocol. The call is made via POST operation and all parameters are sent in the body object. The complete route to the remote method is defined as baseRoute + \u0026ldquo;/\u0026rdquo; + name.","tags":null,"title":"TestCommandableHttpClient","type":"docs","url":"/hugo-docs/python/rpc/test/test_commandable_http_client/","weight":0,"wordcount":118},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO add description\n","dir":"golang/messaging/test/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"TestMessageReceiver","lvl1":"TODO add description\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"494a401b8a211bf5a5797f23bcc1a8a6","permalink":"/golang/messaging/test/test_message_receiver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/messaging/test/test_message_receiver/","section":"golang","summary":"Implements: IMessageReceiver, ICleanable\nDescription TODO add description\nConstructors TODO add description\n public constructor()\n Properties messages Gets the list of received messages.\n public messages(): MessageEnvelope[]\n  returns: MessageEnvelope[] - TODO add description  messageCount Gets the received message count.\n public messageCount(): number\n  returns: number - TODO add description  Methods clear Clears all received messagers.\n public clear(correlationId: string): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain.","tags":null,"title":"TestMessageReceiver","type":"docs","url":"/hugo-docs/golang/messaging/test/test_message_receiver/","weight":0,"wordcount":100},{"authors":null,"categories":null,"date":-62135596800,"description":"TODO add description\n","dir":"node/messaging/test/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622656041,"lvl0":"TestMessageReceiver","lvl1":"TODO add description\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"92ce0aa7186f77f0bca04f23bf4ea947","permalink":"/node/messaging/test/test_message_receiver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/messaging/test/test_message_receiver/","section":"node","summary":"Implements: IMessageReceiver, ICleanable\nDescription TODO add description\nConstructors TODO add description\n public constructor()\n Properties messages Gets the list of received messages.\n public messages(): MessageEnvelope[]\n  returns: MessageEnvelope[] - TODO add description  messageCount Gets the received message count.\n public messageCount(): number\n  returns: number - TODO add description  Instance methods clear Clears all received messagers.\n public clear(correlationId: string): Promise\u0026lt;void\u0026gt;\n  correlationId: string - (optional) transaction id to trace execution through call chain.","tags":null,"title":"TestMessageReceiver","type":"docs","url":"/hugo-docs/node/messaging/test/test_message_receiver/","weight":0,"wordcount":101},{"authors":null,"categories":null,"date":-62135596800,"description":"Class used to receive a message, obtain a list of received messages and the number of received messages, and to clear the message list. \n","dir":"python/messaging/test/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622581702,"lvl0":"TestMessageReceiver","lvl1":"Class used to receive a message, obtain a list of received messages and the number of received messages, and to clear the message list. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8e9bf87993e9490b8ae6f6ab883d7dc1","permalink":"/python/messaging/test/test_message_receiver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/messaging/test/test_message_receiver/","section":"python","summary":"Implements: IMessageReceiver, ICleanable\nDescription The TestMessageReceiver allows you to receive a message, obtain a list of received messages and the number of received messages, and to clear the message list.\nConstructors Creates a TestMessageReceiver component.\n TestMessageReceiver()\n Properties messages Gets the list of received messages.\n messages(): List[MessageEnvelope]\n  returns: List[MessageEnvelope] - list of received messages  message_count Gets the received message count.\n message_count(): int\n  returns: int - number of messages  Instance methods clear Clears all received messagers.","tags":null,"title":"TestMessageReceiver","type":"docs","url":"/hugo-docs/python/messaging/test/test_message_receiver/","weight":0,"wordcount":120},{"authors":null,"categories":null,"date":-62135596800,"description":"REST client used for automated testing.\n","dir":"node/rpc/test/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623078433,"lvl0":"TestRestClient","lvl1":"REST client used for automated testing.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"83872138e090c72d64dc2eeee64ff445","permalink":"/node/rpc/test/test_rest_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/rpc/test/test_rest_client/","section":"node","summary":"Extends: RestClient\nDescription The TestRestClient class allows you to create a REST client that can be used for automated testing.\nConstructors Creates a new instance of the TestRestClient class.\n public constructor(baseRoute: string)\n  baseRoute: string - base route to the REST client.  Instance methods call Calls a remote method via the HTTP/REST protocol.\n public call\u0026lt;T\u0026gt;(method: string, route: string, correlationId?: string, params: any = {}, data?: any): Promise\u0026lt;T\u0026gt;","tags":null,"title":"TestRestClient","type":"docs","url":"/hugo-docs/node/rpc/test/test_rest_client/","weight":0,"wordcount":121},{"authors":null,"categories":null,"date":-62135596800,"description":"REST client used for automated testing.\n","dir":"python/rpc/test/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1622848058,"lvl0":"TestRestClient","lvl1":"REST client used for automated testing.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c99588ee7ee75b3115e428c92d394b1e","permalink":"/python/rpc/test/test_rest_client/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/rpc/test/test_rest_client/","section":"python","summary":"Implements: RestClient\nDescription The TestRestClient class allows you to create a REST client that can be used for automated testing.\nConstructors Creates a new instance of the TestRestClient class.\n TestRestClient(base_route: str)\n  base_route: str - base route to the REST client.  Instance methods call Calls a remote method via the HTTP/REST protocol.\n call(method: str, route: str, correlation_id: Optional[str] = None, params: Any = None, data: Any = None): Any","tags":null,"title":"TestRestClient","type":"docs","url":"/hugo-docs/python/rpc/test/test_rest_client/","weight":0,"wordcount":123},{"authors":null,"categories":null,"date":-62135596800,"description":"Converts objects to TimeSpans.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"TimeSpanConverter","lvl1":"Converts objects to TimeSpans.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6dcff7c9128fb635c5403e135b8f6be9","permalink":"/net/commons/convert/time_span_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/time_span_converter/","section":"net","summary":"Description TODO: add description\nStatic methods ToNullableTimeSpan TODO: add description\n public static TimeSpan? ToNullableTimeSpan(object value)\n  value: object - TODO: add description returns: TimeSpan - TODO: add description  ToTimeSpan TODO: add description\n public static TimeSpan ToTimeSpan(object value)\n  value: object - TODO: add description returns: TimeSpan - TODO: add description  ToTimeSpanWithDefault TODO: add description\n public static TimeSpan ToTimeSpanWithDefault(object value, TimeSpan? defaultValue)\n  value: object - TODO: add description defaultValue: TimeSpan - TODO: add description returns: TimeSpan - TODO: add description  ","tags":null,"title":"TimeSpanConverter","type":"docs","url":"/hugo-docs/net/commons/convert/time_span_converter/","weight":0,"wordcount":77},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/content/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Tips Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0035712302121ba379516c73824310c1","permalink":"/microservices/content/tips/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/content/tips/","section":"microservices","summary":"Shows useful tips to users that help them use application more effectively. Each tip:\n  Can be written in multiple languages\n  Can include pictures and document attachments\n  Supports editing lifecycle via status tracking\n  Server implementations: NodeJS\n  Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC\n  Persistence: Memory, Flat Files, MongoDB, Couchbase\n  Deployment options: Monolith, Process, Docker, AWS Lambda","tags":null,"title":"Tips Microservice","type":"docs","url":"/hugo-docs/microservices/content/tips/","weight":0,"wordcount":78},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object that is used to pass the results of paginated queries.\n       \n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624223875,"lvl0":"TokenizedDataPage","lvl1":"Data transfer object that is used to pass the results of paginated queries.\n       \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ad2dcfc9067a98f7f4167383906a1d95","permalink":"/golang/commons/data/tokenized_data_page/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/data/tokenized_data_page/","section":"golang","summary":"Description The TokenizedDataPageData allows you to create a transfer object that is used to pass the results of paginated queries.\nImportant points\n This object contains the items of the retrieved page and the total number of items (optional). Additionally, the data page returns a token that has to be passed to the next search as a starting point. Most often, this object type is used to send responses to paginated queries.","tags":null,"title":"TokenizedDataPage","type":"docs","url":"/hugo-docs/golang/commons/data/tokenized_data_page/","weight":0,"wordcount":237},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object that is used to pass the results of paginated queries.\n       \n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"TokenizedDataPage","lvl1":"Data transfer object that is used to pass the results of paginated queries.\n       \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5b0379325d59755aa70458ee1c423609","permalink":"/node/commons/data/tokenized_data_page/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/data/tokenized_data_page/","section":"node","summary":"Description The TokenizedDataPageData allows you to create a transfer object that is used to pass the results of paginated queries.\nImportant points\n This object contains the items of the retrieved page and the total number of items (optional). Additionally, the data page returns a token that has to be passed to the next search as a starting point. Most often, this object type is used to send responses to paginated queries.","tags":null,"title":"TokenizedDataPage","type":"docs","url":"/hugo-docs/node/commons/data/tokenized_data_page/","weight":0,"wordcount":248},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object that is used to pass the results of paginated queries.\n       \n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620356279,"lvl0":"TokenizedDataPage","lvl1":"Data transfer object that is used to pass the results of paginated queries.\n       \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4fc87d3615a9ccb655d0c04cf22ff56b","permalink":"/python/commons/data/tokenized_data_page/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/data/tokenized_data_page/","section":"python","summary":"Description The TokenizedDataPageData allows you to create a transfer object that is used to pass the results of paginated queries.\nImportant points\n This object contains the items of the retrieved page and the total number of items (optional). Additionally, the data page returns a token that has to be passed to the next search as a starting point. Most often, this object type is used to send responses to paginated queries.","tags":null,"title":"TokenizedDataPage","type":"docs","url":"/hugo-docs/python/commons/data/tokenized_data_page/","weight":0,"wordcount":240},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object that is used to pass the results of paginated queries.\n\n**TODO: this class is not realized yet for this language**\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"TokenizedDataPage!","lvl1":"Data transfer object that is used to pass the results of paginated queries.\n\n**TODO: this class is not realized yet for this language**\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6797f71d2faeb81a9fd5b523357e5c04","permalink":"/net/commons/data/tokenized_data_page/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/data/tokenized_data_page/","section":"net","summary":"Description The TokenizedDataPageData allows you to create a transfer object that is used to pass the results of paginated queries.\nImportant points\n This object contains the items of the retrieved page and the total number of items (optional). Additionally, the data page returns a token that has to be passed to the next search as a starting point. Most often, this object type is used to send responses to paginated queries.","tags":null,"title":"TokenizedDataPage!","type":"docs","url":"/hugo-docs/net/commons/data/tokenized_data_page/","weight":0,"wordcount":248},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object used to pass tokenized paging parameters for queries. \n","dir":"golang/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624224113,"lvl0":"TokenizedPagingParams","lvl1":"Data transfer object used to pass tokenized paging parameters for queries. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"292ac187ae4f29dd8deeb834f2fc0917","permalink":"/golang/commons/data/tokenized_paging_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/data/tokenized_paging_params/","section":"golang","summary":"Description The TokenizedPagingParams allows you to create data transfer objects used to pass tokenized parameters for queries.\nImportant points\n The page is defined by two parameters:  the token token that defines a starting point for the search. the take parameter sets how many items to return in a page.   Additionally, the optional total parameter tells to return the total number of items in the query. However, not all implementations support the total parameter because its generation may lead to severe performance implications.","tags":null,"title":"TokenizedPagingParams","type":"docs","url":"/hugo-docs/golang/commons/data/tokenized_paging_params/","weight":0,"wordcount":340},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object used to pass tokenized paging parameters for queries. \n","dir":"node/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1622669208,"lvl0":"TokenizedPagingParams","lvl1":"Data transfer object used to pass tokenized paging parameters for queries. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eb5448de1f206b29f784ac8eaf51f782","permalink":"/node/commons/data/tokenized_paging_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/data/tokenized_paging_params/","section":"node","summary":"Description The TokenizedPagingParams allows you to create data transfer objects used to pass tokenized parameters for queries.\nImportant points\n The page is defined by two parameters:  the token token that defines a starting point for the search. the take parameter sets how many items to return in a page.   Additionally, the optional total parameter tells to return the total number of items in the query. However, not all implementations support the total parameter because its generation may lead to severe performance implications.","tags":null,"title":"TokenizedPagingParams","type":"docs","url":"/hugo-docs/node/commons/data/tokenized_paging_params/","weight":0,"wordcount":371},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object used to pass tokenized paging parameters for queries. \n","dir":"python/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"TokenizedPagingParams","lvl1":"Data transfer object used to pass tokenized paging parameters for queries. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2859d4cda662788fdbdb03b52111ba6c","permalink":"/python/commons/data/tokenized_paging_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/data/tokenized_paging_params/","section":"python","summary":"Description The TokenizedPagingParams allows you to create data transfer objects used to pass tokenized parameters for queries.\nImportant points\n The page is defined by two parameters:  the token token that defines a starting point for the search. the take parameter sets how many items to return in a page.   Additionally, the optional total parameter tells to return the total number of items in the query. However, not all implementations support the total parameter because its generation may lead to severe performance implications.","tags":null,"title":"TokenizedPagingParams","type":"docs","url":"/hugo-docs/python/commons/data/tokenized_paging_params/","weight":0,"wordcount":358},{"authors":null,"categories":null,"date":-62135596800,"description":"Data transfer object used to pass tokenized paging parameters for queries. \n\n**TODO: this class is not realized yet for this language**\n","dir":"net/commons/data/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"TokenizedPagingParams!","lvl1":"Data transfer object used to pass tokenized paging parameters for queries. \n\n**TODO: this class is not realized yet for this language**\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"98f8d491a293b0eb2d85b530dbed3cef","permalink":"/net/commons/data/tokenized_paging_params/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/data/tokenized_paging_params/","section":"net","summary":"Description The TokenizedPagingParams allows you to create data transfer objects used to pass tokenized parameters for queries.\nImportant points\n The page is defined by two parameters:  the token token that defines a starting point for the search. the take parameter sets how many items to return in a page.   Additionally, the optional total parameter tells to return the total number of items in the query. However, not all implementations support the total parameter because its generation may lead to severe performance implications.","tags":null,"title":"TokenizedPagingParams!","type":"docs","url":"/hugo-docs/net/commons/data/tokenized_paging_params/","weight":0,"wordcount":371},{"authors":null,"categories":null,"date":-62135596800,"description":"Schema to validate TokenizedPagingParams.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"TokenizedPagingParamsSchema","lvl1":"Schema to validate TokenizedPagingParams.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fd1ffe988af50b41111c100cfd41bdc8","permalink":"/golang/commons/validate/tokenized_paging_params_schema/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/tokenized_paging_params_schema/","section":"golang","summary":"Extends: BadRequestException\nDescription TODO: add description\nConstructors NewTokenizedPagingParamsSchema Creates a new instance of validation schema.\n NewTokenizedPagingParamsSchema() *ObjectSchema\n ","tags":null,"title":"TokenizedPagingParamsSchema","type":"docs","url":"/hugo-docs/golang/commons/validate/tokenized_paging_params_schema/","weight":0,"wordcount":17},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides interfaces and classes used to create different types of tracers. The main tools available from this package are a tracer factory and a tracer composite class. The first allows to create a factory for tracers, and the second to combine different tracers into one. Additionally, it provides tracers that allow to store their contents in memory and logs. \n","dir":"golang/components/trace/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1624324770,"lvl0":"Trace","lvl1":"This package provides interfaces and classes used to create different types of tracers. The main tools available from this package are a tracer factory and a tracer composite class. The first allows to create a factory for tracers, and the second to combine different tracers into one. Additionally, it provides tracers that allow to store their contents in memory and logs. \n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aa688acdb53033cf1df030d7e158ab93","permalink":"/golang/components/trace/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/trace/","section":"golang","summary":"Interfaces ITracer Interface for tracer components that capture operation traces.\nClasses CachedTracer Abstract tracer that caches recorded traces in memory and periodically dumps them.\nCompositeTracer Aggregates all tracers from component references under a single component.\nDefaultTracerFactory Creates ITracer components by their descriptors.\nLogTracer Tracer that dumps recorded traces to logger.\nNullTracer Dummy implementation of tracer that doesn\u0026rsquo;t do anything.\nOperationTrace Data object to store captured operation traces.\nTraceTiming Timing object returned by ITracer.","tags":null,"title":"Trace","type":"docs","url":"/hugo-docs/golang/components/trace/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides interfaces and classes used to create different types of tracers. The main tools available from this package are a tracer factory and a tracer composite class. The first allows to create a factory for tracers, and the second to combine different tracers into one. Additionally, it provides tracers that allow to store their contents in memory and logs. \n","dir":"net/components/trace/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621879821,"lvl0":"Trace","lvl1":"This package provides interfaces and classes used to create different types of tracers. The main tools available from this package are a tracer factory and a tracer composite class. The first allows to create a factory for tracers, and the second to combine different tracers into one. Additionally, it provides tracers that allow to store their contents in memory and logs. \n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e6c15d1cb51580a8c1487caea11fe2a0","permalink":"/net/components/trace/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/trace/","section":"net","summary":"Interfaces ITracer Interface for tracer components that capture operation traces.\nClasses CachedTracer Abstract tracer that caches recorded traces in memory and periodically dumps them.\nCompositeTracer Aggregates all tracers from component references under a single component.\nDefaultTracerFactory Creates ITracer components by their descriptors.\nLogTracer Tracer that dumps recorded traces to logger.\nNullTracer Dummy implementation of tracer that doesn\u0026rsquo;t do anything.\nOperationTrace Data object to store captured operation traces.\nTraceTiming Timing object returned by ITracer.","tags":null,"title":"Trace","type":"docs","url":"/hugo-docs/net/components/trace/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides interfaces and classes used to create different types of tracers. The main tools available from this package are a tracer factory and a tracer composite class. The first allows to create a factory for tracers, and the second to combine different tracers into one. Additionally, it provides tracers that allow to store their contents in memory and logs. \n","dir":"node/components/trace/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621287388,"lvl0":"Trace","lvl1":"This package provides interfaces and classes used to create different types of tracers. The main tools available from this package are a tracer factory and a tracer composite class. The first allows to create a factory for tracers, and the second to combine different tracers into one. Additionally, it provides tracers that allow to store their contents in memory and logs. \n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5bea88d89d267416e93c31f0656d523c","permalink":"/node/components/trace/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/trace/","section":"node","summary":"Interfaces ITracer Interface for tracer components that capture operation traces.\nClasses CachedTracer Abstract tracer that caches recorded traces in memory and periodically dumps them.\nCompositeTracer Aggregates all tracers from component references under a single component.\nDefaultTracerFactory Creates ITracer components by their descriptors.\nLogTracer Tracer that dumps recorded traces to logger.\nNullTracer Dummy implementation of tracer that doesn\u0026rsquo;t do anything.\nOperationTrace Data object to store captured operation traces.\nTraceTiming Timing object returned by ITracer.","tags":null,"title":"Trace","type":"docs","url":"/hugo-docs/node/components/trace/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"This package provides interfaces and classes used to create different types of tracers. The main tools available from this package are a tracer factory and a tracer composite class. The first allows to create a factory for tracers, and the second to combine different tracers into one. Additionally, it provides tracers that allow to store their contents in memory and logs. \n","dir":"python/components/trace/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1621283159,"lvl0":"Trace","lvl1":"This package provides interfaces and classes used to create different types of tracers. The main tools available from this package are a tracer factory and a tracer composite class. The first allows to create a factory for tracers, and the second to combine different tracers into one. Additionally, it provides tracers that allow to store their contents in memory and logs. \n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c3f511e7cfbcda67537b090db3e5bb01","permalink":"/python/components/trace/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/trace/","section":"python","summary":"Interfaces ITracer Interface for tracer components that capture operation traces.\nClasses CachedTracer Abstract tracer that caches recorded traces in memory and periodically dumps them.\nCompositeTracer Aggregates all tracers from component references under a single component.\nDefaultTracerFactory Creates ITracer components by their descriptors.\nLogTracer Tracer that dumps recorded traces to logger.\nNullTracer Dummy implementation of tracer that doesn\u0026rsquo;t do anything.\nOperationTrace Data object to store captured operation traces.\nTraceTiming Timing object returned by ITracer.","tags":null,"title":"Trace","type":"docs","url":"/hugo-docs/python/components/trace/","weight":0,"wordcount":84},{"authors":null,"categories":null,"date":-62135596800,"description":"Timing object returned by [ITracer.begin_trace](../itracer/#begin_trace) to end the timing of an execution block and record the associated trace.\n","dir":"golang/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1624324770,"lvl0":"TraceTiming","lvl1":"Timing object returned by [ITracer.begin_trace](../itracer/#begin_trace) to end the timing of an execution block and record the associated trace.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f8445620dc78901f244b6adec5186230","permalink":"/golang/components/trace/trace_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/components/trace/trace_timing/","section":"golang","summary":"Description The TraceTiming class is used to create the timing object returned by ITracer.begin_trace to end the timing of and execution block and record the associated trace.\nConstructors NewTraceTiming Creates a new instance of the timing callback object.\n NewTraceTiming(correlationId string, component string, operation string, tracer ITracer) *TraceTiming\n  correlationId: string - (optional) transaction id to trace execution through a call chain. component: string - an associated component name operation: string - an associated operation name tracer: ITracer - a callback that shall be called when endTiming is called.","tags":null,"title":"TraceTiming","type":"docs","url":"/hugo-docs/golang/components/trace/trace_timing/","weight":0,"wordcount":150},{"authors":null,"categories":null,"date":-62135596800,"description":"Timing object returned by [ITracer.begin_trace](../itracer/#begin_trace) to end the timing of an execution block and record the associated trace.\n","dir":"net/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"TraceTiming","lvl1":"Timing object returned by [ITracer.begin_trace](../itracer/#begin_trace) to end the timing of an execution block and record the associated trace.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f2beb67a70a297b2690a981f5c7fd804","permalink":"/net/components/trace/trace_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/components/trace/trace_timing/","section":"net","summary":"Description The TraceTiming class is used to create the timing object returned by ITracer.begin_trace to end the timing of and execution block and record the associated trace.\nConstructors Creates a new instance of the timing callback object.\n public TraceTiming(string correlationId, string component, string operation, ITracer tracer = null)\n  correlationId: string - (optional) transaction id to trace execution through a call chain. component: string - an associated component name operation: string - an associated operation name tracer: ITracer - a callback that shall be called when endTiming is called.","tags":null,"title":"TraceTiming","type":"docs","url":"/hugo-docs/net/components/trace/trace_timing/","weight":0,"wordcount":154},{"authors":null,"categories":null,"date":-62135596800,"description":"Timing object returned by [ITracer.begin_trace](../itracer/#begin_trace) to end the timing of an execution block and record the associated trace.\n","dir":"node/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"TraceTiming","lvl1":"Timing object returned by [ITracer.begin_trace](../itracer/#begin_trace) to end the timing of an execution block and record the associated trace.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7a684eec74b5bd3679798ddfa0706d1e","permalink":"/node/components/trace/trace_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/components/trace/trace_timing/","section":"node","summary":"Description The TraceTiming class is used to create the timing object returned by ITracer.begin_trace to end the timing of and execution block and record the associated trace.\nConstructors Creates a new instance of the timing callback object.\n public constructor(correlationId: string, component: string, operation: string, tracer: ITracer = null)\n  correlationId: string - (optional) transaction id to trace execution through a call chain. component: string - an associated component name operation: string - an associated operation name tracer: ITracer - a callback that shall be called when endTiming is called.","tags":null,"title":"TraceTiming","type":"docs","url":"/hugo-docs/node/components/trace/trace_timing/","weight":0,"wordcount":153},{"authors":null,"categories":null,"date":-62135596800,"description":"Timing object returned by [ITracer.begin_trace](../itracer/#begin_trace) to end the timing of an execution block and record the associated trace.\n","dir":"python/components/trace/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"TraceTiming","lvl1":"Timing object returned by [ITracer.begin_trace](../itracer/#begin_trace) to end the timing of an execution block and record the associated trace.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"06ba8e05134d1cf5cf777ec9384fd713","permalink":"/python/components/trace/trace_timing/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/components/trace/trace_timing/","section":"python","summary":"Description The TraceTiming class is used to create the timing object returned by ITracer.begin_trace to end the timing of and execution block and record the associated trace.\nConstructors Creates a new instance of the timing callback object.\n TraceTiming(correlation_id: Optional[str], component: str, operation: str, tracer: ITracer = None)\n  correlation_id: Optional[str] - (optional) transaction id to trace execution through a call chain. component: str - an associated component name operation: str - an associated operation name tracer: ITracer - a callback that shall be called when endTiming is called.","tags":null,"title":"TraceTiming","type":"docs","url":"/hugo-docs/python/components/trace/trace_timing/","weight":0,"wordcount":145},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/iot/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"Transducer data Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e188ff941e71d5cfdf608dac5a1a148b","permalink":"/microservices/iot/transducerdata/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/iot/transducerdata/","section":"microservices","summary":"Records historical data of controlled objects.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"Transducer data Microservice","type":"docs","url":"/hugo-docs/microservices/iot/transducerdata/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeCode class contains the codes for data types that are used by the class [TypeConverter](../type_converter).\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623984335,"lvl0":"TypeCode","lvl1":"The TypeCode class contains the codes for data types that are used by the class [TypeConverter](../type_converter).\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9036f799c7ad01d6ad0dd1c5e91675c4","permalink":"/golang/commons/convert/type_code/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/convert/type_code/","section":"golang","summary":"Description The TypeCode class contains the codes for data types that are used by the class TypeConverter.\nEnumeration members The codes are as follows:\n Unknown = iota String = iota Boolean = iota Integer = iota Long = iota Float = iota Double = iota DateTime = iota Duration = iota Object = iota Enum = iota Array = iota Map = iota  ","tags":null,"title":"TypeCode","type":"docs","url":"/hugo-docs/golang/commons/convert/type_code/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeCode class contains the codes for data types that are used by the class [TypeConverter](../type_converter).\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"TypeCode","lvl1":"The TypeCode class contains the codes for data types that are used by the class [TypeConverter](../type_converter).\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"304785e75e72ea03c9bfbc6bd818929c","permalink":"/net/commons/convert/type_code/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/convert/type_code/","section":"net","summary":"Description The TypeCode class contains the codes for data types that are used by the class TypeConverter.\nEnumeration members The codes are as follows:\n Unknown String Boolean Integer Long Float Double DateTime Duration Object Enum Array Map  ","tags":null,"title":"TypeCode","type":"docs","url":"/hugo-docs/net/commons/convert/type_code/","weight":0,"wordcount":37},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeCode class contains the codes for data types that are used by the class [TypeConverter](../type_converter).\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"TypeCode","lvl1":"The TypeCode class contains the codes for data types that are used by the class [TypeConverter](../type_converter).\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"44ea987a804e94ee635bc00c78190e0f","permalink":"/node/commons/convert/type_code/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/convert/type_code/","section":"node","summary":"Description The TypeCode class contains the codes for data types that are used by the class TypeConverter.\nEnumeration members The codes are as follows:\n Unknown = 0 String = 1 Boolean = 2 Integer = 3 Long = 4 Float = 5 Double = 6 DateTime = 7 Duration = 8 Object = 9 Enum = 10 Array = 11 Map = 12  ","tags":null,"title":"TypeCode","type":"docs","url":"/hugo-docs/node/commons/convert/type_code/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeCode class contains the codes for data types that are used by the class [TypeConverter](../type_converter).\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621464736,"lvl0":"TypeCode","lvl1":"The TypeCode class contains the codes for data types that are used by the class [TypeConverter](../type_converter).\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3dc1fc881ab0ffab9400a91d7251828e","permalink":"/python/commons/convert/type_code/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/convert/type_code/","section":"python","summary":"Description The TypeCode class contains the codes for data types that are used by the class TypeConverter.\nEnumeration members The codes are as follows:\n Unknown = 0 String = 1 Boolean = 2 Integer = 3 Long = 4 Float = 5 Double = 6 DateTime = 7 Duration = 8 Object = 9 Enum = 10 Array = 11 Map = 12  ","tags":null,"title":"TypeCode","type":"docs","url":"/hugo-docs/python/commons/convert/type_code/","weight":0,"wordcount":63},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object.\n","dir":"golang/commons/convert/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623972482,"lvl0":"TypeConverter","lvl1":"The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"017fb42306580b0924b0a35935f1bdd0","permalink":"/golang/commons/convert/type_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/convert/type_converter/","section":"golang","summary":"See also TypeCode\nDescription The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object. The code types are defined in the TypeCode class.\nMethods ToNullableType Converts a value into an object type specified by TypeCode or returns nil when the conversion is not possible.\n ToNullableType(typ TypeCode, value interface{}) interface{}\n  typ: TypeCode - TypeCode for the data type into which \u0026lsquo;value\u0026rsquo; is to be converted.","tags":null,"title":"TypeConverter","type":"docs","url":"/hugo-docs/golang/commons/convert/type_converter/","weight":0,"wordcount":332},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object.\n","dir":"net/commons/convert/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"TypeConverter","lvl1":"The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6e0940ab80881cace8bed48cf3f0053c","permalink":"/net/commons/convert/type_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/convert/type_converter/","section":"net","summary":"See also TypeCode\nDescription The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object. The code types are defined in the TypeCode class.\nStatic methods ToNullableType Converts value into an object type specified by Type Code or returns null when conversion is not possible. T - the Class type for the data type.\n public static T ToNullableType\u0026lt;T\u0026gt;(object value)","tags":null,"title":"TypeConverter","type":"docs","url":"/hugo-docs/net/commons/convert/type_converter/","weight":0,"wordcount":376},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object.\n","dir":"node/commons/convert/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621269225,"lvl0":"TypeConverter","lvl1":"The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3da6aa52088f741f4c979bac0c43b300","permalink":"/node/commons/convert/type_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/convert/type_converter/","section":"node","summary":"See also TypeCode\nDescription The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object. The code types are defined in the TypeCode class.\nStatic methods toNullableType Converts value into an object type specified by Type Code or returns null when conversion is not possible.\n public static toNullableType\u0026lt;T\u0026gt;(type: TypeCode, value: any): T\n  type: any - the TypeCode for the data type into which \u0026lsquo;value\u0026rsquo; is to be converted.","tags":null,"title":"TypeConverter","type":"docs","url":"/hugo-docs/node/commons/convert/type_converter/","weight":0,"wordcount":347},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object.\n","dir":"python/commons/convert/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621286381,"lvl0":"TypeConverter","lvl1":"The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7877403a031d21949a451e08eea0ba26","permalink":"/python/commons/convert/type_converter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/convert/type_converter/","section":"python","summary":"Description The TypeConverter class allows you to convert arbitrary values into objects specified by a code type and to get the code type of an object. The code types are defined in the TypeCode class.\nStatic methods to_nullable_type Converts value into an object type specified by Type Code or returns None when conversion is not possible.\n static to_nullable_type(type: TypeCode, value: Any): Any\n  type: Any - the TypeCode for the data type into which \u0026lsquo;value\u0026rsquo; is to be converted.","tags":null,"title":"TypeConverter","type":"docs","url":"/hugo-docs/python/commons/convert/type_converter/","weight":0,"wordcount":322},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624240871,"lvl0":"TypeDescriptor","lvl1":"The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f366e21e58ecf2a6f4355258105e1a65","permalink":"/golang/commons/reflect/type_descriptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/reflect/type_descriptor/","section":"golang","summary":"Description The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.  Constructors NewTypeDescriptor Creates a new instance of the type descriptor and sets its values.\n NewTypeDescriptor(name string, pkg string) *TypeDescriptor\n  name: string - name of the object type.","tags":null,"title":"TypeDescriptor","type":"docs","url":"/hugo-docs/golang/commons/reflect/type_descriptor/","weight":0,"wordcount":260},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"TypeDescriptor","lvl1":"The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b08eda5babe5c9ea7a9f68f56ef7c481","permalink":"/net/commons/reflect/type_descriptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/reflect/type_descriptor/","section":"net","summary":"Description The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.  Constructors Creates a new instance of the type descriptor and sets its values.\n public TypeDescriptor(string name, string library)\n  name: string - a name of the object type.","tags":null,"title":"TypeDescriptor","type":"docs","url":"/hugo-docs/net/commons/reflect/type_descriptor/","weight":0,"wordcount":278},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"TypeDescriptor","lvl1":"The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d69353827492758f7b1720f8970e4482","permalink":"/node/commons/reflect/type_descriptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/reflect/type_descriptor/","section":"node","summary":"Description The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.  Constructors Creates a new instance of the type descriptor and sets its values.\n public constructor(name: string, library: string)\n  name: string - a name of the object type.","tags":null,"title":"TypeDescriptor","type":"docs","url":"/hugo-docs/node/commons/reflect/type_descriptor/","weight":0,"wordcount":264},{"authors":null,"categories":null,"date":-62135596800,"description":"The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621009778,"lvl0":"TypeDescriptor","lvl1":"The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"20f0ed9426ce295071d70073f17478eb","permalink":"/python/commons/reflect/type_descriptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/reflect/type_descriptor/","section":"python","summary":"Description The TypeDescriptor class stores a reference to a type represented by the type name and library (module) where the type is defined.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.  Constructors Creates a new instance of the type descriptor and sets its values.\n TypeDescriptor(name: str, library: str)\n  name: str - name of the object type.","tags":null,"title":"TypeDescriptor","type":"docs","url":"/hugo-docs/python/commons/reflect/type_descriptor/","weight":0,"wordcount":256},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to match value types based on equality.\n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"TypeMatcher","lvl1":"Helper class that allows you to match value types based on equality.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2b235591771bd3ef425127aefb58759c","permalink":"/golang/commons/reflect/type_matcher/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/reflect/type_matcher/","section":"golang","summary":"Description The TypeMatcher class allows you to match value types based on equality.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.  Methods MatchType Matches expected type to an actual type. The types can be specified as types, type names or TypeCode.\n (c *TTypeMatcher) MatchType(expectedType interface{}, actualType refl.Type) bool\n  expectedType: interface{} - expected type to match.","tags":null,"title":"TypeMatcher","type":"docs","url":"/hugo-docs/golang/commons/reflect/type_matcher/","weight":0,"wordcount":269},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to match value types based on equality.\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"TypeMatcher","lvl1":"Helper class that allows you to match value types based on equality.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c3218d4ea7ccfebddb4d34b75f23326e","permalink":"/net/commons/reflect/type_matcher/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/reflect/type_matcher/","section":"net","summary":"Description The TypeMatcher class allows you to match value types based on equality.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.  Static methods MatchType Matches expected type to an actual type. The types can be specified as types, type names or TypeCode.\n public static bool MatchType(object expectedType, Type actualType)\n  expectedType: object - an expected type to match.","tags":null,"title":"TypeMatcher","type":"docs","url":"/hugo-docs/net/commons/reflect/type_matcher/","weight":0,"wordcount":255},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to match value types based on equality.\n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"TypeMatcher","lvl1":"Helper class that allows you to match value types based on equality.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0c82d6a4fb12c9863bee64a66f62a7aa","permalink":"/node/commons/reflect/type_matcher/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/reflect/type_matcher/","section":"node","summary":"Description The TypeMatcher class allows you to match value types based on equality.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.  Static methods matchType Matches expected type to an actual type. The types can be specified as types, type names or TypeCode.\n public static matchType(expectedType: any, actualType: TypeCode, actualValue: any = null): boolean","tags":null,"title":"TypeMatcher","type":"docs","url":"/hugo-docs/node/commons/reflect/type_matcher/","weight":0,"wordcount":291},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to match value types based on equality.\n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620049408,"lvl0":"TypeMatcher","lvl1":"Helper class that allows you to match value types based on equality.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f4648554690d3f9f7361c87c4c2bbc67","permalink":"/python/commons/reflect/type_matcher/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/reflect/type_matcher/","section":"python","summary":"Description The TypeMatcher class allows you to match value types based on equality.\nImportant points\n This class has symmetric implementation across all languages supported by the Pip.Services toolkit and it is used to support dynamic data processing.  Static methods match_type Matches expected type to an actual type. The types can be specified as types, type names or TypeCode.\n static match_type(expected_type: Any, actual_type: TypeCode, actual_value: Any = None): bool","tags":null,"title":"TypeMatcher","type":"docs","url":"/hugo-docs/python/commons/reflect/type_matcher/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the type of an object, and create instancies of objects based on their type.\n","dir":"golang/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624316020,"lvl0":"TypeReflector","lvl1":"Helper class that allows you to examine the type of an object, and create instancies of objects based on their type.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"70917820b63aeb9cac8fc0ca0288899b","permalink":"/golang/commons/reflect/type_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/reflect/type_reflector/","section":"golang","summary":"Description The TypeReflector class allows you to examine the type of an object, and create instancies of objects based on their type.\nImportant points\n This class has a symmetric implementation across all languages supported by the Pip.Services toolkit and used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, the TypeReflector class treats all type names as case insensitive.  Methods CreateInstanceByType Creates an instance of an object type.","tags":null,"title":"TypeReflector","type":"docs","url":"/hugo-docs/golang/commons/reflect/type_reflector/","weight":0,"wordcount":354},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the type of an object, and create instancies of objects based on their type.\n","dir":"net/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"TypeReflector","lvl1":"Helper class that allows you to examine the type of an object, and create instancies of objects based on their type.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9442e83e92689f7342677db73ef62058","permalink":"/net/commons/reflect/type_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/commons/reflect/type_reflector/","section":"net","summary":"Description The TypeReflector class allows you to examine the type of an object, and create instancies of objects based on their type.\nImportant points\n This class has symmetric implementation across all languages supported by Pip.Services toolkit and used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, the TypeReflector class treats all type names as case insensitive.  Static methods CreateInstance Creates an instance of an object type specified by its name and library where it is defined.","tags":null,"title":"TypeReflector","type":"docs","url":"/hugo-docs/net/commons/reflect/type_reflector/","weight":0,"wordcount":482},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the type of an object, and create instancies of objects based on their type.\n","dir":"node/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"TypeReflector","lvl1":"Helper class that allows you to examine the type of an object, and create instancies of objects based on their type.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ce3bd5a784b5a276384733d5e6270470","permalink":"/node/commons/reflect/type_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/reflect/type_reflector/","section":"node","summary":"Description The TypeReflector class allows you to examine the type of an object, and create instancies of objects based on their type.\nImportant points\n This class has symmetric implementation across all languages supported by Pip.Services toolkit and used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, the TypeReflector class treats all type names as case insensitive.  Static methods createInstanceByType Creates an instance of an object type.","tags":null,"title":"TypeReflector","type":"docs","url":"/hugo-docs/node/commons/reflect/type_reflector/","weight":0,"wordcount":356},{"authors":null,"categories":null,"date":-62135596800,"description":"Helper class that allows you to examine the type of an object, and create instancies of objects based on their type.\n","dir":"python/commons/reflect/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1620811932,"lvl0":"TypeReflector","lvl1":"Helper class that allows you to examine the type of an object, and create instancies of objects based on their type.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9b7f8f4e876eb5328767a1ce7341ecfe","permalink":"/python/commons/reflect/type_reflector/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/reflect/type_reflector/","section":"python","summary":"Description The TypeReflector class allows you to examine the type of an object, and create instancies of objects based on their type.\nImportant points\n This class has symmetric implementation across all languages supported by Pip.Services toolkit and used to support dynamic data processing. Because all languages have different casing and case sensitivity rules, the TypeReflector class treats all type names as case insensitive.  Static methods create_instance_by_type Creates an instance of an object type.","tags":null,"title":"TypeReflector","type":"docs","url":"/hugo-docs/python/commons/reflect/type_reflector/","weight":0,"wordcount":348},{"authors":null,"categories":null,"date":-62135596800,"description":"Access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624228507,"lvl0":"UnauthorizedError","lvl1":"Access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f9e75c7f3916711e2dfa367402cbd3d0","permalink":"/golang/commons/errors/unauthorized_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/unauthorized_error/","section":"golang","summary":"Description The UnauthorizedError class is used to manage access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\nConstructors NewUnauthorizedError Creates an error instance and assigns its values.\n NewUnauthorizedError(correlationId, code, message string) *ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"UnauthorizedError","type":"docs","url":"/hugo-docs/golang/commons/errors/unauthorized_error/","weight":0,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"Access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"UnauthorizedException","lvl1":"Access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cede6802aafec1e939691eb7551a2b52","permalink":"/net/commons/errors/unauthorized_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/unauthorized_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The UnauthorizedException class is used to manage access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\nConstructors Creates an error instance and assigns its values.\n public UnauthorizedException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code.","tags":null,"title":"UnauthorizedException","type":"docs","url":"/hugo-docs/net/commons/errors/unauthorized_exception/","weight":0,"wordcount":137},{"authors":null,"categories":null,"date":-62135596800,"description":"Access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"UnauthorizedException","lvl1":"Access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d23002e649f796170b73b67a88fc2cfa","permalink":"/node/commons/errors/unauthorized_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/unauthorized_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The UnauthorizedException class is used to manage access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code.","tags":null,"title":"UnauthorizedException","type":"docs","url":"/hugo-docs/node/commons/errors/unauthorized_exception/","weight":0,"wordcount":81},{"authors":null,"categories":null,"date":-62135596800,"description":"Access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620410944,"lvl0":"UnauthorizedException","lvl1":"Access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"72e3a67054fed9bc8a71c0c8d2493d5a","permalink":"/python/commons/errors/unauthorized_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/unauthorized_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The UnauthorizedException class is used to manage access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).\nConstructors Creates an error instance and assigns its values.\n UnauthorizedException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code.","tags":null,"title":"UnauthorizedException","type":"docs","url":"/hugo-docs/python/commons/errors/unauthorized_exception/","weight":0,"wordcount":80},{"authors":null,"categories":null,"date":-62135596800,"description":"Unknown or unexpected errors.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624228577,"lvl0":"UnknownError","lvl1":"Unknown or unexpected errors.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"611704d63e0ec2dc265b510005bc5794","permalink":"/golang/commons/errors/unknown_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/unknown_error/","section":"golang","summary":"Description The UnknownError class is used to manage unknown or unexpected errors.\nConstructors NewUnknownError Creates an error instance and assigns its values.\n NewUnknownError(correlationId, code, message string) *ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.  ","tags":null,"title":"UnknownError","type":"docs","url":"/hugo-docs/golang/commons/errors/unknown_error/","weight":0,"wordcount":61},{"authors":null,"categories":null,"date":-62135596800,"description":"Unknown or unexpected errors.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"UnknownException","lvl1":"Unknown or unexpected errors.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b4ebfbbe298b2efabcf3a9ae6b0f975d","permalink":"/net/commons/errors/unknown_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/unknown_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The UnknownException class is used to manage unknown or unexpected errors.\nConstructors Creates an error instance and assigns its values.\n public UnknownException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"UnknownException","type":"docs","url":"/hugo-docs/net/commons/errors/unknown_exception/","weight":0,"wordcount":126},{"authors":null,"categories":null,"date":-62135596800,"description":"Unknown or unexpected errors.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"UnknownException","lvl1":"Unknown or unexpected errors.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5d68dfd9175b1b2cd35eb54bea660805","permalink":"/node/commons/errors/unknown_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/unknown_exception/","section":"node","summary":"Extends: ApplicationException\nDescription The UnknownException class is used to manage unknown or unexpected errors.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"UnknownException","type":"docs","url":"/hugo-docs/node/commons/errors/unknown_exception/","weight":0,"wordcount":70},{"authors":null,"categories":null,"date":-62135596800,"description":"Unknown or unexpected errors.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620412046,"lvl0":"UnknownException","lvl1":"Unknown or unexpected errors.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cc2a27293329a20199aa5978470fd857","permalink":"/python/commons/errors/unknown_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/unknown_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The UnknownException class is used to manage unknown or unexpected errors.\nConstructors Creates an error instance and assigns its values.\n UnknownException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: str - (optional) a human-readable description of the error.","tags":null,"title":"UnknownException","type":"docs","url":"/hugo-docs/python/commons/errors/unknown_exception/","weight":0,"wordcount":69},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by calls to unsupported or not yet implemented functionality.\n","dir":"golang/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1624229027,"lvl0":"UnsupportedError","lvl1":"Errors caused by calls to unsupported or not yet implemented functionality.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f94b53c7baffd888be71d8d98facb506","permalink":"/golang/commons/errors/unsupported_error/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/errors/unsupported_error/","section":"golang","summary":"Description The UnsupportedError class is used to manage errors caused by calls to unsupported or not yet implemented functionality.\nConstructors NewUnsupportedError Creates an error instance and assigns its values.\n NewUnsupportedError(correlationId, code, message string) *ApplicationError\n  correlationId: string - (optional) unique transaction id used to trace execution through the call chain. code: string - (optional) unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"UnsupportedError","type":"docs","url":"/hugo-docs/golang/commons/errors/unsupported_error/","weight":0,"wordcount":68},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by calls to unsupported or not yet implemented functionality.\n","dir":"net/commons/errors/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"UnsupportedException","lvl1":"Errors caused by calls to unsupported or not yet implemented functionality.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"80c16a053012c032b6e8503c8190139f","permalink":"/net/commons/errors/unsupported_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/errors/unsupported_exception/","section":"net","summary":"Inherits: ApplicationException\nDescription The UnsupportedException class is used to manage errors caused by calls to unsupported or not yet implemented functionality.\nConstructors Creates an error instance and assigns its values.\n public UnsupportedException(string correlationId = null, string code = null, string message = null)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"UnsupportedException","type":"docs","url":"/hugo-docs/net/commons/errors/unsupported_exception/","weight":0,"wordcount":133},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by calls to unsupported or not yet implemented functionality.\n","dir":"node/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"UnsupportedException","lvl1":"Errors caused by calls to unsupported or not yet implemented functionality.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"01bfc5cf7cf24c910a365cf38cbfe8ff","permalink":"/node/commons/errors/unsupported_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/errors/unsupported_exception/","section":"node","summary":"Implements: ApplicationException\nDescription The UnsupportedException class is used to manage errors caused by calls to unsupported or not yet implemented functionality.\nConstructors Creates an error instance and assigns its values.\n public constructor(correlation_id: string = null, code: string = null, message: string = null)\n  correlation_id: string - (optional) a unique transaction id to trace execution through call chain. code: string - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: string - (optional) a human-readable description of the error.","tags":null,"title":"UnsupportedException","type":"docs","url":"/hugo-docs/node/commons/errors/unsupported_exception/","weight":0,"wordcount":77},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors caused by calls to unsupported or not yet implemented functionality.\n","dir":"python/commons/errors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620411106,"lvl0":"UnsupportedException","lvl1":"Errors caused by calls to unsupported or not yet implemented functionality.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"35e326247e29b1d57e35fdbb765fff1e","permalink":"/python/commons/errors/unsupported_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/errors/unsupported_exception/","section":"python","summary":"Implements: ApplicationException\nDescription The UnsupportedException class is used to manage errors caused by calls to unsupported or not yet implemented functionality.\nConstructors Creates an error instance and assigns its values.\n UnsupportedException(correlation_id: Optional[str] = None, code: str = None, message: str = None)\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. code: str - (optional) a unique error code. Default: \u0026ldquo;UNKNOWN\u0026rdquo; message: str - (optional) a human-readable description of the error.","tags":null,"title":"UnsupportedException","type":"docs","url":"/hugo-docs/python/commons/errors/unsupported_exception/","weight":0,"wordcount":76},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623084212,"lvl0":"User Accounts Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"78bc37993b73cb54dcd7a5363bab0136","permalink":"/microservices/users/accounts/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/accounts/","section":"microservices","summary":"User account management microservice.\n  Registers users and creates their accounts\n  Keeps key user descriptions and settings (about, location, language, theme, \u0026hellip;)\n  Server implementations: NodeJS, Dart\n  Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC\n  Persistence: Memory, Flat Files, MongoDB, Couchbase\n  Deployment options: Monolith, Process, Docker, AWS Lambda\n  Client implementations: NodeJS, .NET, Golang, Dart\n  This microservice has optional dependencies on the following microservices:","tags":null,"title":"User Accounts Microservice","type":"docs","url":"/hugo-docs/microservices/users/accounts/","weight":0,"wordcount":72},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"User invitations Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7e3e3405cedce5450a41ddf9dfdbffe7","permalink":"/microservices/users/user_invitations/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/user_invitations/","section":"microservices","summary":"Keeps list of map invitations.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS, Golang  ","tags":null,"title":"User invitations Microservice","type":"docs","url":"/hugo-docs/microservices/users/user_invitations/","weight":0,"wordcount":33},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"microservices/users/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1622485860,"lvl0":"User roles Microservice","lvl1":"","lvl2":"microservices","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4f55fdad29a9f330a179b954c43a8f28","permalink":"/microservices/users/user_roles/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/microservices/users/user_roles/","section":"microservices","summary":"Manages roles for user organizations.\n Server implementations: NodeJS Communication protocols: Direct, Commandable HTTP, Commandable GRPC, GRPC Persistence: Memory, Flat Files, MongoDB, Couchbase Deployment options: Monolith, Process, Docker, AWS Lambda Client implementations: NodeJS  ","tags":null,"title":"User roles Microservice","type":"docs","url":"/hugo-docs/microservices/users/user_roles/","weight":0,"wordcount":32},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1619723131,"lvl0":"Validate","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6641fda039666a2cbc5b775f79989d51","permalink":"/dart/commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/validate/","section":"dart","summary":"","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/dart/commons/validate/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"The Validate package contains interfaces and classes that can be used to create custom validation rules; such as rules based on combinations of the logical operators AND, OR and NOT.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1624247126,"lvl0":"Validate","lvl1":"The Validate package contains interfaces and classes that can be used to create custom validation rules; such as rules based on combinations of the logical operators AND, OR and NOT.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f77b334ae6a19bb22f26d4130364a66e","permalink":"/golang/commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/validate/","section":"golang","summary":"Constants ValidationResultType Types of validation results generated by validation schemas.\nInterfaces IValidationRule Interface for validation rules.\nValidation rule used to validate one or multiple values against complex rules like: value is in range, one property is less than another property, enforce enumerated values and more.\nThis interface allows to implement custom rules.\nClasses AndRule Validation rule to combine rules with AND logical operation. When all rules return no errors, then this rule also returns no errors.","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/golang/commons/validate/","weight":0,"wordcount":299},{"authors":null,"categories":null,"date":-62135596800,"description":"The Validate package contains interfaces and classes that can be used to create custom validation rules; such as rules based on combinations of the logical operators AND, OR and NOT.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621530648,"lvl0":"Validate","lvl1":"The Validate package contains interfaces and classes that can be used to create custom validation rules; such as rules based on combinations of the logical operators AND, OR and NOT.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d5605849e06d5132950bb7a3cf88ec32","permalink":"/net/commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/validate/","section":"net","summary":"Constants ValidationResultType Types of validation results generated by validation schemas.\nInterfaces IValidationRule Interface for validation rules.\nValidation rule used to validate one or multiple values against complex rules like: value is in range, one property is less than another property, enforce enumerated values and more.\nThis interface allows to implement custom rules.\nClasses AndRule Validation rule to combine rules with AND logical operation. When all rules returns no errors, then this rule also returns no errors.","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/net/commons/validate/","weight":0,"wordcount":290},{"authors":null,"categories":null,"date":-62135596800,"description":"The Validate package contains interfaces and classes that can be used to create custom validation rules; such as rules based on combinations of the logical operators AND, OR and NOT.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1622669208,"lvl0":"Validate","lvl1":"The Validate package contains interfaces and classes that can be used to create custom validation rules; such as rules based on combinations of the logical operators AND, OR and NOT.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6adfdb8f83349b99845987ac1c257154","permalink":"/node/commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/validate/","section":"node","summary":"Constants ValidationResultType Types of validation results generated by validation schemas.\nInterfaces IValidationRule Interface for validation rules.\nValidation rule used to validate one or multiple values against complex rules like: value is in range, one property is less than another property, enforce enumerated values and more.\nThis interface allows to implement custom rules.\nClasses AndRule Validation rule to combine rules with AND logical operation. When all rules returns no errors, then this rule also returns no errors.","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/node/commons/validate/","weight":0,"wordcount":290},{"authors":null,"categories":null,"date":-62135596800,"description":"The Validate package contains interfaces and classes that can be used to create custom validation rules; such as rules based on combinations of the logical operators AND, OR and NOT.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":1621017600,"lvl0":"Validate","lvl1":"The Validate package contains interfaces and classes that can be used to create custom validation rules; such as rules based on combinations of the logical operators AND, OR and NOT.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"61a83036c2b3b60d04ad3a19d86032af","permalink":"/python/commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/validate/","section":"python","summary":"Constants ValidationResultType Types of validation results generated by validation schemas.\nInterfaces IValidationRule Interface for validation rules.\nValidation rule used to validate one or multiple values against complex rules like: value is in range, one property is less than another property, enforce enumerated values and more.\nThis interface allows to implement custom rules.\nClasses AndRule Validation rule to combine rules with AND logical operation. When all rules returns no errors, then this rule also returns no errors.","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/python/commons/validate/","weight":0,"wordcount":290},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors in schema validation.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"ValidationException","lvl1":"Errors in schema validation.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bd9954b10718e94c66e33e6303d8c8c9","permalink":"/golang/commons/validate/validation_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/validate/validation_exception/","section":"golang","summary":"Description The ValidationException is used to define errors in schema validation.\nImportant points\n Validation errors are usually generated based in ValidationResult. If using strict mode, warnings will also raise validation exceptions.  Constructors NewValidationError Creates a new instance of validation exception and assigns its values.\n NewValidationError(correlationId string, message string, results []*ValidationResult) *errors.ApplicationError\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain. message: string - (optional) a human-readable description of the error.","tags":null,"title":"ValidationException","type":"docs","url":"/hugo-docs/golang/commons/validate/validation_exception/","weight":0,"wordcount":234},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors in schema validation.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1621879821,"lvl0":"ValidationException","lvl1":"Errors in schema validation.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fcc1570d099c7eb0128eb4e82617f046","permalink":"/net/commons/validate/validation_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/commons/validate/validation_exception/","section":"net","summary":"Inherits: BadRequestException\nDescription The ValidationException is used to define errors in schema validation.\nImportant points\n Validation errors are usually generated based in ValidationResult. If using strict mode, warnings will also raise validation exceptions.  Constructors Creates a new instance of validation exception and assigns its values.\n public ValidationException(string correlationId, string message, IList\u0026lt;ValidationResult\u0026gt; results)\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain.","tags":null,"title":"ValidationException","type":"docs","url":"/hugo-docs/net/commons/validate/validation_exception/","weight":0,"wordcount":309},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors in schema validation.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ValidationException","lvl1":"Errors in schema validation.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"408722886a46bac0f7098c9862aba85d","permalink":"/node/commons/validate/validation_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/validate/validation_exception/","section":"node","summary":"Extends: BadRequestException\nDescription The ValidationException is used to define errors in schema validation.\nImportant points\n Validation errors are usually generated based in ValidationResult. If using strict mode, warnings will also raise validation exceptions.  Constructors Creates a new instance of validation exception and assigns its values.\n public constructor(correlationId: string, message?: string, results?: ValidationResult[])\n  correlationId: string - (optional) a unique transaction id to trace execution through call chain.","tags":null,"title":"ValidationException","type":"docs","url":"/hugo-docs/node/commons/validate/validation_exception/","weight":0,"wordcount":258},{"authors":null,"categories":null,"date":-62135596800,"description":"Errors in schema validation.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621019072,"lvl0":"ValidationException","lvl1":"Errors in schema validation.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8dbc3fdc7e1e1213c5e00761c91b0278","permalink":"/python/commons/validate/validation_exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/validate/validation_exception/","section":"python","summary":"Implements: BadRequestException\nDescription The ValidationException is used to define errors in schema validation.\nImportant points\n Validation errors are usually generated based in ValidationResult. If using strict mode, warnings will also raise validation exceptions.  Constructors Creates a new instance of validation exception and assigns its values.\n ValidationException(correlation_id: Optional[str], message: Optional[str], results: List[ValidationResult])\n  correlation_id: Optional[str] - (optional) a unique transaction id to trace execution through call chain. message: Optional[str] - (optional) a human-readable description of the error.","tags":null,"title":"ValidationException","type":"docs","url":"/hugo-docs/python/commons/validate/validation_exception/","weight":0,"wordcount":253},{"authors":null,"categories":null,"date":-62135596800,"description":"Result generated by a schema validation\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"ValidationResult","lvl1":"Result generated by a schema validation\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9a6f450e0932834970a865b4cb42c32c","permalink":"/golang/commons/validate/validation_result/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/validation_result/","section":"golang","summary":"Description The ValidationResult class provides a representation of the result generated by a schema validation.\nConstructors NewValidationResult Creates a new instance of a validation ressult and sets its values. See ValidationResultType\n NewValidationResult(path string, typ ValidationResultType, code string, message string, expected interface{}, actual interface{}) *ValidationResult\n  path: string - a dot notation path of the validated element. typ: ValidationResultType - a type of the validation result: Information, Warning, or Error.","tags":null,"title":"ValidationResult","type":"docs","url":"/hugo-docs/golang/commons/validate/validation_result/","weight":0,"wordcount":213},{"authors":null,"categories":null,"date":-62135596800,"description":"Result generated by a schema validation\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ValidationResult","lvl1":"Result generated by a schema validation\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"315a11da9cf0467b155f73b57f85caa8","permalink":"/net/commons/validate/validation_result/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/validation_result/","section":"net","summary":"Description The ValidationResult class provides a representation of the result generated by a schema validation.\nConstructors Creates a new instance of a validation ressult and sets its values. See ValidationResultType\n public ValidationResult(string path, ValidationResultType type, string code, string message, object expected, object actual)\n  path: string - a dot notation path of the validated element. type: ValidationResultType = null - a type of the validation result: Information, Warning, or Error.","tags":null,"title":"ValidationResult","type":"docs","url":"/hugo-docs/net/commons/validate/validation_result/","weight":0,"wordcount":207},{"authors":null,"categories":null,"date":-62135596800,"description":"Result generated by a schema validation\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ValidationResult","lvl1":"Result generated by a schema validation\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8b127cff7c2969dfb49689a9896c9f00","permalink":"/node/commons/validate/validation_result/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/commons/validate/validation_result/","section":"node","summary":"Description The ValidationResult class provides a representation of the result generated by a schema validation.\nConstructors Creates a new instance of a validation ressult and sets its values. See ValidationResultType\n public constructor(path: string = null, type: ValidationResultType = null, code: string = null, message: string = null, expected: any = null, actual: any = null)\n  path: string - a dot notation path of the validated element. type: ValidationResultType = null - a type of the validation result: Information, Warning, or Error.","tags":null,"title":"ValidationResult","type":"docs","url":"/hugo-docs/node/commons/validate/validation_result/","weight":0,"wordcount":232},{"authors":null,"categories":null,"date":-62135596800,"description":"Result generated by a schema validation\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":1620231994,"lvl0":"ValidationResult","lvl1":"Result generated by a schema validation\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ae83dd9f47fd549782bfb5a99cde1b90","permalink":"/python/commons/validate/validation_result/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/commons/validate/validation_result/","section":"python","summary":"Description The ValidationResult class provides a representation of the result generated by a schema validation.\nConstructors Creates a new instance of a validation result and sets its values. See ValidationResultType\n ValidationResult(path: str = None, type: ValidationResultType = None, code: str = None, message: str = None, expected: Any = None, actual: Any = None)\n  path: str - a dot notation path of the validated element. type: ValidationResultType - a type of the validation result: Information, Warning, or Error.","tags":null,"title":"ValidationResult","type":"docs","url":"/hugo-docs/python/commons/validate/validation_result/","weight":0,"wordcount":222},{"authors":null,"categories":null,"date":-62135596800,"description":"Types of validation results generated by validation schemas.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1623338824,"lvl0":"ValidationResultType","lvl1":"Types of validation results generated by validation schemas.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cf56153aa91d4317546b8adfa8c1ee04","permalink":"/golang/commons/validate/validation_result_type/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/validation_result_type/","section":"golang","summary":"Description The ValidationResultType class defines the types of validation results generated by validation schemas.\nEnumeration members  Information = iota - General information (not an error). Warning = iota - Warning about something suspecious. In strict mode is treated as error Error = iota - Validation error.  See also   ValidationResult   ","tags":null,"title":"ValidationResultType","type":"docs","url":"/hugo-docs/golang/commons/validate/validation_result_type/","weight":0,"wordcount":49},{"authors":null,"categories":null,"date":-62135596800,"description":"Types of validation results generated by validation schemas.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621530648,"lvl0":"ValidationResultType","lvl1":"Types of validation results generated by validation schemas.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c758d4a34c2c6e26f65816c2d45301a7","permalink":"/net/commons/validate/validation_result_type/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/validation_result_type/","section":"net","summary":"Description The ValidationResultType class defines the types of validation results generated by validation schemas.\nEnumeration members  Information = 0 - General information (not an error). Warning = 1 - Warning about something suspecious. In strict mode is treated as error Error = 2 - Validation error.  See also   ValidationResult   ","tags":null,"title":"ValidationResultType","type":"docs","url":"/hugo-docs/net/commons/validate/validation_result_type/","weight":0,"wordcount":49},{"authors":null,"categories":null,"date":-62135596800,"description":"Types of validation results generated by validation schemas.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1621279318,"lvl0":"ValidationResultType","lvl1":"Types of validation results generated by validation schemas.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d4f033ad5f849a56d97254edad8e7fee","permalink":"/node/commons/validate/validation_result_type/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/validation_result_type/","section":"node","summary":"Description The ValidationResultType class defines the types of validation results generated by validation schemas.\nEnumeration members  Information = 0 - General information (not an error). Warning = 1 - Warning about something suspecious. In strict mode is treated as error Error = 2 - Validation error.  See also   ValidationResult   ","tags":null,"title":"ValidationResultType","type":"docs","url":"/hugo-docs/node/commons/validate/validation_result_type/","weight":0,"wordcount":49},{"authors":null,"categories":null,"date":-62135596800,"description":"Types of validation results generated by validation schemas.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1620232297,"lvl0":"ValidationResultType","lvl1":"Types of validation results generated by validation schemas.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"19110d32bc3ab151e2b0414e5905d1ed","permalink":"/python/commons/validate/validation_result_type/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/validation_result_type/","section":"python","summary":"Description The ValidationResultType class defines the types of validation results generated by validation schemas.\nEnumeration members  Information = 0 - General information (not an error). Warning = 1 - Warning about something suspecious. In strict mode is treated as error Error = 2 - Validation error.  See also   ValidationResult   ","tags":null,"title":"ValidationResultType","type":"docs","url":"/hugo-docs/python/commons/validate/validation_result_type/","weight":0,"wordcount":49},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that compares a value to a constant.\n","dir":"golang/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623346778,"lvl0":"ValueComparisonRule","lvl1":"Validation rule that compares a value to a constant.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8b2c8cef1f20ce0967a8278f52c852c4","permalink":"/golang/commons/validate/value_comparison_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/validate/value_comparison_rule/","section":"golang","summary":"Description The ValueComparisonRule class allows you to create a validation rule that compares a value to a constant.\nConstructors NewValueComparisonRule Creates a new validation rule and sets its values.\n NewValueComparisonRule(operation string, value interface{}) *ValueComparisonRule\n  operation: string - a comparison operation: \u0026quot;==\u0026quot; (\u0026quot;=\u0026quot;, \u0026ldquo;EQ\u0026rdquo;), \u0026ldquo;!= \u0026quot; (\u0026quot;\u0026lt;\u0026gt;\u0026rdquo;, \u0026ldquo;NE\u0026rdquo;); \u0026ldquo;\u0026lt;\u0026quot;/\u0026quot;\u0026gt;\u0026rdquo; (\u0026ldquo;LT\u0026rdquo;/\u0026ldquo;GT\u0026rdquo;), \u0026ldquo;\u0026lt;=\u0026quot;/\u0026quot;\u0026gt;=\u0026rdquo; (\u0026ldquo;LE\u0026rdquo;/\u0026ldquo;GE\u0026rdquo;); \u0026ldquo;LIKE\u0026rdquo;. value: interface{} - a constant value to compare to  Methods Validate Validates a given value against this rule.","tags":null,"title":"ValueComparisonRule","type":"docs","url":"/hugo-docs/golang/commons/validate/value_comparison_rule/","weight":0,"wordcount":143},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that compares a value to a constant.\n","dir":"net/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"ValueComparisonRule","lvl1":"Validation rule that compares a value to a constant.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"01c96cf8d007bbf19af2bef03e79480b","permalink":"/net/commons/validate/value_comparison_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/net/commons/validate/value_comparison_rule/","section":"net","summary":"Inherits: IValidationRule\nDescription The ValueComparisonRule class allows you to create a validation rule that compares a value to a constant.\nConstructors Creates a new validation rule and sets its values.\n public ValueComparisonRule(string operation, object value)\n  operation: string - a comparison operation: \u0026quot;==\u0026quot; (\u0026quot;=\u0026quot;, \u0026ldquo;EQ\u0026rdquo;), \u0026ldquo;!= \u0026quot; (\u0026quot;\u0026lt;\u0026gt;\u0026rdquo;, \u0026ldquo;NE\u0026rdquo;); \u0026ldquo;\u0026lt;\u0026quot;/\u0026quot;\u0026gt;\u0026rdquo; (\u0026ldquo;LT\u0026rdquo;/\u0026ldquo;GT\u0026rdquo;), \u0026ldquo;\u0026lt;=\u0026quot;/\u0026quot;\u0026gt;=\u0026rdquo; (\u0026ldquo;LE\u0026rdquo;/\u0026ldquo;GE\u0026rdquo;); \u0026ldquo;LIKE\u0026rdquo;. value: object - a constant value to compare to  Instance methods Validate Validates a given value against this rule.","tags":null,"title":"ValueComparisonRule","type":"docs","url":"/hugo-docs/net/commons/validate/value_comparison_rule/","weight":0,"wordcount":147},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that compares a value to a constant.\n","dir":"node/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"ValueComparisonRule","lvl1":"Validation rule that compares a value to a constant.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dca2ed894adbe21497aeda77a29452bd","permalink":"/node/commons/validate/value_comparison_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/node/commons/validate/value_comparison_rule/","section":"node","summary":"Implements: IValidationRule\nDescription The ValueComparisonRule class allows you to create a validation rule that compares a value to a constant.\nConstructors Creates a new validation rule and sets its values.\n public constructor(operation: string, value: any)\n  operation: string - a comparison operation: \u0026quot;==\u0026quot; (\u0026quot;=\u0026quot;, \u0026ldquo;EQ\u0026rdquo;), \u0026ldquo;!= \u0026quot; (\u0026quot;\u0026lt;\u0026gt;\u0026rdquo;, \u0026ldquo;NE\u0026rdquo;); \u0026ldquo;\u0026lt;\u0026quot;/\u0026quot;\u0026gt;\u0026rdquo; (\u0026ldquo;LT\u0026rdquo;/\u0026ldquo;GT\u0026rdquo;), \u0026ldquo;\u0026lt;=\u0026quot;/\u0026quot;\u0026gt;=\u0026rdquo; (\u0026ldquo;LE\u0026rdquo;/\u0026ldquo;GE\u0026rdquo;); \u0026ldquo;LIKE\u0026rdquo;. value: any - a constant value to compare to  Instance methods validate Validates a given value against this rule.","tags":null,"title":"ValueComparisonRule","type":"docs","url":"/hugo-docs/node/commons/validate/value_comparison_rule/","weight":0,"wordcount":145},{"authors":null,"categories":null,"date":-62135596800,"description":"Validation rule that compares a value to a constant.\n","dir":"python/commons/validate/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1623335893,"lvl0":"ValueComparisonRule","lvl1":"Validation rule that compares a value to a constant.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8eb5bc0cedda57264d279a87ed720bb6","permalink":"/python/commons/validate/value_comparison_rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/python/commons/validate/value_comparison_rule/","section":"python","summary":"Implements: IValidationRule\nDescription The ValueComparisonRule class allows you to create a validation rule that compares a value to a constant.\nConstructors Creates a new validation rule and sets its values.\n ValueComparisonRule(operation: str, value: Any)\n  operation: str - a comparison operation: \u0026quot;==\u0026quot; (\u0026quot;=\u0026quot;, \u0026ldquo;EQ\u0026rdquo;), \u0026ldquo;!= \u0026quot; (\u0026quot;\u0026lt;\u0026gt;\u0026rdquo;, \u0026ldquo;NE\u0026rdquo;); \u0026ldquo;\u0026lt;\u0026quot;/\u0026quot;\u0026gt;\u0026rdquo; (\u0026ldquo;LT\u0026rdquo;/\u0026ldquo;GT\u0026rdquo;), \u0026ldquo;\u0026lt;=\u0026quot;/\u0026quot;\u0026gt;=\u0026rdquo; (\u0026ldquo;LE\u0026rdquo;/\u0026ldquo;GE\u0026rdquo;); \u0026ldquo;LIKE\u0026rdquo;. value: Any - a constant value to compare to  Instance methods validate Validates a given value against this rule.","tags":null,"title":"ValueComparisonRule","type":"docs","url":"/hugo-docs/python/commons/validate/value_comparison_rule/","weight":0,"wordcount":141},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads configuration from YAML file.\n","dir":"golang/components/config/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1624088875,"lvl0":"YamlConfigReader","lvl1":"Config reader that reads configuration from YAML file.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"760cd10249ad6cddc370ccc7261aa82e","permalink":"/golang/components/config/yaml_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/components/config/yaml_config_reader/","section":"golang","summary":"Implements: FileConfigReader\nDescription The YamlConfigReader allows you to create a config reader that reads a configuration from a YAML file.\nConfiguration parameters  path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors NewYamlConfigReader Creates a new instance of the config reader.\n NewYamlConfigReader(path string) *YamlConfigReader\n  path: string - (optional) path to the configuration file.  NewEmptyYamlConfigReader Creates a new instance of the config reader.","tags":null,"title":"YamlConfigReader","type":"docs","url":"/hugo-docs/golang/components/config/yaml_config_reader/","weight":0,"wordcount":331},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads configuration from YAML file.\n","dir":"net/components/config/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1622131251,"lvl0":"YamlConfigReader","lvl1":"Config reader that reads configuration from YAML file.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ce5edd687a6b61dd8223df4e2c8256a4","permalink":"/net/components/config/yaml_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/components/config/yaml_config_reader/","section":"net","summary":"Inherits: FileConfigReader\nDescription The YamlConfigReader allows you to create a config reader that reads a configuration from a YAML file.\nConfiguration parameters  path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of the config reader.\n public YamlConfigReader(string path = null)\n  path: string - (optional) path to the configuration file.  Instance methods ReadConfig Reads a configuration and parameterizes it with given values.","tags":null,"title":"YamlConfigReader","type":"docs","url":"/hugo-docs/net/components/config/yaml_config_reader/","weight":0,"wordcount":311},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads configuration from YAML file.\n","dir":"node/components/config/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1623426469,"lvl0":"YamlConfigReader","lvl1":"Config reader that reads configuration from YAML file.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b506847dc8d19a11ec9b74a5a7bd7dad","permalink":"/node/components/config/yaml_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/components/config/yaml_config_reader/","section":"node","summary":"Extends: FileConfigReader\nDescription The YamlConfigReader allows you to create a config reader that reads a configuration from a YAML file.\nConfiguration parameters  path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of the config reader.\n public constructor(path: string = null)\n  path: string - (optional) path to the configuration file.  Instance methods readConfig Reads a configuration and parameterizes it with given values.","tags":null,"title":"YamlConfigReader","type":"docs","url":"/hugo-docs/node/components/config/yaml_config_reader/","weight":0,"wordcount":318},{"authors":null,"categories":null,"date":-62135596800,"description":"Config reader that reads configuration from YAML file.\n","dir":"python/components/config/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":1622131251,"lvl0":"YamlConfigReader","lvl1":"Config reader that reads configuration from YAML file.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d75f2589007ed997ba2b08968430c8c4","permalink":"/python/components/config/yaml_config_reader/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/components/config/yaml_config_reader/","section":"python","summary":"Implements: FileConfigReader\nDescription The YamlConfigReader allows you to create a config reader that reads a configuration from a YAML file.\nConfiguration parameters  path: path to the configuration file parameters: this entire section is used as template parameters \u0026hellip;  Constructors Creates a new instance of the config reader.\n YamlConfigReader(path: str = None)\n  path: str - (optional) path to the configuration file.  Instance methods _read_config Reads a configuration and parameterizes it with given values.","tags":null,"title":"YamlConfigReader","type":"docs","url":"/hugo-docs/python/components/config/yaml_config_reader/","weight":0,"wordcount":301}]