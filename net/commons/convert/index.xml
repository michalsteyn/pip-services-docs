<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Convert</title>
    <link>/net/commons/convert/</link>
    <description>Recent content in Convert on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/net/commons/convert/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: ArrayConverter</title>
      <link>/net/commons/convert/array_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/array_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ArrayConverter class provides methods to create an array from a set of values. These values can be in the form of a list,  a single value or a string of comma-delimited values.&lt;/p&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;listtoarray&#34;&gt;ListToArray&lt;/h4&gt;
&lt;p&gt;Converts a list into an array object with an empty array as the default.
Strings with comma-delimited values are split into array of strings.
See &lt;a href=&#34;#toarray&#34;&gt;ToArray&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IList&amp;lt;object&amp;gt; ListToArray(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - list to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IList&amp;lt;object&amp;gt;- array object or empty array when value is null&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;toarray&#34;&gt;ToArray&lt;/h4&gt;
&lt;p&gt;Converts value into an array object with an empty array as the default.
Single values are converted into arrays with a single element.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IList&amp;lt;object&amp;gt; ToArray(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object  - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IList&amp;lt;object&amp;gt; - array object or empty array when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;toarraywithdefault&#34;&gt;ToArrayWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into an array object with a specified default.
Single values are converted into arrays with a single element.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IList&amp;lt;object&amp;gt; ToArrayWithDefault(object value, IList&amp;lt;object&amp;gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: IList&amp;lt;object&amp;gt; - default array object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IList&amp;lt;object&amp;gt; - array object or default array when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullablearray&#34;&gt;ToNullableArray&lt;/h4&gt;
&lt;p&gt;Converts value into an array object.
Single values are converted into arrays with a single element.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IList&amp;lt;object&amp;gt; ToNullableArray(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IList&amp;lt;object&amp;gt; - array object or null when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Array
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ArrayConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToArray&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[]{&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Result: [1, 2]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Single value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ArrayConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToArray&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Result: [1]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: BooleanConverter</title>
      <link>/net/commons/convert/boolean_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/boolean_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The BooleanConverter class allows you to convert different values to boolean values using the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Numbers: &amp;lt;&amp;gt;0 are true, =0 are false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strings: &amp;ldquo;true&amp;rdquo;, &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;T&amp;rdquo;, &amp;ldquo;Y&amp;rdquo;, &amp;ldquo;1&amp;rdquo; are true; &amp;ldquo;false&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, &amp;ldquo;F&amp;rdquo;, &amp;ldquo;N&amp;rdquo; are false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DateTime: &amp;lt;&amp;gt;0 total milliseconds are true, =0 are false&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;toboolean&#34;&gt;ToBoolean&lt;/h4&gt;
&lt;p&gt;Converts value into boolean or returns false when the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; boolean ToBoolean(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - boolean value or false when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tobooleanwithdefault&#34;&gt;ToBooleanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into boolean or returns default value when the conversion is not possible&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; bool ToBooleanWithDefault(object value, bool defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: bool - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - boolean value or default when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullableboolean&#34;&gt;ToNullableBoolean&lt;/h4&gt;
&lt;p&gt;Converts value into boolean or returns null when the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; bool toNullableBoolean(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - boolean value or null when the convertion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;BooleanConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Returns True
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;BooleanConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Returns True
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;BooleanConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Returns null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value4&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;BooleanConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({});&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// Returns null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value5&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;BooleanConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToBooleanWithDefault&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;verdadero&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Returns True
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value6&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;BooleanConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToBooleanWithDefault&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;verdadero&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Returns verdadero
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value7&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;BooleanConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Returns True
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: DateTimeConverter</title>
      <link>/net/commons/convert/date_time_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/date_time_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DateTimeConverter class allows you to convert arbitrary values into Date values using following extended conversion rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strings: converted using the ISO time format&lt;/li&gt;
&lt;li&gt;Numbers: converted using milliseconds since unix epoch&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;todatetime&#34;&gt;ToDateTime&lt;/h4&gt;
&lt;p&gt;Converts value into Date or returns current date when conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;#todatetimewithdefault&#34;&gt;ToDateTimeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; DateTime ToDateTime(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - Date value or current date when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;todatetimewithdefault&#34;&gt;ToDateTimeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into Date or returns default when conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; DateTime toDateTimeWithDefault(object value, DateTime? defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: DateTime - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - Date value or default when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullabledatetime&#34;&gt;ToNullableDateTime&lt;/h4&gt;
&lt;p&gt;Converts value into Date or returns null when conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; DateTime ToNullableDateTime(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - Date value or null when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;DateTime&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;DateTimeConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;DateTime&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;DateTimeConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2018-01-01T11:30:00.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: ZonedDateTime(2018,0,1,11,30)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;DateTime&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;DateTimeConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: ZonedDateTime(123)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: DecimalConverter</title>
      <link>/net/commons/convert/decimal_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/decimal_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DecimalConverter class can be used to convert objects to decimals according to the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strings are converted to double values&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DateTime: total number of milliseconds since unix epoch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boolean: 1 for true and 0 for false&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;todecimal&#34;&gt;ToDecimal&lt;/h4&gt;
&lt;p&gt;Converts an object to a decimal value&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; decimal ToDecimal (object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - object to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: decimal - returned decimal value&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;todecimalwithdefault&#34;&gt;ToDecimalWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object to decimal. If the conversion is not possible, it returns the given default.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; decimal ToDecimalWithDefault (object value, decimal defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - object to convert&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: decimal - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: decimal - returned decimal value&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullabledecimal&#34;&gt;ToNullableDecimal&lt;/h4&gt;
&lt;p&gt;Converts value into doubles or returns null when conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; decimal ToNullableDecimal(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object  - object to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: decimal - returned decimal value&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: DoubleConverter</title>
      <link>/net/commons/convert/double_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/double_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DoubleConverter class allows you to convert arbitrary values into double using the following extended conversion rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strings are converted to double values&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DateTime: total number of milliseconds since unix epoch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boolean: 1 for true and 0 for false&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;todouble&#34;&gt;ToDouble&lt;/h4&gt;
&lt;p&gt;Converts value into doubles or returns 0 when conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;#todoublewithdefault&#34;&gt;toDoubleWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; double ToDouble(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value or 0 when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;todoublewithdefault&#34;&gt;ToDoubleWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into integer or returns default value when conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; double ToDoubleWithDefault(object value, double defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: double - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value or default when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullabledouble&#34;&gt;ToNullableDouble&lt;/h4&gt;
&lt;p&gt;Converts value into doubles or returns null when conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; double ToNullableDouble(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value or null when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;DoubleConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// Result: null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;DoubleConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;DoubleConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value4&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;DoubleConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: current milliseconds
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: EnumConverter</title>
      <link>/net/commons/convert/enum_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/enum_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The EnumConverter allows you to convert objects to Enums&lt;/p&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;toenum&#34;&gt;ToEnum&lt;/h4&gt;
&lt;p&gt;Converts an object to an Enum.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; T ToEnum&amp;lt;T&amp;gt;(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - object to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - returned Enum&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;toenumwithdefault&#34;&gt;ToEnumWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object to an Enum or returns a given default value when the conversion is not possible.  .&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; T ToEnumWithDefault&amp;lt;T&amp;gt;(object value, T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - object to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - returned Enum or given default whe the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullableenum&#34;&gt;ToNullableEnum&lt;/h4&gt;
&lt;p&gt;Converts an object to an Enum or returns null when the conversion is not possible..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; T ToNullableEnum&amp;lt;T&amp;gt;(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - returned Enum or null when the conversion is not possible&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: FloatConverter</title>
      <link>/net/commons/convert/float_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/float_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The FloatConverter class allows you to convert arbitrary values into float using the following extended conversion rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strings are converted to float values&lt;/li&gt;
&lt;li&gt;DateTime: total number of milliseconds since unix epoch&lt;/li&gt;
&lt;li&gt;Boolean: 1 for true and 0 for false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;tofloat&#34;&gt;ToFloat&lt;/h4&gt;
&lt;p&gt;Converts value into float or returns 0 when the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../double_converter/#todouble&#34;&gt;DoubleConverter.toDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; float ToFloat(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value or 0 when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tofloatwithdefault&#34;&gt;ToFloatWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into float or returns a given default value when the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../double_converter/#todoublewithdefault&#34;&gt;DoubleConverter.ToDoubleWithDefault&lt;/a&gt;,&lt;br&gt;
&lt;a href=&#34;../double_converter/#tonullabledouble&#34;&gt;DoubleConverter.ToNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; float ToFloatWithDefault(object value, float defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: float - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value or default value when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullablefloat&#34;&gt;ToNullableFloat&lt;/h4&gt;
&lt;p&gt;Converts value into float or returns null when the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../double_converter/#tonullabledouble&#34;&gt;DoubleConverter.ToNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; float toNullableFloat(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - the value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value or null when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FloatConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Result: null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FloatConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FloatConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value4&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FloatConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Result: current milliseconds
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: IntegerConverter</title>
      <link>/net/commons/convert/integer_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/integer_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IntegerConverter class allows you to convert arbitrary values to integers using the following extended conversion rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strings are converted to floats, then to integers&lt;/li&gt;
&lt;li&gt;DateTime: total number of milliseconds since unix epoch&lt;/li&gt;
&lt;li&gt;Boolean: 1 for True and 0 for False&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;tointeger&#34;&gt;ToInteger&lt;/h4&gt;
&lt;p&gt;Converts value into integer or returns 0 when the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../long_converter/#tolong&#34;&gt;LongConverter.ToLong&lt;/a&gt;,&lt;br&gt;
&lt;a href=&#34;../long_converter/#tolongwithdefault&#34;&gt;LongConverter.ToLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; int ToInteger(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value or 0 when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tointegerwithdefault&#34;&gt;ToIntegerWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into integer or returns a given default value when the conversion is not possible.
See &lt;a href=&#34;../long_converter/#tolongwithdefault&#34;&gt;LongConverter.ToLongWithDefault&lt;/a&gt;,&lt;br&gt;
&lt;a href=&#34;../long_converter/#tonullablelong&#34;&gt;LongConverter.ToNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; int ToIntegerWithDefault(object value, int defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: int - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value or default when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullableinteger&#34;&gt;ToNullableInteger&lt;/h4&gt;
&lt;p&gt;Converts value into integer or returns null when conversion is not possible.
See &lt;a href=&#34;../long_converter/#tonullablelong&#34;&gt;LongConverter.ToNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; int ToNullableInteger(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value or null when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IntegerConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IntegerConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IntegerConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value4&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IntegerConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: current milliseconds
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: JsonConverter</title>
      <link>/net/commons/convert/json_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/json_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The JsonConverter class allows you to convert arbitrary values (e.g. a JSON object) from and to JSON (JavaScript Object Notation) strings.&lt;/p&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;fromjson&#34;&gt;FromJson&lt;/h4&gt;
&lt;p&gt;Converts to value from a JSON string&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; object FromJson(string value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - JSON string to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - converted object value or null when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromjson-1&#34;&gt;FromJson&lt;/h4&gt;
&lt;p&gt;Converts value from JSON string to T object&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; T FromJson&amp;lt;T&amp;gt;(string value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - JSON string to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - converted object value or null when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tojson&#34;&gt;ToJson&lt;/h4&gt;
&lt;p&gt;Converts value to a JSON string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string  ToJson(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - JSON string or null when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tomap&#34;&gt;ToMap&lt;/h4&gt;
&lt;p&gt;Converts a JSON string into map object or returns empty map when the conversion is not possible.
See &lt;a href=&#34;../long_converter/#tonullablelong&#34;&gt;LongConverter.ToNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IDictionary&amp;lt;string, object&amp;gt; ToMap(string value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - JSON string to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - Map object value or empty object when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tomapwithdefault&#34;&gt;ToMapWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a JSON string into a map object or returns a given default value when the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IDictionary&amp;lt;string, object&amp;gt; ToMapWithDefault(string value, IDictionary&amp;lt;string, object&amp;gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - JSON string to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - Map object value or default when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullablemap&#34;&gt;ToNullableMap&lt;/h4&gt;
&lt;p&gt;Converts a JSON string into a map object or returns null when the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../map_converter/#tonullablemap&#34;&gt;MapConverter.ToNullableMap&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IDictionary&amp;lt;string, object&amp;gt; ToNullableMap(string value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - JSON string to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - Map object value or null when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;JsonConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromJson&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;{\&amp;#34;key\&amp;#34;:123}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: { key: 123 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;JsonConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;{\&amp;#34;key\&amp;#34;:123}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: LongConverter</title>
      <link>/net/commons/convert/long_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/long_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The LongConverter class allows you to convert arbitrary values into longs using the following extended conversion rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strings are converted to floats, then to longs&lt;/li&gt;
&lt;li&gt;DateTime: total number of milliseconds since unix epoch&lt;/li&gt;
&lt;li&gt;Boolean: 1 for true and 0 for false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;tolong&#34;&gt;ToLong&lt;/h4&gt;
&lt;p&gt;Converts value into long or returns 0 when the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; long ToLong(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value or 0 when conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tolongwithdefault&#34;&gt;ToLongWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into integer or returns a given default value when the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; long ToLongWithDefault(object value, long defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: long - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value or given default value when the conversion is not supported&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullablelong&#34;&gt;ToNullableLong&lt;/h4&gt;
&lt;p&gt;Converts value into long or returns null when the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; long ToNullableLong(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value or null when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;LongConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// Result: null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;LongConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;LongConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value4&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;LongConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: current milliseconds
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: MapConverter</title>
      <link>/net/commons/convert/map_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/map_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MapConverter class allows you to convert arbitrary values into map objects using the following extended conversion rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects: property names as keys, property values as values&lt;/li&gt;
&lt;li&gt;Arrays: element indexes as keys, elements as values&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;tomap&#34;&gt;ToMap&lt;/h4&gt;
&lt;p&gt;Converts value into a map object or returns an empty map when the conversion is not possible&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IDictionary&amp;lt;string, object&amp;gt; ToMap(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - map object or empty map when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tomapwithdefault&#34;&gt;ToMapWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into a map object or returns a given default value when the conversion is not possible&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IDictionary&amp;lt;string, object&amp;gt; ToMapWithDefault(object value, IDictionary&amp;lt;string, object&amp;gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - map object or empty map when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullablemap&#34;&gt;ToNullableMap&lt;/h4&gt;
&lt;p&gt;Converts value into a map object or returns null when the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IDictionary&amp;lt;string, object&amp;gt; ToNullableMap(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - map object or null when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;MapConverted&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;                 &lt;span style=&#34;color:#75715e&#34;&gt;// Result: null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;MapConverted&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: { key: 123 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;MapConverted&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: { &amp;#34;0&amp;#34;: 1, &amp;#34;1&amp;#34;: 2, &amp;#34;2&amp;#34;: 3 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: RecursiveMapConverter</title>
      <link>/net/commons/convert/recursive_map_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/recursive_map_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RecursiveMapConverter class allows you to convert arbitrary values into map objects using extended conversion rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This class is similar to &lt;a href=&#34;../map_converter&#34;&gt;MapConverter&lt;/a&gt;. The difference is that it recursively converts all values stored in objects and arrays.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;tomap&#34;&gt;ToMap&lt;/h4&gt;
&lt;p&gt;Converts value into a map object or returns an empty map when the conversion is not possible&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IDictionary&amp;lt;string, object&amp;gt; ToMap(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - map object or empty map when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tomapwithdefault&#34;&gt;ToMapWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into a map object or returns a given default value when the conversion is not possible&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IDictionary&amp;lt;string, object&amp;gt; ToMapWithDefault(object value, IDictionary&amp;lt;string, object&amp;gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - map object or empty map when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tonullablemap&#34;&gt;ToNullableMap&lt;/h4&gt;
&lt;p&gt;Converts value into map object or returns null when the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; IDictionary&amp;lt;string, object&amp;gt; ToNullableMap(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - map object or null when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;RecursiveMapConverted&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;RecursiveMapConverted&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: { key: 123 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; 
&lt;span style=&#34;color:#111&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[]{&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;RecursiveMapConverted&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToNullableMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: { &amp;#34;0&amp;#34;: 1, { &amp;#34;0&amp;#34;: 2, &amp;#34;1&amp;#34;: 3 } }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: StringConverter</title>
      <link>/net/commons/convert/string_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/string_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The StringConverter class allows you to convert arbitrary values into strings using the following extended conversion rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numbers: are converted with &amp;lsquo;.&amp;rsquo; as decimal point&lt;/li&gt;
&lt;li&gt;DateTime: using ISO format&lt;/li&gt;
&lt;li&gt;Boolean: &amp;ldquo;true&amp;rdquo; for true and &amp;ldquo;false&amp;rdquo; for false&lt;/li&gt;
&lt;li&gt;Arrays: as comma-separated list&lt;/li&gt;
&lt;li&gt;Other objects: using &lt;strong&gt;ToString()&lt;/strong&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;tonullablestring&#34;&gt;ToNullableString&lt;/h4&gt;
&lt;p&gt;Converts value into a string or returns null when value is null.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string ToNullableString(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value or null when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostring&#34;&gt;ToString&lt;/h4&gt;
&lt;p&gt;Converts value into a string or returns &amp;quot;&amp;quot; when value is null.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string ToString(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value or &amp;quot;&amp;quot; when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostringwithdefault&#34;&gt;ToStringWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into string or returns default when value is null.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string ToStringWithDefault(object value, string defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: string - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value or default when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;StringConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123.456&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;123.456&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;StringConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;true&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;StringConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ZonedDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;2018-01-01T00:00:00.00&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value4&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;StringConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[]{&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;1,2,3&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: TimeSpanConverter</title>
      <link>/net/commons/convert/time_span_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/time_span_converter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TimeSpanConverter class allows you to convert objects to TimeSpans.&lt;/p&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;tonullabletimespan&#34;&gt;ToNullableTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts value into TimeSpan or returns null when value is null.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; TimeSpan? ToNullableTimeSpan(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan value or null when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;totimespan&#34;&gt;ToTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts value into TimeSpan.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; TimeSpan ToTimeSpan(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan value or null when value is null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;totimespanwithdefault&#34;&gt;ToTimeSpanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts value into TimeSpan or returns a given default when value is null.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; TimeSpan ToTimeSpanWithDefault(object value, TimeSpan? defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: TimeSpan - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan value or null when value is null.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: TypeCode</title>
      <link>/net/commons/convert/type_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/type_code/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TypeCode class contains the codes for data types that are used by the class &lt;a href=&#34;../type_converter&#34;&gt;TypeConverter&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;enumeration-members&#34;&gt;Enumeration members&lt;/h3&gt;
&lt;p&gt;The codes are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unknown&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Long&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Float&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Double&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DateTime&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Duration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enum&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: TypeConverter</title>
      <link>/net/commons/convert/type_converter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/convert/type_converter/</guid>
      <description>
        
        
        &lt;p&gt;See also &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TypeConverter class allows you to convert arbitrary values into objects specified by a type code and to get the type code of an object. The type codes are defined in the &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; class.&lt;/p&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;tonullabletype&#34;&gt;ToNullableType&lt;/h4&gt;
&lt;p&gt;Converts value into an object type specified by a type code or returns null when the conversion is not possible.
&lt;strong&gt;T&lt;/strong&gt; - Class type for the data type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; T ToNullableType&amp;lt;T&amp;gt;(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - object value of type corresponding to TypeCode, or null when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostring&#34;&gt;ToString&lt;/h4&gt;
&lt;p&gt;Converts a &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; into its string name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string ToString(&lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; type)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode to convert into a string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - the name of the &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; passed as a string value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;totype&#34;&gt;ToType&lt;/h4&gt;
&lt;p&gt;Converts value into an object type specified by a type code or returns the default type when the conversion is not possible.
&lt;strong&gt;T&lt;/strong&gt; - Class type for the data type into which &amp;lsquo;value&amp;rsquo; is to be converted.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; T ToType&amp;lt;T&amp;gt;(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - object value of type corresponding to &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, or the default type when the onversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;totypecode&#34;&gt;ToTypeCode&lt;/h4&gt;
&lt;p&gt;Gets the type code for a specific value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; ToTypeCode(Type type)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: Type - 	Class type for the data type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that corresponds to the passed object&amp;rsquo;s type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;totypecode-1&#34;&gt;ToTypeCode&lt;/h4&gt;
&lt;p&gt;Gets the TypeCode for specific value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; ToTypeCode(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value whose TypeCode is to be resolved.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that corresponds to the passed object&amp;rsquo;s type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;totypewithdefault&#34;&gt;ToTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a value into an object of type specified by TypeCode or returns a given default value when the conversion is not possible.
&lt;strong&gt;T&lt;/strong&gt; - Class type for the data type into which &amp;lsquo;value&amp;rsquo; is to be converted.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; T ToTypeWithDefault&amp;lt;T&amp;gt;(object value, T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to convert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value to return if the conversion is not possible (returns null).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - object value of type corresponding to TypeCode, or the given default value when the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;TypeConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToType&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;TypeCode&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Integer&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;TypeConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToType&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;TypeCode&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;DateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: DateTime(123)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;TypeConverter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ToType&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;TypeCode&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Boolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;typecodeconverttype_code&#34;&gt;&lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
