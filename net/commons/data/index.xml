<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Data</title>
    <link>/net/commons/data/</link>
    <description>Recent content in Data on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/net/commons/data/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: AnyValue</title>
      <link>/net/commons/data/any_value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/any_value/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AnyValue class provides a cross-language implementation of a dynamic object that can hold a value of any type. In addition, it provides methods to convert the stored value to different types, such as string or integer.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the object and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; AnyValue(object value = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - (optional) value used to initialize this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of the object and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; AnyValue(&lt;a href=&#34;&#34;&gt;AnyValue&lt;/a&gt; value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - (optional) value to initialize this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;value&#34;&gt;Value&lt;/h4&gt;
&lt;p&gt;The value stored by this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object Value [ get, private set ]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clone&#34;&gt;Clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object Clone()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equals&#34;&gt;Equals&lt;/h4&gt;
&lt;p&gt;Compares this object&amp;rsquo;s value to a specified specified value.
When a direct comparison gives a negative results it tries
to compare values as strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; bool Equals(object obj)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: object - value to be compared with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true when objects are equal and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equalsas&#34;&gt;EqualsAs&lt;/h4&gt;
&lt;p&gt;Compares this object&amp;rsquo;s value to a specified specified value.
When direct comparison gives negative results it converts the
values to a type specified by type code and compares them again.&lt;br&gt;
&lt;strong&gt;T&lt;/strong&gt; - the class type.
See &lt;a href=&#34;../../convert/type_converter/#totype&#34;&gt;TypeConverter.ToType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool EqualsAs/&lt;T/&gt;(object obj)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: object - args to be compared with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - true when the objects are equal and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarray&#34;&gt;GetAsArray&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into an AnyArray or returns and empty AnyArray if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array/#fromvalue&#34;&gt;AnyValueArray.FromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; GetAsArray()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyArray value or an empty AnyArray if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasboolean&#34;&gt;GetAsBoolean&lt;/h4&gt;
&lt;p&gt;Converts object value into a bool or returns false if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsBoolean()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - string value or false if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasbooleanwithdefault&#34;&gt;GetAsBooleanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a bool or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.ToBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsBooleanWithDefault(bool defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: bool - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value or a given default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetime&#34;&gt;GetAsDateTime&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a DateTime or returns the current date if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsDateTime()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value or the current date if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetimewithdefault&#34;&gt;GetAsDateTimeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a DateTime or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#todatetimewithdefault&#34;&gt;DateTimeConverter.ToDateTimeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsDateTimeWithDefault(DateTime defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: DateTime - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value or a given default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletimespan&#34;&gt;GetAsNullableTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into TimeSpan or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsNullableTimeSpan()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan value or null if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastimespan&#34;&gt;GetAsTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into TimeSpan.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsTimeSpan()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastimespanwithdefault&#34;&gt;GetAsTimeSpanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into TimeSpan or returns a given default if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsTimeSpanWithDefault(TimeSpan? defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: TimeSpan - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan value or a given default if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableenum&#34;&gt;GetAsNullableEnum&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into an Enum or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsNullableEnum&amp;lt;T&amp;gt;()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum or null if the conversion is not possible&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasenum&#34;&gt;GetAsEnum&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into an Enum.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsEnum&amp;lt;T&amp;gt;()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasenumwithdefault&#34;&gt;GetAsEnumWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into an Enum or returns a given default value is the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsEnumWithDefault&amp;lt;T&amp;gt;(T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum or given default value if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdouble&#34;&gt;GetAsDouble&lt;/h4&gt;
&lt;p&gt;Converts object value into a double or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsDouble()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdoublewithdefault&#34;&gt;GetAsDoubleWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a double or returns a given default value if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#todoublewithdefault&#34;&gt;DoubleConverter.ToDoubleWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsDoubleWithDefault(double defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: double - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value or default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloat&#34;&gt;GetAsFloat&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a float or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsFloat()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloatwithdefault&#34;&gt;GetAsFloatWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a float or returns a given default value if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tofloatwithdefault&#34;&gt;FloatConverter.ToFloatWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsFloatWithDefault(float defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: float - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasinteger&#34;&gt;GetAsInteger&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into an integer or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsInteger()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: GetAsInteger - integer value or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasintegerwithdefault&#34;&gt;GetAsIntegerWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a integer or returns a given default value if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.ToIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsIntegerWithDefault(int defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: int - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int -  integer value or given default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslong&#34;&gt;GetAsLong&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a long or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsLong()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long -  long value or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslongwithdefault&#34;&gt;GetAsLongWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a long or returns a given default value if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tolongwithdefault&#34;&gt;LongConverter.ToLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsLongWithDefault(long defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: long - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long -  long value or given default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmap&#34;&gt;GetAsMap&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into AnyMap or returns an empty AnyMap if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap.FromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsMap()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; -  AnyMap value or empty AnyMap if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableboolean&#34;&gt;GetAsNullableBoolean&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a bool or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tonullableboolean&#34;&gt;BooleanConverter.ToNullableBoolean&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsNullableBoolean()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledatetime&#34;&gt;GetAsNullableDateTime&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a DateTime or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#tonullabledatetime&#34;&gt;DateTimeConverter.ToNullableDateTime&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime sGetAsNullableDateTime()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledouble&#34;&gt;GetAsNullableDouble&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a double or returns null if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#tonullabledouble&#34;&gt;DoubleConverter.ToNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsNullableDouble()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablefloat&#34;&gt;GetAsNullableFloat&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a float or returns null if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tonullablefloat&#34;&gt;FloatConverter.ToNullableFloat&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsNullableFloat()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableinteger&#34;&gt;GetAsNullableInteger&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into an integer or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tonullableinteger&#34;&gt;IntegerConverter.ToNullableInteger&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsNullableInteger()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablelong&#34;&gt;GetAsNullableLong&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a long or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tonullablelong&#34;&gt;LongConverter.ToNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsNullableLong()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablestring&#34;&gt;GetAsNullableString&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a string or returns null if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tonullablestring&#34;&gt;StringConverter.ToNullableString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsNullableString()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletype&#34;&gt;GetAsNullableType&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a value defined by specified typecode.
If conversion is not possible, it returns null.&lt;br&gt;
&lt;strong&gt;T&lt;/strong&gt; - the class type
See &lt;a href=&#34;../../convert/type_converter/#tonullabletype&#34;&gt;TypeConverter.toNullableType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsNullableType&amp;lt;T&amp;gt;()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - value defined by the typecode or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject&#34;&gt;GetAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in this object without any conversions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object GetAsObject()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - object value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstring&#34;&gt;GetAsString&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a string or returns &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsString()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value or &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstringwithdefault&#34;&gt;GetAsStringWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object value into a string or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsStringWithDefault(string defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: string - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value or default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastype&#34;&gt;GetAsType&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a value defined by specified typecode.
If the conversion is not possible, it returns a given default value for the specified type.
&lt;strong&gt;T&lt;/strong&gt; - the class type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsType&amp;lt;T&amp;gt;()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - value defined by the typecode or given type default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastypewithdefault&#34;&gt;GetAsTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a value defined by a specified typecode.
If conversion is not possible, it returns default value.
&lt;strong&gt;T&lt;/strong&gt; - the class type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsTypeWithDefault&amp;lt;T&amp;gt;(T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - value defined by the typecode or given type default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;gettypecode&#34;&gt;GetTypeCode&lt;/h4&gt;
&lt;p&gt;Gets the type code for the value stored in this object.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totypecode&#34;&gt;TypeConverter.ToTypeCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; GetTypeCode()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - type code of the object&amp;rsquo;s value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;gethashcode&#34;&gt;GetHashCode&lt;/h4&gt;
&lt;p&gt;Gets an object hash code which can be used to optimize storing and searching.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totypecode&#34;&gt;TypeConverter.ToTypeCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override &lt;/code&gt; int GetHashCode()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - object hash code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject&#34;&gt;SetAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value for this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void SetAsObject(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - new object value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostring&#34;&gt;ToString&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tostring&#34;&gt;StringConverter.ToString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; string ToString()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;AnyValue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;123.456&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: AnyValueArray</title>
      <link>/net/commons/data/any_value_array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/any_value_array/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;, List&amp;lt;object&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AnyValueArray class provides a cross-language implementation of a dynamic array object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the array and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; AnyValueArray(object[] values)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: object[] - (optional) values used to initialize this array.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of the array and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; AnyValueArray(IEnumerable values)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: IEnumerable - (optional) values used to initialize this array.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of the array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; AnyValueArray()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;Append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Append(object[] values)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: object[] - list of elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;append-1&#34;&gt;Append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Append(IEnumerable values)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: IEnumerable - list of elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clone&#34;&gt;Clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object Clone()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;contains&#34;&gt;Contains&lt;/h4&gt;
&lt;p&gt;Checks if this array contains a value.
The check uses direct comparison between elements and the specified value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public new&lt;/code&gt; bool Contains(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to be checked&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if this array contains the value or false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;containsas&#34;&gt;ContainsAs&lt;/h4&gt;
&lt;p&gt;Checks if this array contains a value.
The check before comparison converts the elements and the value to type specified by the type code.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totype&#34;&gt;TypeConverter.ToType&lt;/a&gt;, &lt;a href=&#34;../../convert/type_converter/#tonullabletype&#34;&gt;TypeConverter.ToNullableType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool ContainsAs&amp;lt;T&amp;gt;(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to be checked&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if this array contains the value or false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;Get&lt;/h4&gt;
&lt;p&gt;Gets an array element specified by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; object Get(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - value of the array element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarray&#34;&gt;GetAsArray&lt;/h4&gt;
&lt;p&gt;Converts an array element to an AnyValueArray or returns an empty AnyValueArray if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; GetAsArray(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or empty an AnyValueArray if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarraywithdefault&#34;&gt;GetAsArrayWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element to an AnyValueArray or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; GetAsArrayWithDefault(int index, &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or a given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasboolean&#34;&gt;GetAsBoolean&lt;/h4&gt;
&lt;p&gt;Converts an array element to a bool or returns false if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsBoolean(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value ot the element or false if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasbooleanwithdefault&#34;&gt;GetAsBooleanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element to a bool or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.ToBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsBooleanWithDefault(int index, bool defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: bool - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value ot the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetime&#34;&gt;GetAsDateTime&lt;/h4&gt;
&lt;p&gt;Converts an array element to a DateTime or returns the current date if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsDateTime(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value of the element or the current date if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetimewithdefault&#34;&gt;GetAsDateTimeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element to a DateTime or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#todatetimewithdefault&#34;&gt;DateTimeConverter.ToDateTimeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsDateTimeWithDefault(int index, DateTime defaultValue?)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: DateTime - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value ot the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletimespan&#34;&gt;GetAsNullableTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts an array element to TimeSpan or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsNullableTimeSpan(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan or null if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastimespan&#34;&gt;GetAsTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts an array element into TimeSpan.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsTimeSpan(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastimespanwithdefault&#34;&gt;GetAsTimeSpanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element to TimeSpan or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsTimeSpanWithDefault(int index, TimeSpan? defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: TimeSpan - given default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan or given default value if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableenum&#34;&gt;GetAsNullableEnum&lt;/h4&gt;
&lt;p&gt;Converts an array element to Enum or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsNullableEnum&amp;lt;T&amp;gt;(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum or null if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasenum&#34;&gt;GetAsEnum&lt;/h4&gt;
&lt;p&gt;Converts an array element to Enum.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsEnum&amp;lt;T&amp;gt;(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasenumwithdefault&#34;&gt;GetAsEnumWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element to Enum or returns a givend default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsEnumWithDefault&amp;lt;T&amp;gt;(int index, T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum or a given default value if the conversion is not possile.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdouble&#34;&gt;GetAsDouble&lt;/h4&gt;
&lt;p&gt;Converts an array element into a double or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsDouble(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value ot the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdoublewithdefault&#34;&gt;GetAsDoubleWithDefault&lt;/h4&gt;
&lt;p&gt;Converts array element into a double or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsDoubleWithDefault(int index, double defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: double - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value of the element or a given default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloat&#34;&gt;GetAsFloat&lt;/h4&gt;
&lt;p&gt;Converts an array element into a float or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsFloat(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value ot the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloatwithdefault&#34;&gt;GetAsFloatWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element into a float or returns a  given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tofloatwithdefault&#34;&gt;FloatConverter.ToFloatWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsFloatWithDefault(int index, float defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: float - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasinteger&#34;&gt;GetAsInteger&lt;/h4&gt;
&lt;p&gt;Converts an array element into an integer or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsInteger(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasintegerwithdefault&#34;&gt;GetAsIntegerWithDefault&lt;/h4&gt;
&lt;p&gt;Converts array element into an integer or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.ToIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsIntegerWithDefault(int index, int defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: int - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslong&#34;&gt;GetAsLong&lt;/h4&gt;
&lt;p&gt;Converts an array element into a long or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long getAsLong(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslongwithdefault&#34;&gt;GetAsLongWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element into a long or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/LongConverter/#tolongwithdefault&#34;&gt;LongConverter.ToLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsLongWithDefault(int index, long defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: long - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmap&#34;&gt;GetAsMap&lt;/h4&gt;
&lt;p&gt;Converts an array element into an AnyValueMap or returns an empty AnyValueMap if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap.FromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsMap(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or an empty AnyValueMap if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmapwithdefault&#34;&gt;GetAsMapWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element into an AnyValueMap or returns a give default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsMapWithDefault(int index, &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablearray&#34;&gt;GetAsNullableArray&lt;/h4&gt;
&lt;p&gt;Converts an array element into an AnyValueArray or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; GetAsNullableArray(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableboolean&#34;&gt;GetAsNullableBoolean&lt;/h4&gt;
&lt;p&gt;Converts array element into a bool or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../converter/boolean_converter/#tonullableboolean&#34;&gt;BooleanConverter.ToNullableBoolean&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsNullableBoolean(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledatetime&#34;&gt;GetAsNullableDateTime&lt;/h4&gt;
&lt;p&gt;Converts an array element into a DateTime or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../converter/date_time_converter/#tonullabledatetime&#34;&gt;DateTimeConverter.ToNullableDateTime&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsNullableDateTime(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledouble&#34;&gt;GetAsNullableDouble&lt;/h4&gt;
&lt;p&gt;Converts an array element into a double or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#tonullabledouble&#34;&gt;DoubleConverter.ToNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsNullableDouble(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablefloat&#34;&gt;GetAsNullableFloat&lt;/h4&gt;
&lt;p&gt;Converts an array element into a float or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tonullablefloat&#34;&gt;FloatConverter.ToNullableFloat&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsNullableFloat(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableinteger&#34;&gt;GetAsNullableInteger&lt;/h4&gt;
&lt;p&gt;Converts an array element into a float or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tonullableinteger&#34;&gt;IntegerConverter.ToNullableInteger&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsNullableInteger(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - integer value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablelong&#34;&gt;GetAsNullableLong&lt;/h4&gt;
&lt;p&gt;Converts an array element into a long or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tonullablelong&#34;&gt;LongConverter.ToNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsNullableLong(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablemap&#34;&gt;GetAsNullableMap&lt;/h4&gt;
&lt;p&gt;Converts an array element into a long or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsNullableMap(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablestring&#34;&gt;GetAsNullableString&lt;/h4&gt;
&lt;p&gt;Converts an array element into a string or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tonullablestring&#34;&gt;StringConverter.ToNullableString&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsNullableString(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletype&#34;&gt;GetAsNullableType&lt;/h4&gt;
&lt;p&gt;Converts an array element into a value defined by a specified typecode.
If conversion is not possible, it returns null.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#tonullabletype&#34;&gt;TypeConverter.ToNullableType&lt;/a&gt;
&lt;strong&gt;T&lt;/strong&gt; - class type&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsNullableType&amp;lt;T&amp;gt;(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletypewithdefault&#34;&gt;GetAsNullableTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element into a value defined by specified typecode.
If conversion is not possible,  it returns a given default value.
See &lt;a href=&#34;../../convert/type_converter/#tonullabletype&#34;&gt;TypeConverter.ToNullableType&lt;/a&gt;
&lt;strong&gt;T&lt;/strong&gt; - class type&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsNullableType&amp;lt;T&amp;gt;(int index, T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - value of element defined by the typecode or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject&#34;&gt;GetAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in this array element without any conversions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object GetAsObject()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - value of the array element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject-1&#34;&gt;GetAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in array element without any conversions.
When element index is not defined, it returns the entire array value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object GetAsObject(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - (optional) index of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - element value or value of the array when the index is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstring&#34;&gt;GetAsString&lt;/h4&gt;
&lt;p&gt;Converts an array element into a string or returns &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsString(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value ot the element or &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstringwithdefault&#34;&gt;GetAsStringWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element into a string or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tostringwithdefault&#34;&gt;StringConverter.ToStringWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsStringWithDefault(int index, string defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: string - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value ot the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastype&#34;&gt;GetAsType&lt;/h4&gt;
&lt;p&gt;Converts an array element into a value defined by a specified typecode.
If the conversion is not possible, it returns default value for the specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsType&amp;lt;T&amp;gt;(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastypewithdefault&#34;&gt;GetAsTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array element into a value defined by specied typecode.
If conversion is not possible, it returns a given default value for the specified type.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totypewithdefault&#34;&gt;TypeConverter.toTypeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsTypeWithDefault&amp;lt;T&amp;gt;(int index, T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasvalue&#34;&gt;GetAsValue&lt;/h4&gt;
&lt;p&gt;Converts an array element into an AnyValue or returns an empty AnyValue if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;, &lt;a href=&#34;../any_value/#constructors&#34;&gt;AnyValues.constructors&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; GetAsValue(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; - AnyValue value of the element or empty AnyValue if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;
&lt;p&gt;Sets a new value into array element specified by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; void Set(int index, object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the element to put.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - new value for array element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject&#34;&gt;SetAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value for this array element.
See &lt;a href=&#34;../../convert/array_converter/#toarray&#34;&gt;ArrayConverter.ToArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void SetAsObject(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - new element or array value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject-1&#34;&gt;SetAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value to an array element specified by its index.
When the index is not defined, it resets the entire array value.
See &lt;a href=&#34;../../convert/array_converter/#toarray&#34;&gt;ArrayConverter.toArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void SetAsObject(int index, object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - (optional) index of the element to set&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - new element or array value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostring&#34;&gt;ToString&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a comma-separated list of string representations of individual elements as
&lt;em&gt;&amp;ldquo;value1,value2,value3&amp;rdquo;&lt;/em&gt;&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tostring&#34;&gt;StringConverter.ToString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; string ToString()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;fromstring&#34;&gt;FromString&lt;/h4&gt;
&lt;p&gt;Splits a specified string into elements using a separator and assigns
the elements to a newly created AnyValueArray.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; FromString(string values, char separator, bool removeDuplicates)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: string - string value to be split and assigned to AnyValueArray&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;separator&lt;/strong&gt;: char - separator to split the string&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;removeDuplicates&lt;/strong&gt;: bool - (optional) true to remove duplicated elements&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromstring-1&#34;&gt;FromString&lt;/h4&gt;
&lt;p&gt;Splits a specified string into elements using a separator and assigns
the elements to a newly created AnyValueArray.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; FromString(string values, char separator)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: string - string value to be split and assigned to AnyValueArray&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;separator&lt;/strong&gt;: char - separator to split the string&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;FromValue&lt;/h4&gt;
&lt;p&gt;Splits a specified string into elements using a separator and assigns
the elements to a newly created AnyValueArray.&lt;br&gt;
See &lt;a href=&#34;../../convert/array_converter/#tonullablearray&#34;&gt;ArrayConverter.ToNullableArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; FromValue(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: object - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalues&#34;&gt;FromValues&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueArray from a list of values&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; FromValues(params object[] values)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: object[] - list of values to initialize the created AnyValueArray&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;AnyValueArray&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;object&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[]{&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2018-01-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: new DateTime(2018,0,1)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter-1&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: AnyValueMap</title>
      <link>/net/commons/data/any_value_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/any_value_map/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;, Dictionary&amp;lt;string, object&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AnyValueMap class provides a cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types; such as bool, integer or datetime.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; AnyValueMap(IDictionary&amp;lt;string, object&amp;gt; values)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - (optional) values to initialize this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; AnyValueMap(IDictionary values)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: IDictionary - (optional) values to initialize this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; AnyValueMap()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;Append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Append(IDictionary map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: IDictionary - map with elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;append-1&#34;&gt;Append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Append(IDictionary&amp;lt;string, object&amp;gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: IDictionary&amp;lt;string, object&amp;gt; - map with elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clone&#34;&gt;Clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object Clone()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;Get&lt;/h4&gt;
&lt;p&gt;Gets a map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; object Get(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - value of the map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarray&#34;&gt;GetAsArray&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueArray or returns an empty AnyValueArray if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;, &lt;a href=&#34;../any_value_array/#fromvalue&#34;&gt;AnyValueArray.FromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; GetAsArray(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or empty AnyValueArray if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarraywithdefault&#34;&gt;GetAsArrayWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueArray or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; GetAsArrayWithDefault(string key, &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or  given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasboolean&#34;&gt;GetAsBoolean&lt;/h4&gt;
&lt;p&gt;Converts a map element into a bool or returns false if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsBoolean(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - value of the element or false if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasbooleanwithdefault&#34;&gt;GetAsBooleanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a bool or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.toBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsBooleanWithDefault(string key, bool defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: bool - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetime&#34;&gt;GetAsDateTime&lt;/h4&gt;
&lt;p&gt;Converts a map element into a DateTime or returns the current date if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsDateTime(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value of the element or the current date if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetimewithdefault&#34;&gt;GetAsDateTimeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a DateTime or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#todatetimewithdefault&#34;&gt;DateTimeConverter.toDateTimeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsDateTimeWithDefault(string key, DateTime defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: DateTime - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletimespan&#34;&gt;GetAsNullableTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts a map element into a TimeSpan or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsNullableTimeSpan(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan or null if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastimespan&#34;&gt;GetAsTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts a map element into a TimeSpan.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsTimeSpan(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastimespanwithdefault&#34;&gt;GetAsTimeSpanWithDefault&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsTimeSpanWithDefault(string key, TimeSpan? defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: TimeSpan - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableenum&#34;&gt;GetAsNullableEnum&lt;/h4&gt;
&lt;p&gt;Converts a map element into an Enum or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsNullableEnum&amp;lt;T&amp;gt;(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum or null if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasenum&#34;&gt;GetAsEnum&lt;/h4&gt;
&lt;p&gt;Converts a map element into an Enum.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsEnum&amp;lt;T&amp;gt;(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasenumwithdefault&#34;&gt;GetAsEnumWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into an Enum or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsEnumWithDefault&amp;lt;T&amp;gt;(string key, T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum or given default value if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdouble&#34;&gt;GetAsDouble&lt;/h4&gt;
&lt;p&gt;Converts a map element into a double or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsDouble(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdoublewithdefault&#34;&gt;GetAsDoubleWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a double or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#todoublewithdefault&#34;&gt;DoubleConverter.ToDoubleWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsDoubleWithDefault(string key, double defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: double - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloat&#34;&gt;GetAsFloat&lt;/h4&gt;
&lt;p&gt;Converts a map element into a float or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsFloat(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloatwithdefault&#34;&gt;GetAsFloatWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a flot or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tofloatwithdefault&#34;&gt;FloatConverter.ToFloatWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsFloatWithDefault(string key, float defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: float - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - flot value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasinteger&#34;&gt;GetAsInteger&lt;/h4&gt;
&lt;p&gt;Converts a map element into an integer or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsInteger(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasintegerwithdefault&#34;&gt;GetAsIntegerWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into an integer or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.ToIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsIntegerWithDefault(string key, float defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: float - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - integer value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslong&#34;&gt;GetAsLong&lt;/h4&gt;
&lt;p&gt;Converts a map element into a long or returns 0 if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.ToIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsLong(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslongwithdefault&#34;&gt;GetAsLongWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a long or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tolongwithdefault&#34;&gt;LongConverter.ToLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsLongWithDefault(string key, long defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: long - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmap&#34;&gt;GetAsMap&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueMap or returns an empty AnyValueMap if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tolongwithdefault&#34;&gt;LongConverter.ToLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsMap(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or empty AnyValueMap if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmapwithdefault&#34;&gt;GetAsMapWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueMap or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsMapWithDefault(string key, &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablearray&#34;&gt;GetAsNullableArray&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueArray or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsNullableArray(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueArray value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableboolean&#34;&gt;GetAsNullableBoolean&lt;/h4&gt;
&lt;p&gt;Converts a map element into a bool or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tonullableboolean&#34;&gt;BooleanConverter.toNullableBoolean&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsNullableBoolean(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledatetime&#34;&gt;GetAsNullableDateTime&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#tonullabledatetime&#34;&gt;DateTimeConverter.ToNullableDateTime&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsNullableDateTime(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledouble&#34;&gt;GetAsNullableDouble&lt;/h4&gt;
&lt;p&gt;Converts a map element into a double or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#tonullabledouble&#34;&gt;DoubleConverter.ToNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsNullableDouble(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablefloat&#34;&gt;GetAsNullableFloat&lt;/h4&gt;
&lt;p&gt;Converts a map element into a float or returns null if the conversion is not possible.
See &lt;a href=&#34;../../convert/float_converter/#tonullablefloat&#34;&gt;FloatConverter.ToNullableFloat&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsNullableFloat(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableinteger&#34;&gt;GetAsNullableInteger&lt;/h4&gt;
&lt;p&gt;Converts a map element into an integer or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tonullableinteger&#34;&gt;IntegerConverter.ToNullableInteger&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsNullableInteger(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablelong&#34;&gt;GetAsNullableLong&lt;/h4&gt;
&lt;p&gt;Converts a map element into a long or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tonullablelong&#34;&gt;LongConverter.ToNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; logn GetAsNullableLong(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: logn - long value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablemap&#34;&gt;GetAsNullableMap&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueMap or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsNullableMap(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablestring&#34;&gt;GetAsNullableString&lt;/h4&gt;
&lt;p&gt;Converts a map element into a string or returns null if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tonullablestring&#34;&gt;StringConverter.ToNullableString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsNullableString(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletype&#34;&gt;GetAsNullableType&lt;/h4&gt;
&lt;p&gt;Converts a map element into a value defined by a specified typecode.
If the conversion is not possible,  it returns null.  &lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#tonullabletype&#34;&gt;TypeConverter.toNullableType&lt;/a&gt;
&lt;strong&gt;T&lt;/strong&gt; - class type&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsNullableType&amp;lt;T&amp;gt;(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject&#34;&gt;GetAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in this map element without any conversions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object GetAsObject()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - value of the map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject-1&#34;&gt;GetAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in a map element without any conversions.
When element key is not defined, it returns the entire map value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object GetAsObject(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - element value or value of the map when the index is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstring&#34;&gt;GetAsString&lt;/h4&gt;
&lt;p&gt;Converts a map element into a string or returns &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsString(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstringwithdefault&#34;&gt;GetAsStringWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a string or returns a given default value if the conversion is not possible.
See &lt;a href=&#34;../../convert/string_converter/#tostringwithdefault&#34;&gt;StringConverter.ToStringWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsStringWithDefault(string key, string defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: string - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastype&#34;&gt;GetAsType&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by a specified typecode.
If the conversion is not possible,  it returns the default value for the specified type.
&lt;strong&gt;T&lt;/strong&gt; - class type&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsType&amp;lt;T&amp;gt;(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastypewithdefault&#34;&gt;GetAsTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a value defined by a specified typecode.
If the conversion is not possible, it returns a given default value. &lt;br&gt;
&lt;strong&gt;T&lt;/strong&gt; - class type
See &lt;a href=&#34;../../convert/type_converter/#totypewithdefault&#34;&gt;TypeConverter.ToTypeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsTypeWithDefault&amp;lt;T&amp;gt;(string key, T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or default given value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasvalue&#34;&gt;GetAsValue&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValue or returns an empty AnyValue if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;, &lt;a href=&#34;../any_value/#constructors&#34;&gt;AnyValue.constructors&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; GetAsValue(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; -AnyValue value of the element or empty AnyValue if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;
&lt;p&gt;Puts a new value into a map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; Set(string key, object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to put.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - new value for the map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject&#34;&gt;SetAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value for this array element&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void SetAsObject(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - new element or map value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject-1&#34;&gt;SetAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value to a map element specified by its index.
When the index is not defined, it resets the entire map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void SetAsObject(string key, object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) key of the element to set&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - new element or map value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;frommaps&#34;&gt;FromMaps&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap by merging two or more maps.
Maps defined later in the list override values from previously defined maps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; FromMaps(params IDictionary[] maps)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maps&lt;/strong&gt;: IDictionary[] - array of maps to be merged&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - newly created AnyValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;FromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; FromTuples(params object[] tuples)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: object[] - list of values where odd elements are keys and the following even elements are values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuplesarray&#34;&gt;FromTuplesArray&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap from a list of key-value pairs called tuples.
The method is similar to &lt;a href=&#34;#fromtuples&#34;&gt;fromTuples&lt;/a&gt; but tuples are passed as an array instead of parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; FromTuplesArray(params object[] tuples)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: object[] - list of values where odd elements are keys and the following even elements are values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;FromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value into an AnyValueMap.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; FromValue(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - newly created AnyValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;AnyValueMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Dictionary&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;object&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2018-01-01&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: new DateTime(2018,0,1)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter-1&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: DataPage</title>
      <link>/net/commons/data/data_page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/data_page/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DataPage class allows you to create a data transfer object that can be used to pass the results of a paginated query. This object contains items of the retrieved page.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most often, this object type is used to send responses to paginated queries.&lt;/li&gt;
&lt;li&gt;Pagination parameters are defined by a &lt;a href=&#34;../paging_params&#34;&gt;PagingParams&lt;/a&gt; object.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;skip&lt;/em&gt; parameter in the PagingParams indicates how many items to skip.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;takes&lt;/em&gt; parameter sets the number of items to return in the page.&lt;/li&gt;
&lt;li&gt;An optional &lt;em&gt;total&lt;/em&gt; paramter allows you to specify the total number of items returned from a request. However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of data page and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DataPage(List&amp;lt;T&amp;gt; data, long? total = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: List&amp;lt;T&amp;gt; - list of items from the retrieved page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: long - total amount of items in a request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of data page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DataPage()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;data&#34;&gt;Data&lt;/h4&gt;
&lt;p&gt;Items of the retrieved page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; List&amp;lt;T&amp;gt; Data { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;Total&lt;/h4&gt;
&lt;p&gt;Total amount of items in a request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long Total { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; 
    &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;async&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;DataPage&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Items: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;MyData&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Total items: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;getTotal&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;pagingparamspaging_params&#34;&gt;&lt;a href=&#34;../paging_params&#34;&gt;PagingParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: FilterParams</title>
      <link>/net/commons/data/filter_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/filter_params/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The FilterParams class allows you to create a data transfer object that can be used to pass filter parameters as key-value pairs.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and initalizes it with elements from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; FilterParams(IDictionary&amp;lt;string, string&amp;gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: IDictionary&amp;lt;string, string&amp;gt; - map to initialize this instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance and initalizes it with elements from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; FilterParams(&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - map to initialize this instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance and initalizes it with elements from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; FilterParams()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;fromstring&#34;&gt;FromString&lt;/h4&gt;
&lt;p&gt;Parses semicolon-separated key-value pairs and returns them as a FilterParams.&lt;br&gt;
See &lt;a href=&#34;../string_value_map/#fromstring&#34;&gt;StringValueMap.FromString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public new static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; FromString(string line)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: string - semicolon-separated key-value list to initialize FilterParams.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; - newly created FilterParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;FromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new FilterParams from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public new static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; FromTuples(params object[] tuples)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: object[] - list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; - newly created FilterParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;FromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value to FilterParams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public new static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; FromValue(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; - newly created FilterParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;from_create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;to_create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(),&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringvaluemapstring_value_map&#34;&gt;&lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: IChangeable</title>
      <link>/net/commons/data/ichangeable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/ichangeable/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IChangeable interface allows you to store the last modified date and time in the &amp;ldquo;change_time&amp;rdquo; parameter of a data object.&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;changetime&#34;&gt;ChangeTime&lt;/h4&gt;
&lt;p&gt;The UTC time at which the object was last changed (created or updated).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DateTime ChangeTime { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IChangeable&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;DateTime&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;changeTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: ICloneable</title>
      <link>/net/commons/data/icloneable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/icloneable/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ICloneable interface allows you to create objects with binary clones.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clone&#34;&gt;Clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;object Clone()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyClass&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IMyClass&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ICloneable&lt;/span&gt; 
&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;MyClass&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;cloneObj&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Copy every attribute from this to cloneObj here.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;cloneObj&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: IdGenerator</title>
      <link>/net/commons/data/id_generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/id_generator/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IdGenerator class allows you to generate IDs for objects.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It supports two types of IDs: short and long.&lt;/li&gt;
&lt;li&gt;ShortIDs are 9-digit random numbers. They are not guaranteed be unique.&lt;/li&gt;
&lt;li&gt;Long IDs are string GUIDs. They are globally unique and 32-character long.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;nextlong&#34;&gt;NextLong&lt;/h4&gt;
&lt;p&gt;Generates a globally unique 32-digit object ID.
The value is a string representation of a GUID value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string NextLong()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - generated 32-digit object ID&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nextshort&#34;&gt;NextShort&lt;/h4&gt;
&lt;p&gt;Generates a random 9-digit random ID (code).&lt;/p&gt;
&lt;p&gt;Remember: The returned value is not guaranteed to be unique.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string NextShort()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - generated random 9-digit code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;IdGenerator&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;NextLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: &amp;#34;234ab342c56a2b49c2ab42bf23ff991ac&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;IdGenerator&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;NextShort&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: &amp;#34;23495247&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: IIdentifiable&lt;K&gt;</title>
      <link>/net/commons/data/iidentifiable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/iidentifiable/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IIdentifiable interface is used to create data objects that can be uniquely idendified by an ID.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The type specified in the interface defines the type of the ID field.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;id&#34;&gt;Id&lt;/h4&gt;
&lt;p&gt;The unique object identifier of type K.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;T Id { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: INamed</title>
      <link>/net/commons/data/inamed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/inamed/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The INamed interface is used to define data objects that have a human-readable name.&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;name&#34;&gt;Name&lt;/h4&gt;
&lt;p&gt;The object&amp;rsquo;s humand-readable name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;string Name { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;INamed&lt;/span&gt; 
&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: IStringIdentifiable</title>
      <link>/net/commons/data/istring_identifiable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/istring_identifiable/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;string&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IStringIdentifiable interface extends hte &lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;/a&gt; interface hardcode id type to string.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is common to use a string GUID as the id, generated by &lt;a href=&#34;../id_generator&#34;&gt;IdGenerator&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;iidentifiableiidentifiable&#34;&gt;&lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;idgeneratorid_generator&#34;&gt;&lt;a href=&#34;../id_generator&#34;&gt;IdGenerator&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: ITrackable</title>
      <link>/net/commons/data/itrackable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/itrackable/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../ichangeable&#34;&gt;IChangeable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ITrackagle interface allows you to define data objects that can track their changes, including logical deletion.&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;createdtime&#34;&gt;CreatedTime&lt;/h4&gt;
&lt;p&gt;UTC time at which the object was created.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DateTime CreatedTime { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;lastchangetime&#34;&gt;LastChangeTime&lt;/h4&gt;
&lt;p&gt;UTC time at which the object was last changed (created, updated, or deleted).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DateTime LastChangeTime { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;isdeleted&#34;&gt;IsDeleted&lt;/h4&gt;
&lt;p&gt;Logical deletion flag. True when object is deleted and null or false otherwise&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bool IsDeleted { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ITrackable&lt;/span&gt; 
&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;DateTime&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;change_time&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;DateTime&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;create_time&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;deleted&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ichangeableichangeable&#34;&gt;&lt;a href=&#34;../ichangeable&#34;&gt;IChangeable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: IVersioned</title>
      <link>/net/commons/data/iversioned/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/iversioned/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IVersioned interface allows you to define data objects that can be versioned.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versioning is often used as an optimistic concurrency mechanism.&lt;/li&gt;
&lt;li&gt;The version doesn&amp;rsquo;t have to be a number, but it is recommended to use sequential values to determine if one object has a newer or older version than another one.&lt;/li&gt;
&lt;li&gt;It is common to use the time of change as the object version.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;version&#34;&gt;Version&lt;/h4&gt;
&lt;p&gt;The object&amp;rsquo;s version.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;string Version { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IVersioned&lt;/span&gt; 
&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;}&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;updateData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;correlationId&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;MyData&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Version&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;oldItem&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Version&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; 
    &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ConcurrencyException&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;VERSION_CONFLICT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;The change has older version stored value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: MultiString</title>
      <link>/net/commons/data/multi_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/multi_string/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: Dictionary&amp;lt;string, string&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MultiString class allows you to create objects that contain string translations for multiple languages.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Language keys use two-letter codes like: &lt;em&gt;&amp;lsquo;en&amp;rsquo;, &amp;lsquo;sp&amp;rsquo;, &amp;lsquo;de&amp;rsquo;, &amp;lsquo;ru&amp;rsquo;, &amp;lsquo;fr&amp;rsquo;, &amp;lsquo;pr&amp;rsquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;When a translation for a specific language does not exists, it defaults to English (&amp;lsquo;en&amp;rsquo;).&lt;/li&gt;
&lt;li&gt;When English does not exists, it falls back to the first defined language&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new MultiString object and initializes it with values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; MultiString(Dictionary&amp;lt;string, string&amp;gt; map = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: Dictionary&amp;lt;string, string&amp;gt; - a map with language-text pairs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;Append&lt;/h4&gt;
&lt;p&gt;Appends a map with language-translation pairs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Append(Dictionary&amp;lt;string, string&amp;gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: Dictionary&amp;lt;string, string&amp;gt; - map with language-translation pairs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Clears all translations from this MultiString object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public new&lt;/code&gt; void Clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;get&#34;&gt;Get&lt;/h4&gt;
&lt;p&gt;Gets a string translation by specified language.
When the language is not found, it defaults to English (&amp;lsquo;en&amp;rsquo;).
When English is not found, it takes the first value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string Get(string language)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: string - language&amp;rsquo;s two-symbol code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - translation for the specified language or default translation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getlanguages&#34;&gt;GetLanguages&lt;/h4&gt;
&lt;p&gt;Gets all languages stored in this MultiString object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; List&amp;lt;string&amp;gt; GetLanguages()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List&amp;lt;string&amp;gt; - list with language codes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;length&#34;&gt;Length&lt;/h4&gt;
&lt;p&gt;Returns the number of translations stored in this MultiString object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int Length()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - number of translations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;put&#34;&gt;Put&lt;/h4&gt;
&lt;p&gt;Puts a new translation for the specified language.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Put(string language, dynamic value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: string - language&amp;rsquo;s two-symbol code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: dynamic - new translation for the specified language.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;Remove&lt;/h4&gt;
&lt;p&gt;Removes a translation for the specified language.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public new&lt;/code&gt; void Remove(string language)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: string - language&amp;rsquo;s two-symbol code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;FromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new MultiString object from language-translation pairs (tuples).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;MultiString&lt;/a&gt; FromTuples(params string[] tuples)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: params string[] - array that contains language-translation tuples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;MultiString&lt;/a&gt; - MultiString Object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuplesarray&#34;&gt;FromTuplesArray&lt;/h4&gt;
&lt;p&gt;Creates a new MultiString object from language-translation pairs (tuples) specified as array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;MultiString&lt;/a&gt; FromTuplesArray(string[] tuples)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: string[] - array that contains language-translation tuples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;MultiString&lt;/a&gt; - MultiString Object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;FromValue&lt;/h4&gt;
&lt;p&gt;Creates a new MultiString object from a value that contains language-translation pairs.&lt;br&gt;
See &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;MultiString&lt;/a&gt; FromValue(Dictionary&amp;lt;string, string&amp;gt; value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Dictionary&amp;lt;string, string&amp;gt; - value used to initialize a MultiString object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;MultiString&lt;/a&gt; - MultiString object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;values&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;MultiString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
   &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
   &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ru&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ÐŸÑ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ru&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;ÐŸÑ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€!&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;Hello World!&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: PagingParams</title>
      <link>/net/commons/data/paging_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/paging_params/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The PagingParams class allows you to create data transfer objects used to pass paging parameters for queries.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A page is defined by two parameters:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;skip&lt;/em&gt;: number of items to skip.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;take&lt;/em&gt;: number of items to return in a page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additionally, the optional &lt;em&gt;total&lt;/em&gt; parameter defines whether to return the total number of items or not.&lt;/li&gt;
&lt;li&gt;However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter, because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; PagingParams(object skip, object take, object total = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;skip&lt;/strong&gt;: object - number of items to skip.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;take&lt;/strong&gt;: object - number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: bool - true to return the total number of items.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;skip&#34;&gt;Skip&lt;/h4&gt;
&lt;p&gt;Number of items to skip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long Skip { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;take&#34;&gt;Take&lt;/h4&gt;
&lt;p&gt;Number of items to return.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long Take { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;Total&lt;/h4&gt;
&lt;p&gt;Flag used to return the total number of items.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool Total { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;getskip&#34;&gt;GetSkip&lt;/h4&gt;
&lt;p&gt;Gets the number of items to skip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetSkip(long minSkip = 0)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;minSkip&lt;/strong&gt;: long - minimum number of items to skip.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - number of items to skip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;gettake&#34;&gt;GetTake&lt;/h4&gt;
&lt;p&gt;Gets the number of items to return in a page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetTake(long maxTake)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maxTake&lt;/strong&gt;: long - maximum number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - number of items to return.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;frommap&#34;&gt;FromMap&lt;/h4&gt;
&lt;p&gt;Creates a new PagingParams and sets its parameters from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; FromMap(&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap or StringValueMap used to initialize this PagingParams&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; - newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;FromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new PagingParams from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; FromTuples(params object[] tuples)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: object[] - list of values where odd elements are keys and the following even elements are values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; - newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;FromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value into PagingParams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; FromValue(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; - newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: ProjectionParams</title>
      <link>/net/commons/data/projection_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/projection_params/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: List&amp;lt;string&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ProjectionParams class allows you to define projection parameters with a list of fields to be included in your query results.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The parameters support two formats: dot and nested.&lt;/li&gt;
&lt;li&gt;The dot format is the standard way to define the included fields and subfields by using dot object notation. E.g. &lt;em&gt;&amp;ldquo;field1,field2.field21,field2.field22.field221&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;As an alternative, the nested format offers a more compact representation. E.g. &lt;em&gt;&amp;ldquo;field1,field2(field21,field22(field221))&amp;quot;&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the projection parameters and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; ProjectionParams(string[] values)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: string[] - (optional) values to initialize this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of the projection parameters and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; ProjectionParams(&lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; values)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - (optional) values used to initialize this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of the projection parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; ProjectionParams()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;tostring&#34;&gt;ToString&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a comma-separated list of projection fields
&lt;em&gt;&amp;ldquo;field1,field2.field21,field2.field22.field221&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; string ToString()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;FromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value to ProjectionParams.&lt;br&gt;
See &lt;a href=&#34;../any_value_array/#fromvalue&#34;&gt;AnyValueArray.FromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; FromValue(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object -  value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; - newly created ProjectionParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalues&#34;&gt;FromValues&lt;/h4&gt;
&lt;p&gt;Parses a comma-separated list of projection fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; FromValues(params string[]  value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string[] - one or more comma-separated lists of projection fields&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; - newly created ProjectionParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalues-1&#34;&gt;FromValues&lt;/h4&gt;
&lt;p&gt;Parses a comma-separated list of projection fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; FromValues(char delimiter, params string[]  value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;delimiter&lt;/strong&gt;: char - certain type of delimiter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string[] - one or more comma-separated lists of projection fields&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; - newly created ProjectionParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;projection&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ProjectionParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field1,field2(field21,field22)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;projection&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Net: SortField</title>
      <link>/net/commons/data/sort_field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/sort_field/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The SortField class allows you to define a field used to sort query results. In addition, it allows you to specify the order typer as ascending or descending.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; SortField(string name = null, bool ascending = true)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - name of the field to sort by.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ascending&lt;/strong&gt;: bool - true to sort in ascending order, and false to sort in descending order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;name&#34;&gt;Name&lt;/h4&gt;
&lt;p&gt;Field name to sort by&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string Name { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;ascending&#34;&gt;Ascending&lt;/h4&gt;
&lt;p&gt;Flag used to define sorting order. True to sort ascending, false to sort descending&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; Ascending { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SortingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SortField&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;sortparamssort_params&#34;&gt;&lt;a href=&#34;../sort_params&#34;&gt;SortParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: SortParams</title>
      <link>/net/commons/data/sort_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/sort_params/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: List&amp;lt;&lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The SortParams class allows you to define a list of field names used to sort query results. In addition, it allows you to specify the type of order as ascending or descending.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and initializes it with specified sort fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; SortParams(IEnumerable&amp;lt;&lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;&amp;gt; fields = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fields&lt;/strong&gt;: IEnumerable&amp;lt;&lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;&amp;gt; - list of fields to sort by.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance and initializes it with specified sort fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; SortParams(&lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; fields)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fields&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - list of fields to sort by.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SortParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SortField&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;sortfieldsort_field&#34;&gt;&lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: StringValueMap</title>
      <link>/net/commons/data/string_value_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/string_value_map/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The StringValueMap class allows you to create a cross-language implementation of a map (dictionary) where all keys and values are strings.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The class provides several methods to convert the stored values to different types, such as array, bool or datetime.&lt;/li&gt;
&lt;li&gt;This class is widely used in Pip.Services as a basis for variety of classes, such as &lt;a href=&#34;../../config/config_params&#34;&gt;ConfigParams&lt;/a&gt;, &lt;a href=&#34;../../../components/connect/connection_params&#34;&gt;ConnectionParams&lt;/a&gt;, &lt;a href=&#34;../../../components/auth/credential_params&#34;&gt;CredentialParams&lt;/a&gt; (in the Pip.Services components package) and others.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; StringValueMap(IDictionary&amp;lt;string, string&amp;gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: IDictionary&amp;lt;string, string&amp;gt; - (optional) values to initialize this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; StringValueMap(object map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: object - (optional) values to initialize this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; StringValueMap()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;Append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Append(IDictionary&amp;lt;\string, object&amp;gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: IDictionary&amp;lt;\string, object&amp;gt; - map with elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;append-1&#34;&gt;Append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Append(IDictionary&amp;lt;\string, string&amp;gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: IDictionary&amp;lt;\string, string&amp;gt; - map with elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clone&#34;&gt;Clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object Clone()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;Get&lt;/h4&gt;
&lt;p&gt;Gets a map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; string Get(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - value of the map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarray&#34;&gt;GetAsArray&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueArray or returns an empty AnyValueArray if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;, &lt;a href=&#34;../any_value_array/#fromvalue&#34;&gt;AnyValueArray.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; GetAsArray(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or an empty AnyValueArray if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarraywithdefault&#34;&gt;GetAsArrayWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueArray or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; GetAsArrayWithDefault(string key, &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasboolean&#34;&gt;GetAsBoolean&lt;/h4&gt;
&lt;p&gt;Converts a map element into a bool or returns false if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsBoolean(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value of the element or false if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasbooleanwithdefault&#34;&gt;GetAsBooleanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a bool or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.ToBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsBooleanWithDefault(string key, bool defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: bool - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetime&#34;&gt;GetAsDateTime&lt;/h4&gt;
&lt;p&gt;Converts a map element into a DateTime or returns the current date if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.toBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsDateTime(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value of the element or the current date if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetimewithdefault&#34;&gt;GetAsDateTimeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a DateTime or returns a  given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../date_time_converter/#todatetimewithdefault&#34;&gt;DateTimeConverter.ToDateTimeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsDateTimeWithDefault(string key, DateTime defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: DateTime - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value of the element or given default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletimespan&#34;&gt;GetAsNullableTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts a map element into a TimeSpan or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsNullableTimeSpan(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan of the element or null if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastimespan&#34;&gt;GetAsTimeSpan&lt;/h4&gt;
&lt;p&gt;Converts a map element into a TimeSpan.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsTimeSpan(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - TimeSpan of the element&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastimespanwithdefault&#34;&gt;GetAsTimeSpanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a TimeSpan or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TimeSpan GetAsTimeSpanWithDefault(string key, TimeSpan? defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: TimeSpan - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: TimeSpan - Timespan of the element or given default value if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableenum&#34;&gt;GetAsNullableEnum&lt;/h4&gt;
&lt;p&gt;Converts a map element into an Enum or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsNullableEnum&amp;lt;T&amp;gt;(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum of the element  or null if the conversion is not possible&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasenum&#34;&gt;GetAsEnum&lt;/h4&gt;
&lt;p&gt;Converts a map element into an Enum.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsEnum&amp;lt;T&amp;gt;(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum of the element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasenumwithdefault&#34;&gt;GetAsEnumWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into an Enum or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsEnumWithDefault&amp;lt;T&amp;gt;(string key, T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - Enum or given default value if the conversion is not possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdouble&#34;&gt;GetAsDouble&lt;/h4&gt;
&lt;p&gt;Converts a map element into a double or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsDouble(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdoublewithdefault&#34;&gt;GetAsDoubleWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a double or returns a given default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../double_converter/#todoublewithdefault&#34;&gt;DoubleConverter.ToDoubleWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsDoubleWithDefault(string key, double defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: double - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloat&#34;&gt;GetAsFloat&lt;/h4&gt;
&lt;p&gt;Converts a map element into a float or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsFloat(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value of the element or 0 if theconversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloatwithdefault&#34;&gt;GetAsFloatWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a flot or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../float_converter/#tofloatwithdefault&#34;&gt;FloatConverter.ToFloatWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsFloatWithDefault(string key, float defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: float - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - flot value of the element or given default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasinteger&#34;&gt;GetAsInteger&lt;/h4&gt;
&lt;p&gt;Converts a map element into an integer or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsInteger(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasintegerwithdefault&#34;&gt;GetAsIntegerWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into an integer or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.ToIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsIntegerWithDefault(string key, int defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: int - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslong&#34;&gt;GetAsLong&lt;/h4&gt;
&lt;p&gt;Converts a map element into a long or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsLong(long key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslongwithdefault&#34;&gt;GetAsLongWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a long or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../long_converter/#tolongwithdefault&#34;&gt;LongConverter.ToLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsLongWithDefault(string key, long defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: long - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmap&#34;&gt;GetAsMap&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueMap or returns an empty AnyValueMap if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsMap(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - long value of the element or an empty AnyValueMap if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmapwithdefault&#34;&gt;GetAsMapWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueMap or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsMapWithDefault(string key, &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or give default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablearray&#34;&gt;GetAsNullableArray&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValueArray or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap.FromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsNullableArray(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableboolean&#34;&gt;GetAsNullableBoolean&lt;/h4&gt;
&lt;p&gt;Converts a map element into a bool or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../boolean_converter/#tonullableboolean&#34;&gt;BooleanConverter.ToNullableBoolean&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool GetAsNullableBoolean(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledatetime&#34;&gt;GetAsNullableDateTime&lt;/h4&gt;
&lt;p&gt;Converts a map element into a DateTime or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../date_time_converter/#tonullabledatetime&#34;&gt;DateTimeConverter.ToNullableDateTime&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DateTime GetAsNullableDateTime(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: DateTime - DateTime value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledouble&#34;&gt;GetAsNullableDouble&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../double_converter/#tonullabledouble&#34;&gt;DoubleConverter.ToNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; double GetAsNullableDouble(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: double - double value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablefloat&#34;&gt;GetAsNullableFloat&lt;/h4&gt;
&lt;p&gt;Converts a map element into a float or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../float_converter/#tonullablefloat&#34;&gt;FloatConverter.ToNullableFloat&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; float GetAsNullableFloat(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableinteger&#34;&gt;GetAsNullableInteger&lt;/h4&gt;
&lt;p&gt;Converts a map element into an integer or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../integer_converter/#tonullableinteger&#34;&gt;IntegerConverter.ToNullableInteger&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetAsNullableInteger(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablelong&#34;&gt;GetAsNullableLong&lt;/h4&gt;
&lt;p&gt;Converts a map element into a long or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../long_converter/#tonullablelong&#34;&gt;LongConverter.ToNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; long GetAsNullableLong(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - long value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablemap&#34;&gt;GetAsNullableMap&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns null if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; GetAsNullableMap(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablestring&#34;&gt;GetAsNullableString&lt;/h4&gt;
&lt;p&gt;Converts a map element into a string or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../string_converter/#tonullablestring&#34;&gt;StringConverter.ToNullableString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsNullableString(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletype&#34;&gt;GetAsNullableType&lt;/h4&gt;
&lt;p&gt;Converts a map element into a value defined by a specified typecode.
If conversion is not possible, it returns null.
&lt;strong&gt;T&lt;/strong&gt; - the class type.&lt;br&gt;
See &lt;a href=&#34;../type_converter/#tonullabletype&#34;&gt;TypeConverter.ToNullableType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsNullableType&amp;lt;T&amp;gt;(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject&#34;&gt;GetAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in map element without any conversions.
When element key is not defined, it returns the entire map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object GetAsObject(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - element value or entire map when the key is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject-1&#34;&gt;GetAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in this map element without any conversions&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; object GetAsObject()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: object - the element value or value of the map when key is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstring&#34;&gt;GetAsString&lt;/h4&gt;
&lt;p&gt;Converts a map element into a string or returns &amp;quot;&amp;quot; if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsString(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or &amp;quot;&amp;quot; if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstringwithdefault&#34;&gt;GetAsStringWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a string or returns &amp;quot;&amp;quot; if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsStringWithDefault(string key, string defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: string - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastype&#34;&gt;GetAsType&lt;/h4&gt;
&lt;p&gt;Converts a map element into a value defined by a specified typecode.
If conversion is not possible, it returns the default value for the specified type.
&lt;strong&gt;T&lt;/strong&gt; - class type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string GetAsType&amp;lt;T&amp;gt;(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastypewithdefault&#34;&gt;GetAsTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map element into a value defined by a specified typecode.
If conversion is not possible, it returns default value for the specified type.&lt;br&gt;
&lt;strong&gt;T&lt;/strong&gt; - class type.&lt;br&gt;
See &lt;a href=&#34;../type_converter/#totypewithdefault&#34;&gt;TypeConverter.ToTypeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; T GetAsTypeWithDefault&amp;lt;T&amp;gt;(string key, T defaultValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasvalue&#34;&gt;GetAsValue&lt;/h4&gt;
&lt;p&gt;Converts a map element into an AnyValue or returns an empty AnyValue if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;, &lt;a href=&#34;../any_value/#constructors&#34;&gt;AnyValue.constructors&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; GetAsValue(string key)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; - AnyValue value of the element or empty AnyValue if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;
&lt;p&gt;Sets a new value into a map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; void Set(string key, string value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to put.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - new value for the map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject&#34;&gt;SetAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value to a map element specified by its index.
When the index is not defined, it resets the entire map value.
See &lt;a href=&#34;../../convert/map_converter/#tomap&#34;&gt;MapConverter.ToMap&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void SetAsObject(string key, object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) key of the element to set&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - new element or map value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject-1&#34;&gt;SetAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value for this array element&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void SetAsObject(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - new element or map value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostring&#34;&gt;ToString&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a semicolon-separated list of key-value pairs as
&lt;em&gt;&amp;ldquo;key1=value1;key2=value2;key=value3&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; string ToString()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;frommaps&#34;&gt;FromMaps&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap by merging two or more maps.
Maps defined later in the list override values from previously defined maps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; FromMaps(params IDictionary&amp;lt;string, string&amp;gt;[] maps)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maps&lt;/strong&gt;: IDictionary&amp;lt;string, string&amp;gt;[] - array of maps to be merged&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromstring&#34;&gt;FromString&lt;/h4&gt;
&lt;p&gt;Parses semicolon-separated key-value pairs and returns them as a &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; FromString(string line)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: string - semicolon-separated key-value list to initialize StringValueMap.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;FromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; FromTuples(object[] tuples)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: object[] - list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuplesarray&#34;&gt;FromTuplesArray&lt;/h4&gt;
&lt;p&gt;Creates a new StringValueMap from a list of key-value pairs called tuples.
The method is similar to &lt;a href=&#34;#fromtuples&#34;&gt;FromTuples&lt;/a&gt; but tuples are passed as an array instead of parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; FromTuplesArray(params object[] tuples)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: object[] - list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;FromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value into StringValueMap.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; FromValue(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;StringValueMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1=1;key2=123.456;key3=2018-01-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetAsDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: new DateTime(2018,0,1)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter-1&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: TagsProcessor</title>
      <link>/net/commons/data/tags_processor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/tags_processor/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TagsProcessor class allows you to extract and process search tags from objects.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The search tags can be kept individually or embedded as hash tags inside text. E.g. &amp;ldquo;This text has #hash_tag that can be used for search.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;compresstag&#34;&gt;CompressTag&lt;/h4&gt;
&lt;p&gt;Compress a tag by removing special symbols like spaces, &amp;lsquo;_&amp;rsquo; and &amp;lsquo;#&amp;rsquo;
and converting the tag to lower case.
When tags are compressed, they can be matched in search queries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string CompressTag(string tag)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt;: string - tag to compress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - compressed tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;compresstaglist&#34;&gt;CompressTagList&lt;/h4&gt;
&lt;p&gt;Compresses a comma-separated list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string[] CompressTagList(string tagList)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tagList&lt;/strong&gt;: string - comma-separated list of tags to compress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - list with compressed tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;compresstags&#34;&gt;CompressTags&lt;/h4&gt;
&lt;p&gt;Compresses a list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string[] CompressTags(string[] tags)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt;: string[] - tags to compress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - list with normalized tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equaltags&#34;&gt;EqualTags&lt;/h4&gt;
&lt;p&gt;Compares two tags using their compressed form.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; bool EqualTags(string tag1, string tag2)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag1&lt;/strong&gt;: string - first tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag2&lt;/strong&gt;: string - second tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if the tags are equal and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;extracthashtags&#34;&gt;ExtractHashTags&lt;/h4&gt;
&lt;p&gt;Extracts hash tags from a text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string[] ExtractHashTags(string text)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;text&lt;/strong&gt;: string - text that contains hash tags&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - list with extracted and compressed tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;extracthashtagsfromvalue&#34;&gt;ExtractHashTagsFromValue&lt;/h4&gt;
&lt;p&gt;Extracts hash tags from selected fields in an object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string[] ExtractHashTagsFromValue(dynamic obj, params string[] searchFields)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: dynamic - object which contains hash tags.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;searchFields&lt;/strong&gt;: string[] - list of fields in the objects where to extract tags&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - list of extracted and compressed tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;normalizetag&#34;&gt;NormalizeTag&lt;/h4&gt;
&lt;p&gt;Normalizes a tag by replacing special symbols like &amp;lsquo;_&amp;rsquo; and &amp;lsquo;#&amp;rsquo; with spaces.
When tags are normalized, they are presented in similar shape and form.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string NormalizeTag(string tag)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt;: string - tag to normalize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - normalized tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;normalizetaglist&#34;&gt;NormalizeTagList&lt;/h4&gt;
&lt;p&gt;Normalizes a comma-separated list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string[] NormalizeTagList(string tagList)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tagList&lt;/strong&gt;: string - comma-separated list of tags to normalize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - list with normalized tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;normalizetags&#34;&gt;normalizeTags&lt;/h4&gt;
&lt;p&gt;Normalizes a list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; string[] NormalizeTags(string[] tags)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt;: string[] - tags to normalize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - list with normalized tags.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: TokenizedDataPage&lt;T&gt;</title>
      <link>/net/commons/data/tokenized_data_page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/tokenized_data_page/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TokenizedDataPageData allows you to create a transfer object that is used to pass the results of paginated queries.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This object contains the items of the retrieved page and the total number of items (optional).&lt;/li&gt;
&lt;li&gt;Additionally, the data page returns a token that has to be passed to the next search as a starting point.&lt;/li&gt;
&lt;li&gt;Most often, this object type is used to send responses to paginated queries.&lt;/li&gt;
&lt;li&gt;Pagination parameters are defined by a &lt;a href=&#34;../tokenized_paging_params&#34;&gt;TokenizedPagingParams&lt;/a&gt; object.
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;token&lt;/em&gt; parameter in the TokenizedPagingParams defines where to start the search.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;takes&lt;/em&gt; parameter sets the number of items to be returned in the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The optional &lt;em&gt;total&lt;/em&gt; parameter tells to return the total number of items in the query.&lt;/li&gt;
&lt;li&gt;However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter, because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of data page and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;public TokenizedDataPage(List&amp;lt;T&amp;gt; data = null, string token=null, int total = default(int))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: List&amp;lt;T&amp;gt; - list of items from the retrieved page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;token&lt;/strong&gt;: string - (optional) token used to define a starting point for the next search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: int - (optional) total number of objects in the result.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;data&#34;&gt;Data&lt;/h4&gt;
&lt;p&gt;Items of the retrieved page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; List&amp;lt;T&amp;gt; Data { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;token&#34;&gt;Token&lt;/h4&gt;
&lt;p&gt;starting point for the next search.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string Token { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;Total&lt;/h4&gt;
&lt;p&gt;Total amount of items in a request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int Total { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetDataByFilterAsync&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;TokenizedPagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;pagingparamspaging_params&#34;&gt;&lt;a href=&#34;../paging_params&#34;&gt;PagingParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: TokenizedPagingParams</title>
      <link>/net/commons/data/tokenized_paging_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/commons/data/tokenized_paging_params/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TokenizedPagingParams allows you to create data transfer objects used to pass tokenized parameters for queries.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The page is defined by two parameters:
&lt;ul&gt;
&lt;li&gt;the &lt;em&gt;token&lt;/em&gt; token that defines a starting point for the search.&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;take&lt;/em&gt; parameter sets how many items to return in a page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additionally, the optional &lt;em&gt;total&lt;/em&gt; parameter tells to return the total number of items in the query.&lt;/li&gt;
&lt;li&gt;However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;li&gt;In general, this class can be used for complex paging scenarios, like paging across multiple databases where the previous state is encoded in a token. The token is usually retrieved from the previous response. The initial request shall go with token == &lt;em&gt;null&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TokenizedPagingParams(string token = null, int take=default(int), bool total = default(bool))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;token&lt;/strong&gt;: string - token that defines a starting point for the search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;take&lt;/strong&gt;: int - the number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: bool - true to return the total number of items.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;token&#34;&gt;Token&lt;/h4&gt;
&lt;p&gt;Start token&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string Token { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;take&#34;&gt;Take&lt;/h4&gt;
&lt;p&gt;Number of items to return.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int Take { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;Total&lt;/h4&gt;
&lt;p&gt;Flag used to define whether the total number of items must be returned or not.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool Total { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;gettake&#34;&gt;GetTake&lt;/h4&gt;
&lt;p&gt;Gets the number of items to return in a page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int GetTake(int maxTake)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maxTake&lt;/strong&gt;: int - maximum number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - number of items to return.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;frommap&#34;&gt;FromMap&lt;/h4&gt;
&lt;p&gt;Creates a new TokenizedPagingParams object and sets its parameters from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; FromMap(&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap object used to initialize this TokenizedPagingParams object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - newly created TokenizedPagingParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new TokenizedPagingParams object and sets its parameters from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; FromMap(&lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; map)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - StringValueMap object used to initialize this TokenizedPagingParams object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - newly created TokenizedPagingParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;FromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new TokenizedPagingParams object from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; FromTuples(params object[] tuples)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: params object[] - list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - newly created TokenizedPagingParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;FromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value into a TokenizedPagingParams object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; FromValue(object value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: object - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - newly created TokenizedPagingParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;FromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SortingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SortField&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
