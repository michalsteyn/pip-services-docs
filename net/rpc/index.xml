<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – RPC module</title>
    <link>/net/rpc/</link>
    <description>Recent content in RPC module on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/net/rpc/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: Auth</title>
      <link>/net/rpc/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/rpc/auth/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;basicauthorizerbasic_authorizer&#34;&gt;&lt;a href=&#34;basic_authorizer&#34;&gt;BasicAuthorizer&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This class contains two methods: one to grant access to everyone and another to grant access to authorized users.&lt;/p&gt;
&lt;h4 id=&#34;ownerauthorizerowner_authorizer&#34;&gt;&lt;a href=&#34;owner_authorizer&#34;&gt;OwnerAuthorizer&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This class contains access granting methods to owners and administrators.&lt;/p&gt;
&lt;h4 id=&#34;roleauthorizerrole_authorizer&#34;&gt;&lt;a href=&#34;role_authorizer&#34;&gt;RoleAuthorizer&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This class contains methods to check on a user’s roles&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Build</title>
      <link>/net/rpc/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/rpc/build/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;defaultrpcfactorydefault_rpc_factory&#34;&gt;&lt;a href=&#34;default_rpc_factory&#34;&gt;DefaultRpcFactory&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Creates RPC components by their descriptors.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Clients</title>
      <link>/net/rpc/clients/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/rpc/clients/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;commandablehttpclientcommandable_http_client&#34;&gt;&lt;a href=&#34;commandable_http_client&#34;&gt;CommandableHttpClient&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Abstract client that calls a commandable HTTP service.&lt;/p&gt;
&lt;p&gt;Commandable services are generated automatically for
&lt;a href=&#34;../../commons/commands/icommandable&#34;&gt;ICommandable&lt;/a&gt;.
Each command is exposed as a POST operation that receives all parameters
in the body object.&lt;/p&gt;
&lt;h4 id=&#34;directclientdirect_client&#34;&gt;&lt;a href=&#34;direct_client&#34;&gt;DirectClient&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Abstract client that calls a controller directly in the same memory space.&lt;/p&gt;
&lt;p&gt;It is used when multiple microservices are deployed in a single container (monolyth)
and communication between them can be done by direct calls rather than through
the network.&lt;/p&gt;
&lt;h4 id=&#34;restclientrest_client&#34;&gt;&lt;a href=&#34;rest_client&#34;&gt;RestClient&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Abstract client that calls remote endpoints using the HTTP/REST protocol.&lt;/p&gt;
&lt;h4 id=&#34;routebuilderroute_builder&#34;&gt;&lt;a href=&#34;route_builder&#34;&gt;RouteBuilder&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Route builder helper class to create routes based on input parameters.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Connect</title>
      <link>/net/rpc/connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/rpc/connect/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;httpconnectionresolverhttp_connection_resolver&#34;&gt;&lt;a href=&#34;http_connection_resolver&#34;&gt;HttpConnectionResolver&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Helper class to retrieve connections for HTTP-based services and clients.&lt;/p&gt;
&lt;p&gt;In addition to regular functions of ConnectionResolver, this class is able to parse http://URIs
and validate connection parameters before returning them.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Data</title>
      <link>/net/rpc/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/rpc/data/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;queryparamquery_param&#34;&gt;&lt;a href=&#34;query_param&#34;&gt;QueryParam&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;h4 id=&#34;responsedataresponse_data&#34;&gt;&lt;a href=&#34;response_data&#34;&gt;ResponseData&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;h4 id=&#34;restroutemetadatarest_route_metadata&#34;&gt;&lt;a href=&#34;rest_route_metadata&#34;&gt;RestRouteMetadata&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Services</title>
      <link>/net/rpc/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/rpc/services/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h3&gt;
&lt;h4 id=&#34;iregisterableiregisterable&#34;&gt;&lt;a href=&#34;iregisterable&#34;&gt;IRegisterable&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Interface to perform on-demand registrations.&lt;/p&gt;
&lt;h4 id=&#34;iswaggerserviceiswagger_service&#34;&gt;&lt;a href=&#34;iswagger_service&#34;&gt;ISwaggerService&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Interface to perform Swagger registrations.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;aboutoperationsabout_operations&#34;&gt;&lt;a href=&#34;about_operations&#34;&gt;AboutOperations&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Obtains information about running services&lt;/p&gt;
&lt;h4 id=&#34;commandablehttpservicecommandable_http_service&#34;&gt;&lt;a href=&#34;commandable_http_service&#34;&gt;CommandableHttpService&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Abstract service that receives remote calls via HTTP protocol
to operations automatically generated for commands defined in &lt;a href=&#34;../../../commons/command/icommandable&#34;&gt;ICommandable&lt;/a&gt;.
Each command is exposed as a POST operation that receives all parameters in body object.&lt;/p&gt;
&lt;p&gt;Commandable services require only three lines of code to implement a robust external
HTTP-based remote interface.&lt;/p&gt;
&lt;h4 id=&#34;commandableswaggerdocumentcommandable_swagger_document&#34;&gt;&lt;a href=&#34;commandable_swagger_document&#34;&gt;CommandableSwaggerDocument&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Generates Swagger code that describes created REST API methods and their parameters.&lt;/p&gt;
&lt;h4 id=&#34;heartbeatoperationsheartbeat_operations&#34;&gt;&lt;a href=&#34;heartbeat_operations&#34;&gt;HeartbeatOperations&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Handles the operations of a heartbeat service.&lt;/p&gt;
&lt;h4 id=&#34;heartbeatrestserviceheartbeat_rest_service&#34;&gt;&lt;a href=&#34;heartbeat_rest_service&#34;&gt;HeartbeatRestService&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Service returns heartbeat via HTTP/REST protocol.&lt;/p&gt;
&lt;p&gt;The service responds on /heartbeat route (can be changed)
with a string with the current time in UTC.&lt;/p&gt;
&lt;p&gt;This service route can be used to perform health checks by loadbalancers and
container orchestrators.&lt;/p&gt;
&lt;h4 id=&#34;httpendpointhttp_endpoint&#34;&gt;&lt;a href=&#34;http_endpoint&#34;&gt;HttpEndpoint&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Used for creating HTTP endpoints. An endpoint is a URL, at which a given service can be accessed by a client.&lt;/p&gt;
&lt;h4 id=&#34;httprequestdetectorhttp_request_detector&#34;&gt;&lt;a href=&#34;http_request_detector&#34;&gt;HttpRequestDetector&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Helper class that retrieves parameters from HTTP requests.&lt;/p&gt;
&lt;h4 id=&#34;httpresponsesenderhttp_response_sender&#34;&gt;&lt;a href=&#34;http_response_sender&#34;&gt;HttpResponseSender&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Helper class that handles HTTP-based responses.&lt;/p&gt;
&lt;h4 id=&#34;instrumenttiminginstrument_timing&#34;&gt;&lt;a href=&#34;instrument_timing&#34;&gt;InstrumentTiming&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Creates logs, counters and timings for methods that call instrument.&lt;/p&gt;
&lt;h4 id=&#34;restoperationsrest_operations&#34;&gt;&lt;a href=&#34;rest_operations&#34;&gt;RestOperations&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Handles REST services operations.&lt;/p&gt;
&lt;h4 id=&#34;restservicerest_service&#34;&gt;&lt;a href=&#34;rest_service&#34;&gt;RestService&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Abstract service that receives remove calls via HTTP/REST protocol.&lt;/p&gt;
&lt;h4 id=&#34;statusoperationsstatus_operations&#34;&gt;&lt;a href=&#34;status_operations&#34;&gt;StatusOperations&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Handles status requests for REST operations.&lt;/p&gt;
&lt;h4 id=&#34;statusrestservicestatus_rest_service&#34;&gt;&lt;a href=&#34;status_rest_service&#34;&gt;StatusRestService&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Service that returns microservice status information via HTTP/REST protocol.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Test</title>
      <link>/net/rpc/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/rpc/test/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;testcommandablehttpclienttest_commandable_http_client&#34;&gt;&lt;a href=&#34;test_commandable_http_client&#34;&gt;TestCommandableHttpClient&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Commandable HTTP client used for automated testing.&lt;/p&gt;
&lt;h4 id=&#34;testrestclienttest_rest_client&#34;&gt;&lt;a href=&#34;test_rest_client&#34;&gt;TestRestClient&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;REST client used for automated testing.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
