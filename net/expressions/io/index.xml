<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ IO</title>
    <link>/net/expressions/io/</link>
    <description>Recent content in IO on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/net/expressions/io/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: BufferStream</title>
      <link>/net/expressions/io/buffer_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/io/buffer_stream/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: Stream&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;This class is used for buffered read/write to other stream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This class is used at least in FieldComm for reading/writing messages to the NetworkStream.&lt;/li&gt;
&lt;li&gt;This class is a port for .Net Compact Framework from System.IO.BufferedStream (Full .Net Framework).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; BufferStream(Stream stream)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stream&lt;/strong&gt;: Stream - stream&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; BufferStream(Stream stream, int bufferSize)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stream&lt;/strong&gt;: Stream - stream&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bufferSize&lt;/strong&gt;: int - buffer size&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;canread&#34;&gt;CanRead&lt;/h4&gt;
&lt;p&gt;Can read option.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; bool CanRead { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;canseek&#34;&gt;CanSeek&lt;/h4&gt;
&lt;p&gt;Can seek option.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; bool CanSeek { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;canwrite&#34;&gt;CanWrite&lt;/h4&gt;
&lt;p&gt;Can write option.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; bool CanWrite { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;length&#34;&gt;Length&lt;/h4&gt;
&lt;p&gt;Length&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; long Length { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;position&#34;&gt;Position&lt;/h4&gt;
&lt;p&gt;Position&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; long Position { get; set; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;flush&#34;&gt;Flush&lt;/h4&gt;
&lt;p&gt;Flushes the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; void Flush()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;
&lt;p&gt;Reads from a stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; int Read(byte[] array, int offset, int count)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;array&lt;/strong&gt;: byte[] - array&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset&lt;/strong&gt;: int - offset value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: int - count value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - position&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;readbyte&#34;&gt;ReadByte&lt;/h4&gt;
&lt;p&gt;Read from a stream&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; int ReadByte()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - position&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;seek&#34;&gt;Seek&lt;/h4&gt;
&lt;p&gt;Seeks within a stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; long Seek(long offset, SeekOrigin origin)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;offset&lt;/strong&gt;: long - offset value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;origin&lt;/strong&gt;: SeekOrigin - origin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: long - position&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setlength&#34;&gt;SetLength&lt;/h4&gt;
&lt;p&gt;Sets the length.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; void SetLength(long value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: long - length value&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;write&#34;&gt;Write&lt;/h4&gt;
&lt;p&gt;Writes to a stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; void Write(byte[] array, int offset, int count)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;array&lt;/strong&gt;: byte[] - array&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset&lt;/strong&gt;: int - offset value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: int - count&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;writebyte&#34;&gt;WriteByte&lt;/h4&gt;
&lt;p&gt;Write bytes to a stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public override&lt;/code&gt; void WriteByte(byte value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: byte - value&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: CsvReader</title>
      <link>/net/expressions/io/csv_reader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/io/csv_reader/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CsvReader class allows you to create a reader of CSV streams.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructs this object with text reader.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; CsvReader(TextReader reader, char[] fieldSeparators, char[] quoteSymbols, string endOfLine)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reader&lt;/strong&gt;: TextReader - text reader to read the CSV data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fieldSeparators&lt;/strong&gt;: char[] - separators for fields in CSV stream.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quoteSymbols&lt;/strong&gt;: char[] - characters to quote strings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;endOfLine&lt;/strong&gt;: end of line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Constructs this object with string buffer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; CsvReader(TextReader reader, char[] fieldSeparators, char[] quoteSymbols)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reader&lt;/strong&gt;: TextReader - text reader to read the CSV data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fieldSeparators&lt;/strong&gt;: char[] - separators for fields in CSV stream.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quoteSymbols&lt;/strong&gt;: char[] - characters to quote strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Constructs this object with string buffer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; CsvReader(string buffer, char[] fieldSeparators, char[] quoteSymbols)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;buffer&lt;/strong&gt;: string - text reader to read the CSV data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fieldSeparators&lt;/strong&gt;: char[] - separators for fields in a CSV stream.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quoteSymbols&lt;/strong&gt;: char[] - characters to quote strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Constructs this object with string buffer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; CsvReader(string buffer, char[] fieldSeparators, char[] quoteSymbols, string endOfLine)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reader&lt;/strong&gt;: string - text reader to read the CSV data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fieldSeparators&lt;/strong&gt;: char[] - separators for fields in a CSV stream.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quoteSymbols&lt;/strong&gt;: char[] - characters to quote strings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;endOfLine&lt;/strong&gt;: string - end of line&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;endofline&#34;&gt;EndOfLine&lt;/h4&gt;
&lt;p&gt;Separator for rows in CSV stream.
Default is &amp;ldquo;\r\n&amp;rdquo;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string EndOfLine { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;eof&#34;&gt;Eof&lt;/h4&gt;
&lt;p&gt;Flag that shows end of CSV stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool Eof { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;eol&#34;&gt;Eol&lt;/h4&gt;
&lt;p&gt;Flag that shows enf of line in CSV stream;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; bool Eol { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;fieldseparators&#34;&gt;FieldSeparators&lt;/h4&gt;
&lt;p&gt;Separators for fields in CSV stream.
Default is comma (,).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char[] FieldSeparators { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;length&#34;&gt;Length&lt;/h4&gt;
&lt;p&gt;Characters to quote strings in CSV streams.
Default is double quote (&amp;quot;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char[] QuoteSymbols { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;readfield&#34;&gt;ReadField&lt;/h4&gt;
&lt;p&gt;Reads the next field from the CSV stream and sets EOL and OEF flags.
It returns &lt;strong&gt;String.Empty&lt;/strong&gt; for null string or in a case of EOF.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string ReadField()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - returns &lt;strong&gt;String.Empty&lt;/strong&gt; for null string or in a case of EOF.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;skipline&#34;&gt;SkipLine&lt;/h4&gt;
&lt;p&gt;It skips one line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void SkipLine()&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Net: CsvWriter</title>
      <link>/net/expressions/io/csv_writer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/io/csv_writer/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CsvWriter class allows you to implement a writer for CSV streams.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructs this object with a text writer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; CsvWriter(TextWriter writer, char fieldSeparator, char quoteSymbol)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;writer&lt;/strong&gt;: TextWriter - text writer to writer the CSV data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fieldSeparators&lt;/strong&gt;: writer - separators for fields in CSV stream.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quoteSymbols&lt;/strong&gt;: writer - characters to quote strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;fieldseparator&#34;&gt;FieldSeparator&lt;/h4&gt;
&lt;p&gt;Separator for fields in CSV stream.
Default is comma (,).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char FieldSeparator { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;quotechar&#34;&gt;QuoteChar&lt;/h4&gt;
&lt;p&gt;Character to quote strings in CSV streams.
Default is double quote (&amp;quot;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char QuoteChar { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;encodestring&#34;&gt;EncodeString&lt;/h4&gt;
&lt;p&gt;Encodes a string value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string EncodeString(string value, char quoteSymbol)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - string value to be encoded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quoteSymbol&lt;/strong&gt;: char - string quote character.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - encoded string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;writefield&#34;&gt;WriteField&lt;/h4&gt;
&lt;p&gt;Writes a field value to a CSV stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void WriteField(string fieldValue)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fieldValue&lt;/strong&gt;: string - field value to be written.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;writeline&#34;&gt;WriteLine&lt;/h4&gt;
&lt;p&gt;Writes a line terminator to a CSV stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void WriteLine()&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Net: IPushbackReader</title>
      <link>/net/expressions/io/ipushback_reader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/io/ipushback_reader/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IPushbackReader class allows you to create a reader that has the ability to push back characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This reader is used by tokenizers to process input streams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;char Peek()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: char - character from the top of the stream or &lt;strong&gt;-1&lt;/strong&gt; if stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pushback&#34;&gt;Pushback&lt;/h4&gt;
&lt;p&gt;Puts the specified character on the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void Pushback(char value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: char - character to be pushed back.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pushbackstring&#34;&gt;PushbackString&lt;/h4&gt;
&lt;p&gt;Pushes the specified string to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void PushbackString(string value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - string to be pushed back.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;char Read()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: char - read character or &lt;strong&gt;-1&lt;/strong&gt; if stream processed to the end.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: IScanner</title>
      <link>/net/expressions/io/iscanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/io/iscanner/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IScanner interface defines a scanner that can read and unread characters and count lines.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;Column&lt;/h4&gt;
&lt;p&gt;Gets the column in the current line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int Column()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - column in the current line in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;Line&lt;/h4&gt;
&lt;p&gt;Gets the current line number&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int Line()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - current line number in the stream&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;char Peek()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: char - character from the top of the stream or &lt;em&gt;-1&lt;/em&gt; if the stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekcolumn&#34;&gt;PeekColumn&lt;/h4&gt;
&lt;p&gt;Gets the next character column number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int PeekColumn()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character column number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekline&#34;&gt;PeekLine&lt;/h4&gt;
&lt;p&gt;Gets the next character line number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int PeekLine()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;char Read()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: char - read character or &lt;em&gt;-1&lt;/em&gt; if the stream is processed to the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reset&#34;&gt;Reset&lt;/h4&gt;
&lt;p&gt;Resets a scanner to the initial position.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void Reset()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unread&#34;&gt;Unread&lt;/h4&gt;
&lt;p&gt;Puts a character back into the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void Unread()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unreadmany&#34;&gt;UnreadMany&lt;/h4&gt;
&lt;p&gt;Pushes the specified number of characters to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void UnreadMany(int count)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: int - number of characcted to be pushed back.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: StringPushbackReader</title>
      <link>/net/expressions/io/string_pushback_reader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/io/string_pushback_reader/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../ipushback_reader&#34;&gt;IPushbackReader&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The StringPushbackReader class allows you to wrap a string to provide an unlimited pushback that allows tokenizers to look ahead through the stream to perform lexical analysis.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates an instance of this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; StringPushbackReader(string content)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;: string - text content to be read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;eof&#34;&gt;Eof&lt;/h4&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;strong&gt;Eof&lt;/strong&gt;: char = &amp;lsquo;\xffff&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char Peek()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: char - character from the top of the stream or &lt;strong&gt;-1&lt;/strong&gt; if the stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pushback&#34;&gt;Pushback&lt;/h4&gt;
&lt;p&gt;Puts the specified character to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Pushback(char value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: char - character to be pushed back.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pushbackstring&#34;&gt;PushbackString&lt;/h4&gt;
&lt;p&gt;Pushes the specified string to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void PushbackString(string value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - string to be pushed back.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char Read()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: char - read character or &lt;strong&gt;-1&lt;/strong&gt; if the stream is processed to the end.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: StringScanner</title>
      <link>/net/expressions/io/string_scanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/io/string_scanner/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../iscanner&#34;&gt;IScanner&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The StringScanner class is used to scan characters in a string that allows tokenizers to look ahead through a stream to perform lexical analysis.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates an instance of this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; StringScanner(string content)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;: string - text content to be read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;eof&#34;&gt;Eof&lt;/h4&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;strong&gt;Eof&lt;/strong&gt;: char = &amp;lsquo;\xffff&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;Column&lt;/h4&gt;
&lt;p&gt;Gets the column in the current line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int Column()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - column in the current line in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;Line&lt;/h4&gt;
&lt;p&gt;Gets the current line number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int Line()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - current line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char Peek()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: char - character from the top of the stream or &lt;em&gt;-1&lt;/em&gt; if the stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekcolumn&#34;&gt;PeekColumn&lt;/h4&gt;
&lt;p&gt;Gets the next character column number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int PeekColumn()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character column number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekline&#34;&gt;PeekLine&lt;/h4&gt;
&lt;p&gt;Gets the next character line number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; int PeekLine()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char Read()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: char - read character or &lt;em&gt;-1&lt;/em&gt; if the stream is processed to the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reset&#34;&gt;Reset&lt;/h4&gt;
&lt;p&gt;Resets the scanner to the initial position.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Reset()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unread&#34;&gt;Unread&lt;/h4&gt;
&lt;p&gt;Puts one character back into the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Unread()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unreadmany&#34;&gt;UnreadMany&lt;/h4&gt;
&lt;p&gt;Pushes the specified number of characters to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void UnreadMany(int count)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: int - number of characcted to be pushed back.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: TextPushbackReader</title>
      <link>/net/expressions/io/text_pushback_reader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/io/text_pushback_reader/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../ipushback_reader&#34;&gt;IPushbackReader&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TextPushbackReader class allows you to wrap aTextReader to provide an unlimited pushback that allows tokenizers to look ahead through a stream to perform lexical analysis.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates an instance of this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; TextPushbackReader(TextReader reader)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;: TextReader - text reader to be wrapped to add pushback functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;eof&#34;&gt;Eof&lt;/h4&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; &lt;strong&gt;Eof&lt;/strong&gt;: char = &amp;lsquo;\xffff&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char Peek()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: char - character from the top of the stream or &lt;strong&gt;-1&lt;/strong&gt; if the stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pushback&#34;&gt;Pushback&lt;/h4&gt;
&lt;p&gt;Puts the specified character on the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void Pushback(char value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: char - character to be pushed back.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pushbackstring&#34;&gt;PushbackString&lt;/h4&gt;
&lt;p&gt;Pushes the specified string to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; void PushbackString(string value)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - string to be pushed back.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; char Read()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: char - read character or &lt;strong&gt;-1&lt;/strong&gt; if the stream was processed to the end.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
