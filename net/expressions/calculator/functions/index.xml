<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Functions</title>
    <link>/net/expressions/calculator/functions/</link>
    <description>Recent content in Functions on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/net/expressions/calculator/functions/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: DefaultFunctionCollection</title>
      <link>/net/expressions/calculator/functions/default_function_collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/calculator/functions/default_function_collection/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../function_collection&#34;&gt;FunctionCollection&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DefaultFunctionCollection class allows you to implement a list filled with standard functions.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructs a list and fills it with the standard functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DefaultFunctionCollection()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;checkparamcount&#34;&gt;CheckParamCount&lt;/h4&gt;
&lt;p&gt;Checks if params contains the correct number of function parameters (must be stored on the top of the params).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected static&lt;/code&gt; void CheckParamCount(IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; parameters, int expectedParamCount)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - list of function parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expectedParamCount&lt;/strong&gt;: int - expected number of function parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getparameter&#34;&gt;GetParameter&lt;/h4&gt;
&lt;p&gt;Gets a function&amp;rsquo;s parameter by it&amp;rsquo;s index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected static&lt;/code&gt; &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt; GetParameter(IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; parameters, int paramIndex)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - list of function parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paramIndex&lt;/strong&gt;: int - index for the function parameter (0 for the first parameter).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt; - function&amp;rsquo;s parameter value.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: DelegatedFunction</title>
      <link>/net/expressions/calculator/functions/delegated_function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/calculator/functions/delegated_function/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DelegatedFunction class allows you to define a delegate to implement a function.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructs this function class with the specified parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; DelegatedFunction(string name, &lt;a href=&#34;#functioncalculator&#34;&gt;FunctionCalculator&lt;/a&gt; calculator)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - name of this function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;calculator&lt;/strong&gt;: &lt;a href=&#34;#functioncalculator&#34;&gt;FunctionCalculator&lt;/a&gt; - function calculator delegate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;delegate&#34;&gt;Delegate&lt;/h3&gt;
&lt;h4 id=&#34;functioncalculator&#34;&gt;FunctionCalculator&lt;/h4&gt;
&lt;p&gt;Defines a delegate to implement a function&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public delegate&lt;/code&gt; Task&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; FunctionCalculator(IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; parameters, &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; variantOperations)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variantOperations&lt;/strong&gt;: &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - list with function parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;parameters&lt;/strong&gt;: IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - manager for variant operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Task&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - calculated function value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;name&#34;&gt;Name&lt;/h4&gt;
&lt;p&gt;Function&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; string Name { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;retuns&lt;/strong&gt;: string - function&amp;rsquo;s name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;calculate&#34;&gt;Calculate&lt;/h4&gt;
&lt;p&gt;Function&amp;rsquo;s calculation method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; Task&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; CalculateAsync(IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; parameters, &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; variantOperations)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - array with function parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variantOperations&lt;/strong&gt;: &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - variants operations manager.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Task&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - returned function&amp;rsquo;s result.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: FunctionCollection</title>
      <link>/net/expressions/calculator/functions/function_collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/calculator/functions/function_collection/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The FunctionCollection class allows you to implement a list of functions&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;length&#34;&gt;Length&lt;/h4&gt;
&lt;p&gt;Gets the number of functions stored in the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; int Length { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;add&#34;&gt;Add&lt;/h4&gt;
&lt;p&gt;Adds a new function to the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; void Add(&lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; function)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;func&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - array with function parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Clears the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; void Clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;findbyname&#34;&gt;FindByName&lt;/h4&gt;
&lt;p&gt;Finds a function in the list by it&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; FindByName(string name)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - function name to be found.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - function or &lt;em&gt;null&lt;/em&gt; if no function was not found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;findindexbyname&#34;&gt;FindIndexByName&lt;/h4&gt;
&lt;p&gt;Finds a function&amp;rsquo;s index in the list by it&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; int FindIndexByName(string name)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - function name to be found.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - function&amp;rsquo;s index in the list or &lt;em&gt;-1&lt;/em&gt; if nofunction was not found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;Get&lt;/h4&gt;
&lt;p&gt;Gets a function by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; Get(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - function&amp;rsquo;s index.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - retrieved function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getall&#34;&gt;GetAll&lt;/h4&gt;
&lt;p&gt;Gets all functions stored in the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; IList&amp;lt;&lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&amp;gt; GetAll()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IList&amp;lt;&lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&amp;gt; - list with functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;Remove&lt;/h4&gt;
&lt;p&gt;Removes a function by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; void Remove(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the function to be removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;removebyname&#34;&gt;RemoveByName&lt;/h4&gt;
&lt;p&gt;Removes a function by its name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; void RemoveByName(string name)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - name of the function to be removed.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: IFunction</title>
      <link>/net/expressions/calculator/functions/ifunction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/calculator/functions/ifunction/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IFunction is an interface for expression functions.&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;name&#34;&gt;Name&lt;/h4&gt;
&lt;p&gt;Function&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;string Name { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;calculateasync&#34;&gt;CalculateAsync&lt;/h4&gt;
&lt;p&gt;Function calculation method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Task&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; CalculateAsync(IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; parameters, IVariantOperations variantOperations)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: IList&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - array with function parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variantOperations&lt;/strong&gt;: &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - variants operations manager.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Task&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - returned function&amp;rsquo;s result.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: IFunctionCollection</title>
      <link>/net/expressions/calculator/functions/ifunction_collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/expressions/calculator/functions/ifunction_collection/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IFunctionCollection class allows you to create a list of functions.&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;length&#34;&gt;Length&lt;/h4&gt;
&lt;p&gt;Gets the number of functions stored in the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int Length { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;add&#34;&gt;Add&lt;/h4&gt;
&lt;p&gt;Adds a new function to the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void Add(&lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; function)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;func&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - array with function parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Clears the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void Clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;findbyname&#34;&gt;FindByName&lt;/h4&gt;
&lt;p&gt;Finds a function in the list by it&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; FindByName(string name)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - function name to be found.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - function or &lt;em&gt;null&lt;/em&gt; if no function was found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;findindexbyname&#34;&gt;FindIndexByName&lt;/h4&gt;
&lt;p&gt;Finds a function&amp;rsquo;s index in the list by it&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int FindIndexByName(string name)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - function name to be found.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - function&amp;rsquo;s index in the list or &lt;em&gt;-1&lt;/em&gt; if nofunction was not found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;Get&lt;/h4&gt;
&lt;p&gt;Gets a function by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; Get(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - function&amp;rsquo;s index.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - retrieved function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getall&#34;&gt;GetAll&lt;/h4&gt;
&lt;p&gt;Gets all functions stored in the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IList&amp;lt;&lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&amp;gt; GetAll()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: IList&amp;lt;&lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&amp;gt; - list with functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;Remove&lt;/h4&gt;
&lt;p&gt;Removes a function by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void Remove(int index)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - index of the function to be removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;removebyname&#34;&gt;RemoveByName&lt;/h4&gt;
&lt;p&gt;Removes a function by its name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void RemoveByName(string name)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - name of the function to be removed.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
