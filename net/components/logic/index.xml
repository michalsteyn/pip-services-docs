<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Logic</title>
    <link>/net/components/logic/</link>
    <description>Recent content in Logic on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/net/components/logic/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: AbstractController</title>
      <link>/net/components/logic/abstract_controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/net/components/logic/abstract_controller/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Inherits&lt;/strong&gt;: &lt;a href=&#34;../../../commons/config/iconfigurable&#34;&gt;IConfigurable&lt;/a&gt;, &lt;a href=&#34;../../../commons/config/ireconfigurable&#34;&gt;IReconfigurable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AbstractController class allows you to create an abstract logger that caches captured log messages in memory and periodically dumps them. Child classes implement saving cached messages to their specified destinations.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;_dependencyresolver&#34;&gt;_dependencyResolver&lt;/h4&gt;
&lt;p&gt;Dependency resolver&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; _dependencyResolver: &lt;a href=&#34;../../../commons/refer/dependency_resolver&#34;&gt;DependencyResolver&lt;/a&gt; = new DependencyResolver()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_logger&#34;&gt;_logger&lt;/h4&gt;
&lt;p&gt;Logger&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; _logger: &lt;a href=&#34;../../log/composite_logger&#34;&gt;CompositeLogger&lt;/a&gt; = new CompositeLogger()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_counters&#34;&gt;_counters&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; _counters: &lt;a href=&#34;../../count/composite_counters&#34;&gt;CompositeCounters&lt;/a&gt; = new CompositeCounters()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_counters-1&#34;&gt;_counters&lt;/h4&gt;
&lt;p&gt;Counters&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; _cache: &lt;a href=&#34;../../cache/icache&#34;&gt;ICache&lt;/a&gt; = new &lt;a href=&#34;../../cache/null_cache&#34;&gt;NullCache&lt;/a&gt;()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;component&#34;&gt;Component&lt;/h4&gt;
&lt;p&gt;Component&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public abstract&lt;/code&gt; string Component { get; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;configure&#34;&gt;Configure&lt;/h4&gt;
&lt;p&gt;Configures a component by passing its configuration parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; void Configure(&lt;a href=&#34;../../../commons/config/config_params&#34;&gt;ConfigParams&lt;/a&gt; config)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt;: &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;ConfigParams&lt;/a&gt; - configuration parameters to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setreferences&#34;&gt;SetReferences&lt;/h4&gt;
&lt;p&gt;Sets references to dependent components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; void SetReferences(&lt;a href=&#34;../../../commons/refer/ireferences&#34;&gt;IReferences&lt;/a&gt; references)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;references&lt;/strong&gt;: &lt;a href=&#34;../../../commons/refer/ireferences&#34;&gt;IReferences&lt;/a&gt; - references to locate the component&amp;rsquo;s dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;instrument&#34;&gt;Instrument&lt;/h4&gt;
&lt;p&gt;Starts timing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; &lt;a href=&#34;../../count/counter_timing&#34;&gt;CounterTiming&lt;/a&gt; Instrument(string correlationId, string methodName, string message=&amp;quot;&amp;quot;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;methodName&lt;/strong&gt;: string - name of the method&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - message&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;handleerror&#34;&gt;HandleError&lt;/h4&gt;
&lt;p&gt;Logs an error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; void HandleError(string correlationId, string methodName, Exception ex)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;methodName&lt;/strong&gt;: string - name of the method&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ex&lt;/strong&gt;: Exception - exception&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;safeinvokeasync&#34;&gt;SafeInvokeAsync&lt;/h4&gt;
&lt;p&gt;Invokes a function.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; Task&amp;lt;T&amp;gt; SafeInvokeAsync&amp;lt;T&amp;gt;(string correlationId, string methodName, Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; invokeFunc, bool throwException=false)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;methodName&lt;/strong&gt;: string - name of the method&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;invokeFunc&lt;/strong&gt;: Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; - invoked function&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;throwException&lt;/strong&gt;: bool - true if can throw an exception and false otherwise&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;safeinvokeasync-1&#34;&gt;SafeInvokeAsync&lt;/h4&gt;
&lt;p&gt;Invokes a function and handles the error if it fails.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; Task&amp;lt;T&amp;gt; SafeInvokeAsync&amp;lt;T&amp;gt;(string correlationId, string methodName, Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; invokeFunc, Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; errorHandlerFunc, bool throwException=false)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;methodName&lt;/strong&gt;: string - name of the method&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;invokeFunc&lt;/strong&gt;: Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; - invoked function&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;errorHandlerFunc&lt;/strong&gt;: Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; - error handling function&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;throwException&lt;/strong&gt;: bool - true if can throw an exception and false otherwise&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;retrievefromcacheasync&#34;&gt;RetrieveFromCacheAsync&lt;/h4&gt;
&lt;p&gt;Retrieves from cache based on the cache key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; Task&amp;lt;T&amp;gt; RetrieveFromCacheAsync&amp;lt;T&amp;gt;(string correlationId, string cacheKey)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cacheKey&lt;/strong&gt;: string - cache key&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;storeincacheasync&#34;&gt;StoreInCacheAsync&lt;/h4&gt;
&lt;p&gt;Stores in cache using the cache key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; Task&amp;lt;T&amp;gt; StoreInCacheAsync&amp;lt;T&amp;gt;(string correlationId, string cacheKey, T result)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cacheKey&lt;/strong&gt;: string - cache key&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;result&lt;/strong&gt;: T -  Cached value or null if the value is not stored.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;removefromcacheasync&#34;&gt;RemoveFromCacheAsync&lt;/h4&gt;
&lt;p&gt;Removes from cache.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; Task RemoveFromCacheAsync(string correlationId, string id)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: string - id&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getprojectioncachekey&#34;&gt;GetProjectionCacheKey&lt;/h4&gt;
&lt;p&gt;Gets the projection&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; string GetProjectionCacheKey(string id)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: string - id&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getcachekey&#34;&gt;GetCacheKey&lt;/h4&gt;
&lt;p&gt;Returns the component&amp;rsquo;s id.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; string GetCacheKey(string id)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: string - id&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;auditcreateasync&#34;&gt;AuditCreateAsync&lt;/h4&gt;
&lt;p&gt;Checks if an object is created.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; Task AuditCreateAsync&amp;lt;T&amp;gt;(string correlationId, string collectionName, object createdObject, Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; auditFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;collectionName&lt;/strong&gt;: string - name of the collection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;createdObject&lt;/strong&gt;: object - created object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auditFunc&lt;/strong&gt;: Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; - audit function&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;auditupdateasync&#34;&gt;AuditUpdateAsync&lt;/h4&gt;
&lt;p&gt;Audits the update of an object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; Task AuditUpdateAsync&amp;lt;T&amp;gt;(string correlationId, string collectionName, object oldObject, object updatedObject, Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; auditFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;collectionName&lt;/strong&gt;: name of the collection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;oldObject&lt;/strong&gt;: object - old object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;updatedObject&lt;/strong&gt;: object - updated object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auditFunc&lt;/strong&gt;: Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; - audit function&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;auditdeleteasync&#34;&gt;AuditDeleteAsync&lt;/h4&gt;
&lt;p&gt;Audits the delete of an object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public virtual&lt;/code&gt; Task AuditDeleteAsync&amp;lt;T&amp;gt;(string correlationId, string collectionName, object deletedObject, Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; auditFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;collectionName&lt;/strong&gt;: string - name of the collection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deletedObject&lt;/strong&gt;: object - deleted object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auditFunc&lt;/strong&gt;: Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; - audit function&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;loggerlogger&#34;&gt;&lt;a href=&#34;../logger&#34;&gt;Logger&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;iloggerlogilogger&#34;&gt;&lt;a href=&#34;../../log/ilogger&#34;&gt;ILogger&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;logmessageloglog_message&#34;&gt;&lt;a href=&#34;../../log/log_message&#34;&gt;LogMessage&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
