<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Data</title>
    <link>/node/commons/data/</link>
    <description>Recent content in Data on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/node/commons/data/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Node: AnyValue</title>
      <link>/node/commons/data/any_value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/any_value/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AnyValue class provides a cross-language implementation of a dynamic object that can hold a value of any type. In addition, it provides methods to convert the stored value to different types, such as string or integer.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the object and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(value: any = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - (optional) value to initialize this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;value&#34;&gt;value&lt;/h4&gt;
&lt;p&gt;Value stored by this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;value&lt;/strong&gt;: any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clone(): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equals&#34;&gt;equals&lt;/h4&gt;
&lt;p&gt;Compares this object&amp;rsquo;s value to a specified specified value.
When a direct comparison gives a negative result it tries
to compare the values as strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; equals(obj: any): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: any - value to be compared with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - true when objects are equal and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equalsastype&#34;&gt;equalsAsType&lt;/h4&gt;
&lt;p&gt;Compares this object&amp;rsquo;s value to a specified value.
When direct comparison gives a negative result it converts the
values to a type specified by the type code and compares them again. &lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totype&#34;&gt;TypeConverter.toType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; equalsAsType/&lt;T/&gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, obj: any): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - value to be compared with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: Any - args to be compared with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - true when the objects are equal and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarray&#34;&gt;getAsArray&lt;/h4&gt;
&lt;p&gt;Converts the object&amp;rsquo;s value into an AnyArray or returns an empty AnyArray if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array/#fromvalue&#34;&gt;AnyValueArray.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsArray(): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyArray value or empty AnyArray if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasboolean&#34;&gt;getAsBoolean&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a boolean or returns false if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsBoolean(): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - string value or false if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasbooleanwithdefault&#34;&gt;getAsBooleanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a boolean or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.toBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsBooleanWithDefault(defaultValue: boolean): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: boolean - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value or given default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetime&#34;&gt;getAsDateTime&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into Date or returns the current date if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDateTime(): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value or current date if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetimewithdefault&#34;&gt;getAsDateTimeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into Date or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#todatetimewithdefault&#34;&gt;DateTimeConverter.toDateTimeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDateTimeWithDefault(defaultValue: Date): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: Date - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value or given default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdouble&#34;&gt;getAsDouble&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a double or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDouble(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdoublewithdefault&#34;&gt;getAsDoubleWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a double or returns a default value if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#todoublewithdefault&#34;&gt;DoubleConverter.toDoubleWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDoubleWithDefault(defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value or default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloat&#34;&gt;getAsFloat&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a float or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsFloat(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloatwithdefault&#34;&gt;getAsFloatWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a float or returns a given default value if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tofloatwithdefault&#34;&gt;FloatConverter.toFloatWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsFloatWithDefault(defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value or default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasinteger&#34;&gt;getAsInteger&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into an integer or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsInteger(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasintegerwithdefault&#34;&gt;getAsIntegerWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into an integer or returns a given default value if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.toIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsIntegerWithDefault(defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number -  integer value or default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslong&#34;&gt;getAsLong&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a long or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsLong(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number -  long value or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslongwithdefault&#34;&gt;getAsLongWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a long or returns a given default value if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tolongwithdefault&#34;&gt;LongConverter.toLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsLongWithDefault(defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number -  long value or given default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmap&#34;&gt;getAsMap&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into AnyMap or returns an empty AnyMap object if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsMap(): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; -  AnyMap value or empty AnyMap if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableboolean&#34;&gt;getAsNullableBoolean&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a boolean or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tonullableboolean&#34;&gt;BooleanConverter.toNullableBoolean&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableBoolean(): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledatetime&#34;&gt;getAsNullableDateTime&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into Date or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#tonullabledatetime&#34;&gt;DateTimeConverter.toNullableDateTime&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableDateTime(): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledouble&#34;&gt;getAsNullableDouble&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a double or returns null if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#tonullabledouble&#34;&gt;DoubleConverter.toNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableDouble(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablefloat&#34;&gt;getAsNullableFloat&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a float or returns null if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tonullablefloat&#34;&gt;FloatConverter.toNullableFloat&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableFloat(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableinteger&#34;&gt;getAsNullableInteger&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into an integer or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tonullableinteger&#34;&gt;IntegerConverter.toNullableInteger&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableInteger(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablelong&#34;&gt;getAsNullableLong&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a long or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tonullablelong&#34;&gt;LongConverter.toNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableLong(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablestring&#34;&gt;getAsNullableString&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a string or returns null if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tonullablestring&#34;&gt;StringConverter.toNullableString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableString(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletype&#34;&gt;getAsNullableType&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a value defined by a specified typecode.
If conversion is not possible it returns null.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#tonullabletype&#34;&gt;TypeConverter.toNullableType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableType&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - value defined by the typecode or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject&#34;&gt;getAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in this object without any conversion.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsObject(): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - object value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstring&#34;&gt;getAsString&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a string or returns &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsString(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value or &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstringwithdefault&#34;&gt;getAsStringWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a string or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsStringWithDefault(defaultValue: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: string - default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value or given default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastype&#34;&gt;getAsType&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a value defined by a specifieded typecode.
If conversion is not possible, it returns the default value for the specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsType&amp;lt;T&amp;gt;(typeCode: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;typeCode&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that defines the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - value defined by the typecode or type default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastypewithdefault&#34;&gt;getAsTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an object&amp;rsquo;s value into a value defined by a specified typecode.
If conversion is not possible, it returns the given default value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsTypeWithDefault&amp;lt;T&amp;gt;(typeCode: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, defaultValue: T): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;typeCode&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that defines the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - value defined by the typecode or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;gettypecode&#34;&gt;getTypeCode&lt;/h4&gt;
&lt;p&gt;Gets the type&amp;rsquo;s code for the value stored in this object.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totypecode&#34;&gt;TypeConverter.toTypeCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getTypeCode(): &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - type&amp;rsquo;s code of the object&amp;rsquo;s value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hashcode&#34;&gt;hashCode&lt;/h4&gt;
&lt;p&gt;Gets an object hash code which can be used to optimize storing and searching.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totypecode&#34;&gt;TypeConverter.toTypeCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; hashCode(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - object hash code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject&#34;&gt;setAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value for this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; setAsObject(value: any): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - new object value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostring&#34;&gt;toString&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tostring&#34;&gt;StringConverter.toString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; toString(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;AnyValue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;123.456&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: AnyValueArray</title>
      <link>/node/commons/data/any_value_array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/any_value_array/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Extends:&lt;/strong&gt; Array&amp;lt;any&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AnyValueArray class provides a cross-language implementation of a dynamic array object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the array and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(values: any[] = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: any[] - (optional) values used to initialize this array.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; append(elements: any[]): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;elements&lt;/strong&gt;: any[] - list of elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears this array by removing all its elements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clear(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clone(): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;contains&#34;&gt;contains&lt;/h4&gt;
&lt;p&gt;Checks if this array contains a value.
The check uses direct comparison between the elements of the array and the specified value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; contains(value: any): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - value to be checked&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - true if this array contains the value or false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;containsastype&#34;&gt;containsAsType&lt;/h4&gt;
&lt;p&gt;Checks if this array contains a value.
The check converts elements and the value to type specified by type code before comparison.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totype&#34;&gt;TypeConverter.toType&lt;/a&gt;, &lt;a href=&#34;../../convert/type_converter/#tonullabletype&#34;&gt;TypeConverter.toNullableType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; containsAsType&amp;lt;T&amp;gt;(typeCode: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, value: any): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;typeCode&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - type code that defines a type to convert values before comparison&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - value to be checked&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - true if this array contains the value or false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Gets an array element specified by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; get(index: number): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - value of the array element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarray&#34;&gt;getAsArray&lt;/h4&gt;
&lt;p&gt;Converts array element into an AnyValueArray or returns an empty AnyValueArray if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsArray(index: number): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or empty AnyValueArray if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarraywithdefault&#34;&gt;getAsArrayWithDefault&lt;/h4&gt;
&lt;p&gt;Converts array element into an AnyValueArray or returns a givne default value if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsArrayWithDefault(index: number, defaultValue: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasboolean&#34;&gt;getAsBoolean&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a boolean or returns false if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsBoolean(index: number): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value of the element or false if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasbooleanwithdefault&#34;&gt;getAsBooleanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a boolean or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.toBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsBooleanWithDefault(index: number, defaultValue: boolean): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: boolean - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value of the element or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetime&#34;&gt;getAsDateTime&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into Date or returns the current date if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDateTime(index: number): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value ot the element or the current date if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetimewithdefault&#34;&gt;getAsDateTimeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a Date or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#todatetimewithdefault&#34;&gt;DateTimeConverter.toDateTimeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDateTimeWithDefault(index: number, defaultValue: Date): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: Date - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value ot the element or given default value if theconversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdouble&#34;&gt;getAsDouble&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a double or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDouble(index: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdoublewithdefault&#34;&gt;getAsDoubleWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a double or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDoubleWithDefault(index: number, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloat&#34;&gt;getAsFloat&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a float or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsFloat(index: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloatwithdefault&#34;&gt;getAsFloatWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a float or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tofloatwithdefault&#34;&gt;FloatConverter.toFloatWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsFloatWithDefault(index: number, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasinteger&#34;&gt;getAsInteger&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into an integer or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsInteger(index: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasintegerwithdefault&#34;&gt;getAsIntegerWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into an integer or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.toIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsIntegerWithDefault(index: number, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value of the element or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslong&#34;&gt;getAsLong&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a long or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsLong(index: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value ot the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslongwithdefault&#34;&gt;getAsLongWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a long or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/LongConverter/#tolongwithdefault&#34;&gt;LongConverter.toLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsLongWithDefault(index: number, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmap&#34;&gt;getAsMap&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into an AnyValueMap object or returns an empty AnyValueMap object if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsMap(index: number): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or empty AnyValueMap object if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmapwithdefault&#34;&gt;getAsMapWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into an AnyValueMap oject or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsMapWithDefault(index: number, defaultValue: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablearray&#34;&gt;getAsNullableArray&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into an AnyValueArray object or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableArray(index: number): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableboolean&#34;&gt;getAsNullableBoolean&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a boolean or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../converter/boolean_converter/#tonullableboolean&#34;&gt;BooleanConverter.toNullableBoolean&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableBoolean(index: number): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledatetime&#34;&gt;getAsNullableDateTime&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a Date or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../converter/date_time_converter/#tonullabledatetime&#34;&gt;DateTimeConverter.toNullableDateTime&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableDateTime(index: number): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledouble&#34;&gt;getAsNullableDouble&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a double or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#tonullabledouble&#34;&gt;DoubleConverter.toNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableDouble(index: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablefloat&#34;&gt;getAsNullableFloat&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a float or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tonullablefloat&#34;&gt;FloatConverter.toNullableFloat&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableFloat(index: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableinteger&#34;&gt;getAsNullableInteger&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a float or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tonullableinteger&#34;&gt;IntegerConverter.toNullableInteger&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableInteger(index: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablelong&#34;&gt;getAsNullableLong&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a long or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tonullablelong&#34;&gt;LongConverter.toNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableLong(index: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablemap&#34;&gt;getAsNullableMap&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a long or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableMap(index: number): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablestring&#34;&gt;getAsNullableString&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a string or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tonullablestring&#34;&gt;StringConverter.toNullableString&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableString(index: number): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletype&#34;&gt;getAsNullableType&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a value defined by a specified typecode.
If conversion is not possible, it returns null.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#tonullabletype&#34;&gt;TypeConverter.toNullableType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableType&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, index: number): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that defines the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject&#34;&gt;getAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in an array element without any conversion.
When the element&amp;rsquo;s index is not defined, it returns the entire array value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsObject(index: number = undefined): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - (optional) index of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - element value or value of the array when the index is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstring&#34;&gt;getAsString&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a string or returns &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsString(index: number): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value ot the element or &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstringwithdefault&#34;&gt;getAsStringWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a string or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tostringwithdefault&#34;&gt;StringConverter.toStringWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsStringWithDefault(index: number, defaultValue: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: string - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastype&#34;&gt;getAsType&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a value defined by a specified typecode.
If conversion is not possible, it returns a given default value for the specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsType&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, index: number): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that defines the type of the result.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or given default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastypewithdefault&#34;&gt;getAsTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into a value defined by a specified typecode.
If conversion is not possible it returns default value for the specified type.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totypewithdefault&#34;&gt;TypeConverter.toTypeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsTypeWithDefault&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, index: number, defaultValue: T): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that defines the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasvalue&#34;&gt;getAsValue&lt;/h4&gt;
&lt;p&gt;Converts an array&amp;rsquo;s element into an AnyValue object or returns an empty AnyValue object if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;, &lt;a href=&#34;../any_value/#constructors&#34;&gt;AnyValues.constructors&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsValue(index: number): &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; - AnyValue value of the element or empty AnyValue object if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;put&#34;&gt;put&lt;/h4&gt;
&lt;p&gt;Puts a new value into an array&amp;rsquo;s element specified by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; put(index: number, value: any): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to put.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - new value for the array&amp;rsquo;s element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes an array&amp;rsquo;s element specified by its index&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; remove(index: number): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the element to remove.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject&#34;&gt;setAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value to an array&amp;rsquo;s element specified by its index.
When the index is not defined, it resets the entire array value.
This method has double purpose because method overrides are not supported in JavaScript.&lt;br&gt;
See &lt;a href=&#34;../../convert/array_converter/#toarray&#34;&gt;ArrayConverter.toArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; setAsObject(index: any, value: any = undefined): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - (optional) index of the element to set.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - new element or array&amp;rsquo;s value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostring&#34;&gt;toString&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a comma-separated list of string representations of individual elements as
&lt;em&gt;&amp;ldquo;value1,value2,value3&amp;rdquo;&lt;/em&gt;&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tostring&#34;&gt;StringConverter.toString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; toString(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;fromstring&#34;&gt;fromString&lt;/h4&gt;
&lt;p&gt;Splits a specified string into elements using a separator and assigns
the elements to a newly created AnyValueArray.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromString(values: string, separator: string, removeDuplicates: boolean = false): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: string - string value to be split and assigned to an AnyValueArray object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;separator&lt;/strong&gt;: string - separator to split the string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;removeDuplicates&lt;/strong&gt;: boolean - (optional) true to remove duplicated elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - newly created AnyValueArray object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;fromValue&lt;/h4&gt;
&lt;p&gt;Splits a specified string into elements using a separator and assigns
the elements to a newly created AnyValueArray.&lt;br&gt;
See &lt;a href=&#34;../../convert/array_converter/#tonullablearray&#34;&gt;ArrayConverter.toNullableArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromValue(value: any): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - newly created AnyValueArray object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalues&#34;&gt;fromValues&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueArray object from a list of values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromValues(&amp;hellip;values: any[]): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: any[] - list of values used to initialize the created AnyValueArray object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - newly created AnyValueArray object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;AnyValueArray&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2018-01-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]);&lt;/span&gt;
   
&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: new Date(2018,0,1)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter-1&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: AnyValueMap</title>
      <link>/node/commons/data/any_value_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/any_value_map/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AnyValueMap class provides a cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(values: any = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: any - (optional) values to initialize this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; append(map: any): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: any - map with elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears this map by removing all its elements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clear(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clone(): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Gets a map&amp;rsquo;s element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; get(key: string): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - value of the map&amp;rsquo;s element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarray&#34;&gt;getAsArray&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an AnyValueArray object or returns an empty AnyValueArray object if theconversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;, &lt;a href=&#34;../any_value_array/#fromvalue&#34;&gt;AnyValueArray.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsArray(key: string): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or empty AnyValueArray object if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarraywithdefault&#34;&gt;getAsArrayWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an AnyValueArray object or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsArrayWithDefault(key: string, defaultValue: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasboolean&#34;&gt;getAsBoolean&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a boolean or returns false if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsBoolean(key: string): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - value of the element or false if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasbooleanwithdefault&#34;&gt;getAsBooleanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a boolean or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.toBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsBooleanWithDefault(key: string, defaultValue: boolean): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: boolean - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetime&#34;&gt;getAsDateTime&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into Date or returns the current date if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDateTime(key: string): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - akey of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value of the element or the current date if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetimewithdefault&#34;&gt;getAsDateTimeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a Date or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#todatetimewithdefault&#34;&gt;DateTimeConverter.toDateTimeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDateTimeWithDefault(key: string, defaultValue: Date): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: Date - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdouble&#34;&gt;getAsDouble&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a double or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDouble(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdoublewithdefault&#34;&gt;getAsDoubleWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a double or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#todoublewithdefault&#34;&gt;DoubleConverter.toDoubleWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDoubleWithDefault(key: string, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloat&#34;&gt;getAsFloat&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a float or returns 0 if conversion the is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsFloat(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloatwithdefault&#34;&gt;getAsFloatWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map&amp;rsquo;s element into a float or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#tofloatwithdefault&#34;&gt;FloatConverter.toFloatWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsFloatWithDefault(key: string, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - flaot value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasinteger&#34;&gt;getAsInteger&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an integer or returns 0 if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsInteger(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasintegerwithdefault&#34;&gt;getAsIntegerWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an integer or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.toIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsIntegerWithDefault(key: string, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslong&#34;&gt;getAsLong&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a long or returns 0 if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.toIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsLong(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value of the element or 0 if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslongwithdefault&#34;&gt;getAsLongWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a long or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tolongwithdefault&#34;&gt;LongConverter.toLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsLongWithDefault(key: string, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value of the element or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmap&#34;&gt;getAsMap&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an AnyValueMap object or returns an empty AnyValueMap object if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tolongwithdefault&#34;&gt;LongConverter.toLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsMap(key: string): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or empty AnyValueMap object if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmapwithdefault&#34;&gt;getAsMapWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an AnyValueMap object or returns a given default value if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsMapWithDefault(key: string, defaultValue: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablearray&#34;&gt;getAsNullableArray&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an AnyValueArray object or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableArray(key: string): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueArray value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableboolean&#34;&gt;getAsNullableBoolean&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a boolean or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tonullableboolean&#34;&gt;BooleanConverter.toNullableBoolean&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableBoolean(key: string): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledatetime&#34;&gt;getAsNullableDateTime&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns a given default value if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#tonullabledatetime&#34;&gt;DateTimeConverter.toNullableDateTime&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableDateTime(key: string): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledouble&#34;&gt;getAsNullableDouble&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a double or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#tonullabledouble&#34;&gt;DoubleConverter.toNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableDouble(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablefloat&#34;&gt;getAsNullableFloat&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a float or returns null if the conversion is not possible.
See &lt;a href=&#34;../../convert/float_converter/#tonullablefloat&#34;&gt;FloatConverter.toNullableFloat&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableFloat(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableinteger&#34;&gt;getAsNullableInteger&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an integer or returns null if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#tonullableinteger&#34;&gt;IntegerConverter.toNullableInteger&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableInteger(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablelong&#34;&gt;getAsNullableLong&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a long or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#tonullablelong&#34;&gt;LongConverter.toNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableLong(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablemap&#34;&gt;getAsNullableMap&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an AnyValueMap object or returns null if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableMap(key: string): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablestring&#34;&gt;getAsNullableString&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a string or returns null if the conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tonullablestring&#34;&gt;StringConverter.toNullableString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableString(key: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletype&#34;&gt;getAsNullableType&lt;/h4&gt;
&lt;p&gt;Converts a map element into a value defined by a specified typecode.
If conversion is not possible, it returns null.  &lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#tonullabletype&#34;&gt;TypeConverter.toNullableType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableType&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: string): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that defines the type of the result.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element&amp;rsquo;s value defined by the type code or null if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject&#34;&gt;getAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in a map&amp;rsquo;s element without any conversions.
When the element&amp;rsquo;s key is not defined, it returns the entire map value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsObject(key: string = undefined): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - element&amp;rsquo;s value or value of the map when the index is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstring&#34;&gt;getAsString&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a string or returns &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsString(key: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstringwithdefault&#34;&gt;getAsStringWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a string or returns a given default value if the conversion is not possible.
See &lt;a href=&#34;../../convert/string_converter/#tostringwithdefault&#34;&gt;StringConverter.toStringWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsStringWithDefault(key: string, defaultValue: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: string - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or given default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastype&#34;&gt;getAsType&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a value defined by a specified type code.
If the conversion is not possible, it returns the default value for the specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsType&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: string): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that defines the type of the result.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element&amp;rsquo;s value defined by the typecode or default if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastypewithdefault&#34;&gt;getAsTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into a value defined by a specified type code.
If the conversion is not possible, it returns a given default value. &lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#totypewithdefault&#34;&gt;TypeConverter.toTypeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsTypeWithDefault&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: string, defaultValue: T): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - TypeCode that defines the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element&amp;rsquo;s value defined by the typecode or default value if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasvalue&#34;&gt;getAsValue&lt;/h4&gt;
&lt;p&gt;Converts a map&amp;rsquo;s element into an AnyValue object or returns an empty AnyValue object if the conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;, &lt;a href=&#34;../any_value/#constructors&#34;&gt;AnyValue.constructors&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsValue(key: string): &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; -AnyValue value of the element or empty AnyValue object if the conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getkeys&#34;&gt;getKeys&lt;/h4&gt;
&lt;p&gt;Gets the keys of all elements stored in this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getKeys(): string[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - list with all keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;length&#34;&gt;length&lt;/h4&gt;
&lt;p&gt;Gets the number of elements stored in this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; length(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - number of elements in this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;put&#34;&gt;put&lt;/h4&gt;
&lt;p&gt;Puts a new value into a map&amp;rsquo;s element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; put(key: string, value: any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to put.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - new value for map&amp;rsquo;s element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes a map&amp;rsquo;s element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; remove(key: string): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key of the element to remove.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject&#34;&gt;setAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value to a map&amp;rsquo;s element specified by its index.
When the index is not defined, it resets the entire map value.
This method has a double purpose because method overrides are not supported in JavaScript.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; setAsObject(key: any, value: any = undefined): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: any - (optional) key of the element to set&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - new element or map value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostring&#34;&gt;toString&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a semicolon-separated list of key-value pairs as
&lt;em&gt;&amp;ldquo;key1=value1;key2=value2;key=value3&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; toString(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;frommaps&#34;&gt;fromMaps&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap object by merging two or more maps.
Maps defined later in the list override values from previously defined maps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromMaps(&amp;hellip;maps: any[]): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maps&lt;/strong&gt;: any[] - array of maps to be merged&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - newly created AnyValueMap object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;fromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap object from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromTuples(&amp;hellip;tuples: any[]): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: any[] - list of values where odd elements are keys and the following even elements are values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - newly created AnyValueArray object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuplesarray&#34;&gt;fromTuplesArray&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap object from a list of key-value pairs called tuples.
The method is similar to &lt;a href=&#34;#fromtuples&#34;&gt;fromTuples&lt;/a&gt; but tuples are passed as array instead of parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromTuplesArray(tuples: any[]): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: any[] - list of values where odd elements are keys and the following even elements are values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - newly created AnyValueArray object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;fromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value into an AnyValueMap object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromValue(value: any): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - newly created AnyValueMap object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;AnyValueMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;key1&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;key2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;key3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2018-01-01&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;
     
&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: new Date(2018,0,1)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter-1&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: DataPage</title>
      <link>/node/commons/data/data_page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/data_page/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DataPage class allows you to create a data transfer object that can be used to pass the results of a paginated query. This object contains items of the retrieved page.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most often, this object type is used to send responses to paginated queries.&lt;/li&gt;
&lt;li&gt;Pagination parameters are defined by a &lt;a href=&#34;../paging_params&#34;&gt;PagingParams&lt;/a&gt; object.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;skip&lt;/em&gt; parameter in the PagingParams indicates how many items to skip.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;takes&lt;/em&gt; parameter sets number of items to return in the page.&lt;/li&gt;
&lt;li&gt;An optional &lt;em&gt;total&lt;/em&gt; paramter allows you to specify the total number of items returned from a request. However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of DataPage and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(data: T[] = null, total: number = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: T[] - list of items from the retrieved page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: number - total amount of items in a request.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;data&#34;&gt;data&lt;/h4&gt;
&lt;p&gt;Items of the retrieved page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;data&lt;/strong&gt;: T[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;total&lt;/h4&gt;
&lt;p&gt;Total amount of items in a request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;total&lt;/strong&gt;: number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;pagingparamspaging_params&#34;&gt;&lt;a href=&#34;../paging_params&#34;&gt;PagingParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: FilterParams</title>
      <link>/node/commons/data/filter_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/filter_params/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Extends:&lt;/strong&gt; &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The FilterParams class allows you to create a data transfer object that can be used to pass filter parameters as key-value pairs.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and initalizes it with elements from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(map: any = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: any - map to initialize this instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;fromstring&#34;&gt;fromString&lt;/h4&gt;
&lt;p&gt;Parses semicolon-separated key-value pairs and returns them as a FilterParams.&lt;br&gt;
See &lt;a href=&#34;../string_value_map/#fromstring&#34;&gt;StringValueMap.fromString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromString(line: string): &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: string - semicolon-separated key-value list to initialize FilterParams.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; - newly created FilterParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;fromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new FilterParams from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromTuples(&amp;hellip;tuples: any[]): &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: any[] - list of values where odd elements are keys and the following even elements are values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; - newly created FilterParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;fromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value into a FilterParams object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromValue(value: any): &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - value to be converted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; - newly created FilterParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;from_create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;to_create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(),&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    
&lt;span style=&#34;color:#75af00&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{...});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringvaluemapstring_value_map&#34;&gt;&lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IChangeable</title>
      <link>/node/commons/data/ichangeable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/ichangeable/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IChangeable interface allows you to store the last modified date and time in the &amp;ldquo;change_time&amp;rdquo; parameter of a data object.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;change_time&#34;&gt;change_time&lt;/h4&gt;
&lt;p&gt;The UTC time at which the object was last changed (created or updated).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;change_time&lt;/strong&gt;: Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IChangeable&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;change_time&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Node: ICloneable</title>
      <link>/node/commons/data/icloneable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/icloneable/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ICloneable interface allows you to create objects with binary clones.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clone(): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyClass&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IMyClass&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;ICloneable&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;constructor&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;};&lt;/span&gt;
 
  &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;cloneObj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;any&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;constructor&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt;
             
      &lt;span style=&#34;color:#75715e&#34;&gt;// Copy every attribute from this to cloneObj here.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
             
      &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;cloneObj&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Node: IdGenerator</title>
      <link>/node/commons/data/id_generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/id_generator/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IdGenerator class allows you to generate IDs for objects.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It supports two types of IDs: short and long.&lt;/li&gt;
&lt;li&gt;ShortIDs are 9-digit random numbers. They are not guaranteed be unique.&lt;/li&gt;
&lt;li&gt;Long IDs are string GUIDs. They are globally unique and 32-character long.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;nextlong&#34;&gt;nextLong&lt;/h4&gt;
&lt;p&gt;Generates a globally unique 32-digit object ID.
The value is a string representation of a GUID value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; nextLong(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - generated 32-digit object ID&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nextshort&#34;&gt;nextShort&lt;/h4&gt;
&lt;p&gt;Generates a random 9-digit random ID (code).&lt;/p&gt;
&lt;p&gt;Note: The returned value is not guaranteed to be unique.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; nextShort(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - generated random 9-digit code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;IdGenerator&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: &amp;#34;234ab342c56a2b49c2ab42bf23ff991ac&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;IdGenerator&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextShort&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: &amp;#34;23495247&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Node: IIdentifiable&lt;K&gt;</title>
      <link>/node/commons/data/iidentifiable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/iidentifiable/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IIdentifiable interface is used to create data objects that can be uniquely idendified by an ID.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The type specified in the interface defines the type of the ID field.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;id&#34;&gt;id&lt;/h4&gt;
&lt;p&gt;Unique object identifier of type K.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt;: K&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; 
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Node: INamed</title>
      <link>/node/commons/data/inamed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/inamed/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The INamed interface is used to define data objects containing a human-readable name.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;name&#34;&gt;name&lt;/h4&gt;
&lt;p&gt;Object&amp;rsquo;s humand-readable name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;INamed&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IStringIdentifiable</title>
      <link>/node/commons/data/istring_identifiable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/istring_identifiable/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Extends:&lt;/strong&gt; &lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;string&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IIdentifiable interface extends &lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;/a&gt; to hardcode id type to string.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is common to use a string GUID as the id, generated by &lt;a href=&#34;../id_generator&#34;&gt;IdGenerator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The interface extends &lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;/a&gt; hardcode id type to string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;id&#34;&gt;id&lt;/h4&gt;
&lt;p&gt;Object&amp;rsquo;s unique string id.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IStringIdentifiable&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; 
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;iidentifiableiidentifiable&#34;&gt;&lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;idgeneratorid_generator&#34;&gt;&lt;a href=&#34;../id_generator&#34;&gt;IdGenerator&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: ITrackable</title>
      <link>/node/commons/data/itrackable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/itrackable/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Extends:&lt;/strong&gt; &lt;a href=&#34;../ichangeable&#34;&gt;IChangeable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ITrackagle interface allows you to define data objects that can track their changes, including logical deletion.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;create_time&#34;&gt;create_time&lt;/h4&gt;
&lt;p&gt;UTC time at which the object was created.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;create_time&lt;/strong&gt;: Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;change_time&#34;&gt;change_time&lt;/h4&gt;
&lt;p&gt;UTC time at which the object was last changed (created, updated, or deleted).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;change_time&lt;/strong&gt;: Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;deleted&#34;&gt;deleted&lt;/h4&gt;
&lt;p&gt;Logical deletion flag. True when object is deleted and null or false otherwise&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;deleted&lt;/strong&gt;: boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;ITrackable&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;change_time&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;create_time&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;deleted&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;boolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ichangeableichangeable&#34;&gt;&lt;a href=&#34;../ichangeable&#34;&gt;IChangeable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IVersioned</title>
      <link>/node/commons/data/iversioned/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/iversioned/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IVersioned interface allows you to define data objects that can be versioned.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versioning is often used as an optimistic concurrency mechanism.&lt;/li&gt;
&lt;li&gt;The version doesn&amp;rsquo;t have to be a number, but it is recommended to use sequential values to determine if one object has a newer or older version than another one.&lt;/li&gt;
&lt;li&gt;It is common to use the time of change as the object version.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;version&#34;&gt;version&lt;/h4&gt;
&lt;p&gt;Object&amp;rsquo;s version.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;version&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IVersioned&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
   
&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;updateData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;correlationId&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;item&lt;/span&gt;: &lt;span style=&#34;color:#00a8c8&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;ConcurrencyException&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;VERSION_CONFLICT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;The change has older version stored value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Node: MultiString</title>
      <link>/node/commons/data/multi_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/multi_string/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MultiString class allows you to create objects that contain string translations for multiple languages.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Language keys use two-letter codes like: &lt;em&gt;&amp;lsquo;en&amp;rsquo;, &amp;lsquo;sp&amp;rsquo;, &amp;lsquo;de&amp;rsquo;, &amp;lsquo;ru&amp;rsquo;, &amp;lsquo;fr&amp;rsquo;, &amp;lsquo;pr&amp;rsquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;When a translation for a specific language does not exists, it defaults to English (&amp;lsquo;en&amp;rsquo;).&lt;/li&gt;
&lt;li&gt;When English does not exists, it falls back to the first defined language&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new MultiString object and initializes it with values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(map: any = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: any - a map with language-text pairs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;append&lt;/h4&gt;
&lt;p&gt;Appends a map with language-translation pairs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; append(map: any): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: any - map with language-translation pairs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears all translations from this MultiString object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clear(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Gets a string translation by specified language.
When the language is not found, it defaults to English (&amp;lsquo;en&amp;rsquo;).
When English is not found, it takes the first value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; get(language: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: string - language&amp;rsquo;s two-symbol code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - translation for the specified language or default translation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getlanguages&#34;&gt;getLanguages&lt;/h4&gt;
&lt;p&gt;Gets all languages stored in this MultiString object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getLanguages(): string[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - list with language codes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;length&#34;&gt;length&lt;/h4&gt;
&lt;p&gt;Returns the number of translations stored in this MultiString object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; length(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - number of translations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;put&#34;&gt;put&lt;/h4&gt;
&lt;p&gt;Puts a new translation for the specified language.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; put(language: string, value: any): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: string - language&amp;rsquo;s two-symbol code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - new translation for the specified language.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes a translation for the specified language.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; remove(language: string): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: string - language&amp;rsquo;s two-symbol code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;fromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new MultiString object from language-translation pairs (tuples).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromTuples(&amp;hellip;tuples: any[]): &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: any[] - array that contains language-translation tuples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt; - MultiString Object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuplesarray&#34;&gt;fromTuplesArray&lt;/h4&gt;
&lt;p&gt;Creates a new MultiString object from language-translation pairs (tuples) specified as array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromTuplesArray(tuples: any[]): &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: any[] - array that contains language-translation tuples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt; - MultiString Object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;fromValue&lt;/h4&gt;
&lt;p&gt;Creates a new MultiString object from a value that contains language-translation pairs.&lt;br&gt;
See &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromValue(value: any): &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - value used to initialize a MultiString object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt; - MultiString object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;values&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MultiString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ru&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ÐŸÑ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;ru&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;ÐŸÑ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€!&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;pt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Result: &amp;#34;Hello World!&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Node: PagingParams</title>
      <link>/node/commons/data/paging_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/paging_params/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The PagingParams class allows you to create data transfer objects used to pass paging parameters for queries.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A page is defined by two parameters:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;skip&lt;/em&gt;: number of items to skip.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;take&lt;/em&gt;: number of items to return in a page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additionally, the optional &lt;em&gt;total&lt;/em&gt; parameter defines whether to return the total number of items or not.&lt;/li&gt;
&lt;li&gt;However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter, because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(skip: number = null, take: number = null, total: boolean = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;skip&lt;/strong&gt;: number - number of items to skip.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;take&lt;/strong&gt;: number - number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: boolean - true to return the total number of items.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;skip&#34;&gt;skip&lt;/h4&gt;
&lt;p&gt;Number of items to skip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;skip&lt;/strong&gt;: number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;take&#34;&gt;take&lt;/h4&gt;
&lt;p&gt;Number of items to return.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;take&lt;/strong&gt;: number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;total&lt;/h4&gt;
&lt;p&gt;Flag to return the total number of items.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;total&lt;/strong&gt;: boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;getskip&#34;&gt;getSkip&lt;/h4&gt;
&lt;p&gt;Gets the number of items to skip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getSkip(minSkip: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;minSkip&lt;/strong&gt;: number - minimum number of items to skip.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - number of items to skip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;gettake&#34;&gt;getTake&lt;/h4&gt;
&lt;p&gt;Gets the number of items to return in a page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getTake(maxTake: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maxTake&lt;/strong&gt;: number - maximum number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - number of items to return.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;frommap&#34;&gt;fromMap&lt;/h4&gt;
&lt;p&gt;Creates a new PagingParams object and sets it parameters from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromMap(map: any): &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: any - AnyValueMap or StringValueMap used to initialize this PagingParams&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; - newly created PagingParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;fromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new PagingParams object from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromTuples(&amp;hellip;tuples: any[]): &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: any[] - list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; - newly created PagingParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;fromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value into PagingParams object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromValue(value: any): &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; - newly created PagingParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    
&lt;span style=&#34;color:#75af00&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{...});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Node: ProjectionParams</title>
      <link>/node/commons/data/projection_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/projection_params/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Extends:&lt;/strong&gt; Array&amp;lt;string&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ProjectionParams class allows you to define projection parameters with a list of fields to be included in your query results.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The parameters support two formats: dot and nested.&lt;/li&gt;
&lt;li&gt;The dot format is the standard way to define the included fields and subfields by using dot object notation. E.g. &lt;em&gt;&amp;ldquo;field1,field2.field21,field2.field22.field221&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;As an alternative, the nested format offers a more compact representation. E.g. &lt;em&gt;&amp;ldquo;field1,field2(field21,field22(field221))&amp;quot;&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of ProjectionParams and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(values: any[] = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: any[] - (optional) values used to initialize this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;tostring&#34;&gt;toString&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a comma-separated list of projection fields
&lt;em&gt;&amp;ldquo;field1,field2.field21,field2.field22.field221&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; toString(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;fromstring&#34;&gt;fromString&lt;/h4&gt;
&lt;p&gt;Parses a comma-separated list of projection fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromString(&amp;hellip;values: string[])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: string[] - one or more comma-separated lists of projection fields&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; - newly created ProjectionParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;fromValue&lt;/h4&gt;
&lt;p&gt;Converts a specified value into a ProjectionParams object.&lt;br&gt;
See &lt;a href=&#34;../any_value_array/#fromvalue&#34;&gt;AnyValueArray.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromValue(value: any): &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any -  value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; - newly created ProjectionParams object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;projection&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;ProjectionParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field1,field2(field21,field22)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;    

&lt;span style=&#34;color:#75af00&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;projection&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{...});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Node: SortField</title>
      <link>/node/commons/data/sort_field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/sort_field/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The SortField class allows you to define a field used to sort query results. In addition, it allows you to specify the order type as ascending or descending.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(name: string = null, ascending: boolean = true)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - name of the field to sort by.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ascending&lt;/strong&gt;: boolean - true to sort in ascending order, and false to sort in descending order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;name&#34;&gt;name&lt;/h4&gt;
&lt;p&gt;Field name to sort by.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;name&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;ascending&#34;&gt;ascending&lt;/h4&gt;
&lt;p&gt;Flag used to define the sorting order. True to sort ascending, false to sort descending&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;ascending&lt;/strong&gt;: boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;sorting&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;SortingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;SortField&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
     
&lt;span style=&#34;color:#75af00&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;sorting&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{...});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;sortparamssort_params&#34;&gt;&lt;a href=&#34;../sort_params&#34;&gt;SortParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: SortParams</title>
      <link>/node/commons/data/sort_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/sort_params/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Extends:&lt;/strong&gt; Array&amp;lt;&lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The SortParams class allows you to define a list of field names used to sort query results. In addition, it allows you to specify the type of order as ascending or descending.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and initializes it with specified sort fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(&amp;hellip;fields: &lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;[])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fields&lt;/strong&gt;: &lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;[] - list of fields to sort by.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;sorting&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;SortingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;SortField&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;sorting&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{...});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;sortfieldsort_field&#34;&gt;&lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: StringValueMap</title>
      <link>/node/commons/data/string_value_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/string_value_map/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The StringValueMap class allows you to create a cross-language implementation of a map (dictionary) where all keys and values are strings.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The class provides several methods to convert the stored values to different types, such as array, boolean or datetime.&lt;/li&gt;
&lt;li&gt;This class is widely used in Pip.Services as a basis for variety of classes, such as &lt;a href=&#34;../../config/config_params&#34;&gt;ConfigParams&lt;/a&gt;, &lt;a href=&#34;../../../components/connect/connection_params&#34;&gt;ConnectionParams&lt;/a&gt;, &lt;a href=&#34;../../../components/auth/credential_params&#34;&gt;CredentialParams&lt;/a&gt; (in the Pip.Services components package) and others.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(map: any = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: any - (optional) values to initialize this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; append(map: any): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: any - a map with elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears this map by removing all its elements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clear(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clone(): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - a clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Gets a map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; get(key: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - the value of the map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarray&#34;&gt;getAsArray&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueArray or returns empty AnyValueArray if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;, &lt;a href=&#34;../any_value_array/#fromvalue&#34;&gt;AnyValueArray.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsArray(key: string): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or empty AnyValueArray if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasarraywithdefault&#34;&gt;getAsArrayWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueArray or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsArrayWithDefault(key: string, defaultValue: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasboolean&#34;&gt;getAsBoolean&lt;/h4&gt;
&lt;p&gt;Converts map element into a boolean or returns false if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsBoolean(key: string): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value of the element or false if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasbooleanwithdefault&#34;&gt;getAsBooleanWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into a boolean or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.toBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsBooleanWithDefault(key: string, defaultValue: boolean): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: boolean - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetime&#34;&gt;getAsDateTime&lt;/h4&gt;
&lt;p&gt;Converts map element into a Date or returns the current date if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../boolean_converter/#tobooleanwithdefault&#34;&gt;BooleanConverter.toBooleanWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDateTime(key: string): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value of the element or the current date if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdatetimewithdefault&#34;&gt;getAsDateTimeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into a Date or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../date_time_converter/#todatetimewithdefault&#34;&gt;DateTimeConverter.toDateTimeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDateTimeWithDefault(key: string, defaultValue: Date): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: Date - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdouble&#34;&gt;getAsDouble&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDouble(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasdoublewithdefault&#34;&gt;getAsDoubleWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../double_converter/#todoublewithdefault&#34;&gt;DoubleConverter.toDoubleWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsDoubleWithDefault(key: string, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloat&#34;&gt;getAsFloat&lt;/h4&gt;
&lt;p&gt;Converts map element into a float or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsFloat(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasfloatwithdefault&#34;&gt;getAsFloatWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into a flot or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../float_converter/#tofloatwithdefault&#34;&gt;FloatConverter.toFloatWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsFloatWithDefault(key: string, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - flot value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasinteger&#34;&gt;getAsInteger&lt;/h4&gt;
&lt;p&gt;Converts map element into an integer or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsInteger(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasintegerwithdefault&#34;&gt;getAsIntegerWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into an integer or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../integer_converter/#tointegerwithdefault&#34;&gt;IntegerConverter.toIntegerWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsIntegerWithDefault(key: string, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslong&#34;&gt;getAsLong&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsLong(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getaslongwithdefault&#34;&gt;getAsLongWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../long_converter/#tolongwithdefault&#34;&gt;LongConverter.toLongWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsLongWithDefault(key: string, defaultValue: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: number - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmap&#34;&gt;getAsMap&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns empty AnyValueMap if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsMap(key: string): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - long value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasmapwithdefault&#34;&gt;getAsMapWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns default value if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsMapWithDefault(key: string, defaultValue: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablearray&#34;&gt;getAsNullableArray&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueArray or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#fromvalue&#34;&gt;AnyValueMap.fromValue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableArray(key: string): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableboolean&#34;&gt;getAsNullableBoolean&lt;/h4&gt;
&lt;p&gt;Converts map element into a boolean or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../boolean_converter/#tonullableboolean&#34;&gt;BooleanConverter.toNullableBoolean&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableBoolean(key: string): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - boolean value of the element or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledatetime&#34;&gt;getAsNullableDateTime&lt;/h4&gt;
&lt;p&gt;Converts map element into a Date or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../date_time_converter/#tonullabledatetime&#34;&gt;DateTimeConverter.toNullableDateTime&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableDateTime(key: string): Date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Date - Date value of the element or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabledouble&#34;&gt;getAsNullableDouble&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../double_converter/#tonullabledouble&#34;&gt;DoubleConverter.toNullableDouble&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableDouble(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - double value of the element or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablefloat&#34;&gt;getAsNullableFloat&lt;/h4&gt;
&lt;p&gt;Converts map element into a float or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../float_converter/#tonullablefloat&#34;&gt;FloatConverter.toNullableFloat&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableFloat(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - float value of the element or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullableinteger&#34;&gt;getAsNullableInteger&lt;/h4&gt;
&lt;p&gt;Converts map element into an integer or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../integer_converter/#tonullableinteger&#34;&gt;IntegerConverter.toNullableInteger&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableInteger(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - integer value of the element or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablelong&#34;&gt;getAsNullableLong&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../long_converter/#tonullablelong&#34;&gt;LongConverter.toNullableLong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableLong(key: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - long value of the element or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablemap&#34;&gt;getAsNullableMap&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns null if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableMap(key: string): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullablestring&#34;&gt;getAsNullableString&lt;/h4&gt;
&lt;p&gt;Converts map element into a string or returns null if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../string_converter/#tonullablestring&#34;&gt;StringConverter.toNullableString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableString(key: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasnullabletype&#34;&gt;getAsNullableType&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by specied typecode.
If conversion is not possible it returns null. &lt;br&gt;
See &lt;a href=&#34;../type_converter/#tonullabletype&#34;&gt;TypeConverter.toNullableType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsNullableType&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: string): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or null if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasobject&#34;&gt;getAsObject&lt;/h4&gt;
&lt;p&gt;Gets the value stored in map element without any conversions.
When element key is not defined it returns the entire map value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsObject(key: string = undefined): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) a key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - the element value or value of the map when index is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstring&#34;&gt;getAsString&lt;/h4&gt;
&lt;p&gt;Converts map element into a string or returns &amp;quot;&amp;quot; if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsString(key: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) a key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or &amp;quot;&amp;quot; if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasstringwithdefault&#34;&gt;getAsStringWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into a string or returns &amp;quot;&amp;quot; if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsStringWithDefault(key: string, defaultValue: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: string - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastype&#34;&gt;getAsType&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by specied typecode.
If conversion is not possible it returns default value for the specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsType&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: string): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getastypewithdefault&#34;&gt;getAsTypeWithDefault&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by specied typecode.
If conversion is not possible it returns default value for the specified type.&lt;br&gt;
See &lt;a href=&#34;../type_converter/#totypewithdefault&#34;&gt;TypeConverter.toTypeWithDefault&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsTypeWithDefault&amp;lt;T&amp;gt;(type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: string, defaultValue: T): T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defaultValue&lt;/strong&gt;: T - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - element value defined by the typecode or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getasvalue&#34;&gt;getAsValue&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValue or returns an empty AnyValue if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;, &lt;a href=&#34;../any_value/#constructors&#34;&gt;AnyValue.constructors&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAsValue(key: string): &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; - AnyValue value of the element or empty AnyValue if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getkeys&#34;&gt;getKeys&lt;/h4&gt;
&lt;p&gt;Gets keys of all elements stored in this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getKeys(): string[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - a list with all map keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;length&#34;&gt;length&lt;/h4&gt;
&lt;p&gt;Gets a number of elements stored in this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; length(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - the number of elements in this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;put&#34;&gt;put&lt;/h4&gt;
&lt;p&gt;Puts a new value into map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; put(key: string, value: any): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of the element to put.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - a new value for map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes a map element specified by its key&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; remove(key: string): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - a key of the element to remove.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject&#34;&gt;setAsObject&lt;/h4&gt;
&lt;p&gt;Sets a new value to map element specified by its index.
When the index is not defined, it resets the entire map value.
This method has double purpose because method overrides are not supported in JavaScript.&lt;br&gt;
See &lt;a href=&#34;../../convert/map_converter/#tomap&#34;&gt;MapConverter.toMap&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; setAsObject(key: any, value: any = undefined): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - (optional) a key of the element to set&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - a new element or map value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tostring&#34;&gt;toString&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a semicolon-separated list of key-value pairs as
&lt;em&gt;&amp;ldquo;key1=value1;key2=value2;key=value3&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; toString(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;frommaps&#34;&gt;fromMaps&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap by merging two or more maps.
Maps defined later in the list override values from previously defined maps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromMaps(&amp;hellip;maps: any[]): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maps&lt;/strong&gt;: any[] - an array of maps to be merged&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromstring&#34;&gt;fromString&lt;/h4&gt;
&lt;p&gt;Parses semicolon-separated key-value pairs and returns them as a &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromString(line: string): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: string - semicolon-separated key-value list to initialize StringValueMap.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;fromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromTuples(&amp;hellip;tuples: any[]): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: any[] - a list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuplesarray&#34;&gt;fromTuplesArray&lt;/h4&gt;
&lt;p&gt;Creates a new StringValueMap from a list of key-value pairs called tuples.
The method is similar to &lt;a href=&#34;#fromtuples&#34;&gt;fromTuples&lt;/a&gt; but tuples are passed as array instead of parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromTuplesArray(tuples: any[]): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: any[] - a list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;fromValue&lt;/h4&gt;
&lt;p&gt;Converts specified value into StringValueMap.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromValue(value: any): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;StringValueMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1=1;key2=123.456;key3=2018-01-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
  
&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 123.456
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getAsDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: new Date(2018,0,1)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter-1&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: TagsProcessor</title>
      <link>/node/commons/data/tags_processor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/tags_processor/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TagsProcessor class allows you to extract and process search tags from objects.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The search tags can be kept individually or embedded as hash tags inside text. E.g. &amp;ldquo;This text has #hash_tag that can be used for search.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;compresstag&#34;&gt;compressTag&lt;/h4&gt;
&lt;p&gt;Compress a tag by removing special symbols like spaces, &amp;lsquo;_&amp;rsquo; and &amp;lsquo;#&amp;rsquo;
and converting the tag to lower case.
When tags are compressed they can be matched in search queries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; compressTag(tag: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt;: string - the tag to compress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a compressed tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;compresstaglist&#34;&gt;compressTagList&lt;/h4&gt;
&lt;p&gt;Compresses a comma-separated list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; compressTagList(tagList: string): string[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tagList&lt;/strong&gt;: string - a comma-separated list of tags to compress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - a list with compressed tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;compresstags&#34;&gt;compressTags&lt;/h4&gt;
&lt;p&gt;Compresses a list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; compressTags(tags: string[]): string[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tagList&lt;/strong&gt;: string[] - the tags to compress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - a list with normalized tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equaltags&#34;&gt;equalTags&lt;/h4&gt;
&lt;p&gt;Compares two tags using their compressed form.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; equalTags(tag1: string, tag2: string): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag1&lt;/strong&gt;: string - the first tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag2&lt;/strong&gt;: string - the second tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - true if the tags are equal and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;extracthashtags&#34;&gt;extractHashTags&lt;/h4&gt;
&lt;p&gt;Extracts hash tags from a text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; extractHashTags(text: string): string[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;text&lt;/strong&gt;: string - a text that contains hash tags&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - a list with extracted and compressed tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;extracthashtagsfromvalue&#34;&gt;extractHashTagsFromValue&lt;/h4&gt;
&lt;p&gt;Extracts hash tags from selected fields in an object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; extractHashTagsFromValue(obj: any, &amp;hellip;searchFields: string[]): string[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: any - an object which contains hash tags.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;searchFields&lt;/strong&gt;: string[] - a list of fields in the objects where to extract tags&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] -a list of extracted and compressed tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;normalizetag&#34;&gt;normalizeTag&lt;/h4&gt;
&lt;p&gt;Normalizes a tag by replacing special symbols like &amp;lsquo;_&amp;rsquo; and &amp;lsquo;#&amp;rsquo; with spaces.
When tags are normalized then can be presented to user in similar shape and form.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; normalizeTag(tag: string): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt;: string - the tag to normalize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a normalized tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;normalizetaglist&#34;&gt;normalizeTagList&lt;/h4&gt;
&lt;p&gt;Normalizes a comma-separated list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; normalizeTagList(tagList: string): string[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tagList&lt;/strong&gt;: string - a comma-separated list of tags to normalize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - a list with normalized tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;normalizetags&#34;&gt;normalizeTags&lt;/h4&gt;
&lt;p&gt;Normalizes a list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; normalizeTags(tags: string[]): string[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt;: string[] - the tags to normalize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string[] - a list with normalized tags.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: TokenizedDataPage</title>
      <link>/node/commons/data/tokenized_data_page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/tokenized_data_page/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TokenizedDataPageData allows you to create a transfer object that is used to pass the results of paginated queries.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This object contains the items of the retrieved page and the total number of items (optional).&lt;/li&gt;
&lt;li&gt;Additionally, the data page returns a token that has to be passed to the next search as a starting point.&lt;/li&gt;
&lt;li&gt;Most often, this object type is used to send responses to paginated queries.&lt;/li&gt;
&lt;li&gt;Pagination parameters are defined by a &lt;a href=&#34;../tokenized_paging_params&#34;&gt;TokenizedPagingParams&lt;/a&gt; object.
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;token&lt;/em&gt; parameter in the TokenizedPagingParams defines where to start the search.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;takes&lt;/em&gt; parameter sets number of items to be returned in the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The optional &lt;em&gt;total&lt;/em&gt; parameter tells to return the total number of items in the query.&lt;/li&gt;
&lt;li&gt;However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter, because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of data page and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(data: T[] = null, token: string = null, total: number = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: T[] - a list of items from the retrieved page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;token&lt;/strong&gt;: string - (optional) a token to define astarting point for the next search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: number - (optional) a total number of objects in the result.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;data&#34;&gt;data&lt;/h4&gt;
&lt;p&gt;The items of the retrieved page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;data&lt;/strong&gt;: T[]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;token&#34;&gt;token&lt;/h4&gt;
&lt;p&gt;The starting point for the next search.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;token&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;total&lt;/h4&gt;
&lt;p&gt;The total amount of items in a request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;total&lt;/strong&gt;: number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;TokenizedPagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;pagingparamspaging_params&#34;&gt;&lt;a href=&#34;../paging_params&#34;&gt;PagingParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: TokenizedPagingParams</title>
      <link>/node/commons/data/tokenized_paging_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/commons/data/tokenized_paging_params/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TokenizedPagingParams allows you to create data transfer objects used to pass tokenized parameters for queries.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The page is defined by two parameters:
&lt;ul&gt;
&lt;li&gt;the &lt;em&gt;token&lt;/em&gt; token that defines a starting point for the search.&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;take&lt;/em&gt; parameter sets how many items to return in a page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additionally, the optional &lt;em&gt;total&lt;/em&gt; parameter tells to return the total number of items in the query.&lt;/li&gt;
&lt;li&gt;However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;li&gt;In general, this class can be used for complex paging scenarios, like paging across multiple databases where the previous state is encoded in a token. The token is usually retrieved from the previous response. The initial request shall go with token == &lt;em&gt;null&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(token: string = null, take: number = null, total: boolean = null)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;token&lt;/strong&gt;: string - token that defines a starting point for the search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;take&lt;/strong&gt;: number - the number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: boolean - true to return the total number of items.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;token&#34;&gt;token&lt;/h4&gt;
&lt;p&gt;The start token&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;token&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;take&#34;&gt;take&lt;/h4&gt;
&lt;p&gt;The number of items to return.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;take&lt;/strong&gt;: number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;total&lt;/h4&gt;
&lt;p&gt;The flag to return the total number of items.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;total&lt;/strong&gt;: boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;gettake&#34;&gt;getTake&lt;/h4&gt;
&lt;p&gt;Gets the number of items to return in a page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getTake(maxTake: number): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maxTake&lt;/strong&gt;: number - the maximum number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - the number of items to return.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;frommap&#34;&gt;fromMap&lt;/h4&gt;
&lt;p&gt;Creates a new TokenizedPagingParams and sets it parameters from the specified map&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromMap(map: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;): &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - a AnyValueMap or StringValueMap to initialize this TokenizedPagingParams&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - a newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromtuples&#34;&gt;fromTuples&lt;/h4&gt;
&lt;p&gt;Creates a new TokenizedPagingParams from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromTuples(&amp;hellip;tuples: any[]): &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: any[] - a list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - a newly created TokenizedPagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fromvalue&#34;&gt;fromValue&lt;/h4&gt;
&lt;p&gt;Converts specified value into TokenizedPagingParams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; fromValue(value: any): &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - a newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;TokenizedPagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
     
&lt;span style=&#34;color:#75af00&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;getDataByFilter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{...});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
