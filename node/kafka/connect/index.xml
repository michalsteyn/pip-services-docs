<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Connect</title>
    <link>/node/kafka/connect/</link>
    <description>Recent content in Connect on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/node/kafka/connect/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Node: IKafkaMessageListener</title>
      <link>/node/kafka/connect/ikafka_message_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/kafka/connect/ikafka_message_listener/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IKafkaMessageListener interface defines a Kafka message listener.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;onmessage&#34;&gt;onMessage&lt;/h4&gt;
&lt;p&gt;defines the actions to be done after a message is received.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;onMessage(topic: string, partition: number, message: any): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;topic&lt;/strong&gt;: string - topic&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;partition&lt;/strong&gt;: number - partition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: any - message&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: KafkaConnection</title>
      <link>/node/kafka/connect/kafka_connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/kafka/connect/kafka_connection/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../../../messaging/connect/imessage_queue_connection&#34;&gt;IMessageQueueConnection&lt;/a&gt;, &lt;a href=&#34;../../../commons/refer/ireferenceable&#34;&gt;IReferenceable&lt;/a&gt;, &lt;a href=&#34;../../../commons/config/iconfigurable&#34;&gt;IConfigurable&lt;/a&gt;,
&lt;a href=&#34;../../../commons/run/iopenable&#34;&gt;IOpenable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;By defining a connection and sharing it through multiple message queues
you can reduce number of used database connections.&lt;/p&gt;
&lt;h4 id=&#34;configuration-parameters&#34;&gt;Configuration parameters&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;client_id&lt;/strong&gt;: (optional) name of the client id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;connection(s)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;discovery_key&lt;/strong&gt;: (optional) a key to retrieve the connection from &lt;a href=&#34;../../../components/connect/idiscovery&#34;&gt;IDiscovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;host&lt;/strong&gt;: host name or IP address&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;port&lt;/strong&gt;: port number (default: 27017)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uri&lt;/strong&gt;: resource URI or connection string with all parameters in it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;credential(s)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;store_key&lt;/strong&gt;: (optional) a key to retrieve the credentials from &lt;a href=&#34;../../../components/auth/icredential_store&#34;&gt;ICredentialStore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username&lt;/strong&gt;: user name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password&lt;/strong&gt;: user password&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;log_level&lt;/strong&gt;: (optional) log level 0 - None, 1 - Error, 2 - Warn, 3 - Info, 4 - Debug (default: 1)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;connect_timeout&lt;/strong&gt;: (optional) number of milliseconds to connect to broker (default: 1000)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max_retries&lt;/strong&gt;: (optional) maximum retry attempts (default: 5)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;retry_timeout&lt;/strong&gt;: (optional) number of milliseconds to wait on each reconnection attempt (default: 30000)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;request_timeout&lt;/strong&gt;: (optional) number of milliseconds to wait on flushing messages (default: 30000)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;*:logger:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/log/ilogger&#34;&gt;ILogger&lt;/a&gt; components to pass log messages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:discovery:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/connect/idiscovery&#34;&gt;IDiscovery&lt;/a&gt; services&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:credential-store:*:*:1.0&lt;/strong&gt; (optional) credential stores to resolve credentials&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the connection component.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;_adminclient&#34;&gt;_adminClient&lt;/h4&gt;
&lt;p&gt;The Kafka admin client object;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_adminClient&lt;/strong&gt;: any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_clientconfig&#34;&gt;_clientConfig&lt;/h4&gt;
&lt;p&gt;Kafka connection properties&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_clientConfig&lt;/strong&gt;: any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_clientid&#34;&gt;_clientId&lt;/h4&gt;
&lt;p&gt;The hostname as client id.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_clientId&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_connecttimeout&#34;&gt;_connectTimeout&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_connectTimeout&lt;/strong&gt;: number = 1000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_connection&#34;&gt;_connection&lt;/h4&gt;
&lt;p&gt;The Kafka connection pool object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_connection&lt;/strong&gt;: any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_connectionresolver&#34;&gt;_connectionResolver&lt;/h4&gt;
&lt;p&gt;The connection resolver.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_connectionResolver&lt;/strong&gt;: &lt;a href=&#34;../kafka_connection_resolver&#34;&gt;KafkaConnectionResolver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_loglevel&#34;&gt;_logLevel&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_logLevel&lt;/strong&gt;: number = 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_logger&#34;&gt;_logger&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_logger&lt;/strong&gt;: &lt;a href=&#34;../../../components/log/composite_logger&#34;&gt;CompositeLogger&lt;/a&gt; = new &lt;a href=&#34;../../../components/log/composite_logger&#34;&gt;CompositeLogger()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_maxretries&#34;&gt;_maxRetries&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_maxRetries&lt;/strong&gt;: number = 5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_options&#34;&gt;_options&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_options&lt;/strong&gt;: &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;ConfigParams&lt;/a&gt; = new &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;ConfigParams()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_producer&#34;&gt;_producer&lt;/h4&gt;
&lt;p&gt;The Kafka message producer object&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_producer&lt;/strong&gt;: any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_requesttimeout&#34;&gt;_requestTimeout&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_requestTimeout&lt;/strong&gt;: number = 30000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_retrytimeout&#34;&gt;_retryTimeout&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_retryTimeout&lt;/strong&gt;: number = 30000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_subscriptions&#34;&gt;_subscriptions&lt;/h4&gt;
&lt;p&gt;Topic subscriptions&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_subscriptions&lt;/strong&gt;: &lt;a href=&#34;../kafka_subscription&#34;&gt;KafkaSubscription[]&lt;/a&gt; = []&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;checkopen&#34;&gt;checkOpen&lt;/h4&gt;
&lt;p&gt;Checks if connection is open.&lt;br&gt;
Raise an error is connection is closed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; checkOpen(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;close&#34;&gt;close&lt;/h4&gt;
&lt;p&gt;Closes component and frees used resources.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; close(correlationId: string): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id to trace execution through call chain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;commit&#34;&gt;commit&lt;/h4&gt;
&lt;p&gt;Commit a message offset.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; commit(topic: string, groupId: string, partition: number, offset: number, listener: &lt;a href=&#34;../ikafka_message_listener&#34;&gt;IKafkaMessageListener&lt;/a&gt;): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;topic&lt;/strong&gt;: string - a topic name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;groupId&lt;/strong&gt;: string - (optional) a consumer group id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;partition&lt;/strong&gt;: number - a partition number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset&lt;/strong&gt;: number - a message offset&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;listener&lt;/strong&gt;: &lt;a href=&#34;../ikafka_message_listener&#34;&gt;IKafkaMessageListener&lt;/a&gt; - a message listener&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;configure&#34;&gt;configure&lt;/h4&gt;
&lt;p&gt;Configures the component by passing configuration parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; configure(config: &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;ConfigParams&lt;/a&gt;): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt;: &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;ConfigParams&lt;/a&gt; - configuration parameters to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;connecttoadmin&#34;&gt;connectToAdmin&lt;/h4&gt;
&lt;p&gt;Connect admin client on demand.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; connectToAdmin(): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;createqueue&#34;&gt;createQueue&lt;/h4&gt;
&lt;p&gt;Creates a message queue.
If connection doesn&amp;rsquo;t support this function it exists without error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; createQueue(name: string): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - the name of the queue to be created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;deletequeue&#34;&gt;deleteQueue&lt;/h4&gt;
&lt;p&gt;Deletes a message queue.
If connection doesn&amp;rsquo;t support this function it exists without error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; deleteQueue(name: string): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - the name of the queue to be deleted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getconnection&#34;&gt;getConnection&lt;/h4&gt;
&lt;p&gt;Gets the connection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getConnection(): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - connection to a MySQL database&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getproducer&#34;&gt;getProducer&lt;/h4&gt;
&lt;p&gt;Gets the Kafka message producer object&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getProducer(): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - producer object&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isopen&#34;&gt;isOpen&lt;/h4&gt;
&lt;p&gt;Checks if the component is opened.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; isOpen(): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - True if the component has been opened and False otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;open&#34;&gt;open&lt;/h4&gt;
&lt;p&gt;Opens the component.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; open(correlationId: string): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;publish&#34;&gt;publish&lt;/h4&gt;
&lt;p&gt;Publish a message to a specified topic&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; publish(topic: string, messages: any[], options: any): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;topic&lt;/strong&gt;: string - a topic where the message will be placed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;messages&lt;/strong&gt;: any[] - a list of messages to be published&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;: any - publishing options&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;readqueuenames&#34;&gt;readQueueNames&lt;/h4&gt;
&lt;p&gt;Reads a list of registered queue names.
If connection doesn&amp;rsquo;t support this function returnes an empty list.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; readQueueNames(): Promise&amp;lt;string[]&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;string[]&amp;gt; - queue names.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;seek&#34;&gt;seek&lt;/h4&gt;
&lt;p&gt;Seek a message offset.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; seek(topic: string, groupId: string, partition: number, offset: number, listener: &lt;a href=&#34;../ikafka_message_listener&#34;&gt;IKafkaMessageListener&lt;/a&gt;): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;topic&lt;/strong&gt;: string - a topic name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;groupId&lt;/strong&gt;: string - (optional) a consumer group id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;partition&lt;/strong&gt;: number - a partition number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset&lt;/strong&gt;: number - a message offset&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;listener&lt;/strong&gt;: &lt;a href=&#34;../ikafka_message_listener&#34;&gt;IKafkaMessageListener&lt;/a&gt; - a message listener&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setreferences&#34;&gt;setReferences&lt;/h4&gt;
&lt;p&gt;Sets references to dependent components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; setReferences(references: &lt;a href=&#34;../../../commons/refer/ireferences&#34;&gt;IReferences&lt;/a&gt;): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;references&lt;/strong&gt;: &lt;a href=&#34;../../../commons/refer/ireferences&#34;&gt;IReferences&lt;/a&gt; - references to locate the component dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;subscribe&#34;&gt;subscribe&lt;/h4&gt;
&lt;p&gt;Subscribe to a topic&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; subscribe(topic: string, groupId: string, options: any, listener: &lt;a href=&#34;../ikafka_message_listener&#34;&gt;IKafkaMessageListener&lt;/a&gt;): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;topic&lt;/strong&gt;: string - a subject(topic) name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;groupId&lt;/strong&gt;: string - (optional) a consumer group id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;: any - subscription options&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;listener&lt;/strong&gt;: &lt;a href=&#34;../ikafka_message_listener&#34;&gt;IKafkaMessageListener&lt;/a&gt; - a message listener&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;unsubscribe&#34;&gt;unsubscribe&lt;/h4&gt;
&lt;p&gt;Unsubscribe from a previously subscribed topic&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; unsubscribe(topic: string, groupId: string, listener: &lt;a href=&#34;../ikafka_message_listener&#34;&gt;IKafkaMessageListener&lt;/a&gt;): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;topic&lt;/strong&gt;: string - a topic name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;groupId&lt;/strong&gt;: string - (optional) a consumer group id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;listener&lt;/strong&gt;: &lt;a href=&#34;../ikafka_message_listener&#34;&gt;IKafkaMessageListener&lt;/a&gt; - a message listener&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: KafkaConnection</title>
      <link>/node/kafka/connect/kafka_connection_resolver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/kafka/connect/kafka_connection_resolver/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../../../commons/refer/ireferenceable&#34;&gt;IReferenceable&lt;/a&gt;, &lt;a href=&#34;../../../commons/config/iconfigurable&#34;&gt;IConfigurable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;h4 id=&#34;configuration-parameters&#34;&gt;Configuration parameters&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;connection(s)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;discovery_key&lt;/strong&gt;: (optional) a key to retrieve the connection from &lt;a href=&#34;../../../components/connect/idiscovery&#34;&gt;IDiscovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;host&lt;/strong&gt;: host name or IP address&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;port&lt;/strong&gt;: port number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uri&lt;/strong&gt;: resource URI or connection string with all parameters in it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;credential(s)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;store_key&lt;/strong&gt;: (optional) a key to retrieve the credentials from &lt;a href=&#34;../../../components/auth/icredential_store&#34;&gt;ICredentialStore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username&lt;/strong&gt;: user name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password&lt;/strong&gt;: user password&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;*:discovery:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/connect/idiscovery&#34;&gt;IDiscovery&lt;/a&gt; services&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:credential-store:*:*:1.0&lt;/strong&gt; - (optional) credential stores to resolve credentials&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;_connectionresolver&#34;&gt;_connectionResolver&lt;/h4&gt;
&lt;p&gt;The connection resolver.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_connectionResolver&lt;/strong&gt;: &lt;a href=&#34;../../../components/connect/connection_resolver&#34;&gt;ConnectionResolver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_credentialresolver&#34;&gt;_credentialResolver&lt;/h4&gt;
&lt;p&gt;The connection resolver.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; &lt;strong&gt;_credentialResolver&lt;/strong&gt;: &lt;a href=&#34;../../../components/auth/credential_resolver&#34;&gt;CredentialResolver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;compose&#34;&gt;compose&lt;/h4&gt;
&lt;p&gt;Composes Kafka connection options from connection and credential parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; compose(correlationId: string, connections: &lt;a href=&#34;../../../components/connect/connection_params&#34;&gt;ConnectionParams[]&lt;/a&gt;, credential: &lt;a href=&#34;../../../components/auth/credential_params&#34;&gt;CredentialParams&lt;/a&gt;): Promise&amp;lt;any&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;connections&lt;/strong&gt;: &lt;a href=&#34;../../../components/connect/connection_params&#34;&gt;ConnectionParams[]&lt;/a&gt; - connection parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;credential&lt;/strong&gt;: &lt;a href=&#34;../../../components/auth/credential_params&#34;&gt;CredentialParams&lt;/a&gt; - credential parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;any&amp;gt; - resolved Kafka connection options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;configure&#34;&gt;configure&lt;/h4&gt;
&lt;p&gt;Configures the component by passing configuration parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; configure(config: &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;ConfigParams&lt;/a&gt;): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt;: &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;ConfigParams&lt;/a&gt; - configuration parameters to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resolve&#34;&gt;resolve&lt;/h4&gt;
&lt;p&gt;Resolves Kafka connection options from connection and credential parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; resolve(correlationId: string): Promise&amp;lt;any&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;any&amp;gt; - resolved Kafka connection options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setreferences&#34;&gt;setReferences&lt;/h4&gt;
&lt;p&gt;Sets references to dependent components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; setReferences(references: &lt;a href=&#34;../../../commons/refer/ireferences&#34;&gt;IReferences&lt;/a&gt;): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;references&lt;/strong&gt;: &lt;a href=&#34;../../../commons/refer/ireferences&#34;&gt;IReferences&lt;/a&gt; - references to locate the component dependencies.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: KafkaSubscription</title>
      <link>/node/kafka/connect/kafka_subscription/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/kafka/connect/kafka_subscription/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;topic&#34;&gt;topic&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;topic&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;groupid&#34;&gt;groupId&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;groupId&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;options&#34;&gt;options&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;options&lt;/strong&gt;: any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;handler&#34;&gt;handler&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;handler&lt;/strong&gt;: any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;listener&#34;&gt;listener&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;listener&lt;/strong&gt;: &lt;a href=&#34;../ikafka_message_listener&#34;&gt;IKafkaMessageListener&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
      </description>
    </item>
    
  </channel>
</rss>
