<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Core</title>
    <link>/node/data/core/</link>
    <description>Recent content in Core on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/node/data/core/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Node: IFilteredPageReader&lt;T&gt;</title>
      <link>/node/data/core/ifiltered_page_reader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/ifiltered_page_reader/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IFilteredPageReader interface is used by data processing components that can retrieve a page of data items through the use of a filter.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;getpagebyfilter&#34;&gt;getPageByFilter&lt;/h4&gt;
&lt;p&gt;Gets a page of data items using filter parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;getPageByFilter(correlationId: string, filter: &lt;a href=&#34;../../../commons/data/filter_params&#34;&gt;FilterParams&lt;/a&gt;, paging: &lt;a href=&#34;../../../commons/data/paging_params&#34;&gt;PagingParams&lt;/a&gt;, sort: &lt;a href=&#34;../../../commons/data/sort_params&#34;&gt;SortParams&lt;/a&gt;): Promise&amp;lt;&lt;a href=&#34;../../../commons/data/data_page&#34;&gt;DataPage&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filter&lt;/strong&gt;: &lt;a href=&#34;../../../commons/data/filter_params&#34;&gt;FilterParams&lt;/a&gt; - (optional) filter parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paging&lt;/strong&gt;: &lt;a href=&#34;../../../commons/data/paging_params&#34;&gt;PagingParams&lt;/a&gt; -  (optional) paging parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sort&lt;/strong&gt;: &lt;a href=&#34;../../../commons/data/sort_params&#34;&gt;SortParams&lt;/a&gt; - (optional) sort parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;&lt;a href=&#34;../../../commons/data/data_page&#34;&gt;DataPage&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt; - list of items&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IFilteredReader&lt;T&gt;</title>
      <link>/node/data/core/ifiltered_reader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/ifiltered_reader/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IFilteredReader interface is used by data processing components that can retrieve a list of data items through the use of a filter.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;getlistbyfilter&#34;&gt;getListByFilter&lt;/h4&gt;
&lt;p&gt;Gets a list of data items using filter parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;getListByFilter(correlationId: string, filter: &lt;a href=&#34;../../../commons/data/filter_params&#34;&gt;FilterParams&lt;/a&gt;, paging: &lt;a href=&#34;../../../commons/data/paging_params&#34;&gt;PagingParams&lt;/a&gt;, sort: &lt;a href=&#34;../../../commons/data/sort_params&#34;&gt;SortParams&lt;/a&gt;): &lt;a href=&#34;../../../commons/data/data_page&#34;&gt;DataPage&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filter&lt;/strong&gt;: &lt;a href=&#34;../../../commons/data/filter_params&#34;&gt;FilterParams&lt;/a&gt; - (optional) filter parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sort&lt;/strong&gt;: &lt;a href=&#34;../../../commons/data/sort_params&#34;&gt;SortParams&lt;/a&gt; - (optional) sort parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;T[]&amp;gt; - list of items&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IGetter&lt;T extends IIdentifiable&lt;K&gt;, K&gt;</title>
      <link>/node/data/core/igetter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/igetter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IGetter interface is used by data processing components that are capable of getting data items.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;getonebyid&#34;&gt;getOneById&lt;/h4&gt;
&lt;p&gt;Gets a data item by its unique id.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;getOneById(correlationId: string, id: K): Promise&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: K - id of the item to be retrieved.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;T&amp;gt; - returned item.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: ILoader&lt;T&gt;</title>
      <link>/node/data/core/iloader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/iloader/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ILoader interface is used by data processing components that load data items.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;load&#34;&gt;load&lt;/h4&gt;
&lt;p&gt;Loads data items.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;load(correlationId: string): Promise&amp;lt;T[]&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;T[]&amp;gt; - list of data items&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IPartialUpdater&lt;T, K&gt;</title>
      <link>/node/data/core/ipartial_updater/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/ipartial_updater/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IPartialUpdater interface is used by data processing components to update data items partially.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;updatepartially&#34;&gt;updatePartially&lt;/h4&gt;
&lt;p&gt;Updates only few selected fields in a data item.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;updatePartially(correlationId: string, id: K, data: &lt;a href=&#34;../../../commons/data/any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;): Promise&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: K - id of the data item to be updated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: &lt;a href=&#34;../../../commons/data/any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - map with fields to be updated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;T&amp;gt; - updated item&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IQuerablePageReader&lt;T&gt;</title>
      <link>/node/data/core/iquerable_page_reader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/iquerable_page_reader/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IQuerablePageReader interface is used by data processing components that can query a page of data items.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;getpagebyquery&#34;&gt;getPageByQuery&lt;/h4&gt;
&lt;p&gt;Gets a page of data items using a query string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;getPageByQuery(correlationId: string, query: string, paging: &lt;a href=&#34;../../../commons/data/paging_params&#34;&gt;PagingParams&lt;/a&gt;, sort: &lt;a href=&#34;../../../commons/data/sort_params&#34;&gt;SortParams&lt;/a&gt;): Promise&amp;lt;&lt;a href=&#34;../../../commons/data/data_page&#34;&gt;DataPage&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query&lt;/strong&gt;: string - (optional) query string&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paging&lt;/strong&gt;: &lt;a href=&#34;../../../commons/data/paging_params&#34;&gt;PagingParams&lt;/a&gt; - (optional) paging parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sort&lt;/strong&gt;: &lt;a href=&#34;../../../commons/data/sort_params&#34;&gt;SortParams&lt;/a&gt; - (optional) sorting parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;&lt;a href=&#34;../../../commons/data/data_page&#34;&gt;DataPage&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt; - list of items&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IQuerableReader&lt;T&gt;</title>
      <link>/node/data/core/iquerable_reader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/iquerable_reader/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IQuerableReader interface is used by data processing components that can query a list of data items.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;getlistbyquery&#34;&gt;getListByQuery&lt;/h4&gt;
&lt;p&gt;Gets a list of data items using a query string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;getListByQuery(correlationId: string, query: string, sort: &lt;a href=&#34;../../../commons/data/sort_params&#34;&gt;SortParams&lt;/a&gt;): Promise&amp;lt;T[]&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query&lt;/strong&gt;: string - (optional) query string&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sort&lt;/strong&gt;: &lt;a href=&#34;../../../commons/data/sort_params&#34;&gt;SortParams&lt;/a&gt; - (optional) sorting parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;T[]&amp;gt; - list of items&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: ISaver&lt;T&gt;</title>
      <link>/node/data/core/isaver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/isaver/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ISaver interface is used by data processing components that save data items.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;save&#34;&gt;save&lt;/h4&gt;
&lt;p&gt;Saves given data items.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;save(correlationId: string, items: T[]): Promise&amp;lt;void&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;items&lt;/strong&gt;: T[] - a list of items to save.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: ISetter&lt;T&gt;</title>
      <link>/node/data/core/isetter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/isetter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ISetter interface is used by data processing components that can set (create or update) data items.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;set&#34;&gt;set&lt;/h4&gt;
&lt;p&gt;Sets a data item. If the data item exists it updates it, otherwise it creates a new data item.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set(correlationId: string, item: T): Promise&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;item&lt;/strong&gt;: T - item to be set.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;T&amp;gt; - updated item&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IWriter&lt;T, K&gt;</title>
      <link>/node/data/core/iwriter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/data/core/iwriter/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IWriter interface is used by data processng components that can create, update and delete data items.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;create&#34;&gt;create&lt;/h4&gt;
&lt;p&gt;Creates a data item.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;create(correlationId: string, item: T): Promise&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;item&lt;/strong&gt;: T - item to be created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: T - created item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;update&#34;&gt;update&lt;/h4&gt;
&lt;p&gt;Updates a data item.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;update(correlationId: string, item: T): Promise&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;item&lt;/strong&gt;: T - item to be updated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;T&amp;gt; - updated item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;deletebyid&#34;&gt;deleteById&lt;/h4&gt;
&lt;p&gt;Updates a data item.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;deleteById(correlationId: string, id: K): Promise&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: K - id of the item to be deleted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;T&amp;gt; - deleted item.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
