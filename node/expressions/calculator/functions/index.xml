<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Functions</title>
    <link>/node/expressions/calculator/functions/</link>
    <description>Recent content in Functions on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/node/expressions/calculator/functions/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Node: DefaultFunctionCollection</title>
      <link>/node/expressions/calculator/functions/default_function_collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/calculator/functions/default_function_collection/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Extends&lt;/strong&gt;: &lt;a href=&#34;../function_collection&#34;&gt;FunctionCollection&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DefaultFunctionCollection class allows you to implement a list filled with standard functions.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructs this list and fills it with the standard functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;checkparamcount&#34;&gt;checkParamCount&lt;/h4&gt;
&lt;p&gt;Checks if params contains the correct number of function parameters (must be stored on the top of the params).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; checkParamCount(params: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt;, expectedParamCount: number): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt; - list of function parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expectedParamCount&lt;/strong&gt;: number - expected number of function parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getparameter&#34;&gt;getParameter&lt;/h4&gt;
&lt;p&gt;Gets a function&amp;rsquo;s parameter by it&amp;rsquo;s index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; getParameter(params: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt;, paramIndex: number): &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt; - list of function parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paramIndex&lt;/strong&gt;: number - index for the function parameter (0 for the first parameter).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt; - function&amp;rsquo;s parameter value.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: DelegatedFunction</title>
      <link>/node/expressions/calculator/functions/delegated_function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/calculator/functions/delegated_function/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DelegatedFunction class allows you to define a delegate to implement a function.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructs this function class with the specified parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(name: string, calculator: (params: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt;, variantOperations: &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;) =&amp;gt; Promise&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt;, context?: any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt; - name of this function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variantOperations&lt;/strong&gt;: &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;) =&amp;gt; Promise&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - function calculator delegate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;context&lt;/strong&gt;: any - context&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;name&#34;&gt;name&lt;/h4&gt;
&lt;p&gt;Function&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; name(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;retuns&lt;/strong&gt;: string - function&amp;rsquo;s name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;calculate&#34;&gt;calculate&lt;/h4&gt;
&lt;p&gt;Function&amp;rsquo;s calculation method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; calculate(params: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt;, variantOperations: &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;): Promise&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt; - an array with function parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variantOperations&lt;/strong&gt;: &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - variants operations manager.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - returned function&amp;rsquo;s result.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: FunctionCollection</title>
      <link>/node/expressions/calculator/functions/function_collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/calculator/functions/function_collection/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The FunctionCollection class allows you to implement a list of functions&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;length&#34;&gt;length&lt;/h4&gt;
&lt;p&gt;Gets a number of functions stored in the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; length(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;retuns&lt;/strong&gt;: number - number of stored functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;add&#34;&gt;add&lt;/h4&gt;
&lt;p&gt;Adds a new function to the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; add(func: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;func&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - array with function parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clear(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;findbyname&#34;&gt;findByName&lt;/h4&gt;
&lt;p&gt;Finds a function in the list by it&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; findByName(name: string): &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - function name to be found.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - function or &lt;em&gt;null&lt;/em&gt; if function was not found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;findindexbyname&#34;&gt;findIndexByName&lt;/h4&gt;
&lt;p&gt;Finds a function&amp;rsquo;s index in the list by it&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; findIndexByName(name: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - function name to be found.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - function&amp;rsquo;s index in the list or &lt;em&gt;-1&lt;/em&gt; if function was not found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Gets a function by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; get(index: number): &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - function&amp;rsquo;s index.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - retrieved function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getall&#34;&gt;getAll&lt;/h4&gt;
&lt;p&gt;Gets all functions stored in the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getAll(): &lt;a href=&#34;../ifunction&#34;&gt;IFunction[]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction[]&lt;/a&gt; - list with functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes a function by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; remove(index: number): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - index of the function to be removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;removebyname&#34;&gt;removeByName&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; removeByName(name: string): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - name of the function to be removed.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IFunction</title>
      <link>/node/expressions/calculator/functions/ifunction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/calculator/functions/ifunction/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IFunction is an interface for expression functions.&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;name&#34;&gt;name&lt;/h4&gt;
&lt;p&gt;Function&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;name(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;retuns&lt;/strong&gt;: string - function&amp;rsquo;s name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;calculate&#34;&gt;calculate&lt;/h4&gt;
&lt;p&gt;Function calculation method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;calculate(params: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt;, variantOperations: &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;): Promise&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: &lt;a href=&#34;../../../variants/variant&#34;&gt;Variant[]&lt;/a&gt; - array with function parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variantOperations&lt;/strong&gt;: &lt;a href=&#34;../../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - variants operations manager.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Promise&amp;lt;&lt;a href=&#34;../../../variants/variant&#34;&gt;Variant&lt;/a&gt;&amp;gt; - returned function&amp;rsquo;s result.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: IFunctionCollection</title>
      <link>/node/expressions/calculator/functions/ifunction_collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/calculator/functions/ifunction_collection/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;length&#34;&gt;length&lt;/h4&gt;
&lt;p&gt;Gets a number of functions stored in the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;length(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;retuns&lt;/strong&gt;: number - a number of stored functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;add&#34;&gt;add&lt;/h4&gt;
&lt;p&gt;Adds a new function to the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;add(func: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;func&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - an array with function parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears the collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;findbyname&#34;&gt;findByName&lt;/h4&gt;
&lt;p&gt;Finds function in the list by it&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;findByName(name: string): &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - The function name to be found.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - A function or &lt;em&gt;null&lt;/em&gt; if function was not found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;findindexbyname&#34;&gt;findIndexByName&lt;/h4&gt;
&lt;p&gt;Finds function index in the list by it&amp;rsquo;s name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;findIndexByName(name: string): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - The function name to be found.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - Function index in the list or &lt;em&gt;-1&lt;/em&gt; if function was not found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Get a function by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get(index: number): &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - a function index.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction&lt;/a&gt; - a retrieved function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getall&#34;&gt;getAll&lt;/h4&gt;
&lt;p&gt;Get all functions stores in the collection&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;getAll(): &lt;a href=&#34;../ifunction&#34;&gt;IFunction[]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../ifunction&#34;&gt;IFunction[]&lt;/a&gt; - a list with functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes a function by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;remove(index: number): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - a index of the function to be removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;removebyname&#34;&gt;removeByName&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;removeByName(name: string): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string -The function name to be removed.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
