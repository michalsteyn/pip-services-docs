<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ IO</title>
    <link>/node/expressions/io/</link>
    <description>Recent content in IO on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/node/expressions/io/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Node: IScanner</title>
      <link>/node/expressions/io/iscanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/io/iscanner/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IScanner interface defines a scanner that can read and unread characters and count lines.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;column&lt;/h4&gt;
&lt;p&gt;Gets the column in the current line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;column(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - Column in the current line in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;line&lt;/h4&gt;
&lt;p&gt;Gets the current line number&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;line(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - Current line number in the stream&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;peek(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - Character from the top of the stream or &lt;em&gt;-1&lt;/em&gt; if the stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekcolumn&#34;&gt;peekColumn&lt;/h4&gt;
&lt;p&gt;Gets the next character column number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;peekColumn(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - Next character column number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekline&#34;&gt;peekLine&lt;/h4&gt;
&lt;p&gt;Gets the next character line number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;peekLine(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - Next character line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;read(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - Read character or &lt;em&gt;-1&lt;/em&gt; if the stream is processed to the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reset&#34;&gt;reset&lt;/h4&gt;
&lt;p&gt;Resets a scanner to the initial position.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;reset(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unread&#34;&gt;unread&lt;/h4&gt;
&lt;p&gt;Puts a character back into the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;unread(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unreadmany&#34;&gt;unreadMany&lt;/h4&gt;
&lt;p&gt;Pushes the specified number of characters to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;unreadMany(count: number): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: number - number of characcted to be pushed back.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: StringScanner</title>
      <link>/node/expressions/io/string_scanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/io/string_scanner/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../iscanner&#34;&gt;IScanner&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates an instance of this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(content: string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;: string - A text content to be read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;eof&#34;&gt;Eof&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; Eof: number = -1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;column&lt;/h4&gt;
&lt;p&gt;Gets the column in the current line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; column(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - The column in the current line in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;line&lt;/h4&gt;
&lt;p&gt;Gets the current line number&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; line(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - The current line number in the stream&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; peek(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - A character from the top of the stream or &lt;em&gt;-1&lt;/em&gt; if stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekcolumn&#34;&gt;peekColumn&lt;/h4&gt;
&lt;p&gt;Gets the next character column number&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; peekColumn(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - The next character column number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekline&#34;&gt;peekLine&lt;/h4&gt;
&lt;p&gt;Gets the next character line number&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; peekLine(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - The next character line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;read&lt;/h4&gt;
&lt;p&gt;Reads character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; read(): number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: number - A read character or &lt;em&gt;-1&lt;/em&gt; if stream processed to the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reset&#34;&gt;reset&lt;/h4&gt;
&lt;p&gt;Resets scanner to the initial position&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; reset(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unread&#34;&gt;unread&lt;/h4&gt;
&lt;p&gt;Puts the one character back into the stream stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; unread(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unreadmany&#34;&gt;unreadMany&lt;/h4&gt;
&lt;p&gt;Pushes the specified number of characters to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; unreadMany(count: number): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: number - A number of characcted to be pushed back.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
