<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Mustache</title>
    <link>/node/expressions/mustache/</link>
    <description>Recent content in Mustache on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/node/expressions/mustache/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Node: Parsers</title>
      <link>/node/expressions/mustache/parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/mustache/parsers/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;constants&#34;&gt;Constants&lt;/h3&gt;
&lt;h4 id=&#34;mustacheerrorcodemustache_error_code&#34;&gt;&lt;a href=&#34;mustache_error_code&#34;&gt;MustacheErrorCode&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;General syntax errors.&lt;/p&gt;
&lt;h4 id=&#34;mustachelexicalstatemustache_lexical_state&#34;&gt;&lt;a href=&#34;mustache_lexical_state&#34;&gt;MustacheLexicalState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines states in Mustache lexical analysis.&lt;/p&gt;
&lt;h4 id=&#34;mustachetokentypemustache_token_type&#34;&gt;&lt;a href=&#34;mustache_token_type&#34;&gt;MustacheTokenType&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines types of Mustache tokens.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;mustacheparsermustache_parser&#34;&gt;&lt;a href=&#34;mustache_parser&#34;&gt;MustacheParser&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements an Mustache parser.&lt;/p&gt;
&lt;h4 id=&#34;mustachetokenmustache_token&#34;&gt;&lt;a href=&#34;mustache_token&#34;&gt;MustacheToken&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines a Mustache token holder.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Node: Tokenizers</title>
      <link>/node/expressions/mustache/tokenizers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/mustache/tokenizers/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;mustachespecialstatemustache_special_state&#34;&gt;&lt;a href=&#34;mustache_special_state&#34;&gt;MustacheSpecialState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a quote string state object for Mustache templates.&lt;/p&gt;
&lt;h4 id=&#34;mustachetokenizermustache_tokenizer&#34;&gt;&lt;a href=&#34;mustache_tokenizer&#34;&gt;MustacheTokenizer&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Creates a Mustache tokenizer.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Node: MustacheException</title>
      <link>/node/expressions/mustache/mustache_exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/mustache/mustache_exception/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Extends&lt;/strong&gt;: &lt;a href=&#34;../../../commons/errors/bad_request_exception&#34;&gt;BadRequestException&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheException class defines an exception that can e thrown by a Mustache template.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the MustacheException class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(correlationId: string, code: string, message: string, line: number, column: number)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - human-readable message&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: number - line number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;column&lt;/strong&gt;: number - column number&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Node: MustacheTemplate</title>
      <link>/node/expressions/mustache/mustache_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/node/expressions/mustache/mustache_template/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheTemplate class allows you to implement a Mustache template class.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructs this class and assigns a mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; constructor(template?: string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;template&lt;/strong&gt;: string - mustache template.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;autovariables&#34;&gt;autoVariables&lt;/h4&gt;
&lt;p&gt;Gets the flag to turn on auto-creation of variables for the Mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; autoVariables(): boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: boolean - the flag to turn on auto creation of variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sets the flag to turn on auto creation of variables for the Mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; autoVariables(value: boolean)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: boolean - flag to turn on auto-creation of variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;defaultvariables&#34;&gt;defaultVariables&lt;/h4&gt;
&lt;p&gt;The list with default variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; defaultVariables(): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - default variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;initialtokens&#34;&gt;initialTokens&lt;/h4&gt;
&lt;p&gt;List of original mustache tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; initialTokens(): &lt;a href=&#34;../parsers/mustache_token&#34;&gt;MustacheToken[]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../parsers/mustache_token&#34;&gt;MustacheToken[]&lt;/a&gt; - Mustache tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;originaltokens&#34;&gt;originalTokens&lt;/h4&gt;
&lt;p&gt;Lists the original tokens&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; originalTokens(): &lt;a href=&#34;../../tokenizers/token&#34;&gt;Token[]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;Token[]&lt;/a&gt; - original tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; originalTokens(value: Token[])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;Token[]&lt;/a&gt; - original tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resulttokens&#34;&gt;resultTokens&lt;/h4&gt;
&lt;p&gt;The list of processed Mustache tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; resultTokens(): &lt;a href=&#34;../parsers/mustache_token&#34;&gt;MustacheToken[]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../parsers/mustache_token&#34;&gt;MustacheToken[]&lt;/a&gt; - processed Mustache tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Cleans up this calculator.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; clear(): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;createvariables&#34;&gt;createVariables&lt;/h4&gt;
&lt;p&gt;Populates the specified variables list with variables obtained from a parsed Mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; createVariables(variables: any): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: any - The list of variables to be populated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluate&#34;&gt;evaluate&lt;/h4&gt;
&lt;p&gt;Evaluates this Mustache template using default variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; evaluate(): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - evaluated template.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluatewithvariables&#34;&gt;evaluateWithVariables&lt;/h4&gt;
&lt;p&gt;Evaluates this Mustache using specified variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; evaluateWithVariables(variables: any): string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: any - collection of variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - evaluated template&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getvariable&#34;&gt;getVariable&lt;/h4&gt;
&lt;p&gt;Gets a variable value from the collection of variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; getVariable(variables: any, name: string): any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: any - collection of variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - variable name to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: any - variable value or &lt;em&gt;undefined&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
