<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Data</title>
    <link>/python/commons/data/</link>
    <description>Recent content in Data on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/python/commons/data/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Python: AnyValue</title>
      <link>/python/commons/data/any_value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/any_value/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AnyValue class provides a cross-language implementation of a dynamic object that can hold a value of any type. In addition, it provides methods to convert the stored value to different types, such as string or integer.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the object and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AnyValue(value: Any = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - (optional) value to initialize this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;value&#34;&gt;value&lt;/h4&gt;
&lt;p&gt;The value stored by this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;value&lt;/strong&gt;: Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clone(): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - a clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equals&#34;&gt;equals&lt;/h4&gt;
&lt;p&gt;Compares this object value to specified specified value.
When direct comparison gives negative results it tries
to compare values as strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;equals(obj: Any): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: Any - the value to be compared with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true when objects are equal and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equals_as_type&#34;&gt;equals_as_type&lt;/h4&gt;
&lt;p&gt;Compares this object value to specified specified value.
When a direct comparison gives negative results it converts
values to type specified by type code and compares them again. &lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#to_type&#34;&gt;TypeConverter.to_type&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;equals_as_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, obj: Any): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the value to be compared with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: Any - the args to be compared with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - true when objects are equal and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_srray&#34;&gt;get_as_srray&lt;/h4&gt;
&lt;p&gt;Converts object value into an AnyArray or returns empty AnyArray if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array/#from_value&#34;&gt;AnyValueArray.from_value&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_array(): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyArray value or empty AnyArray if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_boolean&#34;&gt;get_as_boolean&lt;/h4&gt;
&lt;p&gt;Converts object value into a boolean or returns false if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_boolean(): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - string value or false if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_boolean_with_default&#34;&gt;get_as_boolean_with_default&lt;/h4&gt;
&lt;p&gt;Converts object value into a boolean or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#to_boolean_with_default&#34;&gt;BooleanConverter.to_boolean_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_boolean_with_default(default_value: bool): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: bool - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - boolean value or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_datetime&#34;&gt;get_as_datetime&lt;/h4&gt;
&lt;p&gt;Converts object value into a Date or returns current date if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_datetime(): datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: datetime - Date value or current date if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_datetime_with_default&#34;&gt;get_as_datetime_with_default&lt;/h4&gt;
&lt;p&gt;Converts object value into a Date or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#to_datetime_with_default&#34;&gt;DateTimeConverter.to_datetime_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_datetime_with_default(default_value: datetime): datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: datetime - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: datetime - datetime value or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_double&#34;&gt;get_as_double&lt;/h4&gt;
&lt;p&gt;Converts object value into a double or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_double(): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - double value or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_double_with_default&#34;&gt;get_as_double_with_default&lt;/h4&gt;
&lt;p&gt;Converts object value into a double or returns default value if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#to_double_with_default&#34;&gt;DoubleConverter.to_double_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to_double_with_default(default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - double value or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_float&#34;&gt;get_as_float&lt;/h4&gt;
&lt;p&gt;Converts object value into a float or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_float(): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_float_with_default&#34;&gt;get_as_float_with_default&lt;/h4&gt;
&lt;p&gt;Converts object value into a float or returns default value if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#to_float_with_default&#34;&gt;FloatConverter.to_float_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_float_with_default(default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_integer&#34;&gt;get_as_integer&lt;/h4&gt;
&lt;p&gt;Converts object value into an integer or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_integer(): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_integer_with_default&#34;&gt;get_as_integer_with_default&lt;/h4&gt;
&lt;p&gt;Converts object value into a integer or returns default value if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#to_integer_with_default&#34;&gt;IntegerConverter.to_integer_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_integer_with_default(default_value: int): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: int - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int -  integer value or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_long&#34;&gt;get_as_long&lt;/h4&gt;
&lt;p&gt;Converts object value into a long or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_long(): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float -  long value or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_long_with_default&#34;&gt;get_as_long_with_default&lt;/h4&gt;
&lt;p&gt;Converts object value into a long or returns default value if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#to_long_with_default&#34;&gt;LongConverter.to_long_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_long_with_default(default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float -  long value or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_map&#34;&gt;get_as_map&lt;/h4&gt;
&lt;p&gt;Converts object value into AnyMap or returns empty AnyMap if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../any_value_map/#from_value&#34;&gt;AnyValueMap.from_value&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_map(): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; -  AnyMap value or empty AnyMap if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_boolean&#34;&gt;get_as_nullable_boolean&lt;/h4&gt;
&lt;p&gt;Converts object value into a boolean or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#tonullableboolean&#34;&gt;BooleanConverter.toNullableBoolean&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_boolean(): Optional[bool]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[bool] - boolean value or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_datetime&#34;&gt;get_as_nullable_datetime&lt;/h4&gt;
&lt;p&gt;Converts object value into a Date or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#to_nullable_datetime&#34;&gt;DateTimeConverter.to_nullable_datetime&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_datetime(): Optional[datetime]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[datetime] - Date value or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_double&#34;&gt;get_as_nullable_double&lt;/h4&gt;
&lt;p&gt;Converts object value into a double or returns None if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#to_nullable_double&#34;&gt;DoubleConverter.to_nullable_double&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_double(): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - double value or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_float&#34;&gt;get_as_nullable_float&lt;/h4&gt;
&lt;p&gt;Converts object value into a float or returns None if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#to_nullable_float&#34;&gt;FloatConverter.to_nullable_float&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_float(): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - float value or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_integer&#34;&gt;get_as_nullable_integer&lt;/h4&gt;
&lt;p&gt;Converts object value into an integer or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#to_nullable_integer&#34;&gt;IntegerConverter.to_nullable_integer&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_integer(): Optional[int]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[int] - integer value or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_long&#34;&gt;get_as_nullable_long&lt;/h4&gt;
&lt;p&gt;Converts object value into a long or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#to_nullable_long&#34;&gt;LongConverter.to_nullable_long&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_long(): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - long value or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_string&#34;&gt;get_as_nullable_string&lt;/h4&gt;
&lt;p&gt;Converts object value into a string or returns None if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#to_nullable_string&#34;&gt;StringConverter.to_nullable_string&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_string(): Optional[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[str] - string value or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_type&#34;&gt;get_as_nullable_type&lt;/h4&gt;
&lt;p&gt;Converts object value into a value defined by specied typecode.
If conversion is not possible it returns None.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#to_nullable_type&#34;&gt;TypeConverter.to_nullable_type&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;): Optional[Any]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[Any] - value defined by the typecode or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_object&#34;&gt;get_as_object&lt;/h4&gt;
&lt;p&gt;Gets the value stored in this object without any conversion.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_object(): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - the object value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_string&#34;&gt;get_as_string&lt;/h4&gt;
&lt;p&gt;Converts object value into a string or returns &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_string(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - string value or &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_string_with_default&#34;&gt;get_as_string_with_default&lt;/h4&gt;
&lt;p&gt;Converts object value into a string or returns default value if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_string_with_default(default_value: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: str - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: srt - string value or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_type&#34;&gt;get_as_type&lt;/h4&gt;
&lt;p&gt;Converts object args into a args defined by specied typecode.
If conversion is not possible it returns default args for the specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - args defined by the typecode or type default args if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_type_with_default&#34;&gt;get_as_type_with_default&lt;/h4&gt;
&lt;p&gt;Converts object value into a value defined by specied typecode.
If conversion is not possible it returns default value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_type_with_default(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, default_value: Any): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: Any - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - value defined by the typecode or type default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_type_code&#34;&gt;get_type_code&lt;/h4&gt;
&lt;p&gt;Gets type code for the value stored in this object.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#to_type_code&#34;&gt;TypeConverter.to_type_code&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_type_code(): &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - type code of the object value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set_as_object&#34;&gt;set_as_object&lt;/h4&gt;
&lt;p&gt;Sets a new value for this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set_as_object(value: Any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - the new object value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;to_string&#34;&gt;to_string&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#tostring&#34;&gt;StringConverter.toString&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to_string(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;AnyValue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_integer&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# Result: 123&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Result: &amp;#34;123.456&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_float&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# Result: 123.456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: AnyValueArray</title>
      <link>/python/commons/data/any_value_array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/any_value_array/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;, list&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AnyValueArray class provides a cross-language implementation of a dynamic array object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the array and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AnyValueArray(values: Sequence[Any] = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;:  Sequence[Any] - (optional) values to initialize this array.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;appends&#34;&gt;appends&lt;/h4&gt;
&lt;p&gt;Appends new elements to this array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;appends(elements: List[Any])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;elements&lt;/strong&gt;: List[Any] - a list of elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears this array by removing all its elements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clone(): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - a clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;contains&#34;&gt;contains&lt;/h4&gt;
&lt;p&gt;Checks if this array contains a value.
The check uses direct comparison between elements and the specified value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;contains(value: Any): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - a value to be checked&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if this array contains the value or false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;contains_as_type&#34;&gt;contains_as_type&lt;/h4&gt;
&lt;p&gt;Checks if this array contains a value.
The check before comparison converts elements and the value to type specified by type code.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#to_type&#34;&gt;TypeConverter.to_type&lt;/a&gt;, &lt;a href=&#34;../../convert/type_converter/#to_nullable_type&#34;&gt;TypeConverter.to_nullable_type&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;contains_as_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, value: Any): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - a type code that defines a type to convert values before comparison&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - a value to be checked&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if this array contains the value or false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Gets an array element specified by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get(index: int): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - the value of the array element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_array&#34;&gt;get_as_array&lt;/h4&gt;
&lt;p&gt;Converts array element into an AnyValueArray or returns empty AnyValueArray if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_array(index: int): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or empty AnyValueArray if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_array_with_default&#34;&gt;get_as_array_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into an AnyValueArray or returns default value if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_array_with_default(index: int, default_value: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_boolean&#34;&gt;get_as_boolean&lt;/h4&gt;
&lt;p&gt;Converts array element into a boolean or returns false if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_boolean(index: int): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - bool value ot the element or false if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_boolean_with_default&#34;&gt;get_as_boolean_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into a boolean or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#to_boolean_with_default&#34;&gt;BooleanConverter.to_boolean_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_boolean_with_default(index: int, default_value: bool): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: bool - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - boolean value ot the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_datetime&#34;&gt;get_as_datetime&lt;/h4&gt;
&lt;p&gt;Converts array element into a Date or returns the current date if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_datetime(index: int): datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: datetime - date value ot the element or the current date if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_datetime_with_default&#34;&gt;get_as_datetime_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into a Date or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#to_datetime_with_default&#34;&gt;DateTimeConverter.to_datetime_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_datetime_with_default(index: int, default_value: datetime): datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: datetime - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: datetime - date value ot the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_double&#34;&gt;get_as_double&lt;/h4&gt;
&lt;p&gt;Converts array element into a double or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_double(index: int): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - double value ot the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_double_with_default&#34;&gt;get_as_double_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into a double or returns default value if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_double_with_default(index: int, default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - double value ot the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_double&#34;&gt;get_as_nullable_double&lt;/h4&gt;
&lt;p&gt;Converts array element into a double or returns None if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_double(index: int): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - double value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_float&#34;&gt;get_as_float&lt;/h4&gt;
&lt;p&gt;Converts array element into a float or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_float(index: int): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value ot the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_float_with_default&#34;&gt;get_as_float_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into a float or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#to_float_with_default&#34;&gt;FloatConverter.to_float_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_float_with_default(index: int, default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - number value ot the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_integer&#34;&gt;get_as_integer&lt;/h4&gt;
&lt;p&gt;Converts array element into an integer or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_integer(index: int): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value ot the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_integer_with_default&#34;&gt;get_as_integer_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into an integer or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#to_integer_with_default&#34;&gt;IntegerConverter.to_integer_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_integer_with_default(index: int, default_value: int): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: int - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value ot the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_long&#34;&gt;get_as_long&lt;/h4&gt;
&lt;p&gt;Converts array element into a long or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_long(index: int): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - long value ot the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_long_with_default&#34;&gt;get_as_long_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into a long or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/LongConverter/#to_long_with_default&#34;&gt;LongConverter.to_long_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_long_with_default(index: int, default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - long value ot the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_map&#34;&gt;get_as_map&lt;/h4&gt;
&lt;p&gt;Converts array element into an AnyValueMap or returns empty AnyValueMap if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#from_value&#34;&gt;AnyValueMap.from_value&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_map(index: int): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or empty AnyValueMap if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_map_with_default&#34;&gt;get_as_map_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into an AnyValueMap or returns default value if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_map_with_default(index: int, default_value: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_array&#34;&gt;get_as_nullable_array&lt;/h4&gt;
&lt;p&gt;Converts array element into an AnyValueArray or returns None if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_array(index: int): Optional[&lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[&lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;] - AnyValueArray value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_boolean&#34;&gt;get_as_nullable_boolean&lt;/h4&gt;
&lt;p&gt;Converts array element into a boolean or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../converter/boolean_converter/#to_nullable_boolean&#34;&gt;BooleanConverter.to_nullable_boolean&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_boolean(index: int): Optional[bool]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[bool] - boolean value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_datetime&#34;&gt;get_as_nullable_datetime&lt;/h4&gt;
&lt;p&gt;Converts array element into a Date or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../converter/date_time_converter/#to_nullable_datetime&#34;&gt;DateTimeConverter.to_nullable_datetime&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_datetime(index: int): Optional[datetime]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[datetime] - datetime value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_double-1&#34;&gt;get_as_nullable_double&lt;/h4&gt;
&lt;p&gt;Converts array element into a double or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#to_nullable_double&#34;&gt;DoubleConverter.to_nullable_double&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_double(index: int): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - double value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_float&#34;&gt;get_as_nullable_float&lt;/h4&gt;
&lt;p&gt;Converts array element into a float or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#to_nullable_float&#34;&gt;FloatConverter.to_nullable_float&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_float(index: int): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - float value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_integer&#34;&gt;get_as_nullable_integer&lt;/h4&gt;
&lt;p&gt;Converts array element into a float or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#to_nullable_integer&#34;&gt;IntegerConverter.to_nullable_integer&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_integer(index: int): Optional[int]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[int] - integer value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_long&#34;&gt;get_as_nullable_long&lt;/h4&gt;
&lt;p&gt;Converts array element into a long or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#to_nullable_long&#34;&gt;LongConverter.to_nullable_long&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_long(index: int): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - long value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_map&#34;&gt;get_as_nullable_map&lt;/h4&gt;
&lt;p&gt;Converts array element into a long or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#from_value&#34;&gt;AnyValueMap.from_value&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_map(index: int): Optional[&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;] - AnyValueMap value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_string&#34;&gt;get_as_nullable_string&lt;/h4&gt;
&lt;p&gt;Converts array element into a string or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#to_nullable_string&#34;&gt;StringConverter.to_nullable_string&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_string(index: int): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - string value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_type&#34;&gt;get_as_nullable_type&lt;/h4&gt;
&lt;p&gt;Converts array element into a value defined by specied typecode.
If conversion is not possible it returns None.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#to_nullable_type&#34;&gt;TypeConverter.to_nullable_type&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, index: int): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: number - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - element value defined by the typecode or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_object&#34;&gt;get_as_object&lt;/h4&gt;
&lt;p&gt;Gets the value stored in array element without any conversions.
When element index is not defined it returns the entire array value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_object(index: int = None): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - (optional) an index of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - the element value or value of the array when index is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_string&#34;&gt;get_as_string&lt;/h4&gt;
&lt;p&gt;Converts array element into a string or returns &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_string(index: int): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int = undefined - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - string value ot the element or &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_string_with_default&#34;&gt;get_as_string_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into a string or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#to_string_with_default&#34;&gt;StringConverter.to_string_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_string_with_default(index: int, default_value: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: str - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - string value ot the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_type&#34;&gt;get_as_type&lt;/h4&gt;
&lt;p&gt;Converts array element into a value defined by specied typecode.
If conversion is not possible it returns default value for the specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, index: int): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - element value defined by the typecode or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_type_with_default&#34;&gt;get_as_type_with_default&lt;/h4&gt;
&lt;p&gt;Converts array element into a value defined by a specied typecode.
If conversion is not possible it returns default value for the specified type.&lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#to_type_with_default&#34;&gt;TypeConverter.to_type_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_type_with_default(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, index: int, default_value: Any): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: Any - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - element value defined by the typecode or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_value&#34;&gt;get_as_value&lt;/h4&gt;
&lt;p&gt;Converts array element into an AnyValue or returns an empty AnyValue if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;, &lt;a href=&#34;../any_value/#constructors&#34;&gt;AnyValues.constructors&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_value(index: int): &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; - AnyValue value of the element or empty AnyValue if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;put&#34;&gt;put&lt;/h4&gt;
&lt;p&gt;Puts a new value into array element specified by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;put(index: int, value: Any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of the element to put.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - a new value for array element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes an array element specified by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;remove(index: int)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - an index of the element to remove.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set_as_object&#34;&gt;set_as_object&lt;/h4&gt;
&lt;p&gt;Sets a new value to array element specified by its index.
When the index is not defined, it resets the entire array value.
See &lt;a href=&#34;../../convert/array_converter/#to_array&#34;&gt;ArrayConverter.to_array&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set_as_object(index: int, value: Any = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - (optional) an index of the element to set.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - a new element or array value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;to_string&#34;&gt;to_string&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a comma-separated list of string representations of individual elements as
&lt;em&gt;&amp;ldquo;value1,value2,value3&amp;rdquo;&lt;/em&gt;.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#to_string&#34;&gt;StringConverter.to_string&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to_string(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_string&#34;&gt;from_string&lt;/h4&gt;
&lt;p&gt;Splits a specified string into elements using a separator and assigns
the elements to a newly created AnyValueArray.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_string(values: str, separator: str, removeDuplicates: bool = False): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: str - a string value to be split and assigned to AnyValueArray.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;separator&lt;/strong&gt;: str - a separator to split the string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;removeDuplicates&lt;/strong&gt;: bool = false - (optional) true to remove duplicated elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - a newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_value&#34;&gt;from_value&lt;/h4&gt;
&lt;p&gt;Splits a specified string into elements using a separator and assigns
the elements to a newly created AnyValueArray.&lt;br&gt;
See &lt;a href=&#34;../../convert/array_converter/#to_nullable_array&#34;&gt;ArrayConverter.to_nullable_array&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_value(value: Any): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: Any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - a newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_values&#34;&gt;from_values&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueArray from a list of values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_values(*values: Any): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: Any - a list of values to initialize the created AnyValueArray&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - a newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;to_string-1&#34;&gt;to_string&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a comma-separated list of string representations of individual elements as
&lt;em&gt;&amp;ldquo;value1,value2,value3&amp;rdquo;&lt;/em&gt;.&lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#to_string&#34;&gt;StringConverter.to_string&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to_string(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;AnyValueArray&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2018-01-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;])&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_boolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# Result: true&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_integer&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# Result: 123&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_float&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# Result: 123.456&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_datetime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Result: datetime.datetime(2018,0,1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter-1&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: AnyValueMap</title>
      <link>/python/commons/data/any_value_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/any_value_map/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;, dict&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AnyValueMap class provides a cross-language implementation of a dynamic map (dictionary) object that can hold values of any type. In addition, it provides several methods to convert the stored values to different types, such as boolean, integer or datetime.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AnyValueMap(values: Any = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: Any = None - (optional) values to initialize this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;append(map: Any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: Any - a map with elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears this map by removing all its elements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clone(): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - a clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Gets a map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get(key: str): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - the value of the map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_array&#34;&gt;get_as_array&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueArray or returns empty AnyValueArray if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;, &lt;a href=&#34;../any_value_array/#from_value&#34;&gt;AnyValueArray.from_value&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_array(key: str): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or empty AnyValueArray if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_array_with_default&#34;&gt;get_as_array_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueArray or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_array_with_default(key: str, default_value: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_boolean&#34;&gt;get_as_boolean&lt;/h4&gt;
&lt;p&gt;Converts map element into a boolean or returns false if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_boolean(key: str): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - value of the element or false if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_boolean_with_default&#34;&gt;get_as_boolean_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a boolean or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#to_boolean_with_default&#34;&gt;BooleanConverter.to_boolean_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_boolean_with_default(key: str, default_value: bool): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: bool - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - boolean value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_datetime&#34;&gt;get_as_datetime&lt;/h4&gt;
&lt;p&gt;Converts map element into a Date or returns the current date if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_datetime(key: str): datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: datetime - Date value of the element or the current date if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_datetime_with_default&#34;&gt;get_as_datetime_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a Date or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#to_datetime_with_default&#34;&gt;DateTimeConverter.to_datetime_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_datetime_with_default(key: str, default_value: datetime): datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: datetime - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: datetime - Date value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_double&#34;&gt;get_as_double&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_double(key: str): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - double value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_double_with_default&#34;&gt;get_as_double_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#to_double_with_default&#34;&gt;DoubleConverter.to_double_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_double_with_default(key: str, default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - double value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_float&#34;&gt;get_as_float&lt;/h4&gt;
&lt;p&gt;Converts map element into a float or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_float(key: str): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_float_with_default&#34;&gt;get_as_float_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a flot or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/float_converter/#to_float_with_default&#34;&gt;FloatConverter.to_float_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_float_with_default(key: str, default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - flot value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_integer&#34;&gt;get_as_integer&lt;/h4&gt;
&lt;p&gt;Converts map element into an integer or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_integer(key: str): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_integer_with_default&#34;&gt;get_as_integer_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into an integer or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#to_integer_with_default&#34;&gt;IntegerConverter.to_integer_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_integer_with_default(key: str, default_value: int): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: int - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_long&#34;&gt;get_as_long&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns 0 if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#to_integer_with_default&#34;&gt;IntegerConverter.to_integer_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_long(key: str): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - long value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_long_with_default&#34;&gt;get_as_long_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#to_long_with_default&#34;&gt;LongConverter.to_long_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_long_with_default(key: str, default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - long value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_map&#34;&gt;get_as_map&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns empty AnyValueMap if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#to_long_with_default&#34;&gt;LongConverter.to_long_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_map(key: str): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or empty AnyValueMap if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_map_with_default&#34;&gt;get_as_map_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns default value if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_map_with_default(key: str, default_value: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_array&#34;&gt;get_as_nullable_array&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueArray or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#from_value&#34;&gt;AnyValueMap.from_value&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_array(key: str): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueArray value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_boolean&#34;&gt;get_as_nullable_boolean&lt;/h4&gt;
&lt;p&gt;Converts map element into a boolean or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/boolean_converter/#to_nullable_boolean&#34;&gt;BooleanConverter.to_nullable_boolean&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_boolean(key: str): Optional[bool]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[bool] - boolean value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_datetime&#34;&gt;get_as_nullable_datetime&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/date_time_converter/#to_nullable_datetime&#34;&gt;DateTimeConverter.to_nullable_datetime&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_datetime(key: str): Optional[datetime]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[datetime] - Date value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_double&#34;&gt;get_as_nullable_double&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/double_converter/#to_nullable_double&#34;&gt;DoubleConverter.to_nullable_double&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_double(key: str): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - double value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_float&#34;&gt;get_as_nullable_float&lt;/h4&gt;
&lt;p&gt;Converts map element into a float or returns None if conversion is not possible.
See &lt;a href=&#34;../../convert/float_converter/#to_nullable_float&#34;&gt;FloatConverter.to_nullable_float&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_float(key: str): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - float value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_integer&#34;&gt;get_as_nullable_integer&lt;/h4&gt;
&lt;p&gt;Converts map element into an integer or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/integer_converter/#to_nullable_integer&#34;&gt;IntegerConverter.to_nullable_integer&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_integer(key: str): Optional[int]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[int] - integer value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_long&#34;&gt;get_as_nullable_long&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../../convert/long_converter/#to_nullable_long&#34;&gt;LongConverter.to_nullable_long&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_long(key: str): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - long value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_map&#34;&gt;get_as_nullable_map&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns None if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_map(key: str): Optional[&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;] - AnyValueMap value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_string&#34;&gt;get_as_nullable_string&lt;/h4&gt;
&lt;p&gt;Converts map element into a string or returns None if conversion is not possible. &lt;br&gt;
See &lt;a href=&#34;../../convert/string_converter/#to_nullable_string&#34;&gt;StringConverter.to_nullable_string&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_string(key: str): Optional[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[str] - string value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_type&#34;&gt;get_as_nullable_type&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by specied typecode.
If conversion is not possible it returns None.  &lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#to_nullable_type&#34;&gt;TypeConverter.to_nullable_type&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: str): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - element value defined by the typecode or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_object&#34;&gt;get_as_object&lt;/h4&gt;
&lt;p&gt;Gets the value stored in map element without any conversions.
When element key is not defined it returns the entire map value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_object(key: str = None): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - (optional) a key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - the element value or value of the map when index is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_string&#34;&gt;get_as_string&lt;/h4&gt;
&lt;p&gt;Converts map element into a string or returns &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_string(key: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - string value of the element or &lt;em&gt;&amp;quot;&amp;quot;&lt;/em&gt; if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_string_with_default&#34;&gt;get_as_string_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a string or returns default value if conversion is not possible.
See &lt;a href=&#34;../../convert/string_converter/#to_string_with_default&#34;&gt;StringConverter.to_string_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_string_with_default(key: str, default_value: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: str - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - string value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_type&#34;&gt;get_as_type&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by a specified typecode.
If conversion is not possible it returns default value for the specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: str): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - element value defined by the typecode or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_type_with_default&#34;&gt;get_as_type_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by specied typecode.
If conversion is not possible it returns default value. &lt;br&gt;
See &lt;a href=&#34;../../convert/type_converter/#to_type_with_default&#34;&gt;TypeConverter.to_type_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_type_with_default(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: str, default_value: Any): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: Any - the default value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - element value defined by the typecode or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_value&#34;&gt;get_as_value&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValue or returns an empty AnyValue if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;, &lt;a href=&#34;../any_value/#constructors&#34;&gt;AnyValue.constructors&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_value(key: str): &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; -AnyValue value of the element or empty AnyValue if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_keys&#34;&gt;get_keys&lt;/h4&gt;
&lt;p&gt;Gets keys of all elements stored in this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_keys(): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - a list with all map keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;length&#34;&gt;length&lt;/h4&gt;
&lt;p&gt;Gets a number of elements stored in this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;length(): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - the number of elements in this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;put&#34;&gt;put&lt;/h4&gt;
&lt;p&gt;Puts a new value into map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;put(key: str, value: Any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of the element to put.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - a new value for map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes a map element specified by its key&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;remove(key: str)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of the element to remove.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set_as_object&#34;&gt;set_as_object&lt;/h4&gt;
&lt;p&gt;Sets a new value to map element specified by its index.
When the index is not defined, it resets the entire map value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set_as_object(key: Any, value: Any = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: Any - (optional) a key of the element to set&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - a new element or map value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;to_string&#34;&gt;to_string&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a semicolon-separated list of key-value pairs as
&lt;em&gt;&amp;ldquo;key1=value1;key2=value2;key=value3&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to_string(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_maps&#34;&gt;from_maps&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap by merging two or more maps.
Maps defined later in the list override values from previously defined maps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_maps(*maps: dict): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maps&lt;/strong&gt;: dict - an array of maps to be merged&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - a newly created AnyValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_tuples&#34;&gt;from_tuples&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_tuples(*tuples: Any): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: Any - a list of values where odd elements are keys and the following even elements are values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - a newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_tuples_array&#34;&gt;from_tuples_array&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap from a list of key-value pairs called tuples.
The method is similar to &lt;a href=&#34;#fromtuples&#34;&gt;fromTuples&lt;/a&gt; but tuples are passed as array instead of parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_tuples_array(tuples: Sequence[Any]): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: Sequence[Any] - a list of values where odd elements are keys and the following even elements are values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - a newly created AnyValueArray.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_value&#34;&gt;from_value&lt;/h4&gt;
&lt;p&gt;Converts specified value into AnyValueMap.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_value(value: Any): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - a newly created AnyValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;AnyValueMap&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;key1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;key2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123.456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;key3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2018-01-01&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;})&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_boolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# Result: true&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_integer&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# Result: 123&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_float&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# Result: 123.456&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_datetime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Result: new Date(2018,0,1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter-1&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: DataPage</title>
      <link>/python/commons/data/data_page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/data_page/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The DataPage class allows you to create a data transfer object that can be used to pass the results of a paginated query. This object contains items of the retrieved page.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most often, this object type is used to send responses to paginated queries.&lt;/li&gt;
&lt;li&gt;Pagination parameters are defined by a &lt;a href=&#34;../paging_params&#34;&gt;PagingParams&lt;/a&gt; object.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;skip&lt;/em&gt; parameter in the PagingParams indicates how many items to skip.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;takes&lt;/em&gt; parameter sets number of items to return in the page.&lt;/li&gt;
&lt;li&gt;An optional &lt;em&gt;total&lt;/em&gt; paramter allows you to specify the total number of items returned from a request. However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of data page and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DataPage(data: Sequence[Any] = None, total: int = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;:  Sequence[Any] - a list of items from the retrieved page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: int - total amount of items in a request.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;data&#34;&gt;data&lt;/h4&gt;
&lt;p&gt;The items of the retrieved page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;: Sequence[Any]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;total&lt;/h4&gt;
&lt;p&gt;The total amount of items in a request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;total&lt;/strong&gt;: int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;my_data_client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_data_by_filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from_tuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;page&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;page&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_data&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;pagingparamspaging_params&#34;&gt;&lt;a href=&#34;../paging_params&#34;&gt;PagingParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: FilterParams</title>
      <link>/python/commons/data/filter_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/filter_params/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The FilterParams class allows you to create a data transfer object that can be used to pass filter parameters as key-value pairs.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and initalizes it with elements from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FilterParams(map: Any = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: Any - a map to initialize this instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;from_string&#34;&gt;from_string&lt;/h4&gt;
&lt;p&gt;Parses semicolon-separated key-value pairs and returns them as a FilterParams.&lt;br&gt;
See &lt;a href=&#34;../string_value_map/#from_string&#34;&gt;StringValueMap.from_string&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_string(line: str): &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: str - semicolon-separated key-value list to initialize FilterParams.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; - a newly created FilterParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_tuples&#34;&gt;from_tuples&lt;/h4&gt;
&lt;p&gt;Creates a new FilterParams from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_tuples(*tuples: Any): &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: Any - a list of values where odd elements are keys and the following even elements are values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; - a newly created FilterParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_value&#34;&gt;from_value&lt;/h4&gt;
&lt;p&gt;Converts specified value into FilterParams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_value(value: Any): &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - value to be converted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;FilterParams&lt;/a&gt; - a newly created FilterParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from_tuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;from_create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;to_create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(),&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_data_by_filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringvaluemapstring_value_map&#34;&gt;&lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: IChangeable</title>
      <link>/python/commons/data/ichangeable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/ichangeable/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IChangeable interface allows you to store the last modified date and time in the &amp;ldquo;change_time&amp;rdquo; parameter of a data object.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;change_time&#34;&gt;change_time&lt;/h4&gt;
&lt;p&gt;The UTC time at which the object was last changed (created or updated).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;change_time&lt;/strong&gt;: datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IChangeable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;1234567&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;field1&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;change_time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;datetime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: ICloneable</title>
      <link>/python/commons/data/icloneable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/icloneable/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ICloneable interface allows you to create objects with binary clones.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clone(): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - a clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyClass&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;IMyClass&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ICloneable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;():&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;clone_obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
        
        &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;clone_obj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Python: IdGenerator</title>
      <link>/python/commons/data/id_generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/id_generator/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IdGenerator class allows you to generate IDs for objects.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It supports two types of IDs: short and long.&lt;/li&gt;
&lt;li&gt;ShortIDs are 9-digit random numbers. They are not guaranteed be unique.&lt;/li&gt;
&lt;li&gt;Long IDs are string GUIDs. They are globally unique and 32-character long.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;next_long&#34;&gt;next_long&lt;/h4&gt;
&lt;p&gt;Generates a globally unique 32-digit object ID.
The value is a string representation of a GUID value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; next_long(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a generated 32-digit object ID&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;next_short&#34;&gt;next_short&lt;/h4&gt;
&lt;p&gt;Generates a random 9-digit random ID (code).&lt;/p&gt;
&lt;p&gt;Remember: The returned value is not guaranteed to be unique.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; next_short(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a generated random 9-digit code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;IdGenerator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;next_long&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Possible result: &amp;#34;234ab342c56a2b49c2ab42bf23ff991ac&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;IdGenerator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;next_short&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# Possible result: &amp;#34;23495247&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Python: IIdentifiable</title>
      <link>/python/commons/data/iidentifiable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/iidentifiable/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IIdentifiable interface is used to create data objects that can be uniquely idendified by an ID.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The type specified in the interface defines the type of the ID field.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;id&#34;&gt;id&lt;/h4&gt;
&lt;p&gt;The unique object identifier of type K.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt;: K&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;IIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: INamed</title>
      <link>/python/commons/data/inamed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/inamed/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The INamed interface is used to define data objects containing a human-readable name.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;name&#34;&gt;name&lt;/h4&gt;
&lt;p&gt;The object&amp;rsquo;s humand-readable name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;: str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;IIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;INamed&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: IStringIdentifiable</title>
      <link>/python/commons/data/istring_identifiable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/istring_identifiable/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;string&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IIdentifiable interface extends &lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;/a&gt; to hardcode id type to string.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is common to use a string GUID as the id, generated by &lt;a href=&#34;../id_generator&#34;&gt;IdGenerator&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;id&#34;&gt;id&lt;/h4&gt;
&lt;p&gt;The object&amp;rsquo;s unique string id.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt;: str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;iidentifiableiidentifiable&#34;&gt;&lt;a href=&#34;../iidentifiable&#34;&gt;IIdentifiable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;idgeneratorid_generator&#34;&gt;&lt;a href=&#34;../id_generator&#34;&gt;IdGenerator&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: ITrackable</title>
      <link>/python/commons/data/itrackable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/itrackable/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../ichangeable&#34;&gt;IChangeable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ITrackagle interface allows you to define data objects that can track their changes, including logical deletion.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;create_time&#34;&gt;create_time&lt;/h4&gt;
&lt;p&gt;The UTC time at which the object was created.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;create_time&lt;/strong&gt;: datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;change_time&#34;&gt;change_time&lt;/h4&gt;
&lt;p&gt;The UTC time at which the object was last changed (created, updated, or deleted).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;change_time&lt;/strong&gt;: datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;deleted&#34;&gt;deleted&lt;/h4&gt;
&lt;p&gt;The logical deletion flag. True when object is deleted and None or false otherwise&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;deleted&lt;/strong&gt;: datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ITrackable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;change_time&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;create_time&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;deleted&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ichangeableichangeable&#34;&gt;&lt;a href=&#34;../ichangeable&#34;&gt;IChangeable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: IVersioned</title>
      <link>/python/commons/data/iversioned/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/iversioned/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IVersioned interface allows you to define data objects that can be versioned.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versioning is often used as an optimistic concurrency mechanism.&lt;/li&gt;
&lt;li&gt;The version doesn&amp;rsquo;t have to be a number, but it is recommended to use sequential values to determine if one object has a newer or older version than another one.&lt;/li&gt;
&lt;li&gt;It is common to use the time of change as the object version.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;version&#34;&gt;version&lt;/h4&gt;
&lt;p&gt;The object&amp;rsquo;s version.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;version&lt;/strong&gt;: str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;IStringIdentifiable&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;IVersioned&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# do something&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;update_data&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# do something&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;old_item&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color:#00a8c8&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ConcurrencyException&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;VERSION_CONFLICT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;The change has older version stored args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# do something&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: MultiString</title>
      <link>/python/commons/data/multi_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/multi_string/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; dict&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MultiString class allows you to create objects that contain string translations for multiple languages.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Language keys use two-letter codes like: &lt;em&gt;&amp;lsquo;en&amp;rsquo;, &amp;lsquo;sp&amp;rsquo;, &amp;lsquo;de&amp;rsquo;, &amp;lsquo;ru&amp;rsquo;, &amp;lsquo;fr&amp;rsquo;, &amp;lsquo;pr&amp;rsquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;When a translation for a specific language does not exists, it defaults to English (&amp;lsquo;en&amp;rsquo;).&lt;/li&gt;
&lt;li&gt;When English does not exists, it falls back to the first defined language&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new MultiString object and initializes it with values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MultiString(map: Any = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: Any - a map with language-text pairs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;append&lt;/h4&gt;
&lt;p&gt;Appends a map with language-translation pairs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;append(map: Any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: Any - the map with language-translation pairs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears all translations from this MultiString object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Gets a string translation by specified language.
When language is not found it defaults to English (&amp;lsquo;en&amp;rsquo;).
When English is not found it takes the first value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get(language: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: str - a language two-symbol code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a translation for the specified language or default translation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_languages&#34;&gt;get_languages&lt;/h4&gt;
&lt;p&gt;Gets all languages stored in this MultiString object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_languages(): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - a list with language codes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;length&#34;&gt;length&lt;/h4&gt;
&lt;p&gt;Returns the number of translations stored in this MultiString object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;length(): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - the number of translations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;put&#34;&gt;put&lt;/h4&gt;
&lt;p&gt;Puts a new translation for the specified language.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;put(language: str, value: Any): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: str - a language two-symbol code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - a new translation for the specified language.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes translation for the specified language.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;remove(language: str)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: str - a language two-symbol code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;from_tuples&#34;&gt;from_tuples&lt;/h4&gt;
&lt;p&gt;Creates a new MultiString object from language-translation pairs (tuples).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_tuples(*tuples: Any): &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: Any - an array that contains language-translation tuples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt; - a MultiString Object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_tuples_array&#34;&gt;from_tuples_array&lt;/h4&gt;
&lt;p&gt;Creates a new MultiString object from language-translation pairs (tuples) specified as array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_tuples_array(tuples: Sequence[Any]): &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: Sequence[Any] - an array that contains language-translation tuples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt; - a MultiString Object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_value&#34;&gt;from_value&lt;/h4&gt;
&lt;p&gt;Creates a new MultiString object from a value that contains language-translation pairs.&lt;br&gt;
See &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_value(value: Any): &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - the value to initialize MultiString.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../multi_string&#34;&gt;MultiString&lt;/a&gt; - a MultiString object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;values&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;MultiString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from_tuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ru&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ÐŸÑ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;ru&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Result: &amp;#34;ÐŸÑ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;pt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Result: &amp;#34;Hello World!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Python: PagingParams</title>
      <link>/python/commons/data/paging_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/paging_params/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The PagingParams class allows you to create data transfer objects used to pass paging parameters for queries.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A page is defined by two parameters:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;skip&lt;/em&gt;: number of items to skip.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;take&lt;/em&gt;: number of items to return in a page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additionally, the optional &lt;em&gt;total&lt;/em&gt; parameter defines whether to return the total number of items or not.&lt;/li&gt;
&lt;li&gt;However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter, because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PagingParams(skip: int = None, take: int = None, total: bool = False)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;skip&lt;/strong&gt;: int - the number of items to skip.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;take&lt;/strong&gt;: int - the number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: bool - true to return the total number of items.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;skip&#34;&gt;skip&lt;/h4&gt;
&lt;p&gt;The number of items to skip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;skip&lt;/strong&gt;: int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;take&#34;&gt;take&lt;/h4&gt;
&lt;p&gt;The number of items to return.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;take&lt;/strong&gt;: int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;total&lt;/h4&gt;
&lt;p&gt;The flag to return the total number of items.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;total&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;get_skip&#34;&gt;get_skip&lt;/h4&gt;
&lt;p&gt;Gets the number of items to skip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_skip(min_skip: int): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;min_skip&lt;/strong&gt;: int - the minimum number of items to skip.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - the number of items to skip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_take&#34;&gt;get_take&lt;/h4&gt;
&lt;p&gt;Gets the number of items to return in a page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_take(max_take: int): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;max_take&lt;/strong&gt;: int - the maximum number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - the number of items to return.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;from_map&#34;&gt;from_map&lt;/h4&gt;
&lt;p&gt;Creates a new PagingParams and sets it parameters from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_map(map: Any): &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: Any - a AnyValueMap or StringValueMap to initialize this PagingParams&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; - a newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_tuples&#34;&gt;from_tuples&lt;/h4&gt;
&lt;p&gt;Creates a new PagingParams from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_tuples(*tuples: Any): &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: Any - a list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; - a newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_value&#34;&gt;from_value&lt;/h4&gt;
&lt;p&gt;Converts specified value into PagingParams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_value(value: Any): &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;PagingParams&lt;/a&gt; - a newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_data_by_filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Python: ProjectionParams</title>
      <link>/python/commons/data/projection_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/projection_params/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; list&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ProjectionParams class allows you to define projection parameters with a list of fields to be included in your query results.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The parameters support two formats: dot and nested.&lt;/li&gt;
&lt;li&gt;The dot format is the standard way to define the included fields and subfields by using dot object notation. E.g. &lt;em&gt;&amp;ldquo;field1,field2.field21,field2.field22.field221&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;As an alternative, the nested format offers a more compact representation. E.g. &lt;em&gt;&amp;ldquo;field1,field2(field21,field22(field221))&amp;quot;&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the projection parameters and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ProjectionParams(values: Sequence[Any] = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: Sequence[Any] - (optional) values to initialize this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;to_string&#34;&gt;to_string&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a comma-separated list of projection fields
&lt;em&gt;&amp;ldquo;field1,field2.field21,field2.field22.field221&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to_string(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;from_string&#34;&gt;from_string&lt;/h4&gt;
&lt;p&gt;Parses comma-separated list of projection fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_string(*values: str): &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: str - one or more comma-separated lists of projection fields.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; - a newly created ProjectionParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_value&#34;&gt;from_value&lt;/h4&gt;
&lt;p&gt;Converts specified value into ProjectionParams.&lt;br&gt;
See &lt;a href=&#34;../any_value_array/#from_value&#34;&gt;AnyValueArray.from_value&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_value(value: Any): &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt;: &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any -  value to be converted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;ProjectionParams&lt;/a&gt; - a newly created ProjectionParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;projection&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ProjectionParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from_value&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field2(field21,field22)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;])&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;projection&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ProjectionParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from_string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field1,field2(field21,field22)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_data_by_filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;projection&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Python: SortField</title>
      <link>/python/commons/data/sort_field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/sort_field/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The SortField class allows you to define a field used to sort query results. In addition, it allows you to specify the order typer as ascending or descending.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SortField(name: str = None, ascending: bool = True)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: str - the name of the field to sort by.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ascending&lt;/strong&gt;: bool - true to sort in ascending order, and false to sort in descending order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;name&#34;&gt;name&lt;/h4&gt;
&lt;p&gt;The field name to sort by&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;: str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;ascending&#34;&gt;ascending&lt;/h4&gt;
&lt;p&gt;The flag to define sorting order. True to sort ascending, false to sort descending&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ascending&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SortingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;SortField&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_data_by_filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;sortparamssort_params&#34;&gt;&lt;a href=&#34;../sort_params&#34;&gt;SortParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: SortParams</title>
      <link>/python/commons/data/sort_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/sort_params/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; list&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The SortParams class allows you to define a list of field names used to sort query results. In addition, it allows you to specify the type of order as ascending or descending.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and initializes it with specified sort fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SortParams(*fields: &lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fields&lt;/strong&gt;: &lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt; - a list of fields to sort by.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;fromTuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;PagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SortingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;SortField&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;create_time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;myDataClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_data_by_filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;sorting&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;sortfieldsort_field&#34;&gt;&lt;a href=&#34;../sort_field&#34;&gt;SortField&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: StringValueMap</title>
      <link>/python/commons/data/string_value_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/string_value_map/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The StringValueMap class allows you to create a cross-language implementation of a map (dictionary) where all keys and values are strings.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The class provides several methods to convert the stored values to different types, such as array, boolean or datetime.&lt;/li&gt;
&lt;li&gt;This class is widely used in Pip.Services as a basis for variety of classes, such as &lt;a href=&#34;../../config/config_params&#34;&gt;ConfigParams&lt;/a&gt;, &lt;a href=&#34;../../../components/connect/connection_params&#34;&gt;ConnectionParams&lt;/a&gt;, &lt;a href=&#34;../../../components/auth/credential_params&#34;&gt;CredentialParams&lt;/a&gt; (in the Pip.Services components package) and others.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the map and assigns its value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;StringValueMap(map: Any = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: Any - (optional) values to initialize this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;append&#34;&gt;append&lt;/h4&gt;
&lt;p&gt;Appends new elements to this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;append(map: Any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: Any - a map with elements to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears this map by removing all its elements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Creates a binary clone of this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clone(): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - a clone of this object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get&#34;&gt;get&lt;/h4&gt;
&lt;p&gt;Gets a map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get(key: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - the value of the map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_array&#34;&gt;get_as_array&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueArray or returns empty AnyValueArray if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;, &lt;a href=&#34;../any_value_array/#from_value&#34;&gt;AnyValueArray.from_value&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_array(key: str): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: get_as_array - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or empty AnyValueArray if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_array_with_default&#34;&gt;get_as_array_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueArray or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_array_with_default(key: str, default_value: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;): &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_array&#34;&gt;AnyValueArray&lt;/a&gt; - AnyValueArray value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_boolean&#34;&gt;get_as_boolean&lt;/h4&gt;
&lt;p&gt;Converts map element into a boolean or returns false if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_boolean(key: str): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - boolean value of the element or false if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_boolean_with_default&#34;&gt;get_as_boolean_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a boolean or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../boolean_converter/#to_boolean_with_default&#34;&gt;BooleanConverter.to_boolean_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_boolean_with_default(key: str, default_value: bool): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: bool - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - boolean value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_datetime&#34;&gt;get_as_datetime&lt;/h4&gt;
&lt;p&gt;Converts map element into a Date or returns the current date if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../boolean_converter/#to_boolean_with_default&#34;&gt;BooleanConverter.to_boolean_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_datetime(key: str): datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: datetime - date value of the element or the current date if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_datetime_with_default&#34;&gt;get_as_datetime_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a Date or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../date_time_converter/#to_datetime_with_default&#34;&gt;DateTimeConverter.to_datetime_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_datetime_with_default(key: str, default_value: datetime): datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: datetime - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: datetime - Date value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_double&#34;&gt;get_as_double&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_double(key: str): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - double value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_double_with_default&#34;&gt;get_as_double_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../double_converter/#todoublewithdefault&#34;&gt;DoubleConverter.toDoubleWithDefault&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_double_with_default(key: str, default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - double value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_double-1&#34;&gt;get_as_double&lt;/h4&gt;
&lt;p&gt;Converts map element into a float or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_double(key: str): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - float value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_float_with_default&#34;&gt;get_as_float_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a float or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../float_converter/#to_float_with_default&#34;&gt;FloatConverter.to_float_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_float_with_default(key: str, default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - flot value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_integer&#34;&gt;get_as_integer&lt;/h4&gt;
&lt;p&gt;Converts map element into an integer or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_integer(key: str): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_integer_with_default&#34;&gt;get_as_integer_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into an integer or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../integer_converter/#to_integer_with_default&#34;&gt;IntegerConverter.to_integer_with_default&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_integer_with_default(key: str, default_value: int): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: int - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - integer value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_long&#34;&gt;get_as_long&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns 0 if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_long(key: str): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - long value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_long_with_default&#34;&gt;get_as_long_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns default value if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../long_converter/#to_long_with_default&#34;&gt;LongConverter.to_long_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_long_with_default(key: str, default_value: float): float&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: float - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float - long value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_map&#34;&gt;get_as_map&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns empty AnyValueMap if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_map(key: str): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - long value of the element or 0 if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_map_with_default&#34;&gt;get_as_map_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns default value if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_map_with_default(key: str, default_value: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;): &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - AnyValueMap value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_array&#34;&gt;get_as_nullable_array&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueArray or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;, &lt;a href=&#34;../any_value_map/#from_value&#34;&gt;AnyValueMap.from_value&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_array(key: str): Optional[&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;] - AnyValueMap value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_boolean&#34;&gt;get_as_nullable_boolean&lt;/h4&gt;
&lt;p&gt;Converts map element into a boolean or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../boolean_converter/#to_nullable_boolean&#34;&gt;BooleanConverter.to_nullable_boolean&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_boolean(key: str): Optional[bool]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[bool] - boolean value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_datetime&#34;&gt;get_as_nullable_datetime&lt;/h4&gt;
&lt;p&gt;Converts map element into a Date or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../date_time_converter/#to_nullable_datetime&#34;&gt;DateTimeConverter.to_nullable_datetime&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_datetime(key: str): Optional[datetime]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[datetime] - Date value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_double&#34;&gt;get_as_nullable_double&lt;/h4&gt;
&lt;p&gt;Converts map element into a double or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../double_converter/#to_nullable_double&#34;&gt;DoubleConverter.to_nullable_double&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_double(key: str): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - key of the element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - double value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_float&#34;&gt;get_as_nullable_float&lt;/h4&gt;
&lt;p&gt;Converts map element into a float or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../float_converter/#to_nullable_float&#34;&gt;FloatConverter.to_nullable_float&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_float(key: str): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - float value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_integer&#34;&gt;get_as_nullable_integer&lt;/h4&gt;
&lt;p&gt;Converts map element into an integer or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../integer_converter/#to_nullable_integer&#34;&gt;IntegerConverter.to_nullable_integer&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_integer(key: str): Optional[int]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[int] - integer value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_long&#34;&gt;get_as_nullable_long&lt;/h4&gt;
&lt;p&gt;Converts map element into a long or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../long_converter/#to_nullable_long&#34;&gt;LongConverter.to_nullable_long&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_long(key: str): Optional[float]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[float] - long value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_map&#34;&gt;get_as_nullable_map&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValueMap or returns None if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_map(key: str): Optional[&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[&lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;] - AnyValueMap value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_string&#34;&gt;get_as_nullable_string&lt;/h4&gt;
&lt;p&gt;Converts map element into a string or returns None if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../string_converter/#to_nullable_string&#34;&gt;StringConverter.to_nullable_string&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_string(key: str): Optional[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - string value of the element or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_nullable_type&#34;&gt;get_as_nullable_type&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by specied typecode.
If conversion is not possible it returns None. &lt;br&gt;
See &lt;a href=&#34;../type_converter/#to_nullable_type&#34;&gt;TypeConverter.to_nullable_type&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_nullable_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: str): Optional[Any]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Optional[Any] - element value defined by the typecode or None if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_object&#34;&gt;get_as_object&lt;/h4&gt;
&lt;p&gt;Gets the value stored in map element without any conversions.
When element key is not defined it returns the entire map value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_object(key: str = None): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - (optional) a key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - the element value or value of the map when index is not defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_string&#34;&gt;get_as_string&lt;/h4&gt;
&lt;p&gt;Converts map element into a string or returns &amp;quot;&amp;quot; if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_string(key: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - (optional) a key of the element to get&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - string value of the element or &amp;quot;&amp;quot; if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_string_with_default&#34;&gt;get_as_string_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a string or returns &amp;quot;&amp;quot; if conversion is not possible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_string_with_default(key: str, default_value: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: str - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - string value of the element or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_type&#34;&gt;get_as_type&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by a specied typecode.
If conversion is not possible it returns default value for the specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_type(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: str): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defined the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - element value defined by the typecode or default if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_type_with_default&#34;&gt;get_as_type_with_default&lt;/h4&gt;
&lt;p&gt;Converts map element into a value defined by a specified typecode.
If conversion is not possible it returns default value for the specified type.&lt;br&gt;
See &lt;a href=&#34;../type_converter/#to_type_with_default&#34;&gt;TypeConverter.to_type_with_default&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_type_with_default(value_type: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;, key: str, default_value: Any): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value_type&lt;/strong&gt;: &lt;a href=&#34;../../convert/type_code&#34;&gt;TypeCode&lt;/a&gt; - the TypeCode that defines the type of the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_value&lt;/strong&gt;: Any - the default value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - element value defined by the typecode or default value if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_as_value&#34;&gt;get_as_value&lt;/h4&gt;
&lt;p&gt;Converts map element into an AnyValue or returns an empty AnyValue if conversion is not possible.&lt;br&gt;
See &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;, &lt;a href=&#34;../any_value/#constructors&#34;&gt;AnyValue.constructors&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_as_value(key: str): &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of element to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../any_value&#34;&gt;AnyValue&lt;/a&gt; - AnyValue value of the element or empty AnyValue if conversion is not supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get_keys&#34;&gt;get_keys&lt;/h4&gt;
&lt;p&gt;Gets keys of all elements stored in this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_keys(): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - a list with all map keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;length&#34;&gt;length&lt;/h4&gt;
&lt;p&gt;Gets a number of elements stored in this map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;length(): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - the number of elements in this map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;put&#34;&gt;put&lt;/h4&gt;
&lt;p&gt;Puts a new value into map element specified by its key.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;put(key: str, value: Any): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of the element to put.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - a new value for map element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;remove&lt;/h4&gt;
&lt;p&gt;Removes a map element specified by its key&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;remove(key: str)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - a key of the element to remove.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set_as_object&#34;&gt;set_as_object&lt;/h4&gt;
&lt;p&gt;Sets a new value to map element specified by its index.
When the index is not defined, it resets the entire map value.
See &lt;a href=&#34;../../convert/map_converter/#to_map&#34;&gt;MapConverter.to_map&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set_as_object(key: Any, value: Any = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: str - (optional) a key of the element to set&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - a new element or map value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;to_string&#34;&gt;to_string&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.
The result is a semicolon-separated list of key-value pairs as
&lt;em&gt;&amp;ldquo;key1=value1;key2=value2;key=value3&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to_string(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;from_maps&#34;&gt;from_maps&lt;/h4&gt;
&lt;p&gt;Creates a new AnyValueMap by merging two or more maps.
Maps defined later in the list override values from previously defined maps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_maps(*maps: dict): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maps&lt;/strong&gt;: dict - an array of maps to be merged&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_string&#34;&gt;from_string&lt;/h4&gt;
&lt;p&gt;Parses semicolon-separated key-value pairs and returns them as a &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_string(line: str): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: str - semicolon-separated key-value list to initialize StringValueMap.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_tuples&#34;&gt;from_tuples&lt;/h4&gt;
&lt;p&gt;Creates a new &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_tuples(*tuples: Any): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: Any - a list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_tuples_array&#34;&gt;from_tuples_array&lt;/h4&gt;
&lt;p&gt;Creates a new StringValueMap from a list of key-value pairs called tuples.
The method is similar to &lt;a href=&#34;#from_tuples&#34;&gt;from_tuples&lt;/a&gt; but tuples are passed as array instead of parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_tuples_array(tuples: Sequence[Any]): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: Sequence[Any] - a list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_value&#34;&gt;from_value&lt;/h4&gt;
&lt;p&gt;Converts specified value into StringValueMap.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_value(value: Any): &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../string_value_map&#34;&gt;StringValueMap&lt;/a&gt; - a newly created StringValueMap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;StringValueMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;fromString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1=1;key2=123.456;key3=2018-01-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_boolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_integer&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_float&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123.456&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_as_datetime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Date&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;typeconverterconverttype_converter&#34;&gt;&lt;a href=&#34;../../convert/type_converter&#34;&gt;TypeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;stringconverterconvertstring_converter-1&#34;&gt;&lt;a href=&#34;../../convert/string_converter&#34;&gt;StringConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;booleanconverterconvertboolean_converter&#34;&gt;&lt;a href=&#34;../../convert/boolean_converter&#34;&gt;BooleanConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;integerconverterconvertinteger_converter&#34;&gt;&lt;a href=&#34;../../convert/integer_converter&#34;&gt;IntegerConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;longconverterconvertlong_converter&#34;&gt;&lt;a href=&#34;../../convert/long_converter&#34;&gt;LongConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;doubleconverterconvertdouble_converter&#34;&gt;&lt;a href=&#34;../../convert/double_converter&#34;&gt;DoubleConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;floatconverterconvertfloat_converter&#34;&gt;&lt;a href=&#34;../../convert/float_converter&#34;&gt;FloatConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;datetimeconverterconvertdate_time_converter&#34;&gt;&lt;a href=&#34;../../convert/date_time_converter&#34;&gt;DateTimeConverter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;icloneableicloneable&#34;&gt;&lt;a href=&#34;../icloneable&#34;&gt;ICloneable&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: TagsProcessor</title>
      <link>/python/commons/data/tags_processor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/tags_processor/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TagsProcessor class allows you to extract and process search tags from objects.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The search tags can be kept individually or embedded as hash tags inside text. E.g. &amp;ldquo;This text has #hash_tag that can be used for search.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;compress_tag&#34;&gt;compress_tag&lt;/h4&gt;
&lt;p&gt;Compress a tag by removing special symbols like spaces, &amp;lsquo;_&amp;rsquo; and &amp;lsquo;#&amp;rsquo;
and converting the tag to lower case.
When tags are compressed they can be matched in search queries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; compress_tag(tag: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt;: str - the tag to compress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a compressed tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;compress_tag_list&#34;&gt;compress_tag_list&lt;/h4&gt;
&lt;p&gt;Compresses a comma-separated list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; compress_tag_list(tag_list: str): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag_list&lt;/strong&gt;: str - a comma-separated list of tags to compress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - a list with compressed tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;compress_tags&#34;&gt;compress_tags&lt;/h4&gt;
&lt;p&gt;Compresses a list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; compress_tags(tags: List[str]): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tagList&lt;/strong&gt;: List[str] - the tags to compress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - a list with normalized tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equal_tags&#34;&gt;equal_tags&lt;/h4&gt;
&lt;p&gt;Compares two tags using their compressed form.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; equal_tags(tag1: str, tag2: str): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag1&lt;/strong&gt;: str - the first tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag2&lt;/strong&gt;: str - the second tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if the tags are equal and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;extract_hash_tags&#34;&gt;extract_hash_tags&lt;/h4&gt;
&lt;p&gt;Extracts hash tags from a text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; extractHashTags(text: str): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;text&lt;/strong&gt;: str - a text that contains hash tags&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - a list with extracted and compressed tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;extract_hash_tags_from_value&#34;&gt;extract_hash_tags_from_value&lt;/h4&gt;
&lt;p&gt;Extracts hash tags from selected fields in an object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; extract_hash_tags_from_value(obj: Any, *search_fields: str): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: Any - an object which contains hash tags.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;search_fields&lt;/strong&gt;: str - a list of fields in the objects where to extract tags&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] -a list of extracted and compressed tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;normalize_tag&#34;&gt;normalize_tag&lt;/h4&gt;
&lt;p&gt;Normalizes a tag by replacing special symbols like &amp;lsquo;_&amp;rsquo; and &amp;lsquo;#&amp;rsquo; with spaces.
When tags are normalized then can be used in a similar shape and form.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; normalize_tag(tag: str): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt;: str - the tag to normalize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - a normalized tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;normalize_tag_list&#34;&gt;normalize_tag_list&lt;/h4&gt;
&lt;p&gt;Normalizes a comma-separated list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; normalize_tag_list(tagList: str): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tag_list&lt;/strong&gt;: str - a comma-separated list of tags to normalize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - a list with normalized tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;normalize_tags&#34;&gt;normalize_tags&lt;/h4&gt;
&lt;p&gt;Normalizes a list of tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public static&lt;/code&gt; normalize_tags(tags: List[str]): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt;: List[str] - the tags to normalize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - a list with normalized tags.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: TokenizedDataPage</title>
      <link>/python/commons/data/tokenized_data_page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/tokenized_data_page/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TokenizedDataPageData allows you to create a transfer object that is used to pass the results of paginated queries.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This object contains the items of the retrieved page and the total number of items (optional).&lt;/li&gt;
&lt;li&gt;Additionally, the data page returns a token that has to be passed to the next search as a starting point.&lt;/li&gt;
&lt;li&gt;Most often, this object type is used to send responses to paginated queries.&lt;/li&gt;
&lt;li&gt;Pagination parameters are defined by a &lt;a href=&#34;../tokenized_paging_params&#34;&gt;TokenizedPagingParams&lt;/a&gt; object.
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;token&lt;/em&gt; parameter in the TokenizedPagingParams defines where to start the search.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;takes&lt;/em&gt; parameter sets number of items to be returned in the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The optional &lt;em&gt;total&lt;/em&gt; parameter tells to return the total number of items in the query.&lt;/li&gt;
&lt;li&gt;However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter, because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of data page and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TokenizedDataPage(data: List[Any], token: str = None, total: int = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: List[Any] - a list of items from the retrieved page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;token&lt;/strong&gt;: str - (optional) a token to define astarting point for the next search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: int - (optional) a total number of objects in the result.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;data&#34;&gt;data&lt;/h4&gt;
&lt;p&gt;The items of the retrieved page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;: List[Any]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;token&#34;&gt;token&lt;/h4&gt;
&lt;p&gt;The starting point for the next search.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;token&lt;/strong&gt;: str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;total&lt;/h4&gt;
&lt;p&gt;The total amount of items in a request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;total&lt;/strong&gt;: int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;my_data_client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_data_by_filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from_tuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;TokenizedPagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;pagingparamspaging_params&#34;&gt;&lt;a href=&#34;../paging_params&#34;&gt;PagingParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: TokenizedPagingParams</title>
      <link>/python/commons/data/tokenized_paging_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/commons/data/tokenized_paging_params/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TokenizedPagingParams allows you to create data transfer objects used to pass tokenized parameters for queries.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The page is defined by two parameters:
&lt;ul&gt;
&lt;li&gt;the &lt;em&gt;token&lt;/em&gt; token that defines a starting point for the search.&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;take&lt;/em&gt; parameter sets how many items to return in a page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additionally, the optional &lt;em&gt;total&lt;/em&gt; parameter tells to return the total number of items in the query.&lt;/li&gt;
&lt;li&gt;However, not all implementations support the &lt;em&gt;total&lt;/em&gt; parameter because its generation may lead to severe performance implications.&lt;/li&gt;
&lt;li&gt;In general, this class can be used for complex paging scenarios, like paging across multiple databases where the previous state is encoded in a token. The token is usually retrieved from the previous response. The initial request shall go with token == &lt;em&gt;None&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TokenizedPagingParams(token: str = None, take: int = None, total: bool = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;token&lt;/strong&gt;: str - token that defines a starting point for the search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;take&lt;/strong&gt;: int - the number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: bool - true to return the total number of items.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;token&#34;&gt;token&lt;/h4&gt;
&lt;p&gt;The start token&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;token&lt;/strong&gt;: str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;take&#34;&gt;take&lt;/h4&gt;
&lt;p&gt;The number of items to return.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;take&lt;/strong&gt;: int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;total&#34;&gt;total&lt;/h4&gt;
&lt;p&gt;The flag to return the total number of items.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;total&lt;/strong&gt;: boolean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;get_take&#34;&gt;get_take&lt;/h4&gt;
&lt;p&gt;Gets the number of items to return in a page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_take(max_take: int): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;max_take&lt;/strong&gt;: int - the maximum number of items to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - the number of items to return.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;from_map&#34;&gt;from_map&lt;/h4&gt;
&lt;p&gt;Creates a new TokenizedPagingParams and sets it parameters from the specified map.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_map(map: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt;): &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: &lt;a href=&#34;../any_value_map&#34;&gt;AnyValueMap&lt;/a&gt; - a AnyValueMap or StringValueMap to initialize this TokenizedPagingParams&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - a newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_tuples&#34;&gt;from_tuples&lt;/h4&gt;
&lt;p&gt;Creates a new TokenizedPagingParams from a list of key-value pairs called tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_tuples(*tuples: Any): &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt;: Any - a list of values where odd elements are keys and the following even elements are values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - a newly created TokenizedPagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;from_value&#34;&gt;from_value&lt;/h4&gt;
&lt;p&gt;Converts specified value into TokenizedPagingParams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; from_value(value: Any): &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: Any - value to be converted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;TokenizedPagingParams&lt;/a&gt; - a newly created PagingParams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;FilterParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from_tuples&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Type1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;TokenizedPagingParams&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;my_data_client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_data_by_filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;paging&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
