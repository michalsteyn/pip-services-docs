<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – Client Library</title>
    <link>/python/tutorials/client_library/</link>
    <description>Recent content in Client Library on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/python/tutorials/client_library/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Python: Step1. Setting up the environment</title>
      <link>/python/tutorials/client_library/step0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/tutorials/client_library/step0/</guid>
      <description>
        
        
        &lt;p&gt;Before we can start writing-up some microservices, we’ll need to install a few mandatory prerequisites.&lt;/p&gt;
&lt;h3 id=&#34;1-compiler-and-ide&#34;&gt;1. Compiler and IDE&lt;/h3&gt;
&lt;p&gt;First and foremost - we’ll need a compiler for your programming language of choice, as well as some sort of code editor. In our examples, we usually use Visual Studio Code, but any fitting IDE will do.&lt;/p&gt;
&lt;p&gt;For working with the Python programming language, you’ll need to perform its installation and setup the environment. To do this, download and install Python from their &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;official site&lt;/a&gt; . Select the download that corresponds to the operating system you’re using, and follow the installation instructions listed on their site.&lt;/p&gt;
&lt;p&gt;Once installed, check that the installation was completed successfully by running the following command from your console:&lt;/p&gt;
&lt;div class=&#34;content-tab-selector&#34;&gt;
	&lt;div class=&#34;btn-group tab-selector-btn-group&#34; role=&#34;group&#34; aria-label=&#34;Language selector&#34;&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Node&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;.NET&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Golang&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Dart&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Python&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Java&lt;/button&gt;
	&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;2docker-and-docker-compose&#34;&gt;2.Docker and Docker Compose&lt;/h3&gt;
&lt;p&gt;To install Docker, download the Docker Desktop installer that corresponds to the operating system you’re using from the official &lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Docker site&lt;/a&gt;. Once downloaded, launch the installer and follow the installation instructions.&lt;/p&gt;
&lt;p&gt;Once installed, check that the installation was completed successfully by running the following commands from your console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything was installed successfully, the screen will display the latest version of Docker.&lt;/p&gt;
&lt;p&gt;To install Docker Compose, follow the guideles available &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that we’ve got the environment set up, we can move on to &lt;a href=&#34;../step1&#34;&gt;Step 2. Setting up the project.&lt;/a&gt;&lt;/p&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h3 id=&#34;step-2-setting-up-the-projectstep1&#34;&gt;&lt;a href=&#34;../step1&#34;&gt;Step 2. Setting up the project.&lt;/a&gt;&lt;/h3&gt;
&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Step 2. Setting up the project structure</title>
      <link>/python/tutorials/client_library/step1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/tutorials/client_library/step1/</guid>
      <description>
        
        
        &lt;p&gt;Let’s do some small preparation of the project before we start writing the client library.&lt;/p&gt;
&lt;p&gt;First, create the following directory structure to keep the source code organized:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/src
└───/version1
/test
└───/version1

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Prepare the initial project files, as described in the tutorial on &lt;a href=&#34;../../data_microservice&#34;&gt;creating a data microservice&lt;/a&gt;, for the language of your choice and perform the initialization process.&lt;/p&gt;
&lt;p&gt;Since data is transferred between the client and the microservice using a specific protocol, this data must be defined for the client to work correctly. Some developers prefer to export general data structures, define external interfaces in a separate library, and use it on the client and on the server. However, to minimize the amount of libraries and simplify dependencies, we prefer to just copy the data structure from the microservice to the client library. This won’t cause any additional problems, since after changing the external interface, the client should be updated and retested anyways.&lt;/p&gt;
&lt;p&gt;Copy the files from the microservice’s data folder into the &lt;strong&gt;src/data/version1&lt;/strong&gt; folder of our client project. The microservice’s source code can be found at the following &lt;a href=&#34;https://github.com/pip-services-samples/service-beacons-python/tree/master/src/data/version1&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For “strongly typed” languages (e.g. Dart), you’ll have to import the data model files from the microservice using the import directive, instead of just copying the directory over. This will guarantee an exact type match.&lt;/p&gt;
&lt;p&gt;Now we’re ready to start writing our client library. When you’re ready, continue on to &lt;a href=&#34;../step2&#34;&gt;Step 3. Designing a Direct Client&lt;/a&gt;.&lt;/p&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h3 id=&#34;step-3-designing-a-direct-clientstep2&#34;&gt;&lt;a href=&#34;../step2&#34;&gt;Step 3. Designing a Direct Client.&lt;/a&gt;&lt;/h3&gt;
&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Step 3. Designing a Direct Client</title>
      <link>/python/tutorials/client_library/step2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/tutorials/client_library/step2/</guid>
      <description>
        
        
        &lt;p&gt;Oftentimes systems that are created using a microservices architecture end up being assembled and installed as monoliths. Sometimes this is required as a transitional step, when the operations department isn’t quite yet ready to install and support such a fragmented system. It’s also common for startups, who usually have to deal with limited financial resources, to use this approach. Packing a large amount of microservices into a monolith allows teams to significantly reduce the amount of containers needed to get the system up and running. Such a system can easily be broken up into microservices in the future, when the startup is ready to support an increasing number of clients.&lt;/p&gt;
&lt;p&gt;Direct clients are key to creating microservice-based monoliths. A direct client uses direct calls to the microservice’s controller from the shared address space, bypassing external interfaces in the process. On this step, we are going to create such a client. We’ll be placing our code in the &lt;strong&gt;src/version1&lt;/strong&gt; folder.&lt;/p&gt;
&lt;p&gt;First off, let&amp;rsquo;s define an interface for our clients to implement. This interface should contain a list of all the methods that are provided by our microservice’s API. As a result, we get the following code:&lt;/p&gt;
&lt;div class=&#34;content-tab-selector&#34;&gt;
	&lt;div class=&#34;btn-group tab-selector-btn-group&#34; role=&#34;group&#34; aria-label=&#34;Language selector&#34;&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Node&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;.NET&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Golang&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Dart&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Python&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Java&lt;/button&gt;
	&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let’s start writing our direct client. This will be a class that implements the interface we defined above, that has our controller set as a dependency in the controller, and that will call the controller’s methods when asked to. To learn more about the referencing and linking mechanisms, be sure to read &lt;a href=&#34;../../../recipes/component_references/&#34;&gt;The Referenceable Recipes&lt;/a&gt;. Ultimately, this will just be a wrapper class for the container.
The direct client’s code is listed below:&lt;/p&gt;
&lt;div class=&#34;content-tab-selector&#34;&gt;
	&lt;div class=&#34;btn-group tab-selector-btn-group&#34; role=&#34;group&#34; aria-label=&#34;Language selector&#34;&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Node&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;.NET&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Golang&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Dart&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Python&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Java&lt;/button&gt;
	&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that we’re done writing the client, we should test it.
To be sure that our code works as intended, we need to perform some functional testing. Let’s start with creating, in a separate class, a set of tests that will be common to all our clients. This will help us simplify the process of testing multiple clients, as well as make sure that they all work the same. We’ll place the code for our tests in the &lt;strong&gt;test/version1&lt;/strong&gt; folder. The code for this class can be found in the &lt;a href=&#34;https://github.com/pip-services-samples/client-beacons-python/blob/master/test/version1/BeaconsClientV1Fixture.py&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, let’s test the direct client. To do this, create an instance of the direct client and pass it as a parameter to our set of tests.
An example implementation of the tests can be found in the example’s &lt;a href=&#34;https://github.com/pip-services-samples/client-beacons-python/blob/master/test/version1/test_BeaconsDirectClientV1.python&#34;&gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Run the tests using the testing methods that are standard for the programming language you are using. All tests should pass successfully.This finishes the development of the Direct client.
Move on to &lt;a href=&#34;../step3&#34;&gt;Step 4. Designing an HTTP Client&lt;/a&gt;.&lt;/p&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h3 id=&#34;step-4-designing-an-http-clientstep3&#34;&gt;&lt;a href=&#34;../step3&#34;&gt;Step 4. Designing an HTTP Client&lt;/a&gt;&lt;/h3&gt;
&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Step 4. Designing an HTTP Client</title>
      <link>/python/tutorials/client_library/step3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/tutorials/client_library/step3/</guid>
      <description>
        
        
        &lt;p&gt;The standard way of communicating with a microservice is via the HTTP protocol. It allows calling microservices that work on a separate server, or in their own container. Our example microservice uses a simplified version of the HTTP protocol that is automatically generated using the Commandable pattern.&lt;/p&gt;
&lt;p&gt;Then, creates a new class for the Commandable REST client and an implementation for each of the microservice’s methods. This is done by calling the REST API’s methods using the methods of the parent Commandable REST client, passing the necessary set of parameters, and then processing the response’s result. Since the answer from the client is returned as JSON, some programming languages will require that you first convert it to an instance with a specific type. Be sure to remember this when writing your HTTP clients.&lt;/p&gt;
&lt;p&gt;The client’s resulting code is listed below:&lt;/p&gt;
&lt;div class=&#34;content-tab-selector&#34;&gt;
	&lt;div class=&#34;btn-group tab-selector-btn-group&#34; role=&#34;group&#34; aria-label=&#34;Language selector&#34;&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Node&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;.NET&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Golang&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Dart&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Python&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Java&lt;/button&gt;
	&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To be sure that our code works as intended, we should perform some functional testing. Test the Commandable HTTP REST client using the class with tests that we developed in the previous step. To do this, create an instance of the HTTP REST client and pass it as a parameter to our set of tests.
An example implementation of the tests can be found in the example’s &lt;a href=&#34;https://github.com/pip-services-samples/client-beacons-python/blob/master/test/version1/test_BeaconsHttpClient.py&#34;&gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All tests should pass successfully.This finishes the development of our clients. As a result, we ended up with 2 clients: one for working from within a monolithic application, and another for working with the microservice from a different application, when utilizing a distributed architecture.&lt;/p&gt;
&lt;p&gt;To simulate the service, let&amp;rsquo;s create a test client in &lt;a href=&#34;../step4&#34;&gt;Step 5. Implementing a Mock Client.&lt;/a&gt;&lt;/p&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h3 id=&#34;step-5-implementing-a-mock-clientstep4&#34;&gt;&lt;a href=&#34;../step4&#34;&gt;Step 5. Implementing a Mock Client.&lt;/a&gt;&lt;/h3&gt;
&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Step 5. Implementing a Mock Client</title>
      <link>/python/tutorials/client_library/step4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/tutorials/client_library/step4/</guid>
      <description>
        
        
        &lt;p&gt;Complex systems usually experience difficulties when it comes to writing unit tests for a logic that calls external services. These tests are supposed to run quickly and without any additional infrastructure. The standard approach to solving this problem is to replace the calls to external services with a local approximation (a.k.a. a mock). However, writing mocks takes time and doesn’t always guarantee functionality that matches the real service.&lt;/p&gt;
&lt;p&gt;In our projects, we’ve come to the conclusion that it pays off to develop mocks alongside the real clients and test them using common tests, to guarantee that their behavior is identical. This way, all users of the microservice will receive both the client and mock from the library and will be able to start coding logic and unit tests for it without delay.&lt;/p&gt;
&lt;p&gt;In this step we will be demonstrating how Mock clients are developed and how they can be tested using the tests we created earlier.&lt;/p&gt;
&lt;p&gt;The test client has to implement the same interface that the other clients did. However, the client’s methods are going to contain code that only imitates the microservice’s behavior.&lt;/p&gt;
&lt;p&gt;The code for this client is showed below:&lt;/p&gt;
&lt;div class=&#34;content-tab-selector&#34;&gt;
	&lt;div class=&#34;btn-group tab-selector-btn-group&#34; role=&#34;group&#34; aria-label=&#34;Language selector&#34;&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Node&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;.NET&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Golang&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Dart&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Python&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Java&lt;/button&gt;
	&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s test the client we’ve created. We’ll be using the set of tests that we developed in one of the previous steps, and adding just one test file that will bring it all together. The source of this file is presented below:&lt;/p&gt;
&lt;div class=&#34;content-tab-selector&#34;&gt;
	&lt;div class=&#34;btn-group tab-selector-btn-group&#34; role=&#34;group&#34; aria-label=&#34;Language selector&#34;&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Node&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;.NET&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Golang&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Dart&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Python&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Java&lt;/button&gt;
	&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Create a file with the tests and run them. All the tests should pass, even though the server-side code wasn’t actually used anywhere.&lt;/p&gt;
&lt;p&gt;This technique becomes very useful when developing microservices that bring together multiple microservices by means of their clients (e.g. a facade microservice). It allows us to perform functional testing without having to run the entire infrastructure.&lt;/p&gt;
&lt;p&gt;To performing non-fuctional testing, we need to generate a large amount of realistic data. Users usually don’t know the entire data structure with all of its variations and exceptions. The next component we will be adding to our client library is a random data generator. This component can be used by the microservice’s users to create quality tests. The implementation is usually done in the form of static methods that either return an entire object, or just some part of its parameters. Let’s take a look at what an implementation of such a generator for the &lt;strong&gt;BeaconsV1&lt;/strong&gt; data object would look like. The generator’s code is listed below:&lt;/p&gt;
&lt;div class=&#34;content-tab-selector&#34;&gt;
	&lt;div class=&#34;btn-group tab-selector-btn-group&#34; role=&#34;group&#34; aria-label=&#34;Language selector&#34;&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Node&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;.NET&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Golang&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Dart&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Python&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Java&lt;/button&gt;
	&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this implementation, the ranges of generated values are statically set, but they can be passed as parameters to the methods and dynamically set as needed.
Using this instrument, we can easily generate large volumes of realistic data. This, in turn, can be used to test, for example, how fast the system can create elements in the persistence it’s using.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;../step5&#34;&gt;Step 6. Testing the Client with a Remote Microservice&lt;/a&gt;, we’ll be taking a look at how to test our client using a microservice that is remotely deployed in a Docker container.&lt;/p&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h3 id=&#34;step-6-testing-the-client-with-a-remote-microservicestep5&#34;&gt;&lt;a href=&#34;../step5&#34;&gt;Step 6. Testing the Client with a Remote Microservice&lt;/a&gt;&lt;/h3&gt;
&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Step 6. Testing the Client with a Remote Microservice</title>
      <link>/python/tutorials/client_library/step5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/tutorials/client_library/step5/</guid>
      <description>
        
        
        &lt;p&gt;In the previous steps, we were looking at the development of clients and at the clients themselves. However, both the client and the microservice were implemented in the same language, which allowed us to run components of the microservice from right inside the tests. In a multi-language environment, there are times when you need to create clients in a language that is different from the one that was used to write the microservice. In this last step, we will be demonstrating a similar situation, showing how to use Docker to link and run microservices and other infrastructure services, and describing how to integrate this into the development process.
This step will be using the &lt;strong&gt;BeaconsCommandableHttpClientV1&lt;/strong&gt; class that we created in step 3, along with a new set of tests that still uses the Beacons microservice, but this time - one that is running in a separate Docker container. In other words, the Beacon microservice that is on DockerHub is written in Node.js, which may or may not be the language that you have been using throughout this tutorial.
To run the microservice in Docker, we’ll first need to create a configuration file called  &lt;strong&gt;docker/docker-compose.dev.yml&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;3.3&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;    
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;pipdevs/data-microservice-node:1.0&amp;#34;&lt;/span&gt;    
    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;      
      - &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;8080:8080&amp;#34;&lt;/span&gt;  
    &lt;span style=&#34;color:#f92672&#34;&gt;depends_on&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;      
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;mongo     &lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;      
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;HTTP_ENABLED=true      &lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;HTTP_PORT=8080      &lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;MONGO_ENABLED=true      &lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;MONGO_SERVICE_HOST=mongo      &lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;MONGO_SERVICE_PORT=27017&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;mongo&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;    
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;mongo:latest      &lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;        
      - &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;27017:27017&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This configuration will run the microservice alongside a Mongo DB for data storage. HTTP services will also be started on port 8080 and will be made accessible from outside the container. You can set up the microservice to run with a memory persistence as well. To do this, comment out the MONGO environment variables, as well as any other Mongo-related parameters.
The image parameter contains the name of the Docker image being hosted on DockerHub (pipdevs/data-microservice-node:1.0), which is the microservice we want to be testing with. Once we get our microservice up and running, it will be available at http://localhost:8080, and the client will be able to work with it using this address. Let’s design a test, in which the client will work with our new service. We’ll be basing this test off of the one we wrote in Step 3. Place the code below into a file named &lt;strong&gt;test_BeaconsHttpClientV1.py&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;content-tab-selector&#34;&gt;
	&lt;div class=&#34;btn-group tab-selector-btn-group&#34; role=&#34;group&#34; aria-label=&#34;Language selector&#34;&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Node&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;.NET&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Golang&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Dart&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Python&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Java&lt;/button&gt;
	&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This test differs from the previous one mainly in that we aren’t running the microservice’s components in the test itself. Instead, we are configuring our client to connect to the microservice, which will be running in our Docker container. Another difference is that we will be deleting all data from the microservice before each test, so that our test always starts off with a clean DB.
Before we can start testing, we need to get our containerized microservice up and running. To do this, run the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker-compose -f ./docker/docker-compose.dev.yml up 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a separate console, run the test using the following command:&lt;/p&gt;
&lt;div class=&#34;content-tab-selector&#34;&gt;
	&lt;div class=&#34;btn-group tab-selector-btn-group&#34; role=&#34;group&#34; aria-label=&#34;Language selector&#34;&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Node&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;.NET&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Golang&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Dart&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Python&lt;/button&gt;
	  &lt;button type=&#34;button&#34; class=&#34;btn btn-outline-secondary lang-select-btn&#34;&gt;Java&lt;/button&gt;
	&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;    
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  


&lt;nil&gt;
&lt;/div&gt;
&lt;div class=&#34;content-tab-section&#34;&gt;
  Not available  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The tests should all pass, and the container’s console should display information about what it was doing in the process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;beacons:INFO:2020-06-24T15:27:42.747Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Press Control-C to stop the microservice...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;beacons:DEBUG:2020-06-24T15:27:42.982Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Opened REST service at http://0.0.0.0:8080
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;beacons:INFO:2020-06-24T15:27:42.983Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Container beacons started.
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.003Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.create_beacon method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.007Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Created item &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.093Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.create_beacon method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.093Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Created item &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.108Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.get_beacons method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.111Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Retrieved &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; items
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.165Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.update_beacon method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.167Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Updated item &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.218Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.get_beacon_by_udi method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.220Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Found beacon by &lt;span style=&#34;color:#ae81ff&#34;&gt;00001&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.270Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.delete_beacon_by_id method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.271Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Deleted item by &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.322Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.get_beacon_by_id method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.322Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Cannot find item by &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.332Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.delete_beacon_by_id method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:19.333Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Deleted item by &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:21.435Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.create_beacon method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:21.435Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Created item &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:21.448Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.create_beacon method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:21.449Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Created item &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:21.505Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.calculate_position method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:21.509Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Retrieved &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; items
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:21.562Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Executing v1/beacons.calculate_position method
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;123:TRACE:2020-06-24T15:31:21.563Z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Retrieved &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; items
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this approach, any combination of services and clients can be tested against one another.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
