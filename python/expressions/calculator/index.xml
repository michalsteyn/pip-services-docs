<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Calculator</title>
    <link>/python/expressions/calculator/</link>
    <description>Recent content in Calculator on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/python/expressions/calculator/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Python: Functions</title>
      <link>/python/expressions/calculator/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/calculator/functions/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h3&gt;
&lt;h4 id=&#34;ifunctionifunction&#34;&gt;&lt;a href=&#34;ifunction&#34;&gt;IFunction&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Interface for expression functions.&lt;/p&gt;
&lt;h4 id=&#34;ifunctioncollectionifunction_collection&#34;&gt;&lt;a href=&#34;ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a list of functions.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;defaultfunctioncollectiondefault_function_collection&#34;&gt;&lt;a href=&#34;default_function_collection&#34;&gt;DefaultFunctionCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a list filled with standard functions.&lt;/p&gt;
&lt;h4 id=&#34;delegatedfunctiondelegated_function&#34;&gt;&lt;a href=&#34;delegated_function&#34;&gt;DelegatedFunction&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines a delegate to implement a function.&lt;/p&gt;
&lt;h4 id=&#34;functioncollectionfunction_collection&#34;&gt;&lt;a href=&#34;function_collection&#34;&gt;FunctionCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a list of functions.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Parsers</title>
      <link>/python/expressions/calculator/parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/calculator/parser/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;constants&#34;&gt;Constants&lt;/h3&gt;
&lt;h4 id=&#34;expressiontokentypeexpression_token_type&#34;&gt;&lt;a href=&#34;expression_token_type&#34;&gt;ExpressionTokenType&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines types of expression tokens.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;expressionparserexpression_parser&#34;&gt;&lt;a href=&#34;expression_parser&#34;&gt;ExpressionParser&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements an expression parser class.&lt;/p&gt;
&lt;h4 id=&#34;expressiontokenexpression_token&#34;&gt;&lt;a href=&#34;expression_token&#34;&gt;ExpressionToken&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines an expression token holder&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Tokenizers</title>
      <link>/python/expressions/calculator/tokenizers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/calculator/tokenizers/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;expressionnumberstateexpression_number_state&#34;&gt;&lt;a href=&#34;expression_number_state&#34;&gt;ExpressionNumberState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements an expression-specific number state object.&lt;/p&gt;
&lt;h4 id=&#34;expressionquotestateexpression_quote_state&#34;&gt;&lt;a href=&#34;expression_quote_state&#34;&gt;ExpressionQuoteState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements an expression-specific quote string state object&lt;/p&gt;
&lt;h4 id=&#34;expressionsymbolstateexpression_symbol_state&#34;&gt;&lt;a href=&#34;expression_symbol_state&#34;&gt;ExpressionSymbolState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a symbol state object.&lt;/p&gt;
&lt;h4 id=&#34;expressiontokenizerexpression_tokenizer&#34;&gt;&lt;a href=&#34;expression_tokenizer&#34;&gt;ExpressionTokenizer&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a tokenizer to perform lexical analysis for expressions.&lt;/p&gt;
&lt;h4 id=&#34;expressionwordstateexpression_word_state&#34;&gt;&lt;a href=&#34;expression_word_state&#34;&gt;ExpressionWordState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a symbol state object.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Variables</title>
      <link>/python/expressions/calculator/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/calculator/variables/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h3&gt;
&lt;h4 id=&#34;ivariableivariable&#34;&gt;&lt;a href=&#34;ivariable&#34;&gt;IVariable&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The IVariable interface allows you to define a variable.&lt;/p&gt;
&lt;h4 id=&#34;ivariablecollectionivariable_collection&#34;&gt;&lt;a href=&#34;ivariable_collection&#34;&gt;IVariableCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The IVariableCollection interface defines a list of variables.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;variablevariable&#34;&gt;&lt;a href=&#34;variable&#34;&gt;Variable&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a variable holder object.&lt;/p&gt;
&lt;h4 id=&#34;variablecollectionvariable_collection&#34;&gt;&lt;a href=&#34;variable_collection&#34;&gt;VariableCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a list of variables.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Python: CalculationStack</title>
      <link>/python/expressions/calculator/calculation_stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/calculator/calculation_stack/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CalculationStack class allows you to implement a stack of Variant values.&lt;/p&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;length&#34;&gt;length&lt;/h4&gt;
&lt;p&gt;Length&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;length(): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - length&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;pop&#34;&gt;pop&lt;/h4&gt;
&lt;p&gt;Removes and returns the last value from the list.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pop(): &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt; - the last value from the list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek_at&#34;&gt;peek_at&lt;/h4&gt;
&lt;p&gt;Peeks a Variant value located at a specified index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;peek_at(index: int): &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - a specified index.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt; - a Variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;peek&lt;/h4&gt;
&lt;p&gt;Peeks a Variant value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;peek(): &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt; - a Variant value.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: ExpressionCalculator</title>
      <link>/python/expressions/calculator/expression_calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/calculator/expression_calculator/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ExpressionCalculator class allows you to create an expression calculator.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructs this class and a assigns expression string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ExpressionCalculator(expression: str = None)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt;: str - expression string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;auto_variables&#34;&gt;auto_variables&lt;/h4&gt;
&lt;p&gt;Gets the flag to turn on auto-creation of variables for a specified expression.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;auto_variables(): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - returns the flag to turn on auto-creation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sets the flag to turn on auto-creation of variables for specified expression.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;auto_variables(value: bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: bool - flag to turn on auto-creation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;default_functions&#34;&gt;default_functions&lt;/h4&gt;
&lt;p&gt;List with default functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;default_functions(): &lt;a href=&#34;../functions/ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../functions/ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt; - list with default functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;default_variables&#34;&gt;default_variables&lt;/h4&gt;
&lt;p&gt;List with default variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;default_variables(): &lt;a href=&#34;../variables/ivariable_collection&#34;&gt;IVariableCollection&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../variables/ivariable_collection&#34;&gt;IVariableCollection&lt;/a&gt; - list with default variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;expression&#34;&gt;expression&lt;/h4&gt;
&lt;p&gt;Expression string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;expression(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - expression string.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;expression(value: str)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: str - expression string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;initial_tokens&#34;&gt;initial_tokens&lt;/h4&gt;
&lt;p&gt;List of original expression tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;initial_tokens(): List[&lt;a href=&#34;../parsers/expression_token&#34;&gt;ExpressionToken&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[&lt;a href=&#34;../parsers/expression_token&#34;&gt;ExpressionToken&lt;/a&gt;] - list of original expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;original_tokens&#34;&gt;original_tokens&lt;/h4&gt;
&lt;p&gt;List of expression tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;original_tokens(): List[&lt;a href=&#34;../../tokenizers/token&#34;&gt;Token&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[&lt;a href=&#34;../../tokenizers/token&#34;&gt;Token&lt;/a&gt;] - list of expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;original_tokens(value: List[&lt;a href=&#34;../../tokenizers/token&#34;&gt;Token&lt;/a&gt;])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: List[&lt;a href=&#34;../../tokenizers/token&#34;&gt;Token&lt;/a&gt;] - list of expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;result_tokens&#34;&gt;result_tokens&lt;/h4&gt;
&lt;p&gt;List of processed expression tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;result_tokens(): List[&lt;a href=&#34;../parsers/expression_token&#34;&gt;ExpressionToken&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[&lt;a href=&#34;../parsers/expression_token&#34;&gt;ExpressionToken&lt;/a&gt;] - list of processed expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variant_operations&#34;&gt;variant_operations&lt;/h4&gt;
&lt;p&gt;Gets the manager for operations on variant values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;variant_operations(): &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - manager for operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sets the manager for operations on variant values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;variant_operations(value: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - manager for operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Cleans up this calculator from all data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;create_variables&#34;&gt;create_variables&lt;/h4&gt;
&lt;p&gt;Cleans up this calculator from all data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;create_variables(variables: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - list of variables to be populated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluate&#34;&gt;evaluate&lt;/h4&gt;
&lt;p&gt;Evaluates this expression using default variables and functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;evaluate(): &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt; - evaluation result.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluate_with_variables&#34;&gt;evaluate_with_variables&lt;/h4&gt;
&lt;p&gt;Evaluates this expression using specified variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;evaluate_with_variables(variables: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;): &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - list of variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt; - evaluation result.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluate_with_variables_and_functions&#34;&gt;evaluate_with_variables_and_functions&lt;/h4&gt;
&lt;p&gt;Evaluates this expression using specified variables and functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;evaluate_with_variables_and_functions(variables: Optional[&lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;], functions: Optional[&lt;a href=&#34;../functions/ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt;]): &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: Optional[&lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;] - list of variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;functions&lt;/strong&gt;: Optional[&lt;a href=&#34;../functions/ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt;] - list of functions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/variant&#34;&gt;Variant&lt;/a&gt; - evaluation result.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: ExpressionException</title>
      <link>/python/expressions/calculator/expression_exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/calculator/expression_exception/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../../../commons/errors/bad_request_exception&#34;&gt;BadRequestException&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ExpressionException class defines an exception that can be thrown by ExpressionCalculator.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new intance of this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ExpressionException(correlation_id: Optional[str] = None, code: Optional[str] = None, message: Optional[str] = None, line: int = 0, column: int = 0)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlation_id&lt;/strong&gt;: Optional[str] - transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: Optional[str] - code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: Optional[str] - human-readable error message.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: int - line number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;column&lt;/strong&gt;: int - column number&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: SyntaxErrorCode</title>
      <link>/python/expressions/calculator/syntax_error_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/calculator/syntax_error_code/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The SyntaxErrorCode class defines general syntax errors.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;error_near&#34;&gt;ERROR_NEAR&lt;/h4&gt;
&lt;p&gt;Error near.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ERROR_NEAR&lt;/strong&gt;: str = &amp;ldquo;ERROR_NEAR&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;internal&#34;&gt;INTERNAL&lt;/h4&gt;
&lt;p&gt;Internal error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INTERNAL&lt;/strong&gt;: str = &amp;ldquo;INTERNAL&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;missed_close_parenthesis&#34;&gt;MISSED_CLOSE_PARENTHESIS&lt;/h4&gt;
&lt;p&gt;Missed close parenthesis.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MISSED_CLOSE_PARENTHESIS&lt;/strong&gt;: str = &amp;ldquo;MISSED_CLOSE_PARENTHESIS&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;missed_close_square_bracket&#34;&gt;MISSED_CLOSE_SQUARE_BRACKET&lt;/h4&gt;
&lt;p&gt;Missed close square bracket.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MISSED_CLOSE_SQUARE_BRACKET&lt;/strong&gt;: str = &amp;ldquo;MISSED_CLOSE_SQUARE_BRACKET&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unexpected_end&#34;&gt;UNEXPECTED_END&lt;/h4&gt;
&lt;p&gt;Unexpected end.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UNEXPECTED_END&lt;/strong&gt;: str = &amp;ldquo;UNEXPECTED_END&amp;rdquo;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unknown&#34;&gt;UNKNOWN&lt;/h4&gt;
&lt;p&gt;Unknown&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UNKNOWN&lt;/strong&gt;: str = &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unknown_symbol&#34;&gt;UNKNOWN_SYMBOL&lt;/h4&gt;
&lt;p&gt;Unknown symbol&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UNKNOWN_SYMBOL&lt;/strong&gt;: str = &amp;ldquo;UNKNOWN_SYMBOL&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Python: SyntaxException</title>
      <link>/python/expressions/calculator/syntax_exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/calculator/syntax_exception/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../../../commons/errors/bad_request_exception&#34;&gt;BadRequestException&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The SyntaxException class defines the exceptions that can be thrown by the &lt;a href=&#34;../parser/expression_parser&#34;&gt;ExpressionParser&lt;/a&gt; class.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the SyntaxException class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SyntaxException(correlation_id: Optional[str] = None, code: Optional[str] = None, message: Optional[str] = None, line: int = 0, column: int = 0)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlation_id&lt;/strong&gt;: Optional[str] - transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: Optional[str] - code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: Optional[str] - human-readable error message.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: int - line number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;column&lt;/strong&gt;: int - column number&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
