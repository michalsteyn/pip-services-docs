<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Tokenizers</title>
    <link>/python/expressions/tokenizers/</link>
    <description>Recent content in Tokenizers on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/python/expressions/tokenizers/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Python: Generic</title>
      <link>/python/expressions/tokenizers/generic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/generic/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;ccommentstatec_comment_state&#34;&gt;&lt;a href=&#34;c_comment_state&#34;&gt;CCommentState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This state will either delegate to a comment-handling state, or return a token with just a slash in it.&lt;/p&gt;
&lt;h4 id=&#34;cppcommentstatecpp_comment_state&#34;&gt;&lt;a href=&#34;cpp_comment_state&#34;&gt;CppCommentState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This state will either delegate to a comment-handling state, or return a token with just a slash in it.&lt;/p&gt;
&lt;h4 id=&#34;genericcommentstategeneric_comment_state&#34;&gt;&lt;a href=&#34;generic_comment_state&#34;&gt;GenericCommentState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A CommentState object returns a comment from a scanner.&lt;/p&gt;
&lt;h4 id=&#34;genericnumberstategeneric_number_state&#34;&gt;&lt;a href=&#34;generic_number_state&#34;&gt;GenericNumberState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A NumberState object returns a number from a scanner.&lt;/p&gt;
&lt;h4 id=&#34;genericquotestategeneric_quote_state&#34;&gt;&lt;a href=&#34;generic_quote_state&#34;&gt;GenericQuoteState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A quoteState returns a quoted string token from a scanner.&lt;/p&gt;
&lt;h4 id=&#34;genericsymbolstategeneric_symbol_state&#34;&gt;&lt;a href=&#34;generic_symbol_state&#34;&gt;GenericSymbolState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The GenericSymbolState class allows you to add multi-character symbols and obtain a symbol token from a scanner.&lt;/p&gt;
&lt;h4 id=&#34;generictokenizergeneric_tokenizer&#34;&gt;&lt;a href=&#34;generic_tokenizer&#34;&gt;GenericTokenizer&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a default tokenizer class.&lt;/p&gt;
&lt;h4 id=&#34;genericwhitespacestategeneric_whitespace_state&#34;&gt;&lt;a href=&#34;generic_whitespace_state&#34;&gt;GenericWhitespaceState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Creates a whitespace state.&lt;/p&gt;
&lt;h4 id=&#34;genericwordstategeneric_word_state&#34;&gt;&lt;a href=&#34;generic_word_state&#34;&gt;GenericWordState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A WordState returns a word from a scanner.&lt;/p&gt;
&lt;h4 id=&#34;symbolnodesymbol_node&#34;&gt;&lt;a href=&#34;symbol_node&#34;&gt;SymbolNode&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Constructs a SymbolNode.&lt;/p&gt;
&lt;h4 id=&#34;symbolrootnodesymbol_root_node&#34;&gt;&lt;a href=&#34;symbol_root_node&#34;&gt;SymbolRootNode&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This class is a special case of a SymbolNode. A SymbolRootNode object has no symbol of its own, but has children that represent all possible symbols.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Utilities</title>
      <link>/python/expressions/tokenizers/utilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/utilities/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;classes&#34;&gt;Classes&lt;/h3&gt;
&lt;h4 id=&#34;charreferenceintervalchar_reference_interval&#34;&gt;&lt;a href=&#34;char_reference_interval&#34;&gt;CharReferenceInterval&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Represents a character interval that keeps a reference.&lt;/p&gt;
&lt;h4 id=&#34;charreferencemapchar_reference_map&#34;&gt;&lt;a href=&#34;char_reference_map&#34;&gt;CharReferenceMap&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This class keeps references associated with specific characters.&lt;/p&gt;
&lt;h4 id=&#34;charvalidatorchar_validator&#34;&gt;&lt;a href=&#34;char_validator&#34;&gt;CharValidator&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Validates characters that are processed by Tokenizers.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Python: AbstractTokenizer</title>
      <link>/python/expressions/tokenizers/abstract_tokenizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/abstract_tokenizer/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../itokenizer&#34;&gt;ITokenizer&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AbstractTokenizer class defines a general tokenizer.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;_last_token_type&#34;&gt;_last_token_type&lt;/h4&gt;
&lt;p&gt;Last token type&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;_last_token_type&lt;/strong&gt;: &lt;a href=&#34;../token_type&#34;&gt;TokenType&lt;/a&gt; = &lt;a href=&#34;../token_type&#34;&gt;TokenType.Unknown&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_next_token&#34;&gt;_next_token&lt;/h4&gt;
&lt;p&gt;Next token&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;_next_token&lt;/strong&gt;: &lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_scanner&#34;&gt;_scanner&lt;/h4&gt;
&lt;p&gt;Scanner&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;_scanner&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;comment_state&#34;&gt;comment_state&lt;/h4&gt;
&lt;p&gt;Comment state&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;comment_state&lt;/strong&gt;: &lt;a href=&#34;../icomment_state&#34;&gt;ICommentState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;decode_strings&#34;&gt;decode_strings&lt;/h4&gt;
&lt;p&gt;Boolean that defines the option to decode strings or not.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;decode_strings&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;merge_whitespaces&#34;&gt;merge_whitespaces&lt;/h4&gt;
&lt;p&gt;Boolean that defines the option to unify white spaces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;merge_whitespaces&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;number_state&#34;&gt;number_state&lt;/h4&gt;
&lt;p&gt;Number state&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;number_state&lt;/strong&gt;: &lt;a href=&#34;../inumber_state&#34;&gt;INumberState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;quote_state&#34;&gt;quote_state&lt;/h4&gt;
&lt;p&gt;Quote state&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;quote_state&lt;/strong&gt;: &lt;a href=&#34;../iquote_state&#34;&gt;IQuoteState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;skip_comments&#34;&gt;skip_comments&lt;/h4&gt;
&lt;p&gt;Boolean that defines the option to skip comments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;skip_comments&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;skip_eof&#34;&gt;skip_eof&lt;/h4&gt;
&lt;p&gt;Boolean that defines the option to skip EOF.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;skip_eof&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;skip_unknown&#34;&gt;skip_unknown&lt;/h4&gt;
&lt;p&gt;Boolean that defines the option to skip unknowns.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;skip_unknown&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;skip_whitespaces&#34;&gt;skip_whitespaces&lt;/h4&gt;
&lt;p&gt;Boolean that defines the option to skip white spaces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;skip_whitespaces&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;symbol_state&#34;&gt;symbol_state&lt;/h4&gt;
&lt;p&gt;Symbol state&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;symbol_state&lt;/strong&gt;: &lt;a href=&#34;../isymbol_state&#34;&gt;ISymbolState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unify_numbers&#34;&gt;unify_numbers&lt;/h4&gt;
&lt;p&gt;Boolean that defines the option to unify numbers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;unify_numbers&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;whitespace_state&#34;&gt;whitespace_state&lt;/h4&gt;
&lt;p&gt;White space state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;whitespace_state&lt;/strong&gt;: &lt;a href=&#34;../iwhitespace_state&#34;&gt;IWhitespaceState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;word_state&#34;&gt;word_state&lt;/h4&gt;
&lt;p&gt;Word state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;word_state&lt;/strong&gt;: &lt;a href=&#34;../iword_state&#34;&gt;IWordState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;scanner&#34;&gt;scanner&lt;/h4&gt;
&lt;p&gt;Scanner&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;scanner(): &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - scanner&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;scanner(value: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - scanner&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clear_character_states&#34;&gt;clear_character_states&lt;/h4&gt;
&lt;p&gt;Clears all character states.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear_character_states()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;get_character_state&#34;&gt;get_character_state&lt;/h4&gt;
&lt;p&gt;Gest the state for a given character.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;get_character_state(symbol: int): &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;symbol&lt;/strong&gt;: int - symbol&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt; - tokenizer state&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;has_next_token&#34;&gt;has_next_token&lt;/h4&gt;
&lt;p&gt;Finds out if the tokenizer has a next token.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;has_next_token(): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if it has a next token, false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;next_token&#34;&gt;next_token&lt;/h4&gt;
&lt;p&gt;Gets the next token.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;next_token(): &lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt; - next token&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read_next_token&#34;&gt;read_next_token&lt;/h4&gt;
&lt;p&gt;Reads the next token.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;read_next_token(): &lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt; - next token&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set_character_state&#34;&gt;set_character_state&lt;/h4&gt;
&lt;p&gt;Sets the characters&#39; state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set_character_state(from_symbol: int, to_symbol: int, state: &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt;): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;from_symbol&lt;/strong&gt;: int - first symbol&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;to_symbol&lt;/strong&gt;: int - last symbol&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;: &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt; - tokenizer state&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tokenize_buffer&#34;&gt;tokenize_buffer&lt;/h4&gt;
&lt;p&gt;Provides a token for a string buffer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tokenize_buffer(buffer: str): List[&lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;buffer&lt;/strong&gt;: str - buffer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[&lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;] - token&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tokenize_buffer_to_strings&#34;&gt;tokenize_buffer_to_strings&lt;/h4&gt;
&lt;p&gt;Creates a list of token values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tokenize_buffer_to_strings(buffer: str): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;buffer&lt;/strong&gt;: str - buffer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - list of token values&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tokenize_stream&#34;&gt;tokenize_stream&lt;/h4&gt;
&lt;p&gt;Creates a list of tokens&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tokenize_stream(scanner: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;): List[&lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;scanner&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - scanner&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[&lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;] - list of tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tokenize_stream_to_strings&#34;&gt;tokenize_stream_to_strings&lt;/h4&gt;
&lt;p&gt;Creates a list of token values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tokenize_stream_to_strings(scanner: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;scanner&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - scanner&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - list of token values&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: ICommentState</title>
      <link>/python/expressions/tokenizers/icomment_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/icomment_state/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ICommentState interface is used for tokenizer states that process comments.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Python: INumberState</title>
      <link>/python/expressions/tokenizers/inumber_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/inumber_state/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The INumberState interface is used by tokenizer states that process numbers, such as Integers, Floats, HexDex, etc.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Python: IQuoteState</title>
      <link>/python/expressions/tokenizers/iquote_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/iquote_state/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IQuoteState interface is used for tokenizer states that process quoted strings.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;decode_string&#34;&gt;decode_string&lt;/h4&gt;
&lt;p&gt;Decodes a string value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;decode_string(value: str, quote_symbol: int): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: str - string value to be decoded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quote_symbol&lt;/strong&gt;: int - string quote character.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - decoded string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;encode_string&#34;&gt;encode_string&lt;/h4&gt;
&lt;p&gt;Encodes a string value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;encode_string(value: str, quote_symbol: int): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: str - string value to be encoded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quote_symbol&lt;/strong&gt;: int - string quote character.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - encoded string.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: ISymbolState</title>
      <link>/python/expressions/tokenizers/isymbol_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/isymbol_state/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ISymbolState interface is used for tokenizer states that process delimiters.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;add&#34;&gt;add&lt;/h4&gt;
&lt;p&gt;Add a multi-character symbol.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;add(value: str, token_type: &lt;a href=&#34;../token_type&#34;&gt;TokenType&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: str - symbol to add, such as &lt;em&gt;&amp;quot;=:=&amp;quot;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;token_type&lt;/strong&gt;: &lt;a href=&#34;../token_type&#34;&gt;TokenType&lt;/a&gt; - token type.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: ITokenizer</title>
      <link>/python/expressions/tokenizers/itokenizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/itokenizer/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ITokenizer interface defines the main elements of a tokenizer.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A tokenizer divides a string into tokens. This class is highly customizable with regard to exactly how this division occurs, but it also has defaults that are suitable for many languages. This class assumes that the character values read from the string lie in the range 0-255. For example, the Unicode value of a capital A is 65, so &lt;em&gt;String.fromCharCode(65)&lt;/em&gt; prints out a capital A.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The behavior of a tokenizer depends on its character state table. This table is an array of 256 &lt;em&gt;TokenizerState&lt;/em&gt; states. The state table decides which state to enter
upon reading a character from the input string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example, by default, upon reading an &amp;lsquo;A&amp;rsquo;, a tokenizer will enter a &amp;ldquo;word&amp;rdquo; state. This means the tokenizer will ask a &lt;em&gt;WordState&lt;/em&gt; object to consume the &amp;lsquo;A&amp;rsquo;,
along with the characters after the &amp;lsquo;A&amp;rsquo; that form a word. The state&amp;rsquo;s responsibility is to consume characters and return a complete token.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The default table sets a SymbolState for every character from 0 to 255, and then overrides this with:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;pre&gt;
From    To        State
 0     &#39; &#39;   whitespaceState 
&#39;a&#39;    &#39;z&#39;      wordState
&#39;A&#39;    &#39;Z&#39;      wordState
160     255     wordState
&#39;0&#39;    &#39;9&#39;     numberState
&#39;-&#39;    &#39;-&#39;     numberState
&#39;.&#39;    &#39;.&#39;     numberState
&#39;&#34;&#39;    &#39;&#34;&#39;      quoteState
&#39;\&#39;&#39;   &#39;\&#39;&#39;     quoteState
&#39;/&#39;    &#39;/&#39;      slashState
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In addition to allowing modification of the state table, this class makes each of the states above available. Some of these states are customizable. For example, wordState allows customization of what characters can be part of a word, after the first character.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;comment_state&#34;&gt;comment_state&lt;/h4&gt;
&lt;p&gt;A token state to process comments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;comment_state&lt;/strong&gt;: &lt;a href=&#34;../icomment_state&#34;&gt;ICommentState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;decode_strings&#34;&gt;decode_strings&lt;/h4&gt;
&lt;p&gt;Decodes quoted strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;decode_strings&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;merge_whitespaces&#34;&gt;merge_whitespaces&lt;/h4&gt;
&lt;p&gt;Merges whitespaces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;merge_whitespaces&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;number_state&#34;&gt;number_state&lt;/h4&gt;
&lt;p&gt;A token state to process numbers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;number_state&lt;/strong&gt;: &lt;a href=&#34;../inumber_state&#34;&gt;INumberState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;quote_state&#34;&gt;quote_state&lt;/h4&gt;
&lt;p&gt;A token state to process quoted strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;quote_state&lt;/strong&gt;: &lt;a href=&#34;../iquote_state&#34;&gt;IQuoteState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;scanner&#34;&gt;scanner&lt;/h4&gt;
&lt;p&gt;The stream scanner to tokenize.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;scanner&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;skip_comments&#34;&gt;skip_comments&lt;/h4&gt;
&lt;p&gt;Skips comments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;skip_comments&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;skip_eof&#34;&gt;skip_eof&lt;/h4&gt;
&lt;p&gt;Skips End-Of-File token at the end of stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;skip_eof&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;skip_unknown&#34;&gt;skip_unknown&lt;/h4&gt;
&lt;p&gt;Skip unknown characters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;skip_unknown&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;skip_whitespaces&#34;&gt;skip_whitespaces&lt;/h4&gt;
&lt;p&gt;Skips whitespaces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;skip_whitespaces&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;symbol_state&#34;&gt;symbol_state&lt;/h4&gt;
&lt;p&gt;A token state to process symbols (single like &amp;ldquo;=&amp;rdquo; or muti-character like &amp;ldquo;&amp;lt;&amp;gt;&amp;quot;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;symbol_state&lt;/strong&gt;: &lt;a href=&#34;../isymbol_state&#34;&gt;ISymbolState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unify_numbers&#34;&gt;unify_numbers&lt;/h4&gt;
&lt;p&gt;Unifies numbers: &amp;ldquo;Integers&amp;rdquo; and &amp;ldquo;Floats&amp;rdquo; makes just &amp;ldquo;Numbers&amp;rdquo;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;unify_numbers&lt;/strong&gt;: bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;whitespace_state&#34;&gt;whitespace_state&lt;/h4&gt;
&lt;p&gt;A token state to process white space delimiters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;whitespace_state&lt;/strong&gt;: &lt;a href=&#34;../iwhitespace_state&#34;&gt;IWhitespaceState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;word_state&#34;&gt;word_state&lt;/h4&gt;
&lt;p&gt;A token state to process words or indentifiers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;word_state&lt;/strong&gt;: &lt;a href=&#34;../iword_state&#34;&gt;IWordState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;has_next_token&#34;&gt;has_next_token&lt;/h4&gt;
&lt;p&gt;Checks if there is a next token.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;has_next_token(): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - &lt;strong&gt;true&lt;/strong&gt; if scanner has a next token.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;next_token&#34;&gt;next_token&lt;/h4&gt;
&lt;p&gt;Gets the next token from the scanner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;next_token(): &lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt; - next token or &lt;em&gt;None&lt;/em&gt; if there are no more tokens left.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tokenize_buffer&#34;&gt;tokenize_buffer&lt;/h4&gt;
&lt;p&gt;Tokenizes a string buffer into a list of tokens structures.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tokenize_buffer(buffer: str): List[&lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;buffer&lt;/strong&gt;: str - string buffer to be tokenized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[&lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;] - list of token structures.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tokenize_buffer_to_strings&#34;&gt;tokenize_buffer_to_strings&lt;/h4&gt;
&lt;p&gt;Tokenizes a string buffer into a list of strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tokenize_buffer_to_strings(buffer: str): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;buffer&lt;/strong&gt;: str - string buffer to be tokenized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - list of token strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tokenize_stream&#34;&gt;tokenize_stream&lt;/h4&gt;
&lt;p&gt;Tokenizes a text stream into a list of token structures.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tokenize_stream(scanner: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;): List[&lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;scanner&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - text stream to be tokenized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[&lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;] - list of token structures.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tokenize_stream_to_strings&#34;&gt;tokenize_stream_to_strings&lt;/h4&gt;
&lt;p&gt;Tokenizes a text stream into a list of strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tokenize_stream_to_strings(scanner: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;): List[str]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;scanner&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - text stream to be tokenized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: List[str] - list of token strings.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: ITokenizerState</title>
      <link>/python/expressions/tokenizers/itokenizer_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/itokenizer_state/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ITokenizerState interface is used by TokenizerStates. A tokenizerState returns a token, given a scanner, an initial character read from the scanner, and a tokenizer that is conducting an overall tokenization of the scanner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The tokenizer will typically have a character state table that decides which state to use, depending on an initial character. If a single character is insufficient, a state such as &lt;em&gt;SlashState&lt;/em&gt; will read a second character, and may delegate to another state, such as &lt;em&gt;SlashStarState&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This prospect of delegation is the reason that the &lt;em&gt;nextToken()&lt;/em&gt; method has a tokenizer argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;next_token&#34;&gt;next_token&lt;/h4&gt;
&lt;p&gt;Gets the next token from the stream started from the character linked to this state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;next_token(scanner: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;, tokenizer: &lt;a href=&#34;../itokenizer&#34;&gt;ITokenizer&lt;/a&gt;): &lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;scanner&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - text string to be tokenized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tokenizer&lt;/strong&gt;: &lt;a href=&#34;../itokenizer&#34;&gt;ITokenizer&lt;/a&gt; - tokenizer class that controls the process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../token&#34;&gt;Token&lt;/a&gt; - next token from the top of the stream.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: IWhitespaceState</title>
      <link>/python/expressions/tokenizers/iwhitespace_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/iwhitespace_state/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IWhitespaceState interface is used by TokenizerStates that process whitespaces (&#39; &amp;lsquo;, &amp;lsquo;\t&amp;rsquo;).&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clear_whitespace_chars&#34;&gt;clear_whitespace_chars&lt;/h4&gt;
&lt;p&gt;Clears definitions of whitespace characters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear_whitespace_chars()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;set_whitespace_chars&#34;&gt;set_whitespace_chars&lt;/h4&gt;
&lt;p&gt;Establish the given characters as whitespace to ignore.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set_whitespace_chars(from_symbol: int, to_symbol: int, enable: bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fromSymbol&lt;/strong&gt;: int - first character index of the interval.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toSymbol&lt;/strong&gt;: int - last character index of the interval.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;enable&lt;/strong&gt;: bool - &lt;em&gt;true&lt;/em&gt; if this state should ignore characters in the given range.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: IWordState</title>
      <link>/python/expressions/tokenizers/iword_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/iword_state/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../itokenizer_state&#34;&gt;ITokenizerState&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IWordState interface is used by tokenizer states that process words, identificators or keywords.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;clear_word_chars&#34;&gt;clear_word_chars&lt;/h4&gt;
&lt;p&gt;Clears definitions of word chars.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear_word_chars()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;set_word_chars&#34;&gt;set_word_chars&lt;/h4&gt;
&lt;p&gt;Establish characters in the given range as valid characters for part of a word after
the first character. Note that the tokenizer must determine which characters are valid
as the beginning character of a word.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set_word_chars(from_symbol: int, to_symbol: int, enable: bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fromSymbol&lt;/strong&gt;: int - first character index of the interval.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toSymbol&lt;/strong&gt;: int - last character index of the interval.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;enable&lt;/strong&gt;: bool - &lt;em&gt;true&lt;/em&gt; if this state should use characters in the given range.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: Token</title>
      <link>/python/expressions/tokenizers/token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/token/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The Token class represents a token.  A token represents a logical chunk of a string. For example, a typical tokenizer would break the string &lt;em&gt;&amp;ldquo;1.23 &amp;lt;= 12.3&amp;rdquo;&lt;/em&gt; into three tokens: the number &lt;em&gt;1.23&lt;/em&gt;, a less-than-or-equal symbol, and the number &lt;em&gt;12.3&lt;/em&gt;. A token is a receptacle, and relies on a tokenizer to decide precisely how to divide a string into tokens.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Constructs a token with a type and value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Token(type: &lt;a href=&#34;../token_type&#34;&gt;TokenType&lt;/a&gt;, value: str, line: int, column: int)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: &lt;a href=&#34;../token_type&#34;&gt;TokenType&lt;/a&gt; - type of this token.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: str - token string value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: int - line number where the token is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;column&lt;/strong&gt;: int - column number where the token is.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;column&lt;/h4&gt;
&lt;p&gt;Column number where the token is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;column(): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - column number.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;line&lt;/h4&gt;
&lt;p&gt;Line number where the token is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;line(): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - line number.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;type&#34;&gt;type&lt;/h4&gt;
&lt;p&gt;Token type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type(): &lt;a href=&#34;../token_type&#34;&gt;TokenType&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../token_type&#34;&gt;TokenType&lt;/a&gt; - token type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;value&#34;&gt;value&lt;/h4&gt;
&lt;p&gt;Token value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;value(): str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: str - token value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;equals&#34;&gt;equals&lt;/h4&gt;
&lt;p&gt;Compares this token to an object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;equals(obj: any): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: Any - compared object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if the type and value are the same, false otherwise.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: TokenType</title>
      <link>/python/expressions/tokenizers/token_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/token_type/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TokenType class defines different types (categories) of tokens, such as &amp;ldquo;number&amp;rdquo;, &amp;ldquo;symbol&amp;rdquo; and &amp;ldquo;word&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;enumeration-members&#34;&gt;Enumeration members&lt;/h3&gt;
&lt;p&gt;The codes are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unknown&lt;/strong&gt; = 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eof&lt;/strong&gt; = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eol&lt;/strong&gt; = 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Float&lt;/strong&gt; = 3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integer&lt;/strong&gt; = 4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HexDecimal&lt;/strong&gt; = 5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number&lt;/strong&gt; = 6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Symbol&lt;/strong&gt; = 7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quoted&lt;/strong&gt; = 8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Word&lt;/strong&gt; = 9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keyword&lt;/strong&gt; = 10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Whitespace&lt;/strong&gt; = 11&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comment&lt;/strong&gt; = 12&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Special&lt;/strong&gt; = 13&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
