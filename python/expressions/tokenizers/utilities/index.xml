<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Utilities</title>
    <link>/python/expressions/tokenizers/utilities/</link>
    <description>Recent content in Utilities on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/python/expressions/tokenizers/utilities/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Python: CharReferenceInterval</title>
      <link>/python/expressions/tokenizers/utilities/char_reference_interval/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/utilities/char_reference_interval/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CharReferenceInterval allows you to represent a character interval that keeps a reference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This class is internal and used by &lt;a href=&#34;../char_reference_map&#34;&gt;CharReferenceMap&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the CharReferenceInterval class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CharReferenceInterval(start: int, end: int, reference: Any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;: int - start of the interval&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;end&lt;/strong&gt;: int - end of the interval&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reference&lt;/strong&gt;: Any - reference&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;end&#34;&gt;end&lt;/h4&gt;
&lt;p&gt;End of the interval&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;end(): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - end of the interval&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reference&#34;&gt;reference&lt;/h4&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;reference(): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - reference&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;start&#34;&gt;start&lt;/h4&gt;
&lt;p&gt;Start of the interval&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;start(): int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - start of the interval&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;in_range&#34;&gt;in_range&lt;/h4&gt;
&lt;p&gt;Determines if a symbol is within a range&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;in_range(symbol: int): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;symbol&lt;/strong&gt;: int - symbol&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if it is within the range and false otherwise.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: CharReferenceMap</title>
      <link>/python/expressions/tokenizers/utilities/char_reference_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/utilities/char_reference_map/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CharReferenceMap class allows you to keep references associated with specific characters.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CharReferenceMap()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;add_default_interval&#34;&gt;add_default_interval&lt;/h4&gt;
&lt;p&gt;Adds a default interval.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;add_default_interval(reference: Any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reference&lt;/strong&gt;: Any - reference&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;add_interval&#34;&gt;add_interval&lt;/h4&gt;
&lt;p&gt;Adds an interval.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;add_interval(start: int, end: int, reference: Any)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;: int - start of the interval&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;end&lt;/strong&gt;: int - end of the interval&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reference&lt;/strong&gt;: Any - reference&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;Clears up the intervals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;lookup&#34;&gt;lookup&lt;/h4&gt;
&lt;p&gt;Looks up for a specified symbol.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;lookup(symbol: int): Any&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;symbol&lt;/strong&gt;: int - symbol&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: Any - reference&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Python: CharValidator</title>
      <link>/python/expressions/tokenizers/utilities/char_validator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/expressions/tokenizers/utilities/char_validator/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CharValidator class allows you to validate characters that are processed by tokenizers.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Default contructor to prevent creation of a class instance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CharValidator()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;eof&#34;&gt;Eof&lt;/h4&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Eof&lt;/strong&gt;: int = 0xffff&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;zero&#34;&gt;Zero&lt;/h4&gt;
&lt;p&gt;Zero&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Zero&lt;/strong&gt;: int = ord(&amp;lsquo;0&amp;rsquo;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;nine&#34;&gt;Nine&lt;/h4&gt;
&lt;p&gt;Nine&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nine&lt;/strong&gt;: int = ord(&amp;lsquo;9&amp;rsquo;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;static-methods&#34;&gt;Static methods&lt;/h3&gt;
&lt;h4 id=&#34;is_eof&#34;&gt;is_eof&lt;/h4&gt;
&lt;p&gt;Checks if a character is an EOF.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;is_eof(value: int): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int - value to check&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - validation result&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;is_eol&#34;&gt;is_eol&lt;/h4&gt;
&lt;p&gt;Checks if a character is an EOL.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;is_eol(value: int): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int - value to check&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - validation result&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;is_digit&#34;&gt;is_digit&lt;/h4&gt;
&lt;p&gt;Checks if a character is a digit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;is_digit(value: int): bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int - value to check&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - validation result&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
