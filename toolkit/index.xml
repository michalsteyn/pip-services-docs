<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – Testing Tools</title>
    <link>/toolkit/</link>
    <description>Recent content in Testing Tools on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/toolkit/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Toolkit: Adding logging to your microservice</title>
      <link>/toolkit/getting_started/adding-logging-to-your-microservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/toolkit/getting_started/adding-logging-to-your-microservice/</guid>
      <description>
        
        
        &lt;h2 id=&#34;key-takeaways&#34;&gt;Key takeaways&lt;/h2&gt;
&lt;p&gt;| Logging     | Logging is the capacity to create tagged messages from events in our code. |
| Logging levels      | Logging levels: nothing, fatal, error, warn, info, debug, and trace.       |
| ConsoleLogger   | PIP.Services component for displaying logging messages on the console.        |
| CachedLogger     | PIP.Services component that caches log messages in memory. |
| CompositeLogger      | PIP.Services component for aggregating logging messages.       |
| DataDogLogger, ElasticSearchLogger, CloudWatchLogger    | PIP.Services logger implementations for Datadog, Elasticsearch, and Amazon CloudWatch components.       |&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial, you will learn how to add logging capacity to a microservice. First, we will understand what logging consists of. Then, we will use the microservice we created in the “Creating a component” tutorial, replace the printed messages with logger messages and create an exception in our business process (my_task). After running the code, we will see the tagged messages from the logger.&lt;/p&gt;
&lt;p&gt;Once we have seen how to create a logger that displays messages on our console, we will learn how to create a composite logger, which will add the capacity to aggregate the log messages from different sources and centralize their display on our console.&lt;/p&gt;
&lt;p&gt;Finally, we will see how to add loggers for Datadog, Elasticsearch, and Amazon CloudWatch components.&lt;/p&gt;
&lt;h2 id=&#34;what-is-logging&#34;&gt;What is logging?&lt;/h2&gt;
&lt;p&gt;Logging is the capacity to create tagged messages from events in our code. These messages can inform us about the running process.&lt;/p&gt;
&lt;p&gt;There are different logging levels. PIP.Services defines them as:&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Toolkit: Adding logging to your microservice</title>
      <link>/toolkit/getting_started/change-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/toolkit/getting_started/change-me/</guid>
      <description>
        
        
        &lt;h2 id=&#34;key-takeaways&#34;&gt;Key takeaways&lt;/h2&gt;
&lt;p&gt;| Logging     | Logging is the capacity to create tagged messages from events in our code. |
| Logging levels      | Logging levels: nothing, fatal, error, warn, info, debug, and trace.       |
| ConsoleLogger   | PIP.Services component for displaying logging messages on the console.        |
| CachedLogger     | PIP.Services component that caches log messages in memory. |
| CompositeLogger      | PIP.Services component for aggregating logging messages.       |
| DataDogLogger, ElasticSearchLogger, CloudWatchLogger    | PIP.Services logger implementations for Datadog, Elasticsearch, and Amazon CloudWatch components.       |&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial, you will learn how to add logging capacity to a microservice. First, we will understand what logging consists of. Then, we will use the microservice we created in the “Creating a component” tutorial, replace the printed messages with logger messages and create an exception in our business process (my_task). After running the code, we will see the tagged messages from the logger.&lt;/p&gt;
&lt;p&gt;Once we have seen how to create a logger that displays messages on our console, we will learn how to create a composite logger, which will add the capacity to aggregate the log messages from different sources and centralize their display on our console.&lt;/p&gt;
&lt;p&gt;Finally, we will see how to add loggers for Datadog, Elasticsearch, and Amazon CloudWatch components.&lt;/p&gt;
&lt;h2 id=&#34;what-is-logging&#34;&gt;What is logging?&lt;/h2&gt;
&lt;p&gt;Logging is the capacity to create tagged messages from events in our code. These messages can inform us about the running process.&lt;/p&gt;
&lt;p&gt;There are different logging levels. PIP.Services defines them as:&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
