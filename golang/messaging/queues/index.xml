<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Queues</title>
    <link>/golang/messaging/queues/</link>
    <description>Recent content in Queues on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/messaging/queues/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: CachedMessageQueue!</title>
      <link>/golang/messaging/queues/cached_message_queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/messaging/queues/cached_message_queue/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Golang: CallbackMessageReceiver</title>
      <link>/golang/messaging/queues/callback_message_receiver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/messaging/queues/callback_message_receiver/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CallbackMessageReceiver class allows you to wrap message callbacks into &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newcallbackmessagereceiver&#34;&gt;NewCallbackMessageReceiver&lt;/h4&gt;
&lt;p&gt;Creates an instance of the CallbackMessageReceiver.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewCallbackMessageReceiver(callback func(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, queue &lt;a href=&#34;../imessage_queue&#34;&gt;IMessageQueue&lt;/a&gt;) error) &lt;a href=&#34;&#34;&gt;*CallbackMessageReceiver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;callback&lt;/strong&gt;: func(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, queue &lt;a href=&#34;../imessage_queue&#34;&gt;IMessageQueue&lt;/a&gt;) - a callback function that shall be wrapped into &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;receivemessage&#34;&gt;ReceiveMessage&lt;/h4&gt;
&lt;p&gt;Receives an incoming message from the queue.&lt;br&gt;
See also &lt;a href=&#34;../message_envelope&#34;&gt;MessageEnvelope&lt;/a&gt;, &lt;a href=&#34;../imessage_queue&#34;&gt;IMessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CallbackMessageReceiver&lt;/a&gt;) ReceiveMessage(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, queue &lt;a href=&#34;../imessage_queue&#34;&gt;IMessageQueue&lt;/a&gt;) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;envelope&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;MessageEnvelope&lt;/a&gt; - incoming message.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;queue&lt;/strong&gt;: &lt;a href=&#34;../imessage_queue&#34;&gt;IMessageQueue&lt;/a&gt; - queue where the message comes from.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - returns error if not received.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: IMessageQueue</title>
      <link>/golang/messaging/queues/imessage_queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/messaging/queues/imessage_queue/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../../../commons/run/iopenable&#34;&gt;IOpenable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IMessageQueue interface is used for asynchronous message queues.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not all queues may implement all the methods.&lt;/li&gt;
&lt;li&gt;An ttempt to call a non-supported method will result in a NotImplemented exception.&lt;/li&gt;
&lt;li&gt;To verify if a specific method is supported check &lt;a href=&#34;../messaging_capabilities&#34;&gt;MessagingCapabilities&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;abandon&#34;&gt;Abandon&lt;/h4&gt;
&lt;p&gt;Returns a message into the queue and makes it available for all subscribers to receive it again. This method is usually used to return a message which could not be processed at the moment, to repeat the attempt. Messages that cause unrecoverable errors shall be removed permanently or/and sent to dead letter queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Abandon(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;beginlisten&#34;&gt;BeginListen&lt;/h4&gt;
&lt;p&gt;Listens for incoming messages without blocking the current thread.&lt;br&gt;
See also &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;, &lt;a href=&#34;#listen&#34;&gt;listen&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BeginListen(correlationId string, receiver &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through a the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;receiver&lt;/strong&gt;: &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt; - receiver used to receive incoming messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;complete&#34;&gt;Complete&lt;/h4&gt;
&lt;p&gt;Permanently removes a message from the queue. This method is usually used to remove the message after successful processing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Complete(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to remove.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;endlisten&#34;&gt;EndListen&lt;/h4&gt;
&lt;p&gt;Ends listening for incoming messages. When this method is called, &lt;a href=&#34;#listen&#34;&gt;listen&lt;/a&gt; unblocks the thread and execution continues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EndListen(correlationId string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;capabilities&#34;&gt;Capabilities&lt;/h4&gt;
&lt;p&gt;Gets the queue capabilities&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Capabilities() &lt;a href=&#34;../messaging_capabilities&#34;&gt;*MessagingCapabilities&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../messaging_capabilities&#34;&gt;*MessagingCapabilities&lt;/a&gt; - queue&amp;rsquo;s capabilities object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;name&#34;&gt;Name&lt;/h4&gt;
&lt;p&gt;Gets the queue name&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Name() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - queue name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;listen&#34;&gt;Listen&lt;/h4&gt;
&lt;p&gt;Listens for incoming messages and blocks the current thread until queue is closed.&lt;br&gt;
See also &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;, &lt;a href=&#34;#receive&#34;&gt;Receive&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Listen(correlationId string, receiver &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;receiver&lt;/strong&gt;: &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt; - receiver used to receive incoming messages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;movetodeadletter&#34;&gt;MoveToDeadLetter&lt;/h4&gt;
&lt;p&gt;Permanently removes a message from the queue and sends it to the dead letter queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MoveToDeadLetter(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to be removed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Peeks a single incoming message from the queue without removing it. If there are no messages available in the queue, it returns null.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Peek(correlationId string) (result &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (result &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error) - peeked message or &lt;em&gt;null&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekbatch&#34;&gt;PeekBatch&lt;/h4&gt;
&lt;p&gt;Peeks multiple incoming messages from the queue without removing them. If there are no messages available in the queue, it returns an empty list.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PeekBatch(correlationId string, messageCount int64) (result []&lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;orrelation_id&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;messageCount&lt;/strong&gt;: int64 - maximum number of messages to peek.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (result []&lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error) - peeked list with messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;readmessagecount&#34;&gt;ReadMessageCount&lt;/h4&gt;
&lt;p&gt;Reads the current number of messages in the queue to be delivered.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReadMessageCount() (count int64, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (count int64, err error) - number of messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;receive&#34;&gt;Receive&lt;/h4&gt;
&lt;p&gt;Receives an incoming message and removes it from the queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Receive(correlationId string, waitTimeout time.Duration) (result &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;waitTimeout&lt;/strong&gt;: time.Duration - timeout in milliseconds to wait for a message to come.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (result &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error) - received message or &lt;em&gt;null&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;renewlock&#34;&gt;RenewLock&lt;/h4&gt;
&lt;p&gt;Renews a lock on a message that makes it invisible from other receivers in the queue. This method is usually used to extend the message processing time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RenewLock(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, lockTimeout time.Duration) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to extend its lock.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lockTimeout&lt;/strong&gt;: time.Duration - locking timeout in milliseconds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;send&#34;&gt;Send&lt;/h4&gt;
&lt;p&gt;Sends a message into the queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Send(correlationId string, envelope &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;envelope&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message envelop to be sent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sendasobject&#34;&gt;SendAsObject&lt;/h4&gt;
&lt;p&gt;Sends an object into the queue. Before being sent, the object is converted into JSON string and wrapped in a &lt;a href=&#34;../message_envelope&#34;&gt;MessageEnvelope&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SendAsObject(correlationId string, messageType string, value interface{}) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;messageType&lt;/strong&gt;: string - message type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - object value to be sent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;messageenvelopemessage_envelope&#34;&gt;&lt;a href=&#34;../message_envelope&#34;&gt;MessageEnvelope&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;messagingcapabilitiesmessaging_capabilities&#34;&gt;&lt;a href=&#34;../messaging_capabilities&#34;&gt;MessagingCapabilities&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: IMessageReceive</title>
      <link>/golang/messaging/queues/imessage_receiver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/messaging/queues/imessage_receiver/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IMessageReceive interface is used to receive incoming messages.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;receivemessage&#34;&gt;ReceiveMessage&lt;/h4&gt;
&lt;p&gt;Receives an incoming message from the queue.&lt;/p&gt;
&lt;p&gt;See also &lt;a href=&#34;../message_envelope&#34;&gt;MessageEnvelope&lt;/a&gt;, &lt;a href=&#34;../imessage_queue&#34;&gt;IMessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReceiveMessage(envelope &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, queue IMessageQueue) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;envelope&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - incoming message,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;queue&lt;/strong&gt;: &lt;a href=&#34;../imessage_queue&#34;&gt;IMessageQueue&lt;/a&gt; - queue where the message comes from.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyMessageReceiver&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;MyMessageReceiver&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;ReceiveMessage&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;envelop&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MessageEnvelop&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;IMessageQueue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#75af00&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Received message: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;envelop&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;GetMessageAsString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;messageQueue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewMemoryMessageQueue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;messageQueue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Listen&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewMyMessageReceiver&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;opnErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;messageQueue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Open&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;opnErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#75af00&#34;&gt;messageQueue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Send&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewMessageEnvelop&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mymessage&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Output in console: &amp;#34;Received message: ABC&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: LockedMessage</title>
      <link>/golang/messaging/queues/locked_message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/messaging/queues/locked_message/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The LockedMessage class allows you to create data objects used to store and lock incoming messages in &lt;a href=&#34;../memory_message_queue&#34;&gt;MemoryMessageQueue&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;expirationtime&#34;&gt;ExpirationTime&lt;/h4&gt;
&lt;p&gt;The expiration time for the message lock.
If it is null, then the message is not locked.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ExpirationTime&lt;/strong&gt;: time.Time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;message&#34;&gt;Message&lt;/h4&gt;
&lt;p&gt;The incoming message.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;timeout&#34;&gt;Timeout&lt;/h4&gt;
&lt;p&gt;The lock timeout in milliseconds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Timeout&lt;/strong&gt;: time.Duration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;memorymessagequeuememory_message_queue&#34;&gt;&lt;a href=&#34;../memory_message_queue&#34;&gt;MemoryMessageQueue&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MemoryMessageQueue</title>
      <link>/golang/messaging/queues/memory_message_queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/messaging/queues/memory_message_queue/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../message_queue&#34;&gt;MessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MemoryMessageQueue class is used to create message queues that send and receive messages within the same process by using shared memory.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This queue is typically used for testing to mock real queues.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;configuration-parameters&#34;&gt;Configuration parameters&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: name of the message queue&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;*:logger:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/log/ilogger&#34;&gt;ILogger&lt;/a&gt; components to pass log messages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:counters:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/count/ilogger&#34;&gt;ICounters&lt;/a&gt; components to pass collected measurements&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmemorymessagequeue&#34;&gt;NewMemoryMessageQueue&lt;/h4&gt;
&lt;p&gt;Creates a new instance of the message queue.&lt;br&gt;
See also &lt;a href=&#34;../messaging_capabilities&#34;&gt;MessagingCapabilities&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMemoryMessageQueue(name string) &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - (optional) a queue name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;abandon&#34;&gt;Abandon&lt;/h4&gt;
&lt;p&gt;Returns a message into the queue and makes it available for all subscribers to receive it again. This method is usually used to return a message that could not be processed at the moment to repeat the attempt. Messages that cause unrecoverable errors shall be removed permanently or/and sent to dead letter queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) Abandon(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Clears the component&amp;rsquo;s state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) Clear(correlationId string) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;close&#34;&gt;Close&lt;/h4&gt;
&lt;p&gt;Closes the component and frees used resources.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) Close(correlationId string) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;complete&#34;&gt;Complete&lt;/h4&gt;
&lt;p&gt;Permanently removes a message from the queue. This method is usually used to remove the message after successful processing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) Complete(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to remove.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;endlisten&#34;&gt;EndListen&lt;/h4&gt;
&lt;p&gt;Ends listening for incoming messages. When this method is called, &lt;a href=&#34;#listen&#34;&gt;listen&lt;/a&gt; unblocks the thread and execution continues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) EndListen(correlationId string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id to trace execution through a call chain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isopen&#34;&gt;IsOpen&lt;/h4&gt;
&lt;p&gt;Checks if the component is opened.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) IsOpen() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the component is open and False otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;listen&#34;&gt;Listen&lt;/h4&gt;
&lt;p&gt;Listens for incoming messages and blocks the current thread until the queue is closed.&lt;br&gt;
See also &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;, &lt;a href=&#34;#receive&#34;&gt;receive&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) Listen(correlationId string, receiver &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;receiver&lt;/strong&gt;: &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt; - receiver used to receive incoming messages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;open&#34;&gt;Open&lt;/h4&gt;
&lt;p&gt;Opens the component with given connection and credential parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) Open(correlationId string) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Peeks a single incoming message from the queue without removing it. If there are no messages available in the queue, it returns null.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) Peek(correlationId string) (result &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (result &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error) - peeked message or &lt;em&gt;null&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekbatch&#34;&gt;PeekBatch&lt;/h4&gt;
&lt;p&gt;Peeks multiple incoming messages from the queue without removing them. If there are no messages available in the queue, it returns an empty list.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) PeekBatch(correlationId string, messageCount int64) (result []&lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;messageCount&lt;/strong&gt;: int64 - maximum number of messages to peek.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (result []&lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error) - list with peeked messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;readmessagecount&#34;&gt;ReadMessageCount&lt;/h4&gt;
&lt;p&gt;Reads the current number of messages in the queue to be delivered.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) ReadMessageCount() (count int64, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (count int64, err error) - number of messages in the queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;receive&#34;&gt;Receive&lt;/h4&gt;
&lt;p&gt;Receives an incoming message and removes it from the queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) Receive(correlationId string, waitTimeout time.Duration) (&lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;waitTimeout&lt;/strong&gt;: time.Duration - timeout in milliseconds to wait for a message to come.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, error) - received message or &lt;em&gt;null&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;renewlock&#34;&gt;RenewLock&lt;/h4&gt;
&lt;p&gt;Renews a lock on a message that makes it invisible from other receivers in the queue. This method is usually used to extend the message processing time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) RenewLock(message &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, lockTimeout time.Duration) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to extend its lock.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lockTimeout&lt;/strong&gt;: time.Duration - locking timeout in milliseconds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;send&#34;&gt;Send&lt;/h4&gt;
&lt;p&gt;Sends a message into the queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MemoryMessageQueue&lt;/a&gt;) Send(correlationId string, envelope &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;envelope&lt;/strong&gt;: &lt;a href=&#34;../message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message envelop to be sent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewMessageQueue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;myqueue&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Send&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewMessageEnvelop&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mymessage&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Receive&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
   &lt;span style=&#34;color:#75af00&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Complete&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;messagingcapabilitiesmessaging_capabilities&#34;&gt;&lt;a href=&#34;../messaging_capabilities&#34;&gt;MessagingCapabilities&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;messagequeuemessage_queue&#34;&gt;&lt;a href=&#34;../message_queue&#34;&gt;MessageQueue&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MessageEnvelope</title>
      <link>/golang/messaging/queues/message_envelope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/messaging/queues/message_envelope/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MessageEnvelope class allows you to add additional information to messages.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A correlation id, message id, and a message type are added to the data being sent/received. Additionally, a MessageEnvelope can reference a lock token.&lt;/li&gt;
&lt;li&gt;A MessageEnvelope&amp;rsquo;s message is stored as a buffer, so strings are converted using utf8 conversions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmessageenvelope&#34;&gt;NewMessageEnvelope&lt;/h4&gt;
&lt;p&gt;Creates a new &lt;a href=&#34;&#34;&gt;MessageEnvelope&lt;/a&gt;, which adds a correlation id, message id, and a type to the data being sent/received.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMessageEnvelope(correlationId string, messageType string, message []byte) &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;messageType&lt;/strong&gt;: string - a string value that defines the message&amp;rsquo;s type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: []byte - the data being sent/received.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;newemptymessageenvelope&#34;&gt;NewEmptyMessageEnvelope&lt;/h4&gt;
&lt;p&gt;NewMessageEnvelope method are creates an empty MessageEnvelope&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewEmptyMessageEnvelope() &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;correlationid&#34;&gt;CorrelationId&lt;/h4&gt;
&lt;p&gt;The unique business transaction id that is used to trace calls across components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;CorrelationId&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;message&#34;&gt;Message&lt;/h4&gt;
&lt;p&gt;The stored message.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;Message&lt;/strong&gt;: []byte&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;messageid&#34;&gt;MessageId&lt;/h4&gt;
&lt;p&gt;The message&amp;rsquo;s auto-generated ID.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;MessageId&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;messagetype&#34;&gt;MessageType&lt;/h4&gt;
&lt;p&gt;String value that defines the stored message&amp;rsquo;s type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;MessageType&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;senttime&#34;&gt;SentTime&lt;/h4&gt;
&lt;p&gt;The time at which the message was sent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; &lt;strong&gt;SentTime&lt;/strong&gt;: time.Time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;marshaljson&#34;&gt;MarshalJSON&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) MarshalJSON() ([]byte, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: ([]byte, error) - TODO: add description&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;unmarshaljson&#34;&gt;UnmarshalJSON&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) UnmarshalJSON(data []byte) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: []byte - TODO: add description&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getmessageas&#34;&gt;GetMessageAs&lt;/h4&gt;
&lt;p&gt;Returns any the value that was stored in this message as a JSON string.&lt;br&gt;
See also &lt;a href=&#34;#setmessageasobject&#34;&gt;SetMessageAsObject&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) GetMessageAs(value interface{}) interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - TODO: add description.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - value that was stored in this message as a JSON string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getmessageasstring&#34;&gt;GetMessageAsString&lt;/h4&gt;
&lt;p&gt;Returns the information stored in this message as a UTF-8 encoded string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) GetMessageAsString() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - information stored in this message as a UTF-8 encoded string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getmessageasjson&#34;&gt;GetMessageAsJson&lt;/h4&gt;
&lt;p&gt;GetMessageAsJson method are returns the value that was stored in this message as a JSON string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) GetMessageAsJson() interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - value as a JSON string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getreference&#34;&gt;GetReference&lt;/h4&gt;
&lt;p&gt;Returns the lock token that this &lt;a href=&#34;&#34;&gt;MessageEnvelope&lt;/a&gt; references.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) GetReference() interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - lock token that this &lt;a href=&#34;&#34;&gt;MessageEnvelope&lt;/a&gt; references.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setmessageasobject&#34;&gt;SetMessageAsObject&lt;/h4&gt;
&lt;p&gt;Stores the given value as an object.
See also &lt;a href=&#34;#getmessageas&#34;&gt;GetMessageAs&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) SetMessageAsObject(value interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} -  value to convert to JSON and store in this message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setmessageasjson&#34;&gt;SetMessageAsJson&lt;/h4&gt;
&lt;p&gt;SetMessageAsJson method are stores the given value as a JSON string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) SetMessageAsJson(value interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - the value to convert to JSON and store in this message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setmessageasstring&#34;&gt;SetMessageAsString&lt;/h4&gt;
&lt;p&gt;Stores the given string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) SetMessageAsString(value string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - string to set. It will be converted to a buffer using UTF-8 encoding.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setreference&#34;&gt;SetReference&lt;/h4&gt;
&lt;p&gt;Sets a lock token reference for this &lt;a href=&#34;&#34;&gt;MessageEnvelope&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) SetReference(value interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - lock token to reference the message envelope.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;string&#34;&gt;String&lt;/h4&gt;
&lt;p&gt;Converts this &lt;a href=&#34;&#34;&gt;MessageEnvelope&lt;/a&gt; to a string, using the following format:&lt;br&gt;
&lt;em&gt;&amp;quot;[&lt;correlationId&gt;,&amp;lt;message_type&amp;gt;,&amp;lt;message.toString&amp;gt;]&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If any of the values are &lt;em&gt;null&lt;/em&gt;, they will be replaced with ---.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageEnvelope&lt;/a&gt;) String() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - generated string.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MessageQueue</title>
      <link>/golang/messaging/queues/message_queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/messaging/queues/message_queue/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../imessage_queue&#34;&gt;IMessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MessageQueue class allows you to create a message queue that is used as a basis for specific message queue implementions.&lt;/p&gt;
&lt;h4 id=&#34;configuration-parameters&#34;&gt;Configuration parameters&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: name of the message queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;connection(s)&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;discovery_key&lt;/strong&gt;: key to retrieve parameters from discovery service&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;protocol&lt;/strong&gt;: connection protocol like http, https, tcp, udp&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;host&lt;/strong&gt;: host name or IP address&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;port&lt;/strong&gt;: port number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uri&lt;/strong&gt;: resource URI or connection string with all parameters in it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;credential(s)&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;store_key&lt;/strong&gt;: key to retrieve parameters from credential store&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username&lt;/strong&gt;: username&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password&lt;/strong&gt;: user&amp;rsquo;s password&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;access_id&lt;/strong&gt;: application access id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;access_key&lt;/strong&gt;: application secret key&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;*:logger:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/log/ilogger&#34;&gt;ILogger&lt;/a&gt; components to pass log messages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:counters:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/count/ilogger&#34;&gt;ICounters&lt;/a&gt; components to pass collected measurements&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:discovery:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/connect/idiscovery&#34;&gt;IDiscovery&lt;/a&gt; components to discover connection(s)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:credential-store:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/auth/icredential_store&#34;&gt;ICredentialStore&lt;/a&gt; componetns to lookup credential(s)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;p&gt;Creates a new instance of the message queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;InheritMessageQueue(overrides IMessageQueueOverrides, name string, capabilities &lt;a href=&#34;../messaging_capabilities&#34;&gt;*MessagingCapabilities&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;overrides&lt;/strong&gt;: IMessageQueueOverrides - overrides IMessageQueue.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - (optional) queue name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;capabilities&lt;/strong&gt;: &lt;a href=&#34;../messaging_capabilities&#34;&gt;*MessagingCapabilities&lt;/a&gt; - (optional) capabilities of this message queue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;logger&#34;&gt;Logger&lt;/h4&gt;
&lt;p&gt;Component used to pass log messages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Logger&lt;/strong&gt;: &lt;a href=&#34;../../../components/log/composite_logger&#34;&gt;*CompositeLogger&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;counters&#34;&gt;Counters&lt;/h4&gt;
&lt;p&gt;Component to pass collected measurements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Counters&lt;/strong&gt;: &lt;a href=&#34;../../../components/count/composite_counters&#34;&gt;*CompositeCounters&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;connectionresolver&#34;&gt;ConnectionResolver&lt;/h4&gt;
&lt;p&gt;Component used to resolve connections.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ConnectionResolver&lt;/strong&gt;: &lt;a href=&#34;../../../components/connect/connection_resolver&#34;&gt;*ConnectionResolver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;credentialresolver&#34;&gt;CredentialResolver&lt;/h4&gt;
&lt;p&gt;Component used to resolve credentials.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CredentialResolver&lt;/strong&gt;: &lt;a href=&#34;../../../components/auth/credential_resolver&#34;&gt;*CredentialResolver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;name&#34;&gt;name&lt;/h4&gt;
&lt;p&gt;Name of the message queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;capabilities&#34;&gt;capabilities&lt;/h4&gt;
&lt;p&gt;Component used to store the message queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;capabilities&lt;/strong&gt;: &lt;a href=&#34;../messaging_capabilities&#34;&gt;*MessagingCapabilities&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;beginlisten&#34;&gt;BeginListen&lt;/h4&gt;
&lt;p&gt;Listens for incoming messages without blocking the current thread.&lt;br&gt;
See also &lt;a href=&#34;#listen&#34;&gt;Listen&lt;/a&gt;, &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;) BeginListen(correlationId string, receiver &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;receiver&lt;/strong&gt;: &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt; - receiver used to receive incoming messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;checkopen&#34;&gt;CheckOpen&lt;/h4&gt;
&lt;p&gt;Checks if the queue has been opened.
Raise an exception if queue wasn&amp;rsquo;t opened or &lt;em&gt;null&lt;/em&gt; otherwise&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;) CheckOpen(correlationId string) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;configure&#34;&gt;Configure&lt;/h4&gt;
&lt;p&gt;Configures the component by passing its configuration parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;) Configure(config &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;*cconf.ConfigParams&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt;: &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;*cconf.ConfigParams&lt;/a&gt; - configuration parameters to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;capabilities-1&#34;&gt;Capabilities&lt;/h4&gt;
&lt;p&gt;Gets the queue capabilities&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;) Capabilities() &lt;a href=&#34;../messaging_capabilities&#34;&gt;*MessagingCapabilities&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../messaging_capabilities&#34;&gt;*MessagingCapabilities&lt;/a&gt; - queue&amp;rsquo;s capabilities object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;listen&#34;&gt;Listen&lt;/h4&gt;
&lt;p&gt;Listens for incoming messages and blocks the current thread until the queue is closed.&lt;br&gt;
See also &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;, &lt;a href=&#34;#receive&#34;&gt;receive&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;public abstract&lt;/code&gt; listen(correlationId: string, receiver: &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;): void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;receiver&lt;/strong&gt;: &lt;a href=&#34;../imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt; - receiver used to receive incoming messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;name-1&#34;&gt;Name&lt;/h4&gt;
&lt;p&gt;Gets the queue name&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;) Name() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - queue name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;open&#34;&gt;Open&lt;/h4&gt;
&lt;p&gt;Opens the component.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;) Open(correlationId string) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sendasobject&#34;&gt;SendAsObject&lt;/h4&gt;
&lt;p&gt;Sends an object into the queue.
Before sending the object is converted into JSON string and wrapped in a &lt;a href=&#34;../message_mnvelope&#34;&gt;MessageEnvelope&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;) SendAsObject(correlationId string, messageType string, message interface{}) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;messageType&lt;/strong&gt;: string - a message type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: interface{} - an object value to be sent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setreferences&#34;&gt;SetReferences&lt;/h4&gt;
&lt;p&gt;Sets references to dependent components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;) SetReferences(references &lt;a href=&#34;../../../commons/refer/ireferences&#34;&gt;cref.IReferences&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;references&lt;/strong&gt;: &lt;a href=&#34;../../../commons/refer/ireferences&#34;&gt;cref.IReferences&lt;/a&gt; - references to locate the component dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;string&#34;&gt;String&lt;/h4&gt;
&lt;p&gt;Gets a string representation of the object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessageQueue&lt;/a&gt;) String() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;openwithparams&#34;&gt;OpenWithParams&lt;/h4&gt;
&lt;p&gt;Opens the component with the given connection and credential parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenWithParams(correlationId string, connections []&lt;a href=&#34;../../../components/connect/connection_params&#34;&gt;*cconn.ConnectionParams&lt;/a&gt;, credential &lt;a href=&#34;../../../components/auth/credential_params&#34;&gt;*cauth.CredentialParams&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;connections&lt;/strong&gt;: []&lt;a href=&#34;../../../components/connect/connection_params&#34;&gt;*cconn.ConnectionParams&lt;/a&gt; - connection parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;credentials&lt;/strong&gt;: &lt;a href=&#34;../../../components/auth/credential_params&#34;&gt;*cauth.CredentialParams&lt;/a&gt; - credential parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error -  error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MessagingCapabilities</title>
      <link>/golang/messaging/queues/messaging_capabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/messaging/queues/messaging_capabilities/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MessagingCapabilities class allows you to create data objects that contain supported capabilities of message queues.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If certain capability is not supported a queue will throw a NotImplemented exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmessagingcapabilities&#34;&gt;NewMessagingCapabilities&lt;/h4&gt;
&lt;p&gt;Creates a new instance of the capabilities object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMessagingCapabilities(canMessageCount bool, canSend bool, canReceive bool, canPeek bool, canPeekBatch bool, canRenewLock bool, canAbandon bool, canDeadLetter bool, canClear bool) &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;canMessageCount&lt;/strong&gt;: bool - True if the queue supports reading message count.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;canSend&lt;/strong&gt;: bool - True if the queue is able to send messages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;canReceive&lt;/strong&gt;: bool - True if the queue is able to receive messages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;canPeek&lt;/strong&gt;: bool - True if the queue is able to peek messages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;canPeekBatch&lt;/strong&gt;: bool - True if the queue is able to peek multiple messages in one batch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;canRenewLock&lt;/strong&gt;: bool - True if the queue is able to renew message lock.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;canAbandon&lt;/strong&gt;: bool - True if the queue is able to abandon messages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;canDeadLetter&lt;/strong&gt;: bool - True if the queue is able to send messages to dead letter queue.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;canClear&lt;/strong&gt;: bool - True if the queue can be cleared.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;canabandon&#34;&gt;CanAbandon&lt;/h4&gt;
&lt;p&gt;Informs if the queue is able to abandon messages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;) CanAbandon() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the queue is able to abandon messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;canclear&#34;&gt;CanClear&lt;/h4&gt;
&lt;p&gt;Informs if the queue can be cleared.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;) CanClear() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the queue can be cleared.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;candeadletter&#34;&gt;CanDeadLetter&lt;/h4&gt;
&lt;p&gt;Informs if the queue is able to send messages to dead letter queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;) CanDeadLetter() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the queue is able to send messages to dead letter queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;canmessagecount&#34;&gt;CanMessageCount&lt;/h4&gt;
&lt;p&gt;Informs if the queue is able to read the number of messages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;) CanMessageCount() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the queue supports reading message count.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;canpeek&#34;&gt;CanPeek&lt;/h4&gt;
&lt;p&gt;Informs if the queue is able to peek messages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;) CanPeek() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the queue is able to peek messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;canpeekbatch&#34;&gt;CanPeekBatch&lt;/h4&gt;
&lt;p&gt;Informs if the queue is able to peek multiple messages in one batch.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;) CanPeekBatch() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the queue is able to peek multiple messages in one batch.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;canreceive&#34;&gt;CanReceive&lt;/h4&gt;
&lt;p&gt;Informs if the queue is able to receive messages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;) CanReceive() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the queue is able to receive messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;canrenewlock&#34;&gt;CanRenewLock&lt;/h4&gt;
&lt;p&gt;Informs if the queue is able to renew message lock.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;) CanRenewLock() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the queue is able to renew message lock.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cansend&#34;&gt;CanSend&lt;/h4&gt;
&lt;p&gt;Informs if the queue is able to send messages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MessagingCapabilities&lt;/a&gt;) CanSend() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - True if the queue is able to send messages.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
