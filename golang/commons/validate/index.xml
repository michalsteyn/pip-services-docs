<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Validate</title>
    <link>/golang/commons/validate/</link>
    <description>Recent content in Validate on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/commons/validate/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: AndRule</title>
      <link>/golang/commons/validate/and_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/and_rule/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AndRule class allows you to validate combinations of rules created with AND logical operations.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When one or more of the combined rules return errors, then this rule returns all the errors that appeared.&lt;/li&gt;
&lt;li&gt;When none of the combined rules returns errors, then this rule also returns no errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newandrule&#34;&gt;NewAndRule&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewAndRule(rules &amp;hellip;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*AndRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;: &amp;hellip;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - list of rules to join with AND operator&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;Validates a given value against this rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*AndRule&lt;/a&gt;) Validate(path string, schema &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt;, value interface{}) []&lt;a href=&#34;../ivalidation_rule&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - schema this rule is called from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../ivalidation_rule&#34;&gt;*ValidationResult&lt;/a&gt; - list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewAndRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#75af00&#34;&gt;NewValueComparisonRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;GTE&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#75af00&#34;&gt;NewValueComparisonRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;LTE&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 0 must be greater or equal to 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no error
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 20 must be letter or equal 10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ivalidationruleivalidation_rule&#34;&gt;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ArraySchema</title>
      <link>/golang/commons/validate/array_schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/array_schema/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../schema&#34;&gt;Schema&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ArraySchema class allows you to validate arrays based on a specified validation rule.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newarrayschema&#34;&gt;NewArraySchema&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its values.
See &lt;a href=&#34;../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewArraySchema(valueType interface{}) &lt;a href=&#34;&#34;&gt;*ArraySchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;valueType&lt;/strong&gt;: interface{} - type of array elements. Null means that elements may have any type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;valuetype&#34;&gt;ValueType&lt;/h4&gt;
&lt;p&gt;Gets the type of array elements.
Null means that elements may have any type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ArraySchema) ValueType() interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - type of array elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;performvalidation&#34;&gt;PerformValidation&lt;/h4&gt;
&lt;p&gt;Validates a given value against the schema and configured validation rules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ArraySchema&lt;/a&gt;) PerformValidation(path string, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setvaluetype&#34;&gt;SetValueType&lt;/h4&gt;
&lt;p&gt;Sets the type of array elements.
Null means that the elements may have any type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ArraySchema&lt;/a&gt;) SetValueType(value interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - type of array elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewArraySchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;TypeCode&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]);&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]);&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: element type mismatch
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// Result: type mismatch       
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: AtLeastOneExistsRule</title>
      <link>/golang/commons/validate/at_least_one_exists_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/at_least_one_exists_rule/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AtLeastOneExistsRule class allows you to check that given a set of properties, at least one of them exists.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newatleastoneexistsrule&#34;&gt;NewAtLeastOneExistsRule&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its values&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewAtLeastOneExistsRule(properties &amp;hellip;string) &lt;a href=&#34;&#34;&gt;*AtLeastOneExistsRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;properties&lt;/strong&gt;: &amp;hellip;string - list of property names where at least one property must exist&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;Validates a given value against this rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*AtLeastOneExistsRule&lt;/a&gt;) Validate(path string, schema &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt;, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - schema this rule is called from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewAtLeastOneExistsRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;                  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;// Result: at least one of properties field1, field2 must exist
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ivalidationruleivalidation_rule&#34;&gt;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ExcludedRule</title>
      <link>/golang/commons/validate/excluded_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/excluded_rule/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ExcludedRule allows you to verify that none of the values specified in the rule is present in a list of constants.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newexcludedrule&#34;&gt;NewExcludedRule&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its values&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewExcludedRule(values &amp;hellip;interface{}) &lt;a href=&#34;&#34;&gt;*ExcludedRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: &amp;hellip;interface{} - list of values that must be excluded from a list of constants&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;Validates the given value. None of the values set in this ExcludedRule object must exist
in the value that is given for validation to pass.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExcludedRule&lt;/a&gt;) Validate(path string, schema &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt;, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - dot notation path to the value that is to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - (not used in this implementation).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value that is to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - results of the validation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewExcludedRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 2 must not be one of 1, 2, 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ivalidationruleivalidation_rule&#34;&gt;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: FilterParamsSchema</title>
      <link>/golang/commons/validate/filter_params_schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/filter_params_schema/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The FilterParamsSchema class allows you to create a schema to validate &lt;a href=&#34;../../data/filter_params&#34;&gt;FilterParams&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newfilterparamsschema&#34;&gt;NewFilterParamsSchema&lt;/h4&gt;
&lt;p&gt;Creates a new instance of a validation schema.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewFilterParamsSchema() &lt;a href=&#34;../map_schema&#34;&gt;*MapSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;filterparamsdatafilter_params&#34;&gt;&lt;a href=&#34;../../data/filter_params&#34;&gt;FilterParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: IncludedRule</title>
      <link>/golang/commons/validate/included_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/included_rule/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The InclidedRule class allows you to check that a list contains only specified values.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newincludedrule&#34;&gt;NewIncludedRule&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewIncludedRule(values &amp;hellip;interface{}) &lt;a href=&#34;&#34;&gt;*IncludedRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: &amp;hellip;interface{} - list of constants that value must be included to&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;validate&lt;/h4&gt;
&lt;p&gt;Validates a given value against this rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*IncludedRule&lt;/a&gt;) Validate(path string, schema &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt;, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - schema this rule is called from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: any - value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewIncludedRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 10 must be one of 1, 2, 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ivalidationruleivalidation_rule&#34;&gt;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ISchema</title>
      <link>/golang/commons/validate/ischema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/ischema/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ISchema interface contains different validation methods.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Validate(value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - list with validation results&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;validateandreturnerror&#34;&gt;ValidateAndReturnError&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ValidateAndReturnError(correlationId string, value interface{}, strict bool) *errors.ApplicationError&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) unique transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strict&lt;/strong&gt;: bool -&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../errors/application_error&#34;&gt;*errors.ApplicationError&lt;/a&gt; - Application error&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;validateandthrowerror&#34;&gt;ValidateAndThrowError&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ValidateAndThrowError(correlationId string, value interface{}, strict bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) unique transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strict&lt;/strong&gt;: bool -&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ISchemaBase</title>
      <link>/golang/commons/validate/ischema_base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/ischema_base/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ISchemaBase interface is used by classes that need to perform a validation.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;performvalidation&#34;&gt;PerformValidation&lt;/h4&gt;
&lt;p&gt;Performs a validation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PerformValidation(path string, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: interface{} - dot notation path to the value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - list with validation results&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: IValidationRule</title>
      <link>/golang/commons/validate/ivalidation_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/ivalidation_rule/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IValidationRule interface allows you to implement custom validation rules.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;Validates a given value against this rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Validate(path string, schema &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt;, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - a schema this rule is called from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MapSchema</title>
      <link>/golang/commons/validate/map_schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/map_schema/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../schema&#34;&gt;Schema&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MapSchema class provides you with a schema to validate maps&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmapschemawithrules&#34;&gt;NewMapSchemaWithRules&lt;/h4&gt;
&lt;p&gt;Creates a new instance of validation schema and sets its values.
See &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;, &lt;a href=&#34;../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMapSchemaWithRules(keyType interface{}, valueType interface{}, required bool, rules []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*MapSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;keyType&lt;/strong&gt;: interface{} - a type of map keys. Null means that keys may have any type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;valueType&lt;/strong&gt;: interface{} - a type of map values. Null means that values may have any type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;: bool - (optional) true to always require non-nil values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;: []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - (optional) a list with validation rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;newmapschema&#34;&gt;NewMapSchema&lt;/h4&gt;
&lt;p&gt;Creates a new instance of validation schema and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMapSchema(keyType interface{}, valueType interface{}) &lt;a href=&#34;&#34;&gt;*MapSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;keyType&lt;/strong&gt;: interface{} - a type of map keys. Null means that keys may have any type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;valueType&lt;/strong&gt;: any - a type of map values. Null means that values may have any type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;keytype&#34;&gt;KeyType&lt;/h4&gt;
&lt;p&gt;Gets the type of map keys.
Null means that keys may have any type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MapSchema&lt;/a&gt;) KeyType() interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - the type of map keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;valuetype&#34;&gt;ValueType&lt;/h4&gt;
&lt;p&gt;Gets the type of map values.
Null means that values may have any type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MapSchema&lt;/a&gt;) ValueType() interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - the type of map values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;performvalidation&#34;&gt;PerformValidation&lt;/h4&gt;
&lt;p&gt;Validates a given value against the schema and configured validation rules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MapSchema&lt;/a&gt;) PerformValidation(path string, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setkeytype&#34;&gt;SetKeyType&lt;/h4&gt;
&lt;p&gt;Sets the type of map keys.
Null means that keys may have any type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MapSchema&lt;/a&gt;) SetKeyType(value interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a type of map keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setvaluetype&#34;&gt;SetValueType&lt;/h4&gt;
&lt;p&gt;Sets the type of map values.
Null means that values may have any type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MapSchema&lt;/a&gt;) SetValueType(value interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a type of map values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewMapSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;TypeCode&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;TypeCode&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Integer&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// Result: element type mismatch
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;([&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;]);&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// Result: type mismatch
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: NotRule</title>
      <link>/golang/commons/validate/not_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/not_rule/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The NotRule class allows you to negate a rule. Thus, when the embedded rule returns errors, then the negated rule returns no errors and vice versa.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newnotrule&#34;&gt;NewNotRule&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its values&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewNotRule(rule &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*NotRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;rule&lt;/strong&gt;: &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - a rule to be negated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;Validates a given value against this rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*NotRule&lt;/a&gt;) Validate(path string, schema &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt;, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - a schema this rule is called from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewNotRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#75af00&#34;&gt;NewValueComparisonRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;EQ&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: error
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no error
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ivalidationruleivalidation_rule&#34;&gt;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ObjectComparator</title>
      <link>/golang/commons/validate/object_comparator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/object_comparator/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ObjectComparator class allows you to perform a comparison over two values of any type.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;equal&#34;&gt;Equal&lt;/h4&gt;
&lt;p&gt;Checks if two values are equal.
The operation can be performed over values of any type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TObjectComparator) AreEqual(value1 interface{}, value2 interface{}) bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: interface{} - the first value to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: interface{} - the second value to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if values are equal and false otherwise&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;arenotequal&#34;&gt;AreNotEqual&lt;/h4&gt;
&lt;p&gt;Checks if two values are NOT equal
The operation can be performed over values of any type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TObjectComparator) AreNotEqual(value1 interface{}, value2 interface{}) bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: interface{} - the first value to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: interface{} - the second value to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if values are NOT equal and false otherwise&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;compare&#34;&gt;Compare&lt;/h4&gt;
&lt;p&gt;Perform comparison operation over two arguments.
The operation can be performed over values of any type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TObjectComparator) Compare(value1 interface{}, operation string, value2 interface{}) bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: interface{} - the first argument to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;operation&lt;/strong&gt;: string - the comparison operation: &lt;em&gt;&amp;quot;==&amp;quot; (&amp;quot;=&amp;quot;, &amp;ldquo;EQ&amp;rdquo;), &amp;ldquo;!= &amp;quot; (&amp;quot;&amp;lt;&amp;gt;&amp;rdquo;, &amp;ldquo;NE&amp;rdquo;); &amp;ldquo;&amp;lt;&amp;quot;/&amp;quot;&amp;gt;&amp;rdquo; (&amp;ldquo;LT&amp;rdquo;/&amp;ldquo;GT&amp;rdquo;), &amp;ldquo;&amp;lt;=&amp;quot;/&amp;quot;&amp;gt;=&amp;rdquo; (&amp;ldquo;LE&amp;rdquo;/&amp;ldquo;GE&amp;rdquo;); &amp;ldquo;LIKE&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: interface{} - the second argument to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - result of the comparison operation&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isgreater&#34;&gt;IsGreater&lt;/h4&gt;
&lt;p&gt;Checks if first value is greater than the second one.
The operation can be performed over numbers or strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TObjectComparator) IsGreater(value1 interface{}, value2 interface{}) bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: interface{} - the first value to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: interface{} - the second value to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if the first value is greater than second and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isless&#34;&gt;IsLess&lt;/h4&gt;
&lt;p&gt;Checks if first value is less than the second one.
The operation can be performed over numbers or strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TObjectComparator) IsLess(value1 interface{}, value2 interface{}) bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: interface{} - the first value to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: interface{} - the second value to compare&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if the first value is less than second and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;match&#34;&gt;Match&lt;/h4&gt;
&lt;p&gt;Checks if string matches a regular expression&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TObjectComparator) Match(value1 interface{}, value2 interface{}) bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a string value to match&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;regexp&lt;/strong&gt;: interface{} - a regular expression string&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if the value matches regular expression and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;ObjectComparator&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;GT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Result: true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;ObjectComparator&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;AreEqual&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Result: false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: ObjectSchema</title>
      <link>/golang/commons/validate/object_schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/object_schema/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../schema&#34;&gt;Schema&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ObjectSchema class allows you to create a validation schema that can be used to validate user defined objects.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newobjectschemawithrules&#34;&gt;NewObjectSchemaWithRules&lt;/h4&gt;
&lt;p&gt;Creates a new validation schema and sets its values.
See &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewObjectSchemaWithRules(allowUndefined bool, required bool, rules []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;allowUndefined&lt;/strong&gt;: bool - true to allow properties undefines in the schema&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;: bool - (optional) true to always require non-nil values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;: []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - (optional) a list with validation rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;newobjectschema&#34;&gt;NewObjectSchema&lt;/h4&gt;
&lt;p&gt;Creates a new validation schema and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewObjectSchema() &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;allowundefined&#34;&gt;AllowUndefined&lt;/h4&gt;
&lt;p&gt;Sets flag to allow undefined properties
This method returns reference to this exception to implement Builder pattern
to chain additional calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;) AllowUndefined(value bool) &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: bool - true to allow undefined properties and false to disallow.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../object_schema&#34;&gt;ObjectSchema&lt;/a&gt; - this validation schema.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;Gets validation schemas for object properties.
See &lt;a href=&#34;../property_schema&#34;&gt;PropertySchema&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ObjectSchema) Properties() []&lt;a href=&#34;../property_schema&#34;&gt;*PropertySchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []&lt;a href=&#34;../property_schema&#34;&gt;*PropertySchema&lt;/a&gt; - the list of property validation schemas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;performvalidation&#34;&gt;PerformValidation&lt;/h4&gt;
&lt;p&gt;Validates a given value against the schema and configured validation rules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;) PerformValidation(path string, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setundefinedallowed&#34;&gt;SetUndefinedAllowed&lt;/h4&gt;
&lt;p&gt;Sets flag to allow undefined properties&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c [*ObjectSchema]) SetUndefinedAllowed(value bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: bool - true to allow undefined properties and false to disallow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setproperties&#34;&gt;SetProperties&lt;/h4&gt;
&lt;p&gt;Sets validation schemas for object properties.
See &lt;a href=&#34;../property_schema&#34;&gt;PropertySchema&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;) SetProperties(value []&lt;a href=&#34;../property_schema&#34;&gt;*PropertySchema&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: []&lt;a href=&#34;../property_schema&#34;&gt;*PropertySchema&lt;/a&gt; - a list of property validation schemas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;undefinedallowed&#34;&gt;UndefinedAllowed&lt;/h4&gt;
&lt;p&gt;Gets flag to allow undefined properties&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;) UndefinedAllowed() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true to allow undefined properties and false to disallow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;withoptionalproperty&#34;&gt;WithOptionalProperty&lt;/h4&gt;
&lt;p&gt;Adds a validation schema for an optional object property.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;) WithOptionalProperty(name string, typ interface{}, rules &amp;hellip;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - a property name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typ&lt;/strong&gt;: interface{} - (optional) a property schema or type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;: &amp;hellip;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - (optional) a list of property validation rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;withproperty&#34;&gt;WithProperty&lt;/h4&gt;
&lt;p&gt;Adds a validation schema for an object property.
This method returns reference to this exception to implement Builder pattern
to chain additional calls.
See &lt;a href=&#34;../property_schema&#34;&gt;PropertySchema&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;) WithProperty(schema &lt;a href=&#34;../property_schema&#34;&gt;*PropertySchema&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../property_schema&#34;&gt;*PropertySchema&lt;/a&gt; - a property validation schema to be added.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;ObjectSchema&lt;/a&gt; - this validation schema.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;withrequiredproperty&#34;&gt;WithRequiredProperty&lt;/h4&gt;
&lt;p&gt;Adds a validation schema for a required object property.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;) WithRequiredProperty(name string, typ interface{}, rules &amp;hellip;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - a property name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typ&lt;/strong&gt;: interface{} - (optional) a property schema or type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;: &amp;hellip;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;[] - (optional) a list of property validation rules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;ObjectSchema&lt;/a&gt; - the validation schema&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewObjectSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithOptionalProperty&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;TypeCode&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRequiredProperty&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;TypeCode&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Result: id type mismatch
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;_name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Result: name is missing, unexpected _name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;                          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: type mismatch
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: OnlyOneExistsRule</title>
      <link>/golang/commons/validate/only_one_exists_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/only_one_exists_rule/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The OnlyOneExistsRule allows you to check that only one property of a list of properties exists in an object.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newonlyoneexistsrule&#34;&gt;NewOnlyOneExistsRule&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its values&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewOnlyOneExistsRule(properties &amp;hellip;string) &lt;a href=&#34;&#34;&gt;*OnlyOneExistsRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;properties&lt;/strong&gt;: &amp;hellip;string - a list of property names where at only one property must exist&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;Validates a given value against this rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *OnlyOneExistsRule) Validate(path string, schema &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt;, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - a schema this rule is called from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: &lt;a href=&#34;../validation_result&#34;&gt;ValidationResult&lt;/a&gt;[] - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewOnlyOneExistsRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Result: only one of properties field1, field2 must exist
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;                  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;// Result: only one of properties field1, field2 must exist
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ivalidationruleivalidation_rule&#34;&gt;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: OrRule</title>
      <link>/golang/commons/validate/or_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/or_rule/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The OrRule class allows you to validate combinations of rules created with OR logical operations.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When one of the combined rules returns no errors, then this rule also returns no errors.&lt;/li&gt;
&lt;li&gt;When all combined rules return errors, then this rule returns all the errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;neworrule&#34;&gt;NewOrRule&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewOrRule(rules &amp;hellip;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*OrRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;: &amp;hellip;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - a list of rules to join with OR operator&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;validate&lt;/h4&gt;
&lt;p&gt;Validates a given value against this rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*OrRule&lt;/a&gt;) Validate(path string, schema &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt;, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - a schema this rule is called from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewOrRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#75af00&#34;&gt;NewValueComparisonRle&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;LT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#75af00&#34;&gt;NewValueComparisonule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;GT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no error
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate5&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 5 must be less than 1 or 5 must be more than 10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no error
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ivalidationruleivalidation_rule&#34;&gt;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: PagingParamsSchema</title>
      <link>/golang/commons/validate/paging_params_schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/paging_params_schema/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The PagingParamsSchema class allows you to create a schema to validate &lt;a href=&#34;../../data/paging_params&#34;&gt;PagingParams&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newpagingparamsschema&#34;&gt;NewPagingParamsSchema&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;NewPagingParamsSchema() &lt;a href=&#34;&#34;&gt;*ObjectSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;pagingparamsdatapaging_params&#34;&gt;&lt;a href=&#34;../../data/paging_params&#34;&gt;PagingParams&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ProjectionParamsSchema</title>
      <link>/golang/commons/validate/projection_params_schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/projection_params_schema/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ProjectionParamsSchema class allows you to create a schema to validate &lt;a href=&#34;../../data/projection_params&#34;&gt;ProjectionParams&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newprojectionparamsschema&#34;&gt;NewProjectionParamsSchema&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;NewProjectionParamsSchema() &lt;a href=&#34;../array_schema&#34;&gt;*ArraySchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;projectionparamsdataprojection_params&#34;&gt;&lt;a href=&#34;../../data/projection_params&#34;&gt;ProjectionParams&lt;/a&gt;.&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: PropertiesComparisonRule</title>
      <link>/golang/commons/validate/properties_comparison_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/properties_comparison_rule/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The PropertiesComparisonRule class allows you to create a validation rule to compare two object properties.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newpropertiescomparisonrule&#34;&gt;NewPropertiesComparisonRule&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its arguments.
See &lt;a href=&#34;../object_comparator/#compare&#34;&gt;ObjectComparator.compare&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewPropertiesComparisonRule(property1 string, operation string, property2 string) &lt;a href=&#34;&#34;&gt;*PropertiesComparisonRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;property1&lt;/strong&gt;: string - a name of the first property to compare.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;operation&lt;/strong&gt;: string - a comparison operation: &lt;em&gt;&amp;quot;==&amp;quot; (&amp;quot;=&amp;quot;, &amp;ldquo;EQ&amp;rdquo;), &amp;ldquo;!= &amp;quot; (&amp;quot;&amp;lt;&amp;gt;&amp;rdquo;, &amp;ldquo;NE&amp;rdquo;); &amp;ldquo;&amp;lt;&amp;quot;/&amp;quot;&amp;gt;&amp;rdquo; (&amp;ldquo;LT&amp;rdquo;/&amp;ldquo;GT&amp;rdquo;), &amp;ldquo;&amp;lt;=&amp;quot;/&amp;quot;&amp;gt;=&amp;rdquo; (&amp;ldquo;LE&amp;rdquo;/&amp;ldquo;GE&amp;rdquo;); &amp;ldquo;LIKE&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;property2&lt;/strong&gt;: string - a name of the second property to compare.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;Validates a given value against this rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*PropertiesComparisonRule&lt;/a&gt;) Validate(path string, schema ISchema, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - a schema this rule is called from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewObjectSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewPropertyComparisonRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;NE&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;field2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
 
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;field2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// Result: field1 shall not be equal to field2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({});&lt;/span&gt;                             &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ivalidationruleivalidation_rule&#34;&gt;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: PropertySchema</title>
      <link>/golang/commons/validate/property_schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/property_schema/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../schema&#34;&gt;Schema&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The PropertySchema class allows you to create schemas to validate object properties.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newpropertyschemawithrules&#34;&gt;NewPropertySchemaWithRules&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its arguments.
See &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;, &lt;a href=&#34;../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewPropertySchemaWithRules(name string, typ interface{}, required bool, rules []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*PropertySchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - (optional) a property name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typ&lt;/strong&gt;: interface{} - (optional) a property type&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;: bool -  (optional) true to always require non-nil values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;: []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - (optional) a list with validation rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creates a new validation schema and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewPropertySchema() &lt;a href=&#34;&#34;&gt;*PropertySchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;name&#34;&gt;Name&lt;/h4&gt;
&lt;p&gt;Gets the property name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*PropertySchema&lt;/a&gt;) Name() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - the property name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;type&#34;&gt;Type&lt;/h4&gt;
&lt;p&gt;Gets the property type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*PropertySchema&lt;/a&gt;) Type() interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - the property type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;performvalidation&#34;&gt;PerformValidation&lt;/h4&gt;
&lt;p&gt;Validates a given value against the schema and configured validation rules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*PropertySchema&lt;/a&gt;) PerformValidation(path string, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setname&#34;&gt;SetName&lt;/h4&gt;
&lt;p&gt;Sets the property name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*PropertySchema&lt;/a&gt;) SetName(value string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - a new property name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;settype&#34;&gt;SetType&lt;/h4&gt;
&lt;p&gt;Sets a new property type.
The type can be defined as type, type name or &lt;a href=&#34;../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*PropertySchema&lt;/a&gt;) SetType(value interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a new property type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewObjectSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithProperty&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewPropertySchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;TypeCode&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;});&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Result: id type mismatch
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;objectschemaobject_schema&#34;&gt;&lt;a href=&#34;../object_schema&#34;&gt;ObjectSchema&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Schema</title>
      <link>/golang/commons/validate/schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/schema/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The Schema class provides a basic schema to validate values against a set of validation rules.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This schema is used as a basis for specific schemas to validate objects, project properties, arrays and maps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newschemawithrules&#34;&gt;NewSchemaWithRules&lt;/h4&gt;
&lt;p&gt;Creates a new instance of validation schema and sets its values.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewSchemaWithRules(required bool, rules []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;: bool - (optional) true to always require non-nil values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;: []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - (optional) a list with validation rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;inheritschema&#34;&gt;InheritSchema&lt;/h4&gt;
&lt;p&gt;Inherit schema&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;InheritSchema(base &lt;a href=&#34;../ischema_base&#34;&gt;ISchemaBase&lt;/a&gt;) [*Schema]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;inheritschemawithrules&#34;&gt;InheritSchemaWithRules&lt;/h4&gt;
&lt;p&gt;Inherit schema with rules&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;InheritSchemaWithRules(base &lt;a href=&#34;../ischema_base&#34;&gt;ISchemaBase&lt;/a&gt;, required bool, rules []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;base&lt;/strong&gt;: &lt;a href=&#34;../ischema_base&#34;&gt;ISchemaBase&lt;/a&gt; - base foe create new schema&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;: bool - true to always require non-nil values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;: []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - a list with validation rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;newschema&#34;&gt;NewSchema&lt;/h4&gt;
&lt;p&gt;Creates a new instance of validation schema and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewSchema() &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;getrules&#34;&gt;GetRules&lt;/h4&gt;
&lt;p&gt;Gets validation rules to check values against.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) Rules() []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - a list with validation rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;required&#34;&gt;Required&lt;/h4&gt;
&lt;p&gt;Gets a flag that always requires non-nil values.
For nil values it raises a validation error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) Required() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true to always require non-nil values and false to allow nil values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;makeoptional&#34;&gt;MakeOptional&lt;/h4&gt;
&lt;p&gt;Makes validated values optional.
Validation for nil values will be skipped.
This method returns reference to this exception to implement Builder pattern
to chain additional calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) MakeOptional() &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;Schema&lt;/a&gt; - this validation schema&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;makerequired&#34;&gt;MakeRequired&lt;/h4&gt;
&lt;p&gt;Makes validated values always required (non-nil).
For nil values the schema will raise errors.
This method returns reference to this exception to implement Builder pattern
to chain additional calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) MakeRequired() &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt; - this validation schema&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;performtypevalidation&#34;&gt;PerformTypeValidation&lt;/h4&gt;
&lt;p&gt;Validates a given value to match specified type.
The type can be defined as a Schema, type, a type name or &lt;a href=&#34;../convert/type_code&#34;&gt;TypeCode&lt;/a&gt;
When type is a Schema, it executes validation recursively against that Schema.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) PerformTypeValidation(path string, typ interface{}, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: interface{} - a type to match the value type&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;performvalidation&#34;&gt;PerformValidation&lt;/h4&gt;
&lt;p&gt;Validates a given value against the schema and configured validation rules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) PerformValidation(path string, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setrequired&#34;&gt;SetRequired&lt;/h4&gt;
&lt;p&gt;Sets a flag that always requires non-nil values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) SetRequired(value bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: bool - true to always require non-nil values and false to allow nil values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setrules&#34;&gt;SetRules&lt;/h4&gt;
&lt;p&gt;Sets validation rules to check values against.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) SetRules(value []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: []&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - a list with validation rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;Validates the given value and results validation results.
See &lt;a href=&#34;../validation_result&#34;&gt;ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) Validate(value interface{}) []&lt;a href=&#34;../ivalidation_rule&#34;&gt;*IValidationRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []&lt;a href=&#34;../ivalidation_rule&#34;&gt;*IValidationRule&lt;/a&gt; - a list with validation results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;validateandreturnerror&#34;&gt;ValidateAndReturnError&lt;/h4&gt;
&lt;p&gt;Validates the given value and returns a &lt;a href=&#34;../validation_exception&#34;&gt;ValidationException&lt;/a&gt; if errors were found.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) ValidateAndReturnError(correlationId string, value interface{}, strict bool) &lt;a href=&#34;../../errors/application_error&#34;&gt;*errors.ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} -  a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strict&lt;/strong&gt;: bool - true to treat warnings as errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../errors/application_error&#34;&gt;*errors.ApplicationError&lt;/a&gt; - validation exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;validateandthrowerror&#34;&gt;ValidateAndThrowError&lt;/h4&gt;
&lt;p&gt;Validates the given value and throws a &lt;a href=&#34;../validation_exception&#34;&gt;ValidationException&lt;/a&gt; if errors were found.&lt;br&gt;
See &lt;a href=&#34;../validation_exception/#throwexceptionifneeded&#34;&gt;ValidationException.ThrowExceptionIfNeeded&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) ValidateAndThrowError(correlationId string, value interface{}, strict bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strict&lt;/strong&gt;: bool - true to treat warnings as errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;withrule&#34;&gt;WithRule&lt;/h4&gt;
&lt;p&gt;Adds validation rule to this schema.
This method returns reference to this exception to implement Builder pattern
to chain additional calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;) WithRule(rule &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;rule&lt;/strong&gt;: &lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt; - a validation rule to be added.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*Schema&lt;/a&gt; - this validation schema.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;objectschemaobject_schema&#34;&gt;&lt;a href=&#34;../object_schema&#34;&gt;ObjectSchema&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;propertyschemaproperty_schema&#34;&gt;&lt;a href=&#34;../property_schema&#34;&gt;PropertySchema&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;arrayschemaarray_schema&#34;&gt;&lt;a href=&#34;../array_schema&#34;&gt;ArraySchema&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;mapschemamap_schema&#34;&gt;&lt;a href=&#34;../map_schema&#34;&gt;MapSchema&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: TokenizedPagingParamsSchema</title>
      <link>/golang/commons/validate/tokenized_paging_params_schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/tokenized_paging_params_schema/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Extends:&lt;/strong&gt; &lt;a href=&#34;../../errors/bad_request_exception&#34;&gt;BadRequestException&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newtokenizedpagingparamsschema&#34;&gt;NewTokenizedPagingParamsSchema&lt;/h4&gt;
&lt;p&gt;Creates a new instance of validation schema.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewTokenizedPagingParamsSchema() &lt;a href=&#34;../object_schema&#34;&gt;*ObjectSchema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ValidationException</title>
      <link>/golang/commons/validate/validation_exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/validation_exception/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ValidationException is used to define errors in schema validation.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validation errors are usually generated based in &lt;a href=&#34;../validation_result&#34;&gt;ValidationResult&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If using strict mode, warnings will also raise validation exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newvalidationerror&#34;&gt;NewValidationError&lt;/h4&gt;
&lt;p&gt;Creates a new instance of validation exception and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewValidationError(correlationId string, message string, results []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;) &lt;a href=&#34;../../errors/application_error&#34;&gt;*errors.ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - (optional) a list of validation results&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;newvalidationerrorfromresults&#34;&gt;NewValidationErrorFromResults&lt;/h4&gt;
&lt;p&gt;Creates a new ValidationError based on errors in validation results. If validation results have no errors, than nil is returned.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewValidationErrorFromResults(correlationId string, results []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;, strict bool) &lt;a href=&#34;../../errors/application_error&#34;&gt;*errors.ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - list of validation results that may contain errors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strict&lt;/strong&gt;: bool - true to treat warnings as errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;composeerrormessage&#34;&gt;composeErrorMessage&lt;/h4&gt;
&lt;p&gt;Composes human readable error message based on validation results.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;composeErrorMessage(results []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list of validation results.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a composed error message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;throwvalidationerrorifneeded&#34;&gt;ThrowValidationErrorIfNeeded&lt;/h4&gt;
&lt;p&gt;Throws ValidationException based on errors in validation results.
If validation results have no errors, than no exception is thrown.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ThrowValidationErrorIfNeeded(correlationId string, results []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;, strict bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: &lt;a href=&#34;../validation_result&#34;&gt;ValidationResult&lt;/a&gt;[] - list of validation results that may contain errors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strict&lt;/strong&gt;: bool - true to treat warnings as errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;badrequestexceptionerrorsbad_request_exception&#34;&gt;&lt;a href=&#34;../../errors/bad_request_exception&#34;&gt;BadRequestException&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;validationresultvalidation_result&#34;&gt;&lt;a href=&#34;../validation_result&#34;&gt;ValidationResult&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ValidationResult</title>
      <link>/golang/commons/validate/validation_result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/validation_result/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ValidationResult class provides a representation of the result generated by a schema validation.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newvalidationresult&#34;&gt;NewValidationResult&lt;/h4&gt;
&lt;p&gt;Creates a new instance of a validation ressult and sets its values.
See &lt;a href=&#34;../validation_result_type&#34;&gt;ValidationResultType&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewValidationResult(path string, typ &lt;a href=&#34;../validation_result_type&#34;&gt;ValidationResultType&lt;/a&gt;, code string, message string, expected interface{}, actual interface{}) &lt;a href=&#34;&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path of the validated element.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typ&lt;/strong&gt;: &lt;a href=&#34;../validation_result_type&#34;&gt;ValidationResultType&lt;/a&gt; - a type of the validation result: Information, Warning, or Error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - an error code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - a human readable message.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expected&lt;/strong&gt;: interface{} - an value expected by schema validation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actual&lt;/strong&gt;: interface{} - an actual value found by schema validation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;actual&#34;&gt;Actual&lt;/h4&gt;
&lt;p&gt;Gets the actual value found by schema validation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ValidationResult&lt;/a&gt;) Actual() interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - the actual value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;code&#34;&gt;Code&lt;/h4&gt;
&lt;p&gt;Gets the error code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ValidationResult&lt;/a&gt;) Code() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - the error code&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;expected&#34;&gt;Expected&lt;/h4&gt;
&lt;p&gt;Gets the value expected by schema validation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ValidationResult&lt;/a&gt;) Expected() interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - the expected value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;message&#34;&gt;Message&lt;/h4&gt;
&lt;p&gt;Gets the human readable message.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ValidationResult&lt;/a&gt;) Message() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - the result message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;path&#34;&gt;Path&lt;/h4&gt;
&lt;p&gt;Gets dot notation path of the validated element.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ValidationResult&lt;/a&gt;) Path() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - the path of the validated element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;gettype&#34;&gt;getType&lt;/h4&gt;
&lt;p&gt;Gets dot notation path of the validated element.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ValidationResult&lt;/a&gt;) Type() &lt;a href=&#34;../validation_result_type&#34;&gt;ValidationResultType&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../validation_result_type&#34;&gt;ValidationResultType&lt;/a&gt; - the type of the validation result.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ValidationResultType</title>
      <link>/golang/commons/validate/validation_result_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/validation_result_type/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ValidationResultType class defines the types of validation results generated by validation schemas.&lt;/p&gt;
&lt;h3 id=&#34;enumeration-members&#34;&gt;Enumeration members&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Information&lt;/strong&gt; = iota - General information (not an error).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Warning&lt;/strong&gt; = iota - Warning about something suspecious. In strict mode is treated as error&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt; = iota - Validation error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;validationresultvalidation_result&#34;&gt;&lt;a href=&#34;../validation_result&#34;&gt;ValidationResult&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ValueComparisonRule</title>
      <link>/golang/commons/validate/value_comparison_rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/validate/value_comparison_rule/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ValueComparisonRule class allows you to create a validation rule that compares a value to a constant.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newvaluecomparisonrule&#34;&gt;NewValueComparisonRule&lt;/h4&gt;
&lt;p&gt;Creates a new validation rule and sets its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewValueComparisonRule(operation string, value interface{}) &lt;a href=&#34;&#34;&gt;*ValueComparisonRule&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;operation&lt;/strong&gt;: string - a comparison operation: &lt;em&gt;&amp;quot;==&amp;quot; (&amp;quot;=&amp;quot;, &amp;ldquo;EQ&amp;rdquo;), &amp;ldquo;!= &amp;quot; (&amp;quot;&amp;lt;&amp;gt;&amp;rdquo;, &amp;ldquo;NE&amp;rdquo;); &amp;ldquo;&amp;lt;&amp;quot;/&amp;quot;&amp;gt;&amp;rdquo; (&amp;ldquo;LT&amp;rdquo;/&amp;ldquo;GT&amp;rdquo;), &amp;ldquo;&amp;lt;=&amp;quot;/&amp;quot;&amp;gt;=&amp;rdquo; (&amp;ldquo;LE&amp;rdquo;/&amp;ldquo;GE&amp;rdquo;); &amp;ldquo;LIKE&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a constant value to compare to&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;validate&#34;&gt;Validate&lt;/h4&gt;
&lt;p&gt;Validates a given value against this rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ValueComparisonRule&lt;/a&gt;) Validate(path string, schema ISchema, value interface{}) []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: string - a dot notation path to the value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schema&lt;/strong&gt;: &lt;a href=&#34;../ischema&#34;&gt;ISchema&lt;/a&gt; - a schema this rule is called from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a value to be validated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: []&lt;a href=&#34;../validation_result&#34;&gt;*ValidationResult&lt;/a&gt; - a list with validation results to add new results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewSchema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;WithRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewValueComparisonRule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;EQ&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
  
&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: no errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Validate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Result: 2 is not equal to 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ivalidationruleivalidation_rule&#34;&gt;&lt;a href=&#34;../ivalidation_rule&#34;&gt;IValidationRule&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
