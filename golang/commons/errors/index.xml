<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Errors</title>
    <link>/golang/commons/errors/</link>
    <description>Recent content in Errors on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/commons/errors/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: ApplicationError</title>
      <link>/golang/commons/errors/application_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/application_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ApplicationError class defines a base class used to define various application exceptions.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most languages have own definition of base exception (error) types. However, this class is implemented symmetrically in all languages supported by the PipServices toolkit and  allows to create portable implementations and support proper error propagation in microservices calls.&lt;/li&gt;
&lt;li&gt;Error propagation means that when a microservice implemented in one language calls a microservice(s) implemented in a different language(s), errors are returned throught the entire call chain and restored in their original (or close) type.&lt;/li&gt;
&lt;li&gt;Since the number of potential exception types is endless, the PipServices toolkit supports only 12 standard categories of exceptions, which are defined in &lt;a href=&#34;../error_category&#34;&gt;ErrorCategory&lt;/a&gt;. The &lt;a href=&#34;&#34;&gt;ApplicationError&lt;/a&gt; class acts as a basis for these 12 standard exception types.&lt;/li&gt;
&lt;li&gt;Most exceptions use a free-form message that describes occured error. However, this may not be sufficient to create meaninful error descriptions. Therefore, the &lt;a href=&#34;&#34;&gt;ApplicationError&lt;/a&gt; class proposes an extended error definition that has more standard fields:
&lt;ul&gt;
&lt;li&gt;message: a human-readable error description&lt;/li&gt;
&lt;li&gt;category: one of the 12 standard error categories&lt;/li&gt;
&lt;li&gt;status: numeric HTTP status code for REST invocations&lt;/li&gt;
&lt;li&gt;code: a unique error code, usually defined as &amp;ldquo;MY_ERROR_CODE&amp;rdquo;&lt;/li&gt;
&lt;li&gt;correlation_id: a unique transaction id used to trace execution through a call chain&lt;/li&gt;
&lt;li&gt;details: map with error parameters that can help to recreate meaningful error description in other languages&lt;/li&gt;
&lt;li&gt;stack_trace: a stack trace&lt;/li&gt;
&lt;li&gt;cause: the original error that is wrapped by this exception&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The ApplicationError class is not serializable. To pass errors through the wire it must be converted into a &lt;a href=&#34;../error_description&#34;&gt;ErrorDescription&lt;/a&gt; object and then restored on the receiving end into an identical exception type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newerror&#34;&gt;NewError&lt;/h4&gt;
&lt;p&gt;Creates a new instance of application exception and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewError(message string) &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;message&#34;&gt;Message&lt;/h4&gt;
&lt;p&gt;A human-readable error description (usually written in English)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;category&#34;&gt;Category&lt;/h4&gt;
&lt;p&gt;Standard error category&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Category&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;status&#34;&gt;Status&lt;/h4&gt;
&lt;p&gt;HTTP status code associated with this error type&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;code&#34;&gt;Code&lt;/h4&gt;
&lt;p&gt;A unique error code&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;details&#34;&gt;Details&lt;/h4&gt;
&lt;p&gt;A map with additional details that can be used to restore error description in other languages&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;: &lt;a href=&#34;../../data/string_value_map&#34;&gt;StringValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;correlationid&#34;&gt;CorrelationId&lt;/h4&gt;
&lt;p&gt;A unique transaction id to trace execution throug call chain&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CorrelationId&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;stacktrace&#34;&gt;StackTrace&lt;/h4&gt;
&lt;p&gt;Stack trace of the exception&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;StackTrace&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;cause&#34;&gt;Cause&lt;/h4&gt;
&lt;p&gt;Original error wrapped by this exception&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Cause&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;withcausestring&#34;&gt;WithCauseString&lt;/h4&gt;
&lt;p&gt;Sets original error wrapped by this exception as a string message.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(e &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;) WithCauseString(cause string) &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - an original error message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;withcause&#34;&gt;WithCause&lt;/h4&gt;
&lt;p&gt;Sets a original error wrapped by this exception
This method returns reference to this exception to implement Builder pattern
to chain additional calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(e &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;) WithCause(cause error) &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cause&lt;/strong&gt;: error - original error object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt; - this exception object&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;withcode&#34;&gt;WithCode&lt;/h4&gt;
&lt;p&gt;Sets a unique error code.&lt;br&gt;
This method returns reference to this exception to implement Builder pattern
to chain additional calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(e &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;) WithCode(code string) &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - a unique error code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt; - this exception object&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;withcorrelationid&#34;&gt;WithCorrelationId&lt;/h4&gt;
&lt;p&gt;Sets a correlation id which can be used to trace this error through a call chain.&lt;br&gt;
This method returns reference to this exception to implement Builder pattern
to chain additional calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(e &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;) WithCorrelationId(correlationId string) &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - a unique transaction id to trace error through call chain&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt; - this exception object&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;withdetails&#34;&gt;WithDetails&lt;/h4&gt;
&lt;p&gt;Sets a parameter for additional error details.
This details can be used to restore error description in other languages.&lt;/p&gt;
&lt;p&gt;This method returns reference to this exception to implement Builder pattern
to chain additional calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(e &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;) WithDetails(key string, value interface{}) &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;: string - key a details parameter name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value a details parameter name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt; - this exception object&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;withstatus&#34;&gt;WithStatus&lt;/h4&gt;
&lt;p&gt;Sets a HTTP status code which shall be returned by REST calls.
This method returns reference to this exception to implement Builder pattern
to chain additional calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(e &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;) WithStatus(status int) &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;status&lt;/strong&gt;: int - an HTTP error code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt; - this exception object&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;wrap&#34;&gt;Wrap&lt;/h4&gt;
&lt;p&gt;Wraps another exception into an application exception object.&lt;/p&gt;
&lt;p&gt;If original exception is of ApplicationError type it is returned without changes.
Otherwise a new ApplicationError is created and original error is set as its cause.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(e &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;) Wrap(err error) &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cause&lt;/strong&gt;: error - an original error object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt; - an original or newly created ApplicationError&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;wraperror&#34;&gt;WrapError&lt;/h4&gt;
&lt;p&gt;Wraps another exception into specified application exception object.&lt;/p&gt;
&lt;p&gt;If original exception is of ApplicationError type it is returned without changes.
Otherwise the original error is set as a cause to specified ApplicationError object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WrapError(err error, message string) &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;error&lt;/strong&gt;: error - an ApplicationError object to wrap the cause&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cause&lt;/strong&gt;: string - an original error object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*ApplicationError&lt;/a&gt; - an original or newly created ApplicationError&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;errorcategoryerror_category&#34;&gt;&lt;a href=&#34;../error_category&#34;&gt;ErrorCategory&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;errordescriptionerror_description&#34;&gt;&lt;a href=&#34;../error_description&#34;&gt;ErrorDescription&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ApplicationErrorFactory</title>
      <link>/golang/commons/errors/application_error_factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/application_error_factory/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ApplicationErrorFactory acts as a factory to recreate from &lt;a href=&#34;../error_description&#34;&gt;ErrorDescription&lt;/a&gt; values passed through the wire.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;create&#34;&gt;Create&lt;/h4&gt;
&lt;p&gt;Recreates ApplicationError object from serialized ErrorDescription.
It tries to restore original exception type using type or error category fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TApplicationErrorFactory) Create(description &lt;a href=&#34;../error_description&#34;&gt;*ErrorDescription&lt;/a&gt;) &lt;a href=&#34;../application_exception&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;description&lt;/strong&gt;: &lt;a href=&#34;../error_description&#34;&gt;*ErrorDescription&lt;/a&gt; - a serialized error description received as a result of remote call&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;applicationerrorapplication_error&#34;&gt;&lt;a href=&#34;../application_error&#34;&gt;ApplicationError&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;errordescriptionerror_description&#34;&gt;&lt;a href=&#34;../error_description&#34;&gt;ErrorDescription&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: BadRequestError</title>
      <link>/golang/commons/errors/bad_request_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/bad_request_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The BadRequestError class is used to manage errors created by improper user requests. For example, when there are missing or incorrect parameters in the request.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newbadrequesterror&#34;&gt;NewBadRequestError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewBadRequestError(correlationId, code, message string) &lt;a href=&#34;../application_exception&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlation_id&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Configerror</title>
      <link>/golang/commons/errors/config_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/config_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The Configerror is used to manage errors related to mistakes in microservice&amp;rsquo;s user-defined configurations.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newconfigerror&#34;&gt;NewConfigError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewConfigError(correlationId, code, message string) &lt;a href=&#34;../application_exception&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Conflicterror</title>
      <link>/golang/commons/errors/conflict_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/conflict_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The Conflicterror class is used to manage errors raised by conflicts between object versions that were posted by the user and those that are stored on the server&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newconflicterror&#34;&gt;NewConflictError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewConflictError(correlationId, code, message string) &lt;a href=&#34;../application_exception&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlation_id&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Connectionerror</title>
      <link>/golang/commons/errors/connection_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/connection_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The Connectionerror class is used to manage errors that occur during a connection to a remote service. These errors can be related to misconfiguration, network issues, or the remote service itself.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newconnectionerror&#34;&gt;NewConnectionError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewConnectionError(correlationId, code, message string) &lt;a href=&#34;../application_exception&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlation_id&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ErrorCategory</title>
      <link>/golang/commons/errors/error_category/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/error_category/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ErrorCategory defines the 12 standard error categories supported by the PipServices toolkit.&lt;/p&gt;
&lt;h3 id=&#34;constants&#34;&gt;Constants&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt; 
&lt;h4 id=&#34;unknown&#34;&gt;Unknown&lt;/h4&gt;
&lt;p&gt;Unknown or unexpected errors.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Unknown&lt;/strong&gt;: string = &amp;ldquo;Unknown&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;internal&#34;&gt;Internal&lt;/h4&gt;
&lt;p&gt;Internal errors caused by programming mistakes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Internal&lt;/strong&gt;: string = &amp;ldquo;Internal&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;misconfiguration&#34;&gt;Misconfiguration&lt;/h4&gt;
&lt;p&gt;Errors related to mistakes in user-defined configurations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Misconfiguration&lt;/strong&gt;: string = &amp;ldquo;Misconfiguration&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;invalidstate&#34;&gt;InvalidState&lt;/h4&gt;
&lt;p&gt;Errors caused by incorrect object state..
For example: business calls when the component is not ready.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;InvalidState&lt;/strong&gt;: string = &amp;ldquo;InvalidState&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;noresponse&#34;&gt;NoResponse&lt;/h4&gt;
&lt;p&gt;Errors caused by remote calls timeouted and not returning results.
It allows to clearly separate communication related problems
from other application errors.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NoResponse&lt;/strong&gt;: string = &amp;ldquo;NoResponse&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;failedinvocation&#34;&gt;FailedInvocation&lt;/h4&gt;
&lt;p&gt;Errors caused by remote calls failed due to unidenfied reasons.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FailedInvocation&lt;/strong&gt;: string = &amp;ldquo;FailedInvocation&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;fileerror&#34;&gt;FileError&lt;/h4&gt;
&lt;p&gt;Errors in read/write local disk operations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FileError&lt;/strong&gt;: string = &amp;ldquo;FileError&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;badrequest&#34;&gt;BadRequest&lt;/h4&gt;
&lt;p&gt;Errors due to incorrectly specified invocation parameters.
For example: missing or incorrect parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;BadRequest&lt;/strong&gt;: string = &amp;ldquo;BadRequest&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unauthorized&#34;&gt;Unauthorized&lt;/h4&gt;
&lt;p&gt;Access errors caused by missing user identity (authentication error)
or incorrect security permissions (authorization error).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Unauthorized&lt;/strong&gt;: string = &amp;ldquo;Unauthorized&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;notfound&#34;&gt;NotFound&lt;/h4&gt;
&lt;p&gt;Errors caused by attempts to access missing objects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NotFound&lt;/strong&gt;: string = &amp;ldquo;NotFound&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;conflict&#34;&gt;Conflict&lt;/h4&gt;
&lt;p&gt;Errors raised by conflicts between object versions that were
posted by the user and those that are stored on the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Conflict&lt;/strong&gt;: string = &amp;ldquo;Conflict&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unsupported&#34;&gt;Unsupported&lt;/h4&gt;
&lt;p&gt;Errors caused by calls to unsupported or not yet implemented functionality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Unsupported&lt;/strong&gt;: string = &amp;ldquo;Unsupported&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt; 

      </description>
    </item>
    
    <item>
      <title>Golang: ErrorDescription</title>
      <link>/golang/commons/errors/error_description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/error_description/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ErrorDescription class is used to pass information about errors between microservices implemented in different languages. On the receiving side &lt;a href=&#34;&#34;&gt;ErrorDescription&lt;/a&gt; is used to recreate the exception object close to its original type without missing additional details. This class is serializeable.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;type&#34;&gt;Type&lt;/h4&gt;
&lt;p&gt;Data type of the original error&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;category&#34;&gt;Category&lt;/h4&gt;
&lt;p&gt;Standard error category&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Category&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;status&#34;&gt;Status&lt;/h4&gt;
&lt;p&gt;HTTP status code associated with this error type&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;code&#34;&gt;Code&lt;/h4&gt;
&lt;p&gt;A unique error code&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;message&#34;&gt;Message&lt;/h4&gt;
&lt;p&gt;A human-readable error description (usually written in English)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;details&#34;&gt;Details&lt;/h4&gt;
&lt;p&gt;A map with additional details that can be used to restore error description in other languages&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;: map[string]interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;correlationid&#34;&gt;CorrelationId&lt;/h4&gt;
&lt;p&gt;A unique transaction id to trace execution throug call chain&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CorrelationId&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;cause&#34;&gt;Cause&lt;/h4&gt;
&lt;p&gt;Original error wrapped by this exception&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Cause&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;stacktrace&#34;&gt;StackTrace&lt;/h4&gt;
&lt;p&gt;Stack trace of the exception&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;StackTrace&lt;/strong&gt;: string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;applicationexceptionapplication_exception&#34;&gt;&lt;a href=&#34;../application_exception&#34;&gt;ApplicationException&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;applicationexceptionfactoryapplication_exception_factory&#34;&gt;&lt;a href=&#34;../application_exception_factory&#34;&gt;ApplicationExceptionFactory&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ErrorDescriptionFactory</title>
      <link>/golang/commons/errors/error_description_factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/error_description_factory/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ErrorDescriptionFactory class provides a factory to create a serializeable &lt;a href=&#34;../error_description&#34;&gt;ErrorDescription&lt;/a&gt; from &lt;a href=&#34;../application_error&#34;&gt;ApplicationError&lt;/a&gt; or from arbitrary errors.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Error descriptions are used to pass errors through the wire between microservices implemented in different languages. They allow to restore exceptions on the receiving side close to the original type and preserve additional information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;create&#34;&gt;Create&lt;/h4&gt;
&lt;p&gt;Creates a serializable ErrorDescription from error object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TErrorDescriptionFactory) Create(err interface{}) &lt;a href=&#34;../error_description&#34;&gt;*ErrorDescription&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;error&lt;/strong&gt;: interface{} - an error object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../error_description&#34;&gt;*ErrorDescription&lt;/a&gt; - a serializeable ErrorDescription object that describes the error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;applicationerrorapplication_error&#34;&gt;&lt;a href=&#34;../application_error&#34;&gt;ApplicationError&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;errordescriptionerror_description&#34;&gt;&lt;a href=&#34;../error_description&#34;&gt;ErrorDescription&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: FileError</title>
      <link>/golang/commons/errors/file_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/file_error/</guid>
      <description>
        
        
        &lt;p&gt;The FileError class is used to manage errors in read/write local disk operations.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newfileerror&#34;&gt;NewFileError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewFileError(correlationId, code, message string) &lt;a href=&#34;../application_exception&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: InternalError</title>
      <link>/golang/commons/errors/internal_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/internal_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The InternalError class is used to manage errors caused by programming mistakes.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newinternalerror&#34;&gt;NewInternalError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewInternalError(correlationId, code, message string) &lt;a href=&#34;../application_exception&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: InvalidStateError</title>
      <link>/golang/commons/errors/invalid_state_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/invalid_state_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The InvalidStateError class is used to manage errors related to calling opertaions that require the component to be in a specific state. For example, business calls when the component is not reay.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newinvalidstateerror&#34;&gt;NewInvalidStateError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewInvalidStateError(correlationId, code, message string) &lt;a href=&#34;../application_error&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: InvocationError</title>
      <link>/golang/commons/errors/invocation_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/invocation_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The InvocationError class is used to manage errors returned by remote services or by the network during call attempts.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newinvocationerror&#34;&gt;NewInvocationError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewInvocationError(correlationId, code, message string) &lt;a href=&#34;../application_error&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: NotFoundError</title>
      <link>/golang/commons/errors/not_found_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/not_found_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The NotFoundError class is used to manage errors caused by attempts to access missing objects.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newnotfounderror&#34;&gt;NewNotFoundError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewNotFoundError(correlationId, code, message string) &lt;a href=&#34;../application_error&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: UnauthorizedError</title>
      <link>/golang/commons/errors/unauthorized_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/unauthorized_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The UnauthorizedError class is used to manage access errors caused by missing user identity (authentication error) or incorrect security permissions (authorization error).&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newunauthorizederror&#34;&gt;NewUnauthorizedError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewUnauthorizedError(correlationId, code, message string) &lt;a href=&#34;../application_error&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: UnknownError</title>
      <link>/golang/commons/errors/unknown_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/unknown_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The UnknownError class is used to manage unknown or unexpected errors.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newunknownerror&#34;&gt;NewUnknownError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewUnknownError(correlationId, code, message string) &lt;a href=&#34;../application_error&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: UnsupportedError</title>
      <link>/golang/commons/errors/unsupported_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/errors/unsupported_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The UnsupportedError class is used to manage errors caused by calls to unsupported or not yet implemented functionality.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newunsupportederror&#34;&gt;NewUnsupportedError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewUnsupportedError(correlationId, code, message string) &lt;a href=&#34;../application_error&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id to trace execution through call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - (optional) a unique error code. Default: &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - (optional) a human-readable description of the error.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
