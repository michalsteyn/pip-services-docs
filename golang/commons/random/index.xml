<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Random</title>
    <link>/golang/commons/random/</link>
    <description>Recent content in Random on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/commons/random/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: RandomArray</title>
      <link>/golang/commons/random/random_array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/random/random_array/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RandomArray class can be used as a random generator for array objects.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;pick&#34;&gt;Pick&lt;/h4&gt;
&lt;p&gt;Picks a random element from a specified array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomArray) Pick(value interface{}) interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: interface{} - array of any type&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - randomly picked item.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomArray&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Pick&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: RandomBoolean</title>
      <link>/golang/commons/random/random_boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/random/random_boolean/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RandomBoolean class allows you to generate random boolean values.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;chance&#34;&gt;Chance&lt;/h4&gt;
&lt;p&gt;Calculates &amp;ldquo;chance&amp;rdquo; out of &amp;ldquo;max chances&amp;rdquo;.
Example: 1 chance out of 3 chances (or 33.3%)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomBoolean) Chance(chances int, maxChances int) bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;chances&lt;/strong&gt;: int - chance proportional to maxChances.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maxChances&lt;/strong&gt;: int - maximum number of chances&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true or false for a settled chance&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nextboolean&#34;&gt;NextBoolean&lt;/h4&gt;
&lt;p&gt;Generates a random boolean value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomBoolean) NextBoolean() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - random boolean.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NextBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomBoolean&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Chance&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: RandomDateTime</title>
      <link>/golang/commons/random/random_date_time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/random/random_date_time/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RandomDateTime class allows you to generate random dates.&lt;/p&gt;
&lt;p&gt;Important points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Month must be in 1..12 format.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;nextdate&#34;&gt;NextDate&lt;/h4&gt;
&lt;p&gt;Generates a random Date in the range [&amp;lsquo;minYear&amp;rsquo;, &amp;lsquo;maxYear&amp;rsquo;].
This method generate dates without time (or time set to 00:00:00)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomDateTime) NextDate(min time.Time, max time.Time) time.Time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt;: time.Time - (optional) minimum range value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max&lt;/strong&gt;: time.Time - max range value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: time.Time - random Date value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nextdatetime&#34;&gt;NextDateTime&lt;/h4&gt;
&lt;p&gt;Generates a random Date and time in the range [&amp;lsquo;minYear&amp;rsquo;, &amp;lsquo;maxYear&amp;rsquo;].
This method generate dates without time (or time set to 00:00:00)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomDateTime) NextDateTime(min time.Time, max time.Time) time.Time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt;: time.Time - (optional) minimum range value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max&lt;/strong&gt;: time.Time - max range value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: time.Time - random Date and time value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;updatedatetime&#34;&gt;UpdateDateTime&lt;/h4&gt;
&lt;p&gt;Updates (drifts) a Date value within specified range defined&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomDateTime) UpdateDateTime(value time.Time, interval int64) time.Time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: time.Time - Date value to drift.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;range&lt;/strong&gt;: int64 - (optional) range in milliseconds. Default: 10 days&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: time.Time - updated DateTime&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextDate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Parse&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;shortForm&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2007-Jan-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Parse&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;shortForm&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2010-Jan-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 2008-01-03
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Parse&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;shortForm&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2006-Jan-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Parse&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;shortForm&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2017-Jan-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 2007-03-11 11:20:32
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;updateDateTime&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Parse&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;shortForm&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;2010-Jan-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 2010-02-05 11:33:23
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: RandomDouble</title>
      <link>/golang/commons/random/random_double/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/random/random_double/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RandomDouble class allows you to generate random double values.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;nextdouble&#34;&gt;NextDouble&lt;/h4&gt;
&lt;p&gt;Generates a random double value in the range [&amp;lsquo;minYear&amp;rsquo;, &amp;lsquo;maxYear&amp;rsquo;].&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomDouble) NextDouble(min float64, max float64) float64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt;: float64 - (optional) minimum range value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max&lt;/strong&gt;: float64 - max range value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float64 - random double value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;updatedouble&#34;&gt;UpdateDouble&lt;/h4&gt;
&lt;p&gt;Updates (drifts) a double value within specified range defined&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomDouble) UpdateDouble(value float64, interval float64) float64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: float64 - double value to drift.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interval&lt;/strong&gt;: float64 - (optional) range. Default: 10% of the value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float64 - updated double value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 7.3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 3.7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;updateDouble&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 9.2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: RandomFloat</title>
      <link>/golang/commons/random/random_float/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/random/random_float/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RandomFloat class allows you to generate random float values.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;nextfloat&#34;&gt;NextFloat&lt;/h4&gt;
&lt;p&gt;Generates a float in the range [&amp;lsquo;min&amp;rsquo;, &amp;lsquo;max&amp;rsquo;]. If &amp;lsquo;max&amp;rsquo; is omitted, then the range will be set to [0, &amp;lsquo;min&amp;rsquo;].&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomFloat) NextFloat(min float32, max float32) float32&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt;: float32 - (minimum value of the float that will be generated.
If &amp;lsquo;max&amp;rsquo; is omitted, then &amp;lsquo;max&amp;rsquo; is set to &amp;lsquo;min&amp;rsquo; and &amp;lsquo;min&amp;rsquo; is set to 0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max&lt;/strong&gt;: float32 - (optional) maximum value of the float that will be generated. Defaults to &amp;lsquo;min&amp;rsquo; if omitted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float32 - generated random float value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;updatefloat&#34;&gt;UpdateFloat&lt;/h4&gt;
&lt;p&gt;Updates (drifts) a float value within specified range defined&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomFloat) UpdateFloat(value float32, interval float32) float32&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: float32 - a float value to drift.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;range&lt;/strong&gt;: float32 - (optional) a range. Default: 10% of the value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float32 - updated float value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 7.3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 3.7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;updateFloat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 9.2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: RandomInteger</title>
      <link>/golang/commons/random/random_integer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/random/random_integer/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RandomInteger class allows you to generate random integer values.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;nextinteger&#34;&gt;NextInteger&lt;/h4&gt;
&lt;p&gt;Generates a integer in the range [&amp;lsquo;min&amp;rsquo;, &amp;lsquo;max&amp;rsquo;]. If &amp;lsquo;max&amp;rsquo; is omitted, then the range will be set to [0, &amp;lsquo;min&amp;rsquo;].&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomInteger) NextInteger(min int, max int) int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt;: int - minimum value of the integer that will be generated.
If &amp;lsquo;max&amp;rsquo; is omitted, then &amp;lsquo;max&amp;rsquo; is set to &amp;lsquo;min&amp;rsquo; and &amp;lsquo;min&amp;rsquo; is set to 0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max&lt;/strong&gt;: int - (optional) maximum value of the float that will be generated. Defaults to &amp;lsquo;min&amp;rsquo; if omitted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - generated random integer value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;updateinteger&#34;&gt;UpdateInteger&lt;/h4&gt;
&lt;p&gt;Updates (drifts) a integer value within specified range defined&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomInteger) UpdateInteger(value int, interval int) int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int - a integer value to drift.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interval&lt;/strong&gt;: int - (optional) a range. Default: 10% of the value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - updated integer value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;updateInteger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 9
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: RandomInteger</title>
      <link>/golang/commons/random/random_long/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/random/random_long/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RandomInteger class allows you to generate random integer values.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;nextlong&#34;&gt;NextLong&lt;/h4&gt;
&lt;p&gt;Generates a integer in the range [&amp;lsquo;min&amp;rsquo;, &amp;lsquo;max&amp;rsquo;]. If &amp;lsquo;max&amp;rsquo; is omitted, then the range
will be set to [0, &amp;lsquo;min&amp;rsquo;].&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomLong) NextLong(min int64, max int64) int64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt;: int64 - minimum value of the integer that will be generated. If &amp;lsquo;max&amp;rsquo; is omitted, then &amp;lsquo;max&amp;rsquo; is set to &amp;lsquo;min&amp;rsquo; and &amp;lsquo;min&amp;rsquo; is set to 0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max&lt;/strong&gt;: int64 - maximum value of the int that will be generated. Defaults to &amp;lsquo;min&amp;rsquo; if omitted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int64 - generated random integer value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;updateinteger&#34;&gt;UpdateInteger&lt;/h4&gt;
&lt;p&gt;Updates (drifts) a integer value within specified range defined&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomLong) UpdateLong(value int64, interval int64) int64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int64 - a integer value to drift.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interval&lt;/strong&gt;: int64 - (optional) a range. Default: 10% of the value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int64 - updated integer value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;nextLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;updateLong&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: 9
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: RandomString</title>
      <link>/golang/commons/random/random_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/random/random_string/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The class RandomString allows you to generate random strings.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;distort&#34;&gt;Distort&lt;/h4&gt;
&lt;p&gt;Distorts a string by randomly replacing characters in it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomString) Distort(value string) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - a string to distort.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a distored string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nextalphachar&#34;&gt;NextAlphaChar&lt;/h4&gt;
&lt;p&gt;Generates random alpha characted [A-Za-z]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomString) NextAlphaChar() byte&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: byte - a random characted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nextstring&#34;&gt;NextString&lt;/h4&gt;
&lt;p&gt;Generates a random string, consisting of upper and lower case letters (of the English alphabet),
digits (0-9), and symbols (&amp;quot;_,.:-/.[].{},#-!,$=%.+^.&amp;amp;*-() &amp;ldquo;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomString) NextString(minLength int, maxLength int) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;minLength&lt;/strong&gt;: int - (optional) minimum string length.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maxLength&lt;/strong&gt;: int - maximum string length.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a random string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pick&#34;&gt;Pick&lt;/h4&gt;
&lt;p&gt;Picks a random string from an array of string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomString) Pick(values []string) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: []string - Picks a random character from an array of string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a randomly picked char.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pickchar&#34;&gt;PickChar&lt;/h4&gt;
&lt;p&gt;Picks a random character from a string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomString) PickChar(values string) byte&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;values&lt;/strong&gt;: string - a string to pick a char from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: byte - a randomly picked char.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;pickChar&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: &amp;#34;C&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomString&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;pick&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: &amp;#34;gBW&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: RandomText</title>
      <link>/golang/commons/random/random_text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/commons/random/random_text/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RandomText class allows you to generate different types of randomt texts. The options included are colors, names, nouns, adjectives, verbs, phrases, full names, words, phone numbers, email addresses, and texts.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;adjective&#34;&gt;Adjective&lt;/h4&gt;
&lt;p&gt;Generates a random adjective.
The result value is capitalized.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) Adjective() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a random adjective.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;color&#34;&gt;Color&lt;/h4&gt;
&lt;p&gt;Generates a random color name.
The result value is capitalized.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) Color() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a random color name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;email&#34;&gt;Email&lt;/h4&gt;
&lt;p&gt;Generates a random email address.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) Email() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a random email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fullname&#34;&gt;FullName&lt;/h4&gt;
&lt;p&gt;Generates a random person&amp;rsquo;s name which has the following structure
&amp;lt;optional prefix&amp;gt; &amp;lt;first name&amp;gt; &amp;lt;second name&amp;gt; &amp;lt;optional suffix&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) FullName() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a random name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;phone&#34;&gt;Phone&lt;/h4&gt;
&lt;p&gt;Generates a random phone number.
The phone number has the format: (XXX) XXX-YYYY&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) Phone() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string -  a random phone number.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;phrase&#34;&gt;Phrase&lt;/h4&gt;
&lt;p&gt;Generates a random phrase which consists of few words separated by spaces.
The first word is capitalized, others are not.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) Phrase(min int, max int) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;minLength&lt;/strong&gt;: int - (optional) minimum string length.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maxLength&lt;/strong&gt;: int -  maximum string length.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string -  a random phrase.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;text&#34;&gt;Text&lt;/h4&gt;
&lt;p&gt;Generates a random text, consisting of first names, last names, colors, stuffs, adjectives, verbs, and punctuation marks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) Text(min int, max int) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;minLength&lt;/strong&gt;: int - minimum amount of words to generate. Text will contain &amp;lsquo;minSize&amp;rsquo; words if &amp;lsquo;maxSize&amp;rsquo; is omitted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maxLength&lt;/strong&gt;: int -  (optional) maximum amount of words to generate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string -  a random text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;verb&#34;&gt;Verb&lt;/h4&gt;
&lt;p&gt;Generates a random verb.
The result value is capitalized.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) Verb() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a random verb.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;word&#34;&gt;Word&lt;/h4&gt;
&lt;p&gt;Generates a random word from available first names, last names, colors, stuffs, adjectives, or verbs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) Word() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a random word.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;words&#34;&gt;Words&lt;/h4&gt;
&lt;p&gt;Generates a random word from available first names, last names, colors, stuffs, adjectives, or verbs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *TRandomText) Words(min int, max int) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt;: int - (optional) a minimum number of words.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max&lt;/strong&gt;: int - a maximum number of words.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - a random text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomText&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;FullName&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;     	&lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: &amp;#34;Segio&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomText&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Verb&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;      	&lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: &amp;#34;Run&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;RandomText&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;    	&lt;span style=&#34;color:#75715e&#34;&gt;// Possible result: &amp;#34;Run jorge. Red high scream?&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
