<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Auth</title>
    <link>/golang/rpc/auth/</link>
    <description>Recent content in Auth on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/rpc/auth/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: BasicAuthManager</title>
      <link>/golang/rpc/auth/basic_auth_manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/rpc/auth/basic_auth_manager/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The BasicAuthManager provides two methods: one to grant access to everyone and another to grant access to authorized users.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;anybody&#34;&gt;Anybody&lt;/h4&gt;
&lt;p&gt;Allows everyone access, even unauthorized users.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*BasicAuthManager&lt;/a&gt;) Anybody() func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc) - returns anybody handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;signed&#34;&gt;Signed&lt;/h4&gt;
&lt;p&gt;Access is granted only to authorized users.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*BasicAuthManager&lt;/a&gt;) Signed() func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc) - returns sign handler.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: OwnerAuthManager</title>
      <link>/golang/rpc/auth/owner_auth_manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/rpc/auth/owner_auth_manager/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The OwnerAuthManager class provides access granting methods for owners and administrators.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;owner&#34;&gt;Owner&lt;/h4&gt;
&lt;p&gt;Access is granted only for the session owner.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*OwnerAuthManager&lt;/a&gt;) Owner(idParam string) func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;idParam&lt;/strong&gt;: string - id of the current owner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc) - returns owner handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;owneroradmin&#34;&gt;OwnerOrAdmin&lt;/h4&gt;
&lt;p&gt;Access is granted only to authorized users.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*OwnerAuthManager&lt;/a&gt;) OwnerOrAdmin(idParam string) func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;idParam&lt;/strong&gt;: string - id of the current owner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc) - returns owner or admin handler.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: RoleAuthManager</title>
      <link>/golang/rpc/auth/role_auth_manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/rpc/auth/role_auth_manager/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RoleAuthManager class provides methods to check on a user&amp;rsquo;s roles.&lt;/p&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;userinroles&#34;&gt;UserInRoles&lt;/h4&gt;
&lt;p&gt;Checks on the roles a user has been assigned.
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RoleAuthManager&lt;/a&gt;) UserInRoles(roles []string) func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;roles&lt;/strong&gt;: []string - roles list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc) - returns roles handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;userinrole&#34;&gt;UserInRole&lt;/h4&gt;
&lt;p&gt;Check if the role is assigned to the user.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RoleAuthManager&lt;/a&gt;) UserInRole(role string) func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;role&lt;/strong&gt;: string - the user role.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc) - returns role handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;admin&#34;&gt;Admin&lt;/h4&gt;
&lt;p&gt;Check if the user has admin role.&lt;br&gt;
Throws &lt;a href=&#34;../../../commons/errors/unauthorized_exception&#34;&gt;UnauthorizedException&lt;/a&gt; exception if not authorized or not owner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RoleAuthManager&lt;/a&gt;) Admin() func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: func(res http.ResponseWriter, req *http.Request, next http.HandlerFunc) - returns admin handler.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
