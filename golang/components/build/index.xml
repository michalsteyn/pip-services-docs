<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Build</title>
    <link>/golang/components/build/</link>
    <description>Recent content in Build on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/components/build/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: CompositeFactory</title>
      <link>/golang/components/build/composite_factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/components/build/composite_factory/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CompositeFactory class allows you to aggregate multiple factories into a single factory component.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a new component is requested, it iterates through factories to locate the one able to create the requested component.&lt;/li&gt;
&lt;li&gt;Usually used to keep all supported factories in a single place.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newcompositefactoryfromfactories&#34;&gt;NewCompositeFactoryFromFactories&lt;/h4&gt;
&lt;p&gt;Creates a new instance of the factory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewCompositeFactoryFromFactories(factories &amp;hellip;&lt;a href=&#34;../ifactory&#34;&gt;IFactory&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*CompositeFactory&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;factories&lt;/strong&gt;: &amp;hellip;&lt;a href=&#34;../ifactory&#34;&gt;IFactory&lt;/a&gt; - list of factories to embed into this factory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;newcompositefactory&#34;&gt;NewCompositeFactory&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;NewCompositeFactory() &lt;a href=&#34;&#34;&gt;*CompositeFactory&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;add&#34;&gt;Add&lt;/h4&gt;
&lt;p&gt;Adds a factory into the list of embedded factories.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CompositeFactory&lt;/a&gt;) Add(factory &lt;a href=&#34;../ifactory&#34;&gt;IFactory&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;factory&lt;/strong&gt;: &lt;a href=&#34;../ifactory&#34;&gt;IFactory&lt;/a&gt; - factory to be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cancreate&#34;&gt;CanCreate&lt;/h4&gt;
&lt;p&gt;Checks if this factory is able to create a component by a given locator.&lt;/p&gt;
&lt;p&gt;This method searches for all registered components and returns
a locator for component it is able to create that matches the given locator.
If the factory is not able to create a requested component it returns nil.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CompositeFactory&lt;/a&gt;) CanCreate(locator interface{}) interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;locator&lt;/strong&gt;: interface{} - a locator to identify component to be created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - a locator for a component that the factory is able to create.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;create&#34;&gt;Create&lt;/h4&gt;
&lt;p&gt;Creates a component identified by given locator.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CompositeFactory&lt;/a&gt;) Create(locator interface{}) (interface{}, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;locator&lt;/strong&gt;: interface{} - locator to identify component to be created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (interface{}, error) - created component.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remove&#34;&gt;Remove&lt;/h4&gt;
&lt;p&gt;Removes a factory from the list of embedded factories.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CompositeFactory&lt;/a&gt;) Remove(factory &lt;a href=&#34;../ifactory&#34;&gt;IFactory&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;factory&lt;/strong&gt;: &lt;a href=&#34;../ifactory&#34;&gt;IFactory&lt;/a&gt; - factory to remove.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewCompositeFactory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewDefaultLoggerFactory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewDefaultCountersFactory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;());&lt;/span&gt;
  
&lt;span style=&#34;color:#75af00&#34;&gt;loggerLocator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewDescriptor&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;logger&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;CanCreate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;loggerLocator&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Result: Descriptor(&amp;#34;pip-service&amp;#34;, &amp;#34;logger&amp;#34;, &amp;#34;null&amp;#34;, &amp;#34;default&amp;#34;, &amp;#34;1.0&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Create&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;loggerLocator&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;// Result: created NullLogger
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Golang: CreateError</title>
      <link>/golang/components/build/create_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/components/build/create_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CreateError class allows you to manage the error raised when a factory is not able to create a requested component.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newcreateerror&#34;&gt;NewCreateError&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewCreateError(correlationId string, message string) &lt;a href=&#34;../../../commons/errors/application_exception&#34;&gt;*errors.ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) a unique transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - human-readable error of the component that cannot be created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;newcreateerrorbylocator&#34;&gt;NewCreateErrorByLocator&lt;/h4&gt;
&lt;p&gt;Creates an error instance and assigns its values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewCreateErrorByLocator(correlationId string, locator interface{}) &lt;a href=&#34;../../../commons/errors/application_exception&#34;&gt;*errors.ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) unique transaction used id to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: interface{} - human-readable locator of the component that cannot be created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;internalerrorcommonserrorsinternal_exception&#34;&gt;&lt;a href=&#34;../../../commons/errors/internal_exception&#34;&gt;InternalError&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;applicationerrorcommonserrorsapplication_exception&#34;&gt;&lt;a href=&#34;../../../commons/errors/application_exception&#34;&gt;ApplicationError&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Factory</title>
      <link>/golang/components/build/factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/components/build/factory/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The Factory class allows you to create components using registered types and factory functions.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newfactory&#34;&gt;NewFactory&lt;/h4&gt;
&lt;p&gt;Creates new factory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewFactory() &lt;a href=&#34;&#34;&gt;*Factory&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;cancreate&#34;&gt;CanCreate&lt;/h4&gt;
&lt;p&gt;Checks if this factory is able to create component by a given locator.&lt;/p&gt;
&lt;p&gt;This method searches for all registered components and returns
a locator for the component it is able to create that matches the given locator.
If the factory is not able to create the requested component it returns nil.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Factory&lt;/a&gt;) CanCreate(locator interface{}) interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;locator&lt;/strong&gt;: interface{} - locator used to identify the component to be created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - locator for a component that the factory is able to create.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;create&#34;&gt;Create&lt;/h4&gt;
&lt;p&gt;Creates a component identified by given a locator.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Factory&lt;/a&gt;) Create(locator interface{}) (interface{}, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;locator&lt;/strong&gt;: interface{} - locator used to identify the component to be created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (interface{}, error) - created component.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;register&#34;&gt;Register&lt;/h4&gt;
&lt;p&gt;Registers a component using a factory method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Factory&lt;/a&gt;) Register(locator interface{}, factory func() interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;locator&lt;/strong&gt;: interface{} - locator used to identify the component to be created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;factory&lt;/strong&gt;: func() interface{} - factory function that receives a locator and returns the created component.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;registertype&#34;&gt;RegisterType&lt;/h4&gt;
&lt;p&gt;Registers a component using its type (a constructor function).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Factory&lt;/a&gt;) RegisterType(locator interface{}, factory interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;locator&lt;/strong&gt;: interface{} - locator used to identify a component to be created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;factory&lt;/strong&gt;: interface{} - component type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewFactory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;RegisterType&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;NewDescriptor&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mygroup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mycomponent1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;MyComponent1&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Register&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;NewDescriptor&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mygroup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mycomponent2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;locator&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;NewMyComponent2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
  
&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Create&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewDescriptor&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mygroup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mycomponent1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;name1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;factory&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Create&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewDescriptor&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mygroup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;mycomponent2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;name2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;descriptorcommonsreferdescriptor&#34;&gt;&lt;a href=&#34;../../../commons/refer/descriptor&#34;&gt;Descriptor&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;ifactoryifactory&#34;&gt;&lt;a href=&#34;../ifactory&#34;&gt;IFactory&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: IFactory</title>
      <link>/golang/components/build/ifactory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/components/build/ifactory/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IFactory interface defines methods used by component factories to create components.&lt;/p&gt;
&lt;p&gt;Important points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Factories use locators to identify the components to be created.&lt;/li&gt;
&lt;li&gt;The locators are similar to those used to locate components in references. They can be of any type, like strings or integers. However the Pip.Services toolkit most often uses Descriptor objects as component locators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;cancreate&#34;&gt;CanCreate&lt;/h4&gt;
&lt;p&gt;Checks if this factory is able to create a component by given locator.&lt;/p&gt;
&lt;p&gt;This method searches for all registered components and returns
a locator for a component it is able to create that matches the given locator.
If the factory is not able to create a requested component it returns nil.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CanCreate(locator interface{}) interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;locator&lt;/strong&gt;: interface{} - locator used to identify the component to be created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - locator for the component that the factory is able to create.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;create&#34;&gt;Create&lt;/h4&gt;
&lt;p&gt;Creates a component identified by given locator.
Throws a &lt;a href=&#34;../create_error&#34;&gt;CreateError&lt;/a&gt; if the factory is not able to create the component.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create(locator interface{}) (interface{}, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;locator&lt;/strong&gt;: interface{} - locator used to identify the component to be created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (interface{}, error) - created component.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;descriptorcommonsreferdescriptor&#34;&gt;&lt;a href=&#34;../../../commons/refer/descriptor&#34;&gt;Descriptor&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;ifactoryifactory&#34;&gt;&lt;a href=&#34;../ifactory&#34;&gt;IFactory&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
