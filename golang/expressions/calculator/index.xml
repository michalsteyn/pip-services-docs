<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Calculator</title>
    <link>/golang/expressions/calculator/</link>
    <description>Recent content in Calculator on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/expressions/calculator/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: Functions</title>
      <link>/golang/expressions/calculator/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/functions/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h3&gt;
&lt;h4 id=&#34;ifunctionifunction&#34;&gt;&lt;a href=&#34;ifunction&#34;&gt;IFunction&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Interface for expression functions.&lt;/p&gt;
&lt;h4 id=&#34;ifunctioncollectionifunction_collection&#34;&gt;&lt;a href=&#34;ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a list of functions.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;
&lt;h4 id=&#34;defaultfunctioncollectiondefault_function_collection&#34;&gt;&lt;a href=&#34;default_function_collection&#34;&gt;DefaultFunctionCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a list filled with standard functions.&lt;/p&gt;
&lt;h4 id=&#34;delegatedfunctiondelegated_function&#34;&gt;&lt;a href=&#34;delegated_function&#34;&gt;DelegatedFunction&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines a delegate to implement a function.&lt;/p&gt;
&lt;h4 id=&#34;functioncollectionfunction_collection&#34;&gt;&lt;a href=&#34;function_collection&#34;&gt;FunctionCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a list of functions.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Parsers</title>
      <link>/golang/expressions/calculator/parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/parsers/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;constants&#34;&gt;Constants&lt;/h3&gt;
&lt;h4 id=&#34;expressiontokentypeexpression_token_type&#34;&gt;&lt;a href=&#34;expression_token_type&#34;&gt;ExpressionTokenType&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines types of expression tokens.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;
&lt;h4 id=&#34;expressionparserexpression_parser&#34;&gt;&lt;a href=&#34;expression_parser&#34;&gt;ExpressionParser&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements an expression parser class.&lt;/p&gt;
&lt;h4 id=&#34;expressiontokenexpression_token&#34;&gt;&lt;a href=&#34;expression_token&#34;&gt;ExpressionToken&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines an expression token holder.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Tokenizers</title>
      <link>/golang/expressions/calculator/tokenizers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/tokenizers/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;
&lt;h4 id=&#34;expressionnumberstateexpression_number_state&#34;&gt;&lt;a href=&#34;expression_number_state&#34;&gt;ExpressionNumberState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements an expression-specific number state object.&lt;/p&gt;
&lt;h4 id=&#34;expressionquotestateexpression_quote_state&#34;&gt;&lt;a href=&#34;expression_quote_state&#34;&gt;ExpressionQuoteState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements an expression-specific quote string state object&lt;/p&gt;
&lt;h4 id=&#34;expressionsymbolstateexpression_symbol_state&#34;&gt;&lt;a href=&#34;expression_symbol_state&#34;&gt;ExpressionSymbolState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a symbol state object.&lt;/p&gt;
&lt;h4 id=&#34;expressiontokenizerexpression_tokenizer&#34;&gt;&lt;a href=&#34;expression_tokenizer&#34;&gt;ExpressionTokenizer&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a tokenizer to perform lexical analysis for expressions.&lt;/p&gt;
&lt;h4 id=&#34;expressionwordstateexpression_word_state&#34;&gt;&lt;a href=&#34;expression_word_state&#34;&gt;ExpressionWordState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a symbol state object.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Variables</title>
      <link>/golang/expressions/calculator/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/variables/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h3&gt;
&lt;h4 id=&#34;ivariableivariable&#34;&gt;&lt;a href=&#34;ivariable&#34;&gt;IVariable&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The IVariable interface allows you to define a variable.&lt;/p&gt;
&lt;h4 id=&#34;ivariablecollectionivariable_collection&#34;&gt;&lt;a href=&#34;ivariable_collection&#34;&gt;IVariableCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The IVariableCollection interface defines a list of variables.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;
&lt;h4 id=&#34;variablevariable&#34;&gt;&lt;a href=&#34;variable&#34;&gt;Variable&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a variable holder object.&lt;/p&gt;
&lt;h4 id=&#34;variablecollectionvariable_collection&#34;&gt;&lt;a href=&#34;variable_collection&#34;&gt;VariableCollection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a list of variables.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: CalculationStack</title>
      <link>/golang/expressions/calculator/calculation_stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/calculation_stack/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CalculationStack class allows you to implement a stack of Variant values.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;length&#34;&gt;Length&lt;/h4&gt;
&lt;p&gt;Length&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CalculationStack&lt;/a&gt;) Length() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - length&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pop&#34;&gt;Pop&lt;/h4&gt;
&lt;p&gt;Removes and returns the last value from the list.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CalculationStack&lt;/a&gt;) Pop() &lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt; - the last value from the list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekat&#34;&gt;PeekAt&lt;/h4&gt;
&lt;p&gt;Peeks a Variant value located at a specified index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CalculationStack&lt;/a&gt;) PeekAt(index int) &lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - a specified index.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt; - a Variant value located.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Peeks a Variant value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CalculationStack&lt;/a&gt;) Peek() &lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt; - a Variant value.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Errors</title>
      <link>/golang/expressions/calculator/errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/errors/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;constants&#34;&gt;Constants&lt;/h3&gt;
&lt;h4 id=&#34;syntaxerrorcodesyntax_error_code&#34;&gt;&lt;a href=&#34;syntax_error_code&#34;&gt;SyntaxErrorCode&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The SyntaxErrorCode class defines general syntax errors.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;
&lt;h4 id=&#34;expressionerrorexpression_error&#34;&gt;&lt;a href=&#34;expression_error&#34;&gt;ExpressionError&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Exception that can be thrown by Expression Calculator.&lt;/p&gt;
&lt;h4 id=&#34;syntaxerrorsyntax_error&#34;&gt;&lt;a href=&#34;syntax_error&#34;&gt;SyntaxError&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Exception that can be thrown by ExpressionParser.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ExpressionCalculator</title>
      <link>/golang/expressions/calculator/expression_calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/expression_calculator/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ExpressionCalculator class allows you to create an expression calculator.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newexpressioncalculator&#34;&gt;NewExpressionCalculator&lt;/h4&gt;
&lt;p&gt;Constructs this class with default parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewExpressionCalculator() &lt;a href=&#34;&#34;&gt;*ExpressionCalculator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;expressioncalculatorfromexpression&#34;&gt;ExpressionCalculatorFromExpression&lt;/h4&gt;
&lt;p&gt;Constructs this class and assigns expression string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ExpressionCalculatorFromExpression(expression string) (&lt;a href=&#34;&#34;&gt;*ExpressionCalculator&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt;: string - expression string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;expressioncalculatorfromexpression-1&#34;&gt;ExpressionCalculatorFromExpression&lt;/h4&gt;
&lt;p&gt;Constructs this class and assigns token values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ExpressionCalculatorFromTokens(originalTokens []*tokenizers.Token) &lt;a href=&#34;&#34;&gt;*ExpressionCalculator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt;: string - expression string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;originalTokens&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;autovariables&#34;&gt;AutoVariables&lt;/h4&gt;
&lt;p&gt;Gets the flag to turn on auto-creation of variables for a specified expression.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) AutoVariables() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - returns the flag to turn on auto-creation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;defaultfunctions&#34;&gt;DefaultFunctions&lt;/h4&gt;
&lt;p&gt;List with default functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) DefaultFunctions() &lt;a href=&#34;../functions/ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../functions/ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt; - list with default functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;defaultvariables&#34;&gt;DefaultVariables&lt;/h4&gt;
&lt;p&gt;List with default variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) DefaultVariables() &lt;a href=&#34;../variables/ivariable_collection&#34;&gt;IVariableCollection&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../variables/ivariable_collection&#34;&gt;IVariableCollection&lt;/a&gt; - list with default variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;expression&#34;&gt;Expression&lt;/h4&gt;
&lt;p&gt;Expression string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) Expression() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - expression string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;initialtokens&#34;&gt;InitialTokens&lt;/h4&gt;
&lt;p&gt;List of original expression tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) InitialTokens() &lt;a href=&#34;../parsers/expression_token&#34;&gt;[]*ExpressionToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../parsers/expression_token&#34;&gt;[]*ExpressionToken&lt;/a&gt; - list of original expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;originaltokens&#34;&gt;OriginalTokens&lt;/h4&gt;
&lt;p&gt;List of expression tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) OriginalTokens() &lt;a href=&#34;../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt; - list of expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resulttokens&#34;&gt;ResultTokens&lt;/h4&gt;
&lt;p&gt;List of processed expression tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) ResultTokens() &lt;a href=&#34;../parsers/expression_token&#34;&gt;[]*ExpressionToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../parsers/expression_token&#34;&gt;[]*ExpressionToken&lt;/a&gt; - list of processed expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantoperations&#34;&gt;VariantOperations&lt;/h4&gt;
&lt;p&gt;Gets the manager for operations on variant values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) VariantOperations() &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - manager for operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setautovariables&#34;&gt;SetAutoVariables&lt;/h4&gt;
&lt;p&gt;Sets the flag to turn on auto-creation of variables for specified expression.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) SetAutoVariables(value bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: bool - flag to turn on auto-creation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setexpression&#34;&gt;SetExpression&lt;/h4&gt;
&lt;p&gt;Gets the expression string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) SetExpression(value string) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - expression string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil if no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setoriginaltokens&#34;&gt;SetOriginalTokens&lt;/h4&gt;
&lt;p&gt;Sets list of expression tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) SetOriginalTokens(value &lt;a href=&#34;../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt; - list of expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setvariantoperations&#34;&gt;SetVariantOperations&lt;/h4&gt;
&lt;p&gt;Sets the manager for operations on variant values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) SetVariantOperations(value &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - manager for operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Cleans up this calculator from all data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) Clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;createvariables&#34;&gt;CreateVariables&lt;/h4&gt;
&lt;p&gt;Cleans up this calculator from all data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) CreateVariables(vars &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - list of variables to be populated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluate&#34;&gt;Evaluate&lt;/h4&gt;
&lt;p&gt;Evaluates this expression using default variables and functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) Evaluate() (&lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt;, error) - evaluation result.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluateusingvariables&#34;&gt;EvaluateUsingVariables&lt;/h4&gt;
&lt;p&gt;Evaluates this expression using specified variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) EvaluateUsingVariables(vars &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;) (&lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - list of variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt;, error) - evaluation result.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluatewithvariablesandfunctions&#34;&gt;evaluateWithVariablesAndFunctions&lt;/h4&gt;
&lt;p&gt;Evaluates this expression using specified variables and functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *ExpressionCalculator) EvaluateUsingVariablesAndFunctions(vars &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;, funcs &lt;a href=&#34;../functions/ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt;) (&lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: &lt;a href=&#34;../../variants/ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt; - list of variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;functions&lt;/strong&gt;: &lt;a href=&#34;../functions/ifunction_collection&#34;&gt;IFunctionCollection&lt;/a&gt; - list of functions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../../variants/variant&#34;&gt;*Variant&lt;/a&gt;, error) - evaluation result.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
