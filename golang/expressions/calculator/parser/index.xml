<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Parsers</title>
    <link>/golang/expressions/calculator/parser/</link>
    <description>Recent content in Parsers on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/expressions/calculator/parser/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: ExpressionParser</title>
      <link>/golang/expressions/calculator/parser/expression_parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/parser/expression_parser/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ExpressionParser class allows you to implement an expression parser.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Clears parsing results.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) Clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;expression&#34;&gt;Expression&lt;/h4&gt;
&lt;p&gt;Gets the expression string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) Expression() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - expression string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;initialtokens&#34;&gt;InitialTokens&lt;/h4&gt;
&lt;p&gt;List of original expression tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) InitialTokens(): &lt;a href=&#34;../expression_token&#34;&gt;[]*ExpressionToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../expression_token&#34;&gt;[]*ExpressionToken&lt;/a&gt; - list of expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;originaltokens&#34;&gt;OriginalTokens&lt;/h4&gt;
&lt;p&gt;Gets the original tokens&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) OriginalTokens() &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt; - the token list&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;parsestring&#34;&gt;ParseString&lt;/h4&gt;
&lt;p&gt;Sets a new expression string and parses it into internal byte code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) ParseString(expression string) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt;: string - new expression string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;parsetokens&#34;&gt;ParseTokens&lt;/h4&gt;
&lt;p&gt;Parses a given token.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) ParseTokens(tokens &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tokens&lt;/strong&gt;: &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt; - token to be parsed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resulttokens&#34;&gt;ResultTokens&lt;/h4&gt;
&lt;p&gt;Gets the list of parsed expression tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) ResultTokens() &lt;a href=&#34;../expression_token&#34;&gt;[]*ExpressionToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../expression_token&#34;&gt;[]*ExpressionToken&lt;/a&gt; - list of expression tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setexpression&#34;&gt;SetExpression&lt;/h4&gt;
&lt;p&gt;Sets the expression string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) SetExpression(value string) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt; string - expression string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setoriginaltokens&#34;&gt;SetOriginalTokens&lt;/h4&gt;
&lt;p&gt;Sets the original tokens&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) SetOriginalTokens(value &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt; - the token list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variablenames&#34;&gt;VariableNames&lt;/h4&gt;
&lt;p&gt;Gets the list of found variable names.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionParser&lt;/a&gt;) VariableNames() []string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []string - list of found variable names.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ExpressionToken</title>
      <link>/golang/expressions/calculator/parser/expression_token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/parser/expression_token/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ExpressionToken class defines an expression token holder.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newexpressiontoken&#34;&gt;NewExpressionToken&lt;/h4&gt;
&lt;p&gt;Creates an instance of this token and initializes it with specified values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewExpressionToken(typ int, value &lt;a href=&#34;../../../variants/variant&#34;&gt;*Variant&lt;/a&gt;, line int, column int) &lt;a href=&#34;&#34;&gt;*ExpressionToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;typ&lt;/strong&gt;: int - type of the token.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../../../variants/variant&#34;&gt;*Variant&lt;/a&gt; - value of the token.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: int - line number where the token is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;column&lt;/strong&gt;: int - column number where the token is.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;Column&lt;/h4&gt;
&lt;p&gt;The column number where the token is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionToken&lt;/a&gt;) Column() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - column number.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;Line&lt;/h4&gt;
&lt;p&gt;The line number where the token is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionToken&lt;/a&gt;) Line() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - column number.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;type&#34;&gt;Type&lt;/h4&gt;
&lt;p&gt;Type of the token.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionToken&lt;/a&gt;) Type() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - type of the token.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;value&#34;&gt;Value&lt;/h4&gt;
&lt;p&gt;Value of the token.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*ExpressionToken&lt;/a&gt;) Value() &lt;a href=&#34;../../../variants/variant&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../../variants/variant&#34;&gt;*Variant&lt;/a&gt; - value of the token.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: ExpressionTokenType</title>
      <link>/golang/expressions/calculator/parser/expression_token_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/calculator/parser/expression_token_type/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The ExpressionTokenType class defines types of expression tokens.&lt;/p&gt;
&lt;h3 id=&#34;enumeration-members&#34;&gt;Enumeration members&lt;/h3&gt;
&lt;p&gt;The codes are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unknown&lt;/strong&gt; = 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LeftBrace&lt;/strong&gt; = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RightBrace&lt;/strong&gt; = 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LeftSquareBrace&lt;/strong&gt; = 3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RightSquareBrace&lt;/strong&gt; = 4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plus&lt;/strong&gt; = 5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minus&lt;/strong&gt; = 6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Star&lt;/strong&gt; = 7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slash&lt;/strong&gt; = 8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Procent&lt;/strong&gt; = 9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Power&lt;/strong&gt; = 10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Equal&lt;/strong&gt; = 11&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NotEqual&lt;/strong&gt; = 12&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More&lt;/strong&gt; = 13&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Less&lt;/strong&gt; = 14&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EqualMore&lt;/strong&gt; = 15&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EqualLess&lt;/strong&gt; = 16&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ShiftLeft&lt;/strong&gt; = 17&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ShiftRight&lt;/strong&gt; = 18&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And&lt;/strong&gt; = 19&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Or&lt;/strong&gt; = 20&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Xor&lt;/strong&gt; = 21&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Is&lt;/strong&gt; = 22&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In&lt;/strong&gt; = 23&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NotIn&lt;/strong&gt; = 24&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Element&lt;/strong&gt; = 25&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Null&lt;/strong&gt; = 26&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not&lt;/strong&gt; = 27&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Like&lt;/strong&gt; = 28&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NotLike&lt;/strong&gt; = 29&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IsNull&lt;/strong&gt; = 30&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IsNotNull&lt;/strong&gt; = 31&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comma&lt;/strong&gt; = 32&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unary&lt;/strong&gt; = 33&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Function&lt;/strong&gt; = 34&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variable&lt;/strong&gt; = 35&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constant&lt;/strong&gt; = 36&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
