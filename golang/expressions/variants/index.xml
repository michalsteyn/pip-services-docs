<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Variants</title>
    <link>/golang/expressions/variants/</link>
    <description>Recent content in Variants on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/expressions/variants/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: AbstractVariantOperations</title>
      <link>/golang/expressions/variants/abstract_variant_operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/variants/abstract_variant_operations/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../ivariant_operations&#34;&gt;IVariantOperations&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The AbstractVariantOperations class allows you to implement abstract variant operations manager objects.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;inheritabstractvariantoperations&#34;&gt;InheritAbstractVariantOperations&lt;/h4&gt;
&lt;p&gt;TODO: add description&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;InheritAbstractVariantOperations(overrides IVariantOperationsOverrides) &lt;a href=&#34;&#34;&gt;*AbstractVariantOperations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;overrides&lt;/strong&gt;: IVariantOperationsOverrides - TODO: add description&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;add&#34;&gt;Add&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;+&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *AbstractVariantOperations) Add(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;and&#34;&gt;And&lt;/h4&gt;
&lt;p&gt;Performs the AND operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;convert&#34;&gt;Convert&lt;/h4&gt;
&lt;p&gt;Converts variant to specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Convert(value &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, newType int) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - variant value to be converted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;newType&lt;/strong&gt;: int - type of object to be returned (&lt;a href=&#34;../variant_type&#34;&gt;VariantType&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - converted Variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;div&#34;&gt;Div&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;/&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Div(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equal&#34;&gt;Equal&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;=&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Equal(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getelement&#34;&gt;GetElement&lt;/h4&gt;
&lt;p&gt;Performs the [] operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GetElement(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;in&#34;&gt;In&lt;/h4&gt;
&lt;p&gt;Performs the IN operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;less&#34;&gt;Less&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;lt;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Less(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lessequal&#34;&gt;LessEqual&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;lt;=&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LessEqual(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lsh&#34;&gt;Lsh&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;laquo;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lsh(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mod&#34;&gt;Mod&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;%&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mod(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;more&#34;&gt;More&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;gt;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;More(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;moreequal&#34;&gt;MoreEqual&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;gt;=&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MoreEqual(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mul&#34;&gt;Mul&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;*&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mMul(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;negative&#34;&gt;Negative&lt;/h4&gt;
&lt;p&gt;Performs the unary &amp;lsquo;-&amp;rsquo; operation for a variant.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Negative(value &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;not&#34;&gt;Not&lt;/h4&gt;
&lt;p&gt;Performs the NOT operation for a variant.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not(value &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;notequal&#34;&gt;NotEqual&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;lt;&amp;gt;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NotEqual(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;or&#34;&gt;Or&lt;/h4&gt;
&lt;p&gt;Performs the OR operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Or(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pow&#34;&gt;Pow&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;^&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pow(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rsh&#34;&gt;Rsh&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;raquo;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rsh(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sub&#34;&gt;Sub&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;-&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sub(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;typetostring&#34;&gt;typeToString&lt;/h4&gt;
&lt;p&gt;Converts variant type to string representation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;typeToString(value int) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - variant type to be converted (&lt;a href=&#34;../variant_type&#34;&gt;VariantType&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;xor&#34;&gt;Xor&lt;/h4&gt;
&lt;p&gt;Performs the XOR operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Xor(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: IVariantOperations</title>
      <link>/golang/expressions/variants/ivariant_operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/variants/ivariant_operations/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IVariantOperations class allows you to implement an abstract variant operations manager object.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;add&#34;&gt;Add&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;+&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c *AbstractVariantOperations) Add(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;and&#34;&gt;And&lt;/h4&gt;
&lt;p&gt;Performs the AND operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;convert&#34;&gt;Convert&lt;/h4&gt;
&lt;p&gt;Converts variant to specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Convert(value &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, newType int) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - variant value to be converted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;newType&lt;/strong&gt;: int - type of object to be returned (&lt;a href=&#34;../variant_type&#34;&gt;VariantType&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - converted Variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;div&#34;&gt;Div&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;/&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Div(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equal&#34;&gt;Equal&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;=&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Equal(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getelement&#34;&gt;GetElement&lt;/h4&gt;
&lt;p&gt;Performs the [] operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GetElement(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;in&#34;&gt;In&lt;/h4&gt;
&lt;p&gt;Performs the IN operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;less&#34;&gt;Less&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;lt;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Less(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lessequal&#34;&gt;LessEqual&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;lt;=&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LessEqual(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lsh&#34;&gt;Lsh&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;laquo;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lsh(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mod&#34;&gt;Mod&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;%&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mod(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;more&#34;&gt;More&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;gt;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;More(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;moreequal&#34;&gt;MoreEqual&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;gt;=&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MoreEqual(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mul&#34;&gt;Mul&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;*&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mMul(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;negative&#34;&gt;Negative&lt;/h4&gt;
&lt;p&gt;Performs the unary &amp;lsquo;-&amp;rsquo; operation for a variant.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Negative(value &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;not&#34;&gt;Not&lt;/h4&gt;
&lt;p&gt;Performs the NOT operation for a variant.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not(value &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;notequal&#34;&gt;NotEqual&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;lt;&amp;gt;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NotEqual(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;or&#34;&gt;Or&lt;/h4&gt;
&lt;p&gt;Performs the OR operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Or(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pow&#34;&gt;Pow&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;^&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pow(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rsh&#34;&gt;Rsh&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;&amp;raquo;&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rsh(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sub&#34;&gt;Sub&lt;/h4&gt;
&lt;p&gt;Performs the &amp;lsquo;-&amp;rsquo; operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sub(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;typetostring&#34;&gt;typeToString&lt;/h4&gt;
&lt;p&gt;Converts variant type to string representation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;typeToString(value int) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - variant type to be converted (&lt;a href=&#34;../variant_type&#34;&gt;VariantType&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string representation of the type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;xor&#34;&gt;Xor&lt;/h4&gt;
&lt;p&gt;Performs the XOR operation for two variants.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Xor(value1 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, value2 &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value1&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - first operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value2&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - second operand for this operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error) - result variant object.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: TypeSafeVariantOperations</title>
      <link>/golang/expressions/variants/type_safe_variant_operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/variants/type_safe_variant_operations/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../abstract_variant_operations&#34;&gt;AbstractVariantOperations&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TypeSafeVariantOperations class allows you to implement a strongly typed (type safe) variant manager object.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newtypesafevariantoperations&#34;&gt;NewTypeSafeVariantOperations&lt;/h4&gt;
&lt;p&gt;Create new instance of the component&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewTypeSafeVariantOperations() &lt;a href=&#34;&#34;&gt;*TypeSafeVariantOperations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;convert&#34;&gt;Convert&lt;/h4&gt;
&lt;p&gt;Converts a variant to a specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*TypeSafeVariantOperations&lt;/a&gt;) Convert(value &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, newType int) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - variant value to be converted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;newType&lt;/strong&gt;: int - type of object to be returned (&lt;a href=&#34;../variant_type&#34;&gt;VariantType&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - converted Variant value.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: TypeUnsafeVariantOperations</title>
      <link>/golang/expressions/variants/type_unsafe_variant_operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/variants/type_unsafe_variant_operations/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../abstract_variant_operations&#34;&gt;AbstractVariantOperations&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The TypeUnsafeVariantOperations class allows you to implement a type unsafe variant operations manager object.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newtypeunsafevariantoperations&#34;&gt;NewTypeUnsafeVariantOperations&lt;/h4&gt;
&lt;p&gt;Create new instance of the component&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewTypeUnsafeVariantOperations() &lt;a href=&#34;&#34;&gt;*TypeUnsafeVariantOperations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;convert&#34;&gt;Convert&lt;/h4&gt;
&lt;p&gt;Converts a variant to a specified type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*TypeUnsafeVariantOperations&lt;/a&gt;) Convert(value &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, newType int) (&lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - variant value to be converted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;newType&lt;/strong&gt;: int - type of object to be returned (&lt;a href=&#34;../variant_type&#34;&gt;VariantType&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../variant&#34;&gt;*Variant&lt;/a&gt; - converted Variant value.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Variant</title>
      <link>/golang/expressions/variants/variant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/variants/variant/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The Variant class allows you to define a container for variant values.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;emptyvariant&#34;&gt;EmptyVariant&lt;/h4&gt;
&lt;p&gt;Constructs an empty variant object&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EmptyVariant() &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;newvariant&#34;&gt;NewVariant&lt;/h4&gt;
&lt;p&gt;Constructs this class and assignes a variant value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewVariant(value interface{}) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value to be assigned to this variant.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfrominteger&#34;&gt;VariantFromInteger&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a Integer value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromInteger(value int) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfromlong&#34;&gt;VariantFromLong&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a Long value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromLong(value int64) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int64 - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfromboolean&#34;&gt;VariantFromBoolean&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a Boolean value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromBoolean(value bool) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: bool - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfromfloat&#34;&gt;VariantFromFloat&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a Float value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromFloat(value float32) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: float32 - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfromdouble&#34;&gt;VariantFromDouble&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a Double value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromDouble(value float64) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: float64 - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfromstring&#34;&gt;VariantFromString&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a String value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromString(value string) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfromdatetime&#34;&gt;VariantFromDateTime&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a DateTime value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromDateTime(value time.Time) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: time.Time - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfromtimespan&#34;&gt;VariantFromTimeSpan&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a TimeSpan value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromTimeSpan(value time.Duration) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: time.Duration - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfromobject&#34;&gt;VariantFromObject&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a Object value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromObject(value interface{}) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variantfromarray&#34;&gt;VariantFromArray&lt;/h4&gt;
&lt;p&gt;Creates a new variant from a Array value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VariantFromArray(value &lt;a href=&#34;&#34;&gt;[]*Variant&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;[]*Variant&lt;/a&gt; - a variant value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
Empty variant constant
&lt;blockquote&gt;
&lt;p&gt;Empty: &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt; = &lt;a href=&#34;#emptyvariant&#34;&gt;EmptyVariant()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;asarray&#34;&gt;AsArray&lt;/h4&gt;
&lt;p&gt;Gets a variant value as a variant array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsArray() &lt;a href=&#34;&#34;&gt;[]*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;[]*Variant&lt;/a&gt; - value as variant array.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasarray&#34;&gt;SetAsArray&lt;/h4&gt;
&lt;p&gt;Sets a variant value as variant array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsArray(value &lt;a href=&#34;&#34;&gt;[]*Variant&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;[]*Variant&lt;/a&gt; - value to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;asboolean&#34;&gt;AsBoolean&lt;/h4&gt;
&lt;p&gt;Gets a variant value as boolean.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsBoolean() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - value as boolean.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasboolean&#34;&gt;SetAsBoolean&lt;/h4&gt;
&lt;p&gt;Sets a variant value as boolean.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsBoolean(value bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: bool - value to be set&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;asdatetime&#34;&gt;AsDateTime&lt;/h4&gt;
&lt;p&gt;Gets a variant value as DateTime.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsDateTime() time.Time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: time.Time - value as DateTime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasdatetime&#34;&gt;SetAsDateTime&lt;/h4&gt;
&lt;p&gt;Sets a variant value as DateTime.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsDateTime(value time.Time)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: time.Time - value to be set&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;asdouble&#34;&gt;AsDouble&lt;/h4&gt;
&lt;p&gt;Gets a variant value as double.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsDouble() float64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float64 - value as double.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasdouble&#34;&gt;SetAsDouble&lt;/h4&gt;
&lt;p&gt;Sets a variant value as double.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsDouble(value float64)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: float64 - value to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;asfloat&#34;&gt;AsFloat&lt;/h4&gt;
&lt;p&gt;Gets a variant value as float.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsFloat() float32&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: float32 - value as float.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasfloat&#34;&gt;SetAsFloat&lt;/h4&gt;
&lt;p&gt;Sets a variant value as float.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsFloat(value float32)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: float32 - value to be set..&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;asinteger&#34;&gt;AsInteger&lt;/h4&gt;
&lt;p&gt;Gets a variant value as integer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsInteger() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - value as integer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasinteger&#34;&gt;SetAsInteger&lt;/h4&gt;
&lt;p&gt;Sets a variant value as integer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsInteger(value int)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int - value to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;aslong&#34;&gt;AsLong&lt;/h4&gt;
&lt;p&gt;Gets a variant value as long.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsLong() int64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int64 - value as long.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setaslong&#34;&gt;SetAsLong&lt;/h4&gt;
&lt;p&gt;Sets a variant value as long&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsLong(value int64)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int64 - value to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;asobject&#34;&gt;AsObject&lt;/h4&gt;
&lt;p&gt;Gets a variant value as object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsObject() interface{}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: interface{} - value as object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasobject&#34;&gt;SetAsObject&lt;/h4&gt;
&lt;p&gt;Sets a variant value as object&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsObject(value interface{})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: interface{} - value to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;asstring&#34;&gt;AsString&lt;/h4&gt;
&lt;p&gt;Gets a variant value as string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsString() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - value as string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setasstring&#34;&gt;SetAsString&lt;/h4&gt;
&lt;p&gt;Sets a variant value as string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsString(value string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - value to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;astimespan&#34;&gt;AsTimeSpan&lt;/h4&gt;
&lt;p&gt;Gets a variant value as TimeSpan.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) AsTimeSpan() time.Duration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: time.Duration - value as TimeSpan.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setastimespan&#34;&gt;SetAsTimeSpan&lt;/h4&gt;
&lt;p&gt;Sets a variant value as TimeSpan.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetAsTimeSpan(value time.Duration)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: time.Duration - value as TimeSpan.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;length&#34;&gt;Length&lt;/h4&gt;
&lt;p&gt;Gets the length of the array&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) Length() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - length of the array or 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setlength&#34;&gt;SetLength&lt;/h4&gt;
&lt;p&gt;Sets a new array length&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetLength(value int)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: int - new array length&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;type&#34;&gt;Type&lt;/h4&gt;
&lt;p&gt;Gets a type of the variant value&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) Type() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - variant value type (&lt;a href=&#34;../variant_type&#34;&gt;VariantType&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;assign&#34;&gt;assign&lt;/h4&gt;
&lt;p&gt;Assignes a new value to this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) Assign(value &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt; - new value to be assigned.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Clears this object and assignes a &lt;a href=&#34;../variant_type&#34;&gt;VariantType.Null&lt;/a&gt; type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) Clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;
&lt;p&gt;Clones the variant value&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) Clone() &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt; - cloned value of this variant&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;equals&#34;&gt;Equals&lt;/h4&gt;
&lt;p&gt;Compares this object to the specified one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) Equals(obj interface{}) bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt;: interface{} - object to be compared.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - &lt;em&gt;true&lt;/em&gt; if the objects are equal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getbyindex&#34;&gt;GetByIndex&lt;/h4&gt;
&lt;p&gt;Gets an array element by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) GetByIndex(index int) &lt;a href=&#34;&#34;&gt;Variant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - element&amp;rsquo;s index.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;Variant&lt;/a&gt; - requested array element.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isempty&#34;&gt;IsEmpty&lt;/h4&gt;
&lt;p&gt;Checks is this variant value is empty.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) IsEmpty() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - &lt;em&gt;true&lt;/em&gt; is this variant value is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isnull&#34;&gt;IsNull&lt;/h4&gt;
&lt;p&gt;Checks is this variant value is Null.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) IsNull() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - &lt;em&gt;true&lt;/em&gt; if this variant value is Null.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setbyindex&#34;&gt;SetByIndex&lt;/h4&gt;
&lt;p&gt;Sets an array element by its index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) SetByIndex(index int, element &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: int - element index.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;element&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt; - element value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;string&#34;&gt;String&lt;/h4&gt;
&lt;p&gt;Returns a string value for this object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*Variant&lt;/a&gt;) String() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - string value for this object.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: VariantType</title>
      <link>/golang/expressions/variants/variant_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/variants/variant_type/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The VariantType enum defines supported types of variant values.&lt;/p&gt;
&lt;h3 id=&#34;enumeration-members&#34;&gt;Enumeration members&lt;/h3&gt;
&lt;p&gt;The codes are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Null&lt;/strong&gt; = iota&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Long&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Float&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Double&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DateTime&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TimeSpan&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
