<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – IO</title>
    <link>/golang/expressions/io/</link>
    <description>Recent content in IO on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/expressions/io/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: IScanner</title>
      <link>/golang/expressions/io/iscanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/io/iscanner/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The IScanner interface defines a scanner that can read and unread characters and count lines.&lt;/p&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;сolumn&#34;&gt;Сolumn&lt;/h4&gt;
&lt;p&gt;Gets the column in the current line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Column() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - column in the current line in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;Line&lt;/h4&gt;
&lt;p&gt;Gets the current line number&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Line() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - current line number in the stream&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Peek() rune&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: rune - character from the top of the stream or &lt;em&gt;-1&lt;/em&gt; if the stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekcolumn&#34;&gt;PeekColumn&lt;/h4&gt;
&lt;p&gt;Gets the next character column number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PeekColumn() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character column number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekline&#34;&gt;PeekLine&lt;/h4&gt;
&lt;p&gt;Gets the next character line number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PeekLine() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read() rune&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: rune - read character or &lt;em&gt;-1&lt;/em&gt; if the stream is processed to the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reset&#34;&gt;Reset&lt;/h4&gt;
&lt;p&gt;Resets a scanner to the initial position.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reset()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unread&#34;&gt;Unread&lt;/h4&gt;
&lt;p&gt;Puts a character back into the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unread()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unreadmany&#34;&gt;UnreadMany&lt;/h4&gt;
&lt;p&gt;Pushes the specified number of characters to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UnreadMany(count int)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: int - number of characcted to be pushed back.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: StringScanner</title>
      <link>/golang/expressions/io/string_scanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/io/string_scanner/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The StringScanner class is used to scan characters in a string that allows tokenizers to look ahead through a stream to perform lexical analysis.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newstringscanner&#34;&gt;NewStringScanner&lt;/h4&gt;
&lt;p&gt;Creates an instance of this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewStringScanner(content string) &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;: string - text content to be read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;Column&lt;/h4&gt;
&lt;p&gt;Gets the column in the current line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;) Column() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: numbinter - column in the current line in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;Line&lt;/h4&gt;
&lt;p&gt;Gets the current line number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;) Line() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - current line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Returns the character from the top of the stream without moving the stream pointer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;) Peek() rune&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: rune - character from the top of the stream or &lt;em&gt;-1&lt;/em&gt; if the stream is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekcolumn&#34;&gt;PeekColumn&lt;/h4&gt;
&lt;p&gt;Gets the next character column number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;) PeekColumn() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character column number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekline&#34;&gt;PeekLine&lt;/h4&gt;
&lt;p&gt;Gets the next character line number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;) PeekLine() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - next character line number in the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;
&lt;p&gt;Reads a character from the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;) Read() rune&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: rune - read character or &lt;em&gt;-1&lt;/em&gt; if the stream is processed to the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reset&#34;&gt;Reset&lt;/h4&gt;
&lt;p&gt;Resets the scanner to the initial position.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;) Reset()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unread&#34;&gt;Unread&lt;/h4&gt;
&lt;p&gt;Puts one character back into the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;) Unread()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unreadmany&#34;&gt;UnreadMany&lt;/h4&gt;
&lt;p&gt;Pushes the specified number of characters to the top of the stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*StringScanner&lt;/a&gt;) UnreadMany(count int)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;: int - number of characcted to be pushed back.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
