<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ CSV</title>
    <link>/golang/expressions/csv/</link>
    <description>Recent content in CSV on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/expressions/csv/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: CsvConstant</title>
      <link>/golang/expressions/csv/csv_constant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/csv/csv_constant/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CsvConstant class defines a set of constants, such as control return, line feed and nil.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;cr&#34;&gt;CR&lt;/h4&gt;
&lt;p&gt;Control return&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CR&lt;/strong&gt; = &amp;lsquo;\r&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;nil&#34;&gt;Nil&lt;/h4&gt;
&lt;p&gt;Nil&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nil&lt;/strong&gt; = rune(0)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;lf&#34;&gt;LF&lt;/h4&gt;
&lt;p&gt;Line feed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LF&lt;/strong&gt; = &amp;lsquo;\n&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: CsvQuoteState</title>
      <link>/golang/expressions/csv/csv_quote_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/csv/csv_quote_state/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CsvQuoteState implements a quote string state object for CSV streams.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newcsvquotestate&#34;&gt;NewCsvQuoteState&lt;/h4&gt;
&lt;p&gt;Create new instance&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewCsvQuoteState() &lt;a href=&#34;&#34;&gt;*CsvQuoteState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;decodestring&#34;&gt;DecodeString&lt;/h4&gt;
&lt;p&gt;Decodes a string value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvQuoteState&lt;/a&gt;) DecodeString(value string, quoteSymbol rune) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - string value to be decoded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quoteSymbol&lt;/strong&gt;: rune - string quote character.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - decoded string value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;encodestring&#34;&gt;EncodeString&lt;/h4&gt;
&lt;p&gt;Encodes a string value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvQuoteState&lt;/a&gt;) EncodeString(value string, quoteSymbol rune) string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - string value to be encoded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quoteSymbol&lt;/strong&gt;: rune - string quote character.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - encoded string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nexttoken&#34;&gt;nextToken&lt;/h4&gt;
&lt;p&gt;Gets the next token from the stream started from the character linked to this state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvQuoteState&lt;/a&gt;) NextToken(scanner &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;, tokenizer &lt;a href=&#34;../../tokenizers/itokenizer&#34;&gt;ITokenizer&lt;/a&gt;) &lt;a href=&#34;../../tokenizers/token&#34;&gt;*Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;scanner&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - textual string to be tokenized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tokenizer&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/itokenizer&#34;&gt;ITokenizer&lt;/a&gt; - tokenizer class that controls the process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;*Token&lt;/a&gt; - next token from the top of the stream.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: CsvSymbolState</title>
      <link>/golang/expressions/csv/csv_symbol_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/csv/csv_symbol_state/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/generic/generic_symbol_state&#34;&gt;GenericSymbolState&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CsvSymbolState implements a symbol state to tokenize delimiters in CSV streams.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newcsvsymbolstate&#34;&gt;NewCsvSymbolState&lt;/h4&gt;
&lt;p&gt;Constructs this object with specified parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewCsvSymbolState() &lt;a href=&#34;&#34;&gt;*CsvSymbolState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;nexttoken&#34;&gt;NextToken&lt;/h4&gt;
&lt;p&gt;Gets the next token from the stream started from the character linked to this state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvSymbolState&lt;/a&gt;) NextToken(scanner &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;, tokenizer &lt;a href=&#34;../../tokenizers/itokenizer&#34;&gt;ITokenizer&lt;/a&gt;) &lt;a href=&#34;../../tokenizers/token&#34;&gt;*Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;scanner&lt;/strong&gt;: &lt;a href=&#34;../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - text string to be tokenized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tokenizer&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/itokenizer&#34;&gt;ITokenizer&lt;/a&gt; - tokenizer class that controls the process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;*Token&lt;/a&gt; - next token from the top of the stream.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: CsvTokenizer</title>
      <link>/golang/expressions/csv/csv_tokenizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/csv/csv_tokenizer/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/abstract_tokenizer&#34;&gt;AbstractTokenizer&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CsvTokenizer class allows you to implement a tokenizer class for CSV files.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newcsvtokenizer&#34;&gt;NewCsvTokenizer&lt;/h4&gt;
&lt;p&gt;Constructs this object with default parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewCsvTokenizer() &lt;a href=&#34;&#34;&gt;*CsvTokenizer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;endofline&#34;&gt;EndOfLine&lt;/h4&gt;
&lt;p&gt;Separator for rows in CSV stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvTokenizer&lt;/a&gt;) EndOfLine() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - separator for rows.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fieldseparators&#34;&gt;FieldSeparators&lt;/h4&gt;
&lt;p&gt;Separator for fields in CSV stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvTokenizer&lt;/a&gt;) FieldSeparators() []rune&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []rune - separator for fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;quotesymbols&#34;&gt;QuoteSymbols&lt;/h4&gt;
&lt;p&gt;Character to quote strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvTokenizer&lt;/a&gt;) QuoteSymbols() []rune&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []rune - character to quote strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setendofline&#34;&gt;SetEndOfLine&lt;/h4&gt;
&lt;p&gt;Sets a separator for rows in CSV stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvTokenizer&lt;/a&gt;) SetEndOfLine(value string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - separator for rows.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setfieldseparators&#34;&gt;SetFieldSeparators&lt;/h4&gt;
&lt;p&gt;Sets separators for fields in CSV stream.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvTokenizer&lt;/a&gt;) SetFieldSeparators(value []rune)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: []rune - separator for fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setquotesymbols&#34;&gt;SetQuoteSymbols&lt;/h4&gt;
&lt;p&gt;Sets characters to quote strings&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*CsvTokenizer&lt;/a&gt;) SetQuoteSymbols(value []rune)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: []rune - character to quote strings.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: CsvWordState</title>
      <link>/golang/expressions/csv/csv_word_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/csv/csv_word_state/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/generic/generic_word_state&#34;&gt;GenericWordState&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The CsvWordState class implements a word state to tokenize a CSV stream.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newcsvwordstate&#34;&gt;NewCsvWordState&lt;/h4&gt;
&lt;p&gt;Constructs this object with specified parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewCsvWordState(fieldSeparators []rune, quoteSymbols []rune) &lt;a href=&#34;&#34;&gt;*CsvWordState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fieldSeparators&lt;/strong&gt;: []rune - separators for fields in a CSV stream.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quoteSymbols&lt;/strong&gt;: []rune - delimiter characters used to quote strings.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
