<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Mustache</title>
    <link>/golang/expressions/mustache/</link>
    <description>Recent content in Mustache on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/expressions/mustache/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: Parsers</title>
      <link>/golang/expressions/mustache/parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/parsers/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;constants&#34;&gt;Constants&lt;/h3&gt;
&lt;h4 id=&#34;mustacheerrorcodemustache_error_code&#34;&gt;&lt;a href=&#34;mustache_error_code&#34;&gt;MustacheErrorCode&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;General syntax errors.&lt;/p&gt;
&lt;h4 id=&#34;mustachelexicalstatemustache_lexical_state&#34;&gt;&lt;a href=&#34;mustache_lexical_state&#34;&gt;MustacheLexicalState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines states in Mustache lexical analysis.&lt;/p&gt;
&lt;h4 id=&#34;mustachetokentypemustache_token_type&#34;&gt;&lt;a href=&#34;mustache_token_type&#34;&gt;MustacheTokenType&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines types of Mustache tokens.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;
&lt;h4 id=&#34;mustacheparsermustache_parser&#34;&gt;&lt;a href=&#34;mustache_parser&#34;&gt;MustacheParser&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a Mustache parser.&lt;/p&gt;
&lt;h4 id=&#34;mustachetokenmustache_token&#34;&gt;&lt;a href=&#34;mustache_token&#34;&gt;MustacheToken&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Defines a Mustache token holder.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: Tokenizers</title>
      <link>/golang/expressions/mustache/tokenizers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/tokenizers/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;div class=&#34;module-body&#34;&gt; 
&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;
&lt;h4 id=&#34;mustachespecialstatemustache_special_state&#34;&gt;&lt;a href=&#34;mustache_special_state&#34;&gt;MustacheSpecialState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Implements a quote string state object for Mustache templates.&lt;/p&gt;
&lt;h4 id=&#34;mustachetokenizermustache_tokenizer&#34;&gt;&lt;a href=&#34;mustache_tokenizer&#34;&gt;MustacheTokenizer&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Creates a Mustache tokenizer.&lt;/p&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MustacheError</title>
      <link>/golang/expressions/mustache/errors/mustache_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/errors/mustache_error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheException class defines an exception that can be thrown by a Mustache template.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmustacheerror&#34;&gt;NewMustacheError&lt;/h4&gt;
&lt;p&gt;Creates a new instance of the MustacheException class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMustacheError(correlationId, code, message string, line, column int) &lt;a href=&#34;../../../commons/errors/application_error&#34;&gt;*ApplicationError&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code&lt;/strong&gt;: string - code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: string - human-readable message&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: int - line number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;column&lt;/strong&gt;: int - column number&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MustacheTemplate</title>
      <link>/golang/expressions/mustache/mustache_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/mustache_template/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheTemplate class allows you to implement a Mustache template class.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmustachetemplate&#34;&gt;NewMustacheTemplate&lt;/h4&gt;
&lt;p&gt;Creates a new instance of mustache template&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMustacheTemplate() &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;newmustachetemplatefromstring&#34;&gt;NewMustacheTemplateFromString&lt;/h4&gt;
&lt;p&gt;Constructs this class and assigns a mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMustacheTemplateFromString(template string) (&lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;template&lt;/strong&gt;: string - mustache template.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;autovariables&#34;&gt;AutoVariables&lt;/h4&gt;
&lt;p&gt;Gets the flag to turn on auto-creation of variables for the Mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) AutoVariables() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - flag to turn on auto creation of variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setautovariables&#34;&gt;SetAutoVariables&lt;/h4&gt;
&lt;p&gt;Sets the flag to turn on auto creation of variables for the Mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) SetAutoVariables(value bool)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: bool - flag to turn on auto-creation of variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;defaultvariables&#34;&gt;DefaultVariables&lt;/h4&gt;
&lt;p&gt;Sets the list with default variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) DefaultVariables() map[string]string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: map[string]string - default variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setdefaultvariables&#34;&gt;SetDefaultVariables&lt;/h4&gt;
&lt;p&gt;Sets the list with default variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) SetDefaultVariables(value map[string]string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: map[string]string - default variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;initialtokens&#34;&gt;InitialTokens&lt;/h4&gt;
&lt;p&gt;List of original mustache tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) InitialTokens() &lt;a href=&#34;../parsers/mustache_token&#34;&gt;[]*MustacheToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../parsers/mustache_token&#34;&gt;[]*MustacheToken&lt;/a&gt; - Mustache tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;originaltokens&#34;&gt;OriginalTokens&lt;/h4&gt;
&lt;p&gt;Gets Lists the original tokens&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) OriginalTokens() &lt;a href=&#34;../../tokenizers/token&#34;&gt;[]*Token[]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;[]*Token[]&lt;/a&gt; - original tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setoriginaltokens&#34;&gt;SetOriginalTokens&lt;/h4&gt;
&lt;p&gt;Sets Lists the original tokens&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) SetOriginalTokens(value &lt;a href=&#34;../../tokenizers/token&#34;&gt;[]*Token[]&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;[]*Token[]&lt;/a&gt; - original tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resulttokens&#34;&gt;ResultTokens&lt;/h4&gt;
&lt;p&gt;List of processed Mustache tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) ResultTokens() &lt;a href=&#34;../parsers/mustache_token&#34;&gt;[]*MustacheToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../parsers/mustache_token&#34;&gt;[]*MustacheToken&lt;/a&gt; - processed Mustache tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Cleans up this calculator.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) Clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;createvariables&#34;&gt;CreateVariables&lt;/h4&gt;
&lt;p&gt;Populates the specified variables list with variables obtained from a parsed Mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) CreateVariables(variables *map[string]string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: *map[string]string - List of variables to be populated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluate&#34;&gt;Evaluate&lt;/h4&gt;
&lt;p&gt;Evaluates this Mustache template using default variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) Evaluate() (string, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (string, error) - evaluated template.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evaluatewithvariables&#34;&gt;EvaluateWithVariables&lt;/h4&gt;
&lt;p&gt;Evaluates this Mustache using specified variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) EvaluateWithVariables(variables map[string]string) (string, error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: map[string]string - collection of variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (string, error) - evaluated template&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getvariable&#34;&gt;GetVariable&lt;/h4&gt;
&lt;p&gt;Gets a variable value from the collection of variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTemplate&lt;/a&gt;) GetVariable(variables map[string]string, name string) *string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;: map[string]string - collection of variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - variable name to get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: *string - variable value or &lt;em&gt;nil&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
