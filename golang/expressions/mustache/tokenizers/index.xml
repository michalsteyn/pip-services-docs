<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Tokenizers</title>
    <link>/golang/expressions/mustache/tokenizers/</link>
    <description>Recent content in Tokenizers on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/expressions/mustache/tokenizers/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: MustacheSpecialState</title>
      <link>/golang/expressions/mustache/tokenizers/mustache_special_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/tokenizers/mustache_special_state/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheSpecialState class allows you to implement a quote string state object for Mustache templates.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmustachespecialstate&#34;&gt;NewMustacheSpecialState&lt;/h4&gt;
&lt;p&gt;Creates new instance of MustacheSpecialState&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMustacheSpecialState() &lt;a href=&#34;&#34;&gt;*MustacheSpecialState&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;nexttoken&#34;&gt;NextToken&lt;/h4&gt;
&lt;p&gt;Gets the next token from the stream started from the character linked to this state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheSpecialState&lt;/a&gt;) NextToken(scanner &lt;a href=&#34;../../../io/iscanner&#34;&gt;IScanner&lt;/a&gt;, tokenizer &lt;a href=&#34;../../tokenizers/itokenizer&#34;&gt;ITokenizer&lt;/a&gt;) &lt;a href=&#34;../../tokenizers/token&#34;&gt;*Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;scanner&lt;/strong&gt;: &lt;a href=&#34;../../../io/iscanner&#34;&gt;IScanner&lt;/a&gt; - textual string to be tokenized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tokenizer&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/itokenizer&#34;&gt;ITokenizer&lt;/a&gt; - tokenizer class that controls the process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;*Token&lt;/a&gt; - next token from the top of the stream.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MustacheTokenizer</title>
      <link>/golang/expressions/mustache/tokenizers/mustache_tokenizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/tokenizers/mustache_tokenizer/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/abstract_tokenizer&#34;&gt;AbstractTokenizer&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheTokenizer class allows you to create Mustache tokenizers.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmustachetokenizer&#34;&gt;NewMustacheTokenizer&lt;/h4&gt;
&lt;p&gt;Constructs this object with default parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMustacheTokenizer() &lt;a href=&#34;&#34;&gt;*MustacheTokenizer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;readnexttoken&#34;&gt;ReadNextToken&lt;/h4&gt;
&lt;p&gt;Reads the next token&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheTokenizer&lt;/a&gt;) ReadNextToken() &lt;a href=&#34;../../tokenizers/token&#34;&gt;*Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../tokenizers/token&#34;&gt;*Token&lt;/a&gt; - next token&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
