<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Parsers</title>
    <link>/golang/expressions/mustache/parsers/</link>
    <description>Recent content in Parsers on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/expressions/mustache/parsers/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: MustacheErrorCode</title>
      <link>/golang/expressions/mustache/parsers/mustache_error_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/parsers/mustache_error_code/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheErrorCode class provides definitions for general syntax errors.&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;errorat&#34;&gt;ErrorAt&lt;/h4&gt;
&lt;p&gt;Error at&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ErrorAt&lt;/strong&gt; = &amp;ldquo;ERROR_AT&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;errornear&#34;&gt;ErrorNear&lt;/h4&gt;
&lt;p&gt;Error near&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ErrorNear&lt;/strong&gt; = &amp;ldquo;ERROR_NEAR&amp;rdquo;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;internal&#34;&gt;Internal&lt;/h4&gt;
&lt;p&gt;Internal error&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Internal&lt;/strong&gt; = &amp;ldquo;INTERNAL&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;mismatchedbrackets&#34;&gt;MismatchedBrackets&lt;/h4&gt;
&lt;p&gt;Mismatched brackets&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MismatchedBrackets&lt;/strong&gt; = &amp;ldquo;MISTMATCHED_BRACKETS&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;missingvariable&#34;&gt;MissingVariable&lt;/h4&gt;
&lt;p&gt;Missing variable&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MissingVariable&lt;/strong&gt; = &amp;ldquo;MISSING_VARIABLE&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;notclosedsection&#34;&gt;NotClosedSection&lt;/h4&gt;
&lt;p&gt;Not closed section&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NotClosedSection&lt;/strong&gt; = &amp;ldquo;NOT_CLOSED_SECTION&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unexpectedend&#34;&gt;UnexpectedEnd&lt;/h4&gt;
&lt;p&gt;Unexpected end&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UnexpectedEnd&lt;/strong&gt; = &amp;ldquo;UNEXPECTED_END&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unexpectedsectionend&#34;&gt;UnexpectedSectionEnd&lt;/h4&gt;
&lt;p&gt;Unexpected section end&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UnexpectedSectionEnd&lt;/strong&gt; = &amp;ldquo;UNEXPECTED_SECTION_END&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unexpectedsymbol&#34;&gt;UnexpectedSymbol&lt;/h4&gt;
&lt;p&gt;Unexpected symbol&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UnexpectedSymbol&lt;/strong&gt; = &amp;ldquo;UNEXPECTED_SYMBOL&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;unknown&#34;&gt;Unknown&lt;/h4&gt;
&lt;p&gt;Unknown symbol&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Unknown&lt;/strong&gt; = &amp;ldquo;UNKNOWN&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MustacheLexicalState</title>
      <link>/golang/expressions/mustache/parsers/mustache_lexical_state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/parsers/mustache_lexical_state/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheLexicalState enum defines different states in Mustache lexical analysis.&lt;/p&gt;
&lt;h3 id=&#34;enumeration-members&#34;&gt;Enumeration members&lt;/h3&gt;
&lt;p&gt;The codes are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Value&lt;/strong&gt; = iota&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operator1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operator2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Closure&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MustacheParser</title>
      <link>/golang/expressions/mustache/parsers/mustache_parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/parsers/mustache_parser/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheParser class allows you to implement a Mustache parser.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmustacheparser&#34;&gt;NewMustacheParser&lt;/h4&gt;
&lt;p&gt;Create new instance of parser&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMustacheParser() &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;initialtokens&#34;&gt;InitialTokens&lt;/h4&gt;
&lt;p&gt;List of original Mustache tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) InitialTokens() &lt;a href=&#34;../mustache_token&#34;&gt;[]*MustacheToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../mustache_token&#34;&gt;[]*MustacheToken&lt;/a&gt; - original mustache tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;originaltokens&#34;&gt;OriginalTokens&lt;/h4&gt;
&lt;p&gt;Sets the list of original Mustache tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) OriginalTokens() &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt; - original Mustache tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setoriginaltokens&#34;&gt;SetOriginalTokens&lt;/h4&gt;
&lt;p&gt;Gets the list of original tokens&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) SetOriginalTokens(value &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt; - original Mustache tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resulttokens&#34;&gt;ResultTokens&lt;/h4&gt;
&lt;p&gt;List of parsed Mustache tokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) ResultTokens() &lt;a href=&#34;../mustache_token&#34;&gt;[]*MustacheToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;../mustache_token&#34;&gt;[]*MustacheToken&lt;/a&gt; - parsed Mustache tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;template&#34;&gt;Template&lt;/h4&gt;
&lt;p&gt;Mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) Template() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - Mustache template.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;settemplate&#34;&gt;SetTemplate&lt;/h4&gt;
&lt;p&gt;Sets the mustache template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) SetTemplate(value string) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - Mustache template.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variablenames&#34;&gt;VariableNames&lt;/h4&gt;
&lt;p&gt;List of found variable names.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) VariableNames() []string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: []string - found variable names.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Clears parsing results.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) Clear()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;parsestring&#34;&gt;ParseString&lt;/h4&gt;
&lt;p&gt;Sets a new Mustache string and parses it into internal byte code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) ParseString(mustache string) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mustache&lt;/strong&gt;: string - new Mustache string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;parsetokens&#34;&gt;ParseTokens&lt;/h4&gt;
&lt;p&gt;Sets a new mustache Token and parses it into internal byte code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheParser&lt;/a&gt;) ParseTokens(tokens &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mustache&lt;/strong&gt;: &lt;a href=&#34;../../../tokenizers/token&#34;&gt;[]*Token&lt;/a&gt; - new Mustache string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil no errors occured.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MustacheToken</title>
      <link>/golang/expressions/mustache/parsers/mustache_token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/parsers/mustache_token/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheToken defines a Mustache token holder.&lt;/p&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newmustachetoken&#34;&gt;NewMustacheToken&lt;/h4&gt;
&lt;p&gt;Creates an instance of a Mustache token.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewMustacheToken(typ int, value string, line int, column int) &lt;a href=&#34;&#34;&gt;*MustacheToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: int - token type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: string - token value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;line&lt;/strong&gt;: int - line number where the token is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;column&lt;/strong&gt;: int - column number where the token is.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;column&#34;&gt;Column&lt;/h4&gt;
&lt;p&gt;Column number where the token is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheToken&lt;/a&gt;) Column() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - column number.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;line&#34;&gt;Line&lt;/h4&gt;
&lt;p&gt;Line number where the token is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheToken&lt;/a&gt;) Line() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - line number.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tokens&#34;&gt;Tokens&lt;/h4&gt;
&lt;p&gt;Gets a list of subtokens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheToken&lt;/a&gt;) Tokens() &lt;a href=&#34;&#34;&gt;[]*MustacheToken&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: &lt;a href=&#34;&#34;&gt;[]*MustacheToken&lt;/a&gt; - list of subtokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;type&#34;&gt;Type&lt;/h4&gt;
&lt;p&gt;Gets the token type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheToken&lt;/a&gt;) Type() int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: int - token type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;value&#34;&gt;Value&lt;/h4&gt;
&lt;p&gt;Gets the token value or variable name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*MustacheToken&lt;/a&gt;) Value() string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: string - token value or variable name.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang: MustacheTokenType</title>
      <link>/golang/expressions/mustache/parsers/mustache_token_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/expressions/mustache/parsers/mustache_token_type/</guid>
      <description>
        
        
        &lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The MustacheTokenType enum defines different types of Mustache tokens.&lt;/p&gt;
&lt;h3 id=&#34;enumeration-members&#34;&gt;Enumeration members&lt;/h3&gt;
&lt;p&gt;The codes are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unknown&lt;/strong&gt; = iota&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EscapedVariable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Section&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;InvertedSection&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SectionEnd&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partial&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
