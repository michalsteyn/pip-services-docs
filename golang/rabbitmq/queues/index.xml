<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Queues</title>
    <link>/golang/rabbitmq/queues/</link>
    <description>Recent content in Queues on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/golang/rabbitmq/queues/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang: RabbitMQMessageQueue</title>
      <link>/golang/rabbitmq/queues/rabbitmq_message_queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/golang/rabbitmq/queues/rabbitmq_message_queue/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Implements:&lt;/strong&gt; &lt;a href=&#34;../../../messaging/queues/message_queue&#34;&gt;MessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;The RabbitMQMessageQueue class allows you to create message queues that send and receive messages via a RabbitMQ message broker.&lt;/p&gt;
&lt;h4 id=&#34;configuration-parameters&#34;&gt;Configuration parameters&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;connection(s)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;discovery_key&lt;/strong&gt;:               (optional) key to retrieve the connection from &lt;a href=&#34;../../../components/connect/idiscovery&#34;&gt;IDiscovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;host&lt;/strong&gt;:                        host name or IP address&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;port&lt;/strong&gt;:                        port number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uri&lt;/strong&gt;:                         resource URI or connection string with all parameters in it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;credential(s)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;store_key&lt;/strong&gt;:                   (optional) key to retrieve the credentials from &lt;a href=&#34;../../../components/auth/icredential_store&#34;&gt;ICredentialStore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username&lt;/strong&gt;:                    username&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password&lt;/strong&gt;:                    user&amp;rsquo;s password&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;*:logger:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/log/ilogger&#34;&gt;ILogger&lt;/a&gt; components to pass log messages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:counters:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/count/icounters&#34;&gt;ICounters&lt;/a&gt; components to pass collected measurements&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:discovery:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/connect/idiscovery&#34;&gt;IDiscovery&lt;/a&gt; services&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*:credential-store:*:*:1.0&lt;/strong&gt; - (optional) &lt;a href=&#34;../../../components/auth/icredential_store&#34;&gt;ICredentialStore&lt;/a&gt; to resolve credentials&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructors&#34;&gt;Constructors&lt;/h3&gt;
&lt;h4 id=&#34;newemptyrabbitmqmessagequeue&#34;&gt;NewEmptyRabbitMQMessageQueue&lt;/h4&gt;
&lt;p&gt;Creates a new instance of the message queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewEmptyRabbitMQMessageQueue(name string) &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - (optional) queue&amp;rsquo;s name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;newrabbitmqmessagequeuefromconfig&#34;&gt;NewRabbitMQMessageQueueFromConfig&lt;/h4&gt;
&lt;p&gt;Creates a new instance of the message queue with configuration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewRabbitMQMessageQueueFromConfig(name string, config &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;*ConfigParams&lt;/a&gt;) &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - (optional) queue name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt;: &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;*ConfigParams&lt;/a&gt; - configuration parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;newrabbitmqmessagequeue&#34;&gt;NewRabbitMQMessageQueue&lt;/h4&gt;
&lt;p&gt;Creates a new instance of the message queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NewRabbitMQMessageQueue(name string, mqChanel *rabbitmq.Channel, queue string) &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: string - (optional) queue name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mqChanel&lt;/strong&gt;: rabbitmq.Channel - mq channel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;queue&lt;/strong&gt;: string - queue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;span class=&#34;hide-title-link&#34;&gt;
&lt;h4 id=&#34;interval&#34;&gt;Interval&lt;/h4&gt;
&lt;p&gt;Contains filtered or unexported fields&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Interval&lt;/strong&gt;: time.Duration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/span&gt;
&lt;h3 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h3&gt;
&lt;h4 id=&#34;abandon&#34;&gt;Abandon&lt;/h4&gt;
&lt;p&gt;Returnes a message into the queue and makes it available for all subscribers to receive it again.
This method is usually used to return a message which could not be processed at the moment
to repeat the attempt. Messages that cause unrecoverable errors shall be removed permanently
or/and send to the dead letter queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) Abandon(message &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to return.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) - error or nil if no errors occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;clear&#34;&gt;Clear&lt;/h4&gt;
&lt;p&gt;Clears a component&amp;rsquo;s state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) Clear(correlationId string) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) - error or nil if no errors occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;close&#34;&gt;Close&lt;/h4&gt;
&lt;p&gt;Closes a component and frees used resources.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) Close(correlationId string) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) - error or nil if no errors occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;complete&#34;&gt;Complete&lt;/h4&gt;
&lt;p&gt;Permanently removes a message from the queue.
This method is usually used to remove the message after successful processing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important: This method is not supported by RabbitMQ.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) Complete(message &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to remove.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) - error or nil if no errors occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;configure&#34;&gt;Configure&lt;/h4&gt;
&lt;p&gt;Configures the component by passing its configuration parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) Configure(config &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;*ConfigParams&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt;: &lt;a href=&#34;../../../commons/config/config_params&#34;&gt;*ConfigParams&lt;/a&gt; - configuration parameters to be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;endlisten&#34;&gt;EndListen&lt;/h4&gt;
&lt;p&gt;Ends listening for incoming messages.
When this method is call, &lt;a href=&#34;#listen&#34;&gt;listen&lt;/a&gt; unblocks the thread and execution continues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) EndListen(correlationId string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isopen&#34;&gt;IsOpen&lt;/h4&gt;
&lt;p&gt;Checks if the component is open.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) IsOpen() bool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: bool - true if the component is open and false otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;listen&#34;&gt;Listen&lt;/h4&gt;
&lt;p&gt;Listens for incoming messages and blocks the current thread until the queue is closed.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;../../../messaging/queues/imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) Listen(correlationId string, receiver &lt;a href=&#34;../../../messaging/queues/imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;receiver&lt;/strong&gt;: &lt;a href=&#34;../../../messaging/queues/imessage_receiver&#34;&gt;IMessageReceiver&lt;/a&gt; - receiver used to receive incoming messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;movetodeadletter&#34;&gt;MoveToDeadLetter&lt;/h4&gt;
&lt;p&gt;Permanently removes a message from the queue and sends it to the dead letter queue.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important: This method is not supported by RabbitMQ.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) MoveToDeadLetter(message &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to be removed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) - error or nil if no errors occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;openwithparams&#34;&gt;OpenWithParams&lt;/h4&gt;
&lt;p&gt;Opens the component with given connection and credential parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) OpenWithParams(correlationId string, connections &lt;a href=&#34;../../../components/connect/connection_params&#34;&gt;[]*ConnectionParams&lt;/a&gt;, credential &lt;a href=&#34;../../../components/auth/credential_params&#34;&gt;[]*CredentialParams&lt;/a&gt;) error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;connection&lt;/strong&gt;: &lt;a href=&#34;../../../components/connect/connection_params&#34;&gt;[]*ConnectionParams&lt;/a&gt; - connection parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;credential&lt;/strong&gt;: &lt;a href=&#34;../../../components/auth/credential_params&#34;&gt;[]*CredentialParams&lt;/a&gt; - credential parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: error - error or nil if no errors occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peek&#34;&gt;Peek&lt;/h4&gt;
&lt;p&gt;Peeks a single incoming message from the queue without removing it.
If there are no messages available in the queue, it returns null.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important: This method are not supported in this release!&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) Peek(correlationId string) (result &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (result &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error) - peeked message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;peekbatch&#34;&gt;PeekBatch&lt;/h4&gt;
&lt;p&gt;Peeks multiple incoming messages from the queue without removing them.
If there are no messages available in the queue, it returns an empty list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important: This method are not supported in this release!&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) PeekBatch(correlationId string, messageCount int64) (result &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;[]*MessageEnvelope&lt;/a&gt;, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;messageCount&lt;/strong&gt;: int64 - maximum number of messages to peek.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (result &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;[]*MessageEnvelope&lt;/a&gt;, err error) - list with peeked messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;readmessagecount&#34;&gt;ReadMessageCount&lt;/h4&gt;
&lt;p&gt;Reads the current number of messages in the queue to be delivered.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) ReadMessageCount() (count int64, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;*&lt;strong&gt;returns&lt;/strong&gt;: (count int64, err error) - number of messages in the queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;receive&#34;&gt;Receive&lt;/h4&gt;
&lt;p&gt;Receives an incoming message and removes it from the queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) Receive(correlationId string, waitTimeout time.Duration) (result &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;waitTimeout&lt;/strong&gt;: time.Duration - timeout in milliseconds to wait for a message to come.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (result &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, err error) - received message or null if nothing was received.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;renewlock&#34;&gt;RenewLock&lt;/h4&gt;
&lt;p&gt;Renews a lock on a message that makes it invisible from other receivers in the queue.
This method is usually used to extend the message processing time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important: This method is not supported by RabbitMQ.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) RenewLock(message &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;, lockTimeout time.Duration) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message to extend its lock.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lockTimeout&lt;/strong&gt;: time.Duration - locking timeout in milliseconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;send&#34;&gt;Send&lt;/h4&gt;
&lt;p&gt;Sends a message into the queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(c &lt;a href=&#34;&#34;&gt;*RabbitMQMessageQueue&lt;/a&gt;) Send(correlationId string, message &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt;) (err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correlationId&lt;/strong&gt;: string - (optional) transaction id used to trace execution through the call chain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: &lt;a href=&#34;../../../messaging/queues/message_envelope&#34;&gt;*MessageEnvelope&lt;/a&gt; - message envelop to be sent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt;: (err error) - error or nil if no errors occured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75af00&#34;&gt;TODO&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;see-also&#34;&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;messagequeuemessagingqueuesmessage_queue&#34;&gt;&lt;a href=&#34;../../../messaging/queues/message_queue&#34;&gt;MessageQueue&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;messagingcapabilitiesmessagingqueuesmessaging_capabilities&#34;&gt;&lt;a href=&#34;../../../messaging/queues/messaging_capabilities&#34;&gt;MessagingCapabilities&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
